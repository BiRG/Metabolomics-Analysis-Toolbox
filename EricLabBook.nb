(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    633321,      16021]
NotebookOptionsPosition[    598899,      14911]
NotebookOutlinePosition[    599799,      14943]
CellTagsIndexPosition[    599667,      14937]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["31 March 2011 Thursday", "Section",
 CellChangeTimes->{{3.510578169540861*^9, 3.510578178722415*^9}, {
  3.510998669117622*^9, 3.510998669315875*^9}}],

Cell[CellGroupData[{

Cell["\<\
Overview of exploration of hough-peak-model-based synthetic data\
\>", "Subsection",
 CellChangeTimes->{{3.510998759193699*^9, 3.510998806306418*^9}}],

Cell["\<\
Simulate 30 samples from something like the peak model of the hough transform \
method with 20 peaks in the samples.  All peaks are present in all samples.  \
A key factor to a nice ordering appearing is that the sample parameters vary \
greatly in magnitude.  Further, the range of the multiplied sample parameters \
must be significantly smaller than the range of mean peak positions in order \
for the sorted sample plot to look right.\
\>", "Text",
 CellChangeTimes->{{3.510574493172945*^9, 3.510574529917838*^9}, {
  3.510574560412709*^9, 3.5105745887809153`*^9}, {3.510574643729322*^9, 
  3.510574657397826*^9}, {3.510577905175281*^9, 3.5105779483027067`*^9}, {
  3.5105780576724052`*^9, 3.510578135628316*^9}}],

Cell["\<\
Below is a table reproduced when there are 3 parameters, all with a standard \
deviation of 0.7 (after sorting by the position of the green peak)\
\>", "Text",
 CellChangeTimes->{{3.510578517659648*^9, 3.510578537448668*^9}, {
  3.510580710176375*^9, 3.510580723672188*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
njomrHX2LTbf/wB/FUqM
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ/WX7ve+v9v+1ZwADQ4dj5Y2TbqkzOUD4Vg4L5Gt6
z+z5D5U3cuD4F731W/MfKF/HIWtW2GRpw29QvoxDmnj2peM6n6F8AYc5Ezp5
j7B8hfIlHLbPjr7TwskANd/Ywa5SXXibzAeoPIeD4ovExWXPfkP5Wg5RNoGC
SrmPoPwP9jJTeNS+9XBA9ds5dFz+vE15Hky9hsPV9ZP6j078DuUrOPQoL7dS
EITZZ+Jwy6tnwbW7T6DyDA6THzsoqLxnhMpbOOzR8RblVoL539KBVyaycaYp
zHwVB5nLBXKPbVmh8rYOyg9u7Ju/jAXKt3HosFD+d/YKLHz0HHzVfi5+WQDT
r+ZQlJnFb/0MZp+5w54pWwzveMP4pg7LGHJE/xTCwk/EIeX3nL1+VT+gfCWH
0Io/V2Wvw8w3cDje16+kuhmm38zB7IC9fBsjM5Rv7QAAlniAJg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Input",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfQmQXUXZ9ph7Zw/Zk5ksTCYBEshqiYIiKFYhiKKiBYTfABFRATcUcQkC
YUmURUVFBESKsgIiKCoQkgDihqBs0UILRQ1SCC4lKESDW5L+z9unu2933+fp
02cmfL/113dSczPT95ze3j79Pu/arz/+tJPe8d7jTzv5hOOHDzn1+PefdPIJ
Hxw++JRTi6LGCzo6XnBSR0fHc8Md8rsqfjUf+jpZPswf5vfv6P+aav369aq7
u1udfvrp6m9/+9tXym+/q/9rqGnTpqlf/epX+q/oq4GBAfXrX//a/2qtqfP7
3/++WrJkiTrooIPUd7/73aYunqjOPPNM9ZKXvESdcMIJ6rLLLtO9eeKJJ9Ti
xYvVe97zHnXhhReqyZMnq2984xvqxhtvVGPGjFGf+cxn9D1S3bnnnlu0K3V1
6tYPP/xw9alPfUodddRR6oEHHugYo7+bo+s56aST1Jo1a9SyZcvUX//6V3XP
PfeoI488Ul188cXqne98p/r73/+uvvOd7+j2Tj31VLVt2zb9/wEHHKA2bNjQ
9h2qU+6ZNGmS+sAHPqD+8Y9/6P+nTJkiQ+44p5yRa8xkHXfcceoTn/iE+Us+
+9Xdd9+txo8fr6uS65vf/KZ6+umn1Wc/+1l18MEHu7J99tnHDK2p+vr69HTs
u+++Mp3lzA7o2XjwwQf1I3fddZfafffd1Y4dO9T999+vZsyYof7zn//o7973
vvepD37wg+rzn/+8+tOf/qTLZDa+8hVNQbVw4UL1ox/9SP++xx57yO+m6XHu
O1anXAsWLHDPy4wvXbr03HAiVqxYEU1EQ9Pk1a9+tVfWqUcjNJcVJiN6+ctf
7iahv79fnXzyyXqStm/fXk5Cj78g1XPPPSfLXz355JN6Cb3mNa8pn95FXX31
1eplL3uZvuUPf/iDrCo9rcUKapuD3XbbTf3sZz9zLdvvgip7XJXx4/J/PAUT
9RRI1y+99FLduNBTLqH7nnvuqadHltkhhxyifvrTn+rvnn32WfXVr35Vvfvd
7/amoqGnYu+991abN28uJq01D+adVVu3btXzUHwfdrrLdVqmbMKECfrtKDo8
xhBgJ0yDrAC2Enr0NHz84x/Xd/z4xz9Ws2bNUlu2bFE/+clP1KJFi8bIAu7o
1i9h0bZ65JFH1PLly/Xt3/72t+VFDRaEkE8WRfGylgtivt68vvWtb+lHbr31
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
3eKvs0ScQeN9wf8Fa+ukzg==\
\>"]],

Cell["\<\
Below that is a table when the parameters had standard deviations of and \
1,0.1,0.01  It looks much more like what we observe in the real-life urine \
spectra.\
\>", "Text",
 CellChangeTimes->{{3.510578592020303*^9, 3.510578616466826*^9}, {
  3.5105807328313007`*^9, 3.510580751089528*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ3bNEXUc9Rc6BAQIcnmsdKDLzUYTyLRySDu55dGmj
PJQv4bChjrnMM04JyrdxCMu2el4vAFNv4qB8Ot+PbaEClK/l0DrfbkLxdxjf
2MH4tk+92SIYX8fhy5FfMey6MP1mDsY/xFK71sDcw+Egk77uisEemHpDB43s
2KiNm2DqrRyKt9XxX1wLkzdw2FRw3epgJMy9Ig4Trf6s2rFUFsr/YH+o4LdN
gC1Mv7lDzZ3PjLoRML6lw5bK6f7ay2Hm6Tmcfq13c/4rmHkyDu98GCzVv8Hc
J+Cgu9bkwZvHMPVGDnLn7C/nBcL4Kg78M6de3MYE4ys4vJmds+KyGMw+UwdX
p86t7Jtg4WnnkF8SvD64F6Zew2GJwVuhX50weVuHT6fVfSeyweSVHPJ2aRZ/
OQszz9ph7dGABq56mLyaAwAKyXSF
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Input",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQmQXUW5HufOlpnsCZlMEmaSEBIeCUnMhiIqVrGIoqIFJEWAiKgQNxRx
CQJhCSiLoiIiokVZAYK4QkISwLghKBCihRauQSqCSxkUosEN0u98fbr7dp/z
/X363hue1nvvpObm3j69/336+7f+z2tOPfuMt7zz1LNXnnbq1KPOOvXdZ6w8
7b1TjzzzrCyp9oK2thec0dbW9szUNnxX2Vfzoa+V+DA/zPdv6v861MaNG1V3
d7c655xz1F/+8peb87vf0v/V1IQJE9QvfvEL/atwq7+/X/3yl7/0b601dX7n
O99Rc+fOVYcffrj61re+1aGTx6jzzjtPLV68WJ122mnq2muv1b15/PHH1UEH
HaTe8Y53qMsvv1yNGzdOffWrX1Vf+cpXVHt7u/r4xz+u86C6iy66KGsXdXXq
1o899lj10Y9+VJ1wwglq69atbe363jRdzxlnnKEuueQStXTpUvXnP/9Z3Xff
fer4449XV111lXrrW9+q/vrXv6pvfvObur2zzjpLPfvss/r/l770pWrTpk2l
e6xO5Bk7dqx6z3veo/72t7/p/8ePH48ht12Yz8iNZrJOOeUU9eEPf9j8wmef
uvfee9WoUaN0Vbi+9rWvqSeffFJ94hOfUEceeaRLW7JkiRlah+rt7dXTcfDB
B2M685nt17Px0EMP6SL33HOPmjFjhtqzZ4968MEH1aRJk9S//vUvfe9d73qX
eu9736s+9alPqT/84Q86DbNx882agmr27Nnq+9//vv6+//7747tpeqS7J9WJ
68ADD3TlMePz5s27KJyIFStWFCaipmlyxBFHeGmdejSgOVYYRvSSl7zETUJf
X59auXKlnqTnnnsun4Qef0GqZ555BstfPfHEE3oJvfKVr8xLj1A33HCDevGL
X6yz/O53v8Oq0tOaraDSHOy3337qxz/+sWvZ3guq7HFVFovj/+IUjNFTgK5f
c801unHQExfofsABB+jpwTI76qij1I9+9CN97+mnn1a33HKLevvb3+5NRU1P
xcKFC9X27duzSavPg3lm1e7du/U8ZPfDTne5TmPKRo8erZ+OrMPthgB7YRqw
AqSV0KOn4dJLL9U5fvCDH6gpU6aoXbt2qR/+8Idqzpw57VjAbd36IczaVj//
+c/V8uXLdfZvfOMbeFCDBQHyYVFkD2u+IGbpzevrX/+6LnLHHXfoUWLVYgVP
njy5tIJvvfVWdfrpp+u0DRs2qL///e96AqdNm1acCje59p5Up30qPv/5z+vv
X/ziF3XXyZowj4W+QMMtW7bo73g83ve+96kzzzxT79K4/vGPf+jtaM2aNer1
r3+9+tznPtdmKYfZ+OMf/6i+9KUv2R24zRIdW9vAwID67Gc/q975zneqmTNn
Yl3lt6fqXQ478WWXXaaWLVumt6YMFNTb3vY2dfXVV6tXv/rV6p///KemEYi/
Y8cOPcPYBdE9VO/fw8Xq/O53v6tn7jOf+Yw6++yz9V6T7frBpHT5m6YeUK1W
Uw8//PAIb+0jWektMB/7jTfeaNPUm9/8Zm/V1vx7bR/NW1prWvr2t7+tUQiP
JR5DTGmGLCNNSWwPxZawEAAAuH71q19hO3UtefdsSxvNrfXr1+vZyqpr+1p+
axP+08vdJOg6CWQ/39815GSP05VXXqmx7NRTTwVVXmgmCUQEXmFt4g+zko16
gSkF1AZNge4Zur7QzBPI/v73v1998IMf1GCabdht80yNWMVvfOMb1apVq/QS
O/fcczENc02NWFnZZqf/strbefdyIrUdYep85JFHdDcAf0BT7B/Zgzrf3H70
0Uf1wrfX73//exRZaMiDBQ4S4Zct8pOf/AQYrGvE9fKXv1zddtttdhDZo6de
9apX6VvIMjQ0hB0vv92rn9gPfehDrkGhfyPCUWARYkO216xZs7BIX2i6eeed
d+pnDFvkAlPkAx/4gIYHPIdTp05Vr3nNa/Cc2VF88pOf1DNmLzyKH/nIR+wo
Vq9e7fY+XIcccgg2Bn27HQOwO4jQs0L/0RnsT/YCCbPnb4HpP5hObNbZXtJm
F8r999/vdklDhja79M4//3z9fGIvwv4B/mPz5s2289kOp29ja/rTn/6kN/5s
+yl3XuhWWuftGgEbi70Fv/IOdugVDDgwHbf9Br6dfPLJ+n+sEeyFGc3mm1Jo
CFsNGvjCF74wv8n+grSEJJbydlZwAbrA7WdPoe06WKSPfexjYddr6stf/rI6
+uij9S+7xMAqAKYBjCgGZjdjfMvzLPTI9NvyC3gEgJ3YfbMO6ZxAD4DTz372
s5eYyn7605/qJwZZyBN900036TnGBXYJKJ/VbJfaddddp9eGv5zAZuARwXLC
deKJJ6qdO3fa5QR+BfwLLgy1q6tLPfXUU9ITLfSvMNiLL75YHXbYYXrpAu1x
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\
\>"]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Set up the global variables that contain the synthetic data for the \
experiments\
\>", "Subsection",
 CellChangeTimes->{{3.510580863102728*^9, 3.510580875965304*^9}}],

Cell["s is the sample parameters for each sample", "Text",
 CellChangeTimes->{{3.510575304295822*^9, 3.5105753273426943`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", ".3", ",", ".1"}], "}"}], " ", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], ",", 
     RowBox[{"{", "30", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105741712957687`*^9, 3.510574193858625*^9}, {
   3.510574415610277*^9, 3.5105744310826273`*^9}, {3.510575892416996*^9, 
   3.510575911244976*^9}, {3.51057678776304*^9, 3.510576821508143*^9}, 
   3.510577048656671*^9, {3.510577968450513*^9, 3.5105779740377607`*^9}, 
   3.510578271595954*^9, {3.510578455799766*^9, 3.510578463970141*^9}, {
   3.510578541029117*^9, 3.5105785525336323`*^9}, {3.510930498656452*^9, 
   3.510930508177615*^9}}],

Cell["a is the peak multipliers for each sample", "Text",
 CellChangeTimes->{{3.5105753157714567`*^9, 3.510575324561627*^9}, {
  3.510577975995652*^9, 3.510577976639035*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "3"}], "]"}], ",", 
     RowBox[{"{", "20", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510574197161387*^9, 3.510574250187945*^9}, {
  3.510574635404356*^9, 3.510574635867559*^9}}],

Cell["k is the peak mean for each sample", "Text",
 CellChangeTimes->{{3.510575331396139*^9, 3.5105753376932297`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"11", ",", "0"}], "}"}], ",", "20"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510574251809103*^9, 3.510574297380064*^9}, {
  3.510574632464082*^9, 3.510574632983674*^9}}],

Cell["pos is peak positions in each sample", "Text",
 CellChangeTimes->{{3.510574818459641*^9, 3.510574823891282*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pos", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"sj", ",", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ai", ",", "ki"}], "}"}], ",", 
           RowBox[{"ki", "+", 
            RowBox[{"Dot", "[", 
             RowBox[{"ai", ",", " ", "sj"}], "]"}]}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "k"}], "}"}]}], "]"}]}], "]"}], ",", "s"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105743093401117`*^9, 3.51057437599017*^9}, {
  3.510574445160186*^9, 3.510574480543908*^9}, {3.510575029968855*^9, 
  3.510575034103862*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Raw data plot", "Subsection",
 CellChangeTimes->{{3.510580900665372*^9, 3.510580920889209*^9}}],

Cell["First, plot the raw data by sample number", "Text",
 CellChangeTimes->{{3.510579382918489*^9, 3.510579391612954*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRawSampleNumber", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sample", ",", "sampleNumber"}], "}"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sampleNumber", ",", "#"}], "}"}], "&"}], ",", 
           "sample"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"pos", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "pos", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
     "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.51057943508823*^9, 3.51057959166945*^9}, {
  3.510579676083007*^9, 3.510579683845134*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105796208945827`*^9, 3.510579622942609*^9}, {
  3.510579689431654*^9, 3.5105797598585873`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJxN2Xk8lH3UP/AZywzZxjpjyYxBZN9liStpuWUrlZKIxtJNRWVpQ5REhAqV
tWhRSNudJbKVUPaisoXInjX77/m9nq7zffqjXu/X55zzPS6ua0Yj43p8lxsb
gUDY9z9//f9///fPhOnVTAUVBZY0hltEv3cpLIYApnvq9F6PWzLFTaMl5HUr
MCF3PF3mkHK7qxS3j/CPF0VjEpAf1csf1XEWBf+wbU7LfUQDqx5PfhF5kQp+
x4x15PLjBo/pqDqXxw3B/L1XRIxa9zEg/+B+UGbQlgP8IiLeRKuDDXwhUMU8
8l9+MPFwzxtLEdTPotO4l3Qkwf3PZvocqgXA5vc7T+V4C4Mtkq7H2t8Z/Hs9
CNiA0tsTepYyGG6iqHGyC3ke8l9nLPTcfNkg/30mvxw7IguOYG2XFo8fgXpn
t5SPpW4MyD3b41gGyRTwanvwjoRHVLAj6yR1apIGbnuNWR19vwrzfpc8DdmC
9YJdTb0KCu3R/Ck5pSFx2xXIiZePHuTMIUPOijNU9lkggRe9x7opfqh/o0ty
3qAhOp++Q0a0fyuq/9ax5cLRW2j/l87z7GyN/X/P48Jcy4p/NOXTMdwz0rLr
DzEJYH7VIsurZStQn27+vHL7ISbkBNPNOgka7pBP5dH2V5+Wgvz7vaaqXi0R
MEu2YKUZfv64MNWEg3HrVZE5m9e6k0pI4DFismGJRXspbpM3XtZCcgzI1Q0V
1Ipd2MDDoo6NZ4fZwXEzMh7f7/GC6zh4/pFRRv3+3ysW1iVKgM/xkCIKklH9
xHr+0KTLQuC0gbbUNDp+/SjY0yB2/3+c8OtBwRzD/AJazSYhb1IMVg6Z44Dc
eFfSBqaNHNjwvQX3A54/UF9HWr15XhrNC2yU1uzewwNe0WO5m+eJgXVW6oK0
D4mD2TfxqyoSZtD5okMXeF8jZ17Q4Q3NZkB9umd3+TvFBcj/HNrgO9a4BnJ3
qkeWvT0b+ICLhlL+U9S/9OJL8ScdtA/v0dRrZWVEcAPZj27twQ92WBkROVOH
378i2F4vw4FgCn7/imC0ip0UkYo5yDcbz1tO27JBnuB/0/TqWVlwWKTwWV75
fqgfx8Ry3cwYkKuuEDeQ/6OAK3pUcw+yqODXo8y1IVE0sPtyh2loOAH89Wc1
3/q3HTCf26nWtfcOmt+1afPEhCqqX2Piqrj1JRm83WLp+kYpZO8YtYmiE6j/
gO38ZxV5dD5P0Xb54kRU/x+3p7vXJNr/V/XqSFnhr7/70DDZ2uPWpAx8Hg07
/cH1iJbDPORh13cz92YSIRfgLsxa0pUFR61NPhk10Ab1nR6/3BUP0CEvkVl9
rJMmCLb/dns1+i4VLOffcOSELQ3MSzi2XL+VDbw34k9KaEo1zM+q+S25JRXt
e8nxHae+JdrPiJEr1FFIQvNqt7iOpXCBO7J9/JcdUT9fGmOx/SU6f6sdK6L4
AjdY0uMeuTUa7V9S47vjbufQ332ksEtpJrEn5/B5UthPe9foKf55yDs0lHzZ
vxIh94k8mnZkvyzYOEsg78XzXqhX8Xu4/iYZzSviKar+sF4QrBEykG8YSwUn
VY8+7g6ngdXbZXJdbdB5auSngV+qv8D87wFNaS7BaL7JQ6lyBx0CuHnMnfnH
hAxmXRWezilD3jO/EqHgjfrHM+dnws+h82Xsa3rG/6D6fSannp/jRfvrjgy+
XGbH718Gpv3NMljvLj6PgVUrBavfJv6B/OvNRu3OFCLkBvZptFYnWbBjW9Ix
TdcWqK+zqZ5Xv0qH3ELgx10ZH0FwYIlLrv5uKvh4g3ghnUIDK1aJXOWxYANL
X02eLct+B/NNk6UYr6vRvqTjnfVfLqL9QnzqVN5TyeCmKt3kHepc4F3Zm8cV
3FB/g3xYvEswOt9h7nOXSzE32P3FOY2DkWj/fSNn2BOD8PcbTGy6csGRrIo/
/5jYvtys9IjTM5C3XP6iutrNBnn71/T63QWy4Mjx9D7ylX6ot4iautR8gwH5
wCeuKnURCrhv0035ZRIV7Nv0nsJ3nAbWCvJfua+8CvOCGq0pAfI/wHcfvXwv
9RnNfxIjEXfFigAW8y6/VnuCC5waEm69VZoEnnpw8PaJINT/39vyrIxUtA/b
aWprlwUZHJWfqWTUivafCWq6sK4ev35ymPYfMbfIJ/j7Zzns/e55I0lDIjj6
fEYVx7dFqL/A4TCYSGNCTqOLEzUzv5Tizh4//N5tVAJyvW9CPdFRouCMV9o+
X5pp4B//hdy7n0MFUxT4f5ff4QbHV4yTDK//gvmhfgW2F6QZkMfOGrWfC2MH
dxcuht56zgZmlKjvzojgB4+thlwMoaL+W9kWeZo+kmBSRMXHWB4B8HF5FzJZ
SRicmBr72PpE39/rsQ6T8sht0SjG563Duvo0JWNn5iA3c2fTG1kgQj6d/en0
aWdZ8LhfRTfb769Qz++pw2/QSId87aGe3+FaguCljZGxLA8q2EbJ5nH+ZhrY
Yta2iJmBzlt774BxlnMjzK+vOPkae4P29anSHPhpjOrvV1w7K29EBl+aV2je
Mop8WrvOaNEN9acPGf4xOYTOz3dU50xR4AYzdn24E++N9j+fKx4fY4P//Cli
il4HHfKf4fevItY1P7JiGDsD+S+qJJ07gB3yxaJOPb82WXCgTuRS27bfUC/8
4YyKz1o0b9GDXpn9nB/8da4suluKCl7LH+hlN08DnxO5wGMetQjzErWLPp/d
ifZd//sqwxyeD4rYJ2lBzkn6MuS32V8aT9K4IdceH164MckB3s9lfaviGur3
G2v99Nwa7fNVSK3kRAGqZ5+OsTsqSgGbbcHaJ+zw1w8l7OSrIIHGHHyeErZa
FX6ZS2gB8ltHK1bCjxMhV7n+HCtWlgXHsixFRVe+Qb3bWoOVKCs65KIOKs/4
SgXB7OdYErsKqGCWVUzRARcaWMT5xmfVY2xgoYRyt7H5aph/JNrUnxaK9v1Q
4iJ/e5oALt72o5k9mQQ291uK4n3DBW7J+16ffRD167ZcVlhqQ+cHH3uQEGnE
De6fk9NkO4X27yjJHS7uxa+fCvbM54th2X7861XBpEIEGfvsViDPtz8pGZeK
PN52ZW95JBPqH1pWF5E460pxq4zExyh5SUG+X/hpjTZDBJxjF7EUbkoDD54d
caW+pII7Bw9Inlchg5d2VCzVi3fDfN1fFRNH/RmQzwVQS87vYgf/y8x/Wa/L
ARab6TX514sXvOPmqWNf1VC/pe5nGydHCbDNuWeVzW/5wBXeZxv3fRACl5y5
GbXZGX//rIbFGS5lv85ai+H+T1yQru/HBn7RuPhBdWIe6p/3/2gQK5SBPNTT
kBJ/r78U9+uxVmq0jzjkv95PhB0tEwPXZfd36WmhfPXn3MCiDxVc0bqnoLqb
B2zh1FTJqzYJ83v8pbZTBBiQ96iTK02ecYDDM0pD/dyIYLmg+mIJjALuTZu5
0f2HDo7fEa/kbCQFNut8TuHKQPXZY9Mcj74Lg0eclPq/3cVfPzSwcp9FY9uN
+PXQwEYEVA2P/zcFuXlpUFMokx3yV4WUlc/DsuBOlZkXrCo0r3dO11+nhgG5
p6lcOt1BAHwpr1FE97kY+E10VFKeGQ1MHD0mdwZbgXlJ1rumnt/sBR/acefK
HCfa99E1v1YHXwJ4tYS/c3GZC8xxP/v3rSOc4HRsk39ABNqvM0PpY5oZFbxn
duP4pAEZnEBquLaznALe9+Zw8daVsb/7aGLnvk8RVffh+2hit3P+KXc5MQ25
RzuLd10gO+R9lnpXKz/LgncRZPb/u+cX1NdvkKY2dDIg96Ts7VGUEABPrhzK
pUyIgUvTGk64JtLAPLE7tlSvLsG8srGwmc01P8Gb5kiRrB40/4HNLGs9kQC2
u3Z2YGGUC+yZnrXlMIsTXGX/Ns75EurfyqLl3jCngpfmFTJPh5DAQ95J3GV3
KeCSOeGgzGejf/fRwl6cTrRRfoDP08JkJotnkq0XIU+0t1lTQSdCPpb14Xgv
nyzYa9I813XyO9RHc+Z4CnDQIZ974qvdxy8Evvj9x+eQX1Sw65brXwJO0cDh
SpeVN3WzgYedE4bzqitgvlHVdtlkJ7Qv81XofpdKAjjLSCBbbBMJPEtLyHyq
xQ2u4r//gXs/6v/W0juUKi0ONiWKqSWaoPqfPgM9n/wEwZnHSm8/aMa/n9pY
7bBae9oQ/vVqY0flRxfp8gRw0as9R9QdVqA+PHCDhJMPE3LbWQ532ufHkB9o
UZQZypCCnJDmit1YLwKu9tjCdyCBBpZ4wFV2bh0yqWs+QaWcBGZaXGwLfIu/
P9fGmpKSIsfFGJBvzJnWy5oigh0cve9so3CAL8YUGNR78IJF2FwEk7RQv0kw
RdcQ/v9PG/sWcGhIXwPV2/IsqBD2CIFDHU1i8g7hzxMdbMySYKAwi//+oYMt
iVe+FdhNAMc/0+k3dV6G+lt8GQ+dtjAhP6X9bgf9UlMpbpL3nYrQ25KQsyc6
T9V0iYDzpr++l0ijgWlSZzlryqhgET/jqgVHLrBXam+HT2sfzNfKjF95Y86A
/PqZ67pZ8HzRwdLVtxW+3Y9sxxvu7Z7CB5b+kv4qh476ozUpfXsnJMD8N0+J
xfnwgzNVWnIFScLg5bVvKrexDfy9HrqYao5O90gvPk8X++OrmpxvswB5Hcfs
xesviZBfvbWzxkhTFuws1K/h8qYX6lsfl32oeUWHfFjpa1ZigCB49q48NaiB
Cj4yevth830aOG6/4RrFB+g89unpT5eVW2H+8p7E4rpDaF+/WZva4A0EsNEk
8bBWIwk8MEL1bbHjAsd6TqeJHUb9YgM1V9eXovPZ1Wp/XZVD9W1EwcEEBbQ/
ZZNS3Lqf+P2rh0l/Mm0+thOfp4d9qtz8ovjoIuSZC/uyxgsJkPuESN3TmGGC
33WmkMyOfYB66lBJ7TErachHw6qaAmOEwJ+XxPYZ91HBTIPdJSQmDfyS3BQz
IcAB9hktDZKJeFSKW/nYMp9uGNrXrrP5Ar2dCO7/Z+2asBpOMEOcxe5HXAOm
K9Wu0q1Qvz19O7uCgzj4/pMSm7YOVJ/yUemR54QgWJk/a6fvUfz1Uh8TuHWz
8RUbPk8fMzw7p6javgw5ffnT9U2PV8Hy17zj5LKZUE8gjVlJLKRCXpWh7N6l
uxZyE7lLm55cFgabK/PfdIbPa/Sx5eEMQi4n8sLj+rp3TZzgPxd/SwwZ4M8H
fUz0ye/OUke0b/dgiv2gHRuYUTCbO1XBAZ5M13fxC+IBz1V2OG83Qv0OvCEB
rjwSYLH+RzrNcrzg8aKNp2x3CYEFRwU+kqPw+3cDNnLH+2GzGP7+ZQPmoH+r
rvvILOT9YYOjRXfYIL8bn9TATJEFn9nZJdTh2gf1t0935ez0ZEDeVNr72caN
Ak56nTwXoEIFh1srvh/woYHt3z5q5JUkgCeG7STGuLrRPpbWFnIVaP4R//aU
S4dRPflxoZQflQvMFu0+HpFKApcvRSUpBaL+rm+saNHvaJ8smeBttBQy+Hhi
xpz/BNp/T1tVndnA8N99DLAtZldekp8xMdyzqdX334mjXNpXw3IWI0Fexko6
LNciB7agaz/tyJ2HeuOsrUNJP9A8J0X1+mZvLnByjK/4+SlR8PpXX2XeYuJg
VpQL/bTHBMwbsa3tUxNeAPNPHshIgO+3AXbb77z0HTLKxYRMv9sH8kJ+1aN2
TYkQAazum+k/VssA96mtK6ULoH2wxh71yAeoPn62RCfgIR/4kuNe0UIn/P2z
IXb8lF2eXTQ+zxBLvsD3VNNzAfLyj+fTPkoSIadpbm/goMuCp0XCuvVvt0K9
5dAj6w3T0pBLRXU8Nl0jBO65sXNfdCEV/PO1l2aTEQ0cMNASVyDODk5/W3Ds
VvNrmK+W8TFQ7zLaV9RXj1C5De23ruBDtpUjCdxlS/FPleMGl0vMKsTvR/31
g3WprzjEwYa/jbY/+Y7qI62lO/5JEQQ7bfx4o10Qf/4ZYZkao0ILV5gY7vSN
ddH/2o9Cfu/4fn9XeB4ZYefkHtLCn8qBV95Oaria/YH6F31ZllKpaN73YYFY
ESdu8K5F16cNEmJgXat1576qi4Pf9lZ39zInYd5I28YbPZpovm7KIvEcSQbq
fTt2Wy7HLkDO6bElmLnAA7lG5b/kE7UEsOhS1V0duP+NMB2MMzDssChYaIFN
PN+WCPYmVAm78fGDHe/2id9Lxq+PMTZZq2AVR8LnGWNDmjr0vIEVyONdZS6a
TyC/ObzyY30iE+oHk+peTC4+gfxGTqGuJPtayMOMaCusWmGwa/G01TYHGti6
2Wd8XgDZybh48pQpCXwq5HBpi1ZLKW6OrYEpew3RvvMdAWqpHGzgn7YjcmZh
HGArs4xtcZ94wHV1Hq+M/0//jTChXcbbJcA9DUTV3SResFsYpjyySQg8ldlT
VM/AP6/YiB0rXH9y+iP+/dyIhRKvZPMHTUEufYojUIyHA3J7K6PmUX458IT+
D1eDu7+hXkyS2G7mheap+5JE5M/zge9uFfdQ+igGjp242TExQAOH6o8HC9yf
h3n3OnOHGh+Mgw1yuHRl4POj/9mv/3Hz9T3LkG946rZL8B035De1BE7mc6H9
NXpnllpuof7KHs+44ga0j97cx4lv7qh+SYb/QPaMAJhXwD8qeQP++mCC5VTZ
hqyBzwNNsAAVVVtj0UXII2LC6fd+EiBfPeklUcIjC74jEG1ZzGyBegd3q28R
r6QhV057OsgwFwI/VJZkbGyhgt94rUm5Y0wDXwxQy5U7ww7WYclnbiVmw3yO
it3t9YFoX3YvpUjyTiJYs0aqtlWKBJ6eLLix9Tw32H55L2fYHtSv+Y9izJSG
OLhIfbUmTHAN+EQvB60tRxC8KPJGStR20PT/AZPoSmg=
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.5105796963925867`*^9, {3.510579742141613*^9, 3.5105797606560993`*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data plotted against correct peak correspondence", "Subsection",
 CellChangeTimes->{{3.5105810124508333`*^9, 3.5105810424152803`*^9}, {
  3.510582313055606*^9, 3.510582314110784*^9}}],

Cell["\<\
Look at scatter plot to see if I see any structure when all are plotted \
against one peak\
\>", "Text",
 CellChangeTimes->{{3.510574728119684*^9, 3.510574761135067*^9}}],

Cell["\<\
It looks like we have (roughly) lines.  So, a first order predictor based on \
peak position could be linear.  Choose a one peak in the reference spectrum.  \
Then choose another \
\>", "Text",
 CellChangeTimes->{{3.510581749316676*^9, 3.510581773650427*^9}, {
  3.5105818068307133`*^9, 3.510581822436445*^9}, {3.5105828464090977`*^9, 
  3.51058284950949*^9}, {3.5105828901220417`*^9, 3.510582897067627*^9}, {
  3.510583146474968*^9, 3.510583155061881*^9}, {3.510583330952614*^9, 
  3.510583377416397*^9}, {3.510583418054069*^9, 3.5105834235287247`*^9}, {
  3.510583499801958*^9, 3.510583555009122*^9}, {3.510583724793846*^9, 
  3.510583734325248*^9}, {3.5105838757107763`*^9, 3.510583880839699*^9}, {
  3.5105839620925617`*^9, 3.510583964023361*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstFirst", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"sample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"f", "=", 
             RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"f", ",", "#"}], "}"}], "&"}], ",", 
             RowBox[{"Rest", "[", "sample", "]"}]}], "]"}]}], "]"}]}], "]"}], 
       ",", "pos"}], "]"}], ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstFirst", ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<First peak in sample\>\"", ",", "\"\<Other peaks\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.510575093124865*^9, 3.510575098383708*^9}, {
  3.510575190778582*^9, 3.510575249487133*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
zL8FfKGPjdSezQ9eEfooIWw+RP8fOS1kJg==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"First peak in sample\"", TraditionalForm], 
    FormBox["\"Other peaks\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.5105750991579733`*^9, {3.5105752310828123`*^9, 3.5105752501785107`*^9}, {
   3.5105759245406847`*^9, 3.510575931503681*^9}, {3.510576809725424*^9, 
   3.510576829663622*^9}, 3.510577077798338*^9, 3.51057798426693*^9, 
   3.5105782790263166`*^9, 3.510578469733075*^9, 3.510578560540532*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQmwVcW1vXLfrJHpCajEB6ISJ1BJ4MdoUCYrWJD4v0g0mkj0GzSRSYQ4
EAyziIrAF41MT1AJJmgiQ0hFQGUOBDOUJkasAjFRCA4oEY3Q/6w+ve/t7rN3
n3Pfw+T/qpyqd9+9fc7p3lN379579+5+g0YO/u+bB4288bpB7S4ZMWjY4Buv
u6Vdn6EjoqL8UbncUYNzudzb7XL4rqKv5kNfN+LD/DDfn9T/ytSKFStUZWWl
uv3229X777//H3zxmPiln+h/edWqVSv1yiuv6F9fZMq8x1u3bq3+/Oc/O4/b
Zebxmabt5557TnXq1En16NFDrVmzpokubqZWr16tWrZsqUaMGKGeffZZ1bx5
czVkyBD1l7/8RW3YsEENGDBA3X///eqGG25QH3zwgUYWz1544YVq5cqVeV1N
uW74a1/7mrr33nvVFVdcobZu3ZqLm2iuxowZo77whS+o6667Ts2ePVtXsXv3
bnX22Wer733ve2rq1KkahKVLl6qf/vSnqkmTJmr69On6GUA8btw4U1eNA+6v
fvUr1aJFCzV8+HD14Ycf6v+1tbVF7E5hMZCaRtVU3d69e9U111yjOnbsCFSA
qTr66KPVnXfeqcFn0NXlNvi4PNRHxCyZZbj1zW9+U02aNMn8wuex6swzz1Qb
N27Ub59xxhmF77NmzVJvvfWW/g5MHn/8cf391FNPxTNlhtYAbNu2bfrWCy+8
oE455RR1+PBhtX79etW0aVP1zjvv6HtPPfWU2rdvn3rggQdUnz59CmVdu3Y1
tC5TNTU1mljdunUDInETVSKEoHXnzp3zhlMcwExrTYwA2TXh0a9+9asGkBbq
pJNOUi+//HKB8hyCuAAwOCcgO9yl/re+9S01efJkkfr297///e/qr3/9K0RR
t0L87tChg/r9739PpLG6n34FQ8Ubb7yhxa93795lBlfAD8HGo8DhS1/6UoHo
kLIbb7xRk+nQoUMc0e3v+G8RnYOTaY2Ibtf0xBNPWEQ/VtXV1TlE5/DCBYBB
dIPjrTaRm9lE1m/OmTMngQO+Q3hwoZVmzZrpThvdb2K4Y+hs8SoWdTM0qgMH
DmigduzYoYXsc5/7nG524sSJ6pJLLlEvvviifu69995TixcvVt/97nctquc1
El26dMH7EVl4khOIjpyX8RCX+S1xFIeY9+/fXxRzDjmb4gKijpjXag7gDp66
/PLL9QiMGtu3b+90Y0ADXAD0d77zHV2+bNkydfDgQU7UMTE9/fTT+tby5cs1
Cf7xj3+o7du3q7POOqsJOmWuUg+uYNyf/vQn9Y1vfEM/jnE7mj4ckYegQuw/
+eSTmLDVLJBz587V33/84x/rKkjulyxZkgCaaTJu8ThdVX19vb6Fofqcc85B
Z9MSWl1dXZBtCUmbCwbhXIxxvoAxWhpms+I4pzNEiKpNmzbp1wHCrl27dO88
+eST1T333KOr2bx5s7rpppvUzJkz1aWXXqo+/vhjDQ5mqaFDh2JWMkSs0DPU
8ccfr370ox+pm2++WZ122mlgJc2b6J233nqrfg3aB66PPvpIDR48WE2YMEFd
dtll6JskpoTck08+qXr16oUp1bRU7UD8/PPPax499NBDauTIkXo2iuZSw5cT
oeQkMGCa1eAAewjZfffdp+fgdu3a6XuYIS+44AL17W9/Wz8nYGrgqyzAjstD
O+dMwFV6AiaG4PrlL3+p/y9atAhV1OjH8ur6668vsLSVKbNaMSNGnl7Tv05l
nhsVtz7TEHLt2rVaEYnGAI0MED/99NMLvS1SSHIEwquvvkqzaQEEmu5sEMx7
Dgj2cwaE1ebWM888o6Upup072yqDzvL222/nRsePr8E/LeBPxAUaRkb//bS/
n2tgfP3117Wqh19NDDPR36G97tmzR/3hD3/Qgx5kZ9CgQWr+/Pk99GPHavG7
9tpr1W233aZFEyodFAj7dVzTpk3TYojXI5HuWcLrgdZ37typO9SUKVN0NUas
0lr/oos+1Njy8nKMRYVuiTIMHOhiEMSf/EQvFHQXhBBGJMtdrJ9tqrtV3759
9X0Aj7ke05pdx0svvaS7Nu5DU8SAFA3JuR4l1JEGx7p169S8efP0/d/+9rfQ
B/X3LHDEa6rceYYkoPcf//hHIwtx2YknnqhHfvy6SH9WqLFjxxZmClznn38+
Ro+8uY05FTM5XVgARP20R/jtSqbBnqYM8wrwfvPNN3MprXgooR9jTFB6lozf
BGVIEfnd736nqqqqUPPF5nY0TushBYSL+q+ewKJxmtodPXq0HnrpihQT8KhH
trdT2kbPwLIMwxnmA8xk0QyW0rbBuYvBGZOI0ThytLYEKOgHUGoHDhyIUdpQ
t0zXikkEtUUzelm4seBbfENEG8x40BCB5WuvvaaX8dGMVRp2GLYefPBBC7u8
1iewTMSvXqY26GFt27bVlIAugqEuWuFSYzNmzAgJafBtvkGAPmrUqEKNeCVS
RVMaNNidY56CvEJ06PrBD34AcpWZdqEJm8uwr0KLE1RiXAC3oqJCvfvuu9Qu
tGH0ffQhq+/3CL8davDhhx9WV199tS6EiQN0KuicYoMeotDB0KVxF3+YYKNB
usxI1wknnFC4FQ0QPYx0oU7oIaA9Zo5Iosy0XabtCMOGDdPSF61We2Z4RWgF
DIAi/cMf/lBdeeWVatWqVVIrZlLRtChhDu4QUzS6euPjKKs0jwIj2cZMFs15
mhtFs1n06zP/hLJ/Vbv/98pi3uTK7Vvxjehq+i8C7d/s+Td7/l+UGfa4t5oz
Zf2Ysv4Zn7vQbqrSlwQF++aWza+rrb/eHd/obj+fkBy1edOuaF3Q/cKHo7EY
71Ez+vOC8LsbN+zM+G4VC+eG9TvVpo27lLHJqi9brxSR7mlX5NKiLi5zkK5m
yvTTx6XVUwZiAB39F71bxRfrd2rt2sJsONFUE5GLq90rTtaenWltTJUecav4
YlqKJChVE25dYnvnALmq7SpTpeEEBrJanlzHMI9+VDKnW/IUOoZ/+qBVv66+
joetioGtDf9oDfNoBVO2Kx01gfkeDq35p2v4p8nQzbHWAm+HDN2ZPN6cDAr9
JYahItFf8OrC+t9wEvlKOjxsn0jgz0nZ0XwNMZjliQEOfTZfGoxdQyIvcLTc
efrRBb9B47lX40aIsp7JqCzQttAjPJAEaTLycILhnGCfyTPN9wmJp8uHk5my
DW7DghGFa/jycAewGikI/+ZNr6vHFr6Islr+7aMZEFe6IApWgXwMVc5dQWV5
ScBLkFa/U2GM56S1OV/N0UI1xYmqyq6GI92TLmqCHYFD7RqLugYm7WIBnOvX
7VTz522LANNwtmQYcYyB3e+wxWmu3IHdjDcF8ix6dDuJQ26xi4RgI+CQuI2X
nKY8vckZaT0dPeTCauO4KIaL+r+3uuf6P8HjcTRmdCXbD6gxMsbZr44Yuhx8
SOgNkibDzX1lTNkDMWLc6EkYCKLqT2VFSFx2R6xTk8avNvcqtMj6imv0W0Yi
wdM8XzxdRmUKQ1HqpU0M822Yo5oL0rlwe4FY5EUF6FRNhI6giOZDxS4XpqaB
znXOvE3Ggnvdas1IdJGmkuJJdPY4nQ8VuwJg+rCB1tLs7LGFsD3PQ2lBJNdl
RjrszpdQwtLFuYyhQoxxJTt+upzNp5aNthkVXrV0ZF4/jSmLiZ+qGnY2nCLC
YEDG4GwI9JmSugrJIPpm/fxtatKENWzfxRULnCs0WcvQykibZNmXYqfwkIf0
XVblKEnfPYupvZmpHUTP3rvtiYUoi5HPviLKF1BHB5LLthZGKZRZ0N0SJq7U
4dsweFbzCDVAoWfXHdkV+uZM1XFz4WmT2uHGpWMNaN7ITUykfmCoS0y0WC52
j+iZAomJweGyWBBsSKI6WZZ0Ycra2xzPaAgQDTPC4i3beqmGr6TasIFbRrXk
a0pXKSocuhM9ol7sT3GoSJDD4FhY4TAkmpHc2a4pa2/LUsZ1aNTYioeGgkts
lp/BP9qKebTSlg7evOFRJcVyk22dKtiWpFVNQO2Ki6vV5AlrNBcCM2JhxBLU
Fpb9LjA0PHCqRKV53h9yokk30blthnrzBDkEPeadzgNJ63MMSADuicdeLKDp
1VCRzmqPMB344s58sb3mTlc8axxMzPCa6BwFBrsd9jM8BHkPgkcXbBOHYW71
kVTmkkOMrbVw3PQmDOKmx+TTeQRohHy0fpstclV8JQGGzrBkcf7crc7EQa5w
T5IEOymNdpzRnOGOv4b3XpOssUQmj3rdTPH8eVs5enhP2/TQ5KDtFR6Vy/hi
wZZPBODG7ggLToZC0k+teBqEICfdrKfnzdmq34i+EwHw06JLQCBe4JFrb4rZ
SSVB4NOt/uXqcLxmaCPj8YcFjzMziqIi9ChB58imz2QgYIbp93i+8iBRhYE9
UdxChnA1A0oTvhZhjuFUygq+BoL6k08UFoPq7snP2QOYh3oA6pVMm3EHrRZX
uHZ/Kufha8NjWM7DR9h44267NLDF5bPATGHE8Z4+zxR7o14AmpkMETnJbO2V
waoashZbsJ7Go0CwQg4mjFutJk9ciwGKU0taWvBr8O1JKoKEnaRY6ywnLRXO
oxgYHUNHullFUJqFKdmR6LBdZwrTWCwnlU5jpAOl9F3ZspVVGpvyT5/KF1Pf
8MZbosu8uczUnNfyMGXSWnXP3c+7a4zsBp0RDKK268DWsYt1uAuEwgRdEy0Q
1mpRTBlQBO9tcI2Q6BVN+afbMhiljK/eZFHDFxPQkyauLhRH1HemsyNh7HHL
LuVJJS3Oi80lF+dGW2/A4tyjfCu+uC0Pasp0kG1KJuKPH/esSPzG2l0yGDUv
4qGLyVfFGjUTOrGr5icGUUF95LUfdlnLD7nCKkjomRhaxt31rJoYTTfR9wzL
2mxxQCUYLmPzRdi6eByPhRDEICikZzKN08pUHgPdDpSyMvXQjSPgCg5VbMTG
dl3secQfwqnfeustzqFax6PQMNOhZ+2Uo3VCRsC8mjrluQJ8A0VaVrCaZmF1
26CVrFfskRW7FLA/jq4333wTwRocWVPiQurnO/MvN0FsKZrUvU6pjcy2W50a
7c7QSnafFWXx11t2B/Uyy0zgi6pt70aZt0CWQu2EIbwnA6zRQ040t1atWqV3
jmBrqK6lDHQ/iXmxlimjEdFb4xL9vZU50d/rg9pKwNGfc2lw0zL5mkrz4llQ
ZHBTFJcGHkv0FdVleym8FnODeXk0gzYpRMi9gY0RH3/8cY6Ljajj8eFUYWHG
pO4iTDUeF0NBOiS3k8av0QTBky34RrPEbnCSQVZmzqEseN1SvIuWOBY4bskb
cTJh2eTmlDQT39UBqL3RyojBZ80bY8aM0ft541+ado2J82WVpsTTpHmx40q6
NTvFk+HJvUVkVwmGJD26YLu6+srFvhIs+clp5VA0wawt2itLclH6fmZuYcAF
Z6XRpj8jCaT/eIThTNxFkyFNm7T5ERd252Kj36FDh4yn5khFbQt6ofd0BwY5
rsOSgHj8IAHxekTCd0/Xo/XbKryJYsE83lNIguGZLEgwPMr79m0vTiS+Xe1j
7/Nf83sg3/GKcyJrxedtsMTyxx57TGf7wYVMIUjzEM3YEsttT7rNcooO8bhA
2/CTemVSbzFmKq52CtIUVsKeUFtAljl9b/7crXkzNgwfssx5xfCbGl9Yn2S3
Zy4kdnuaCHk1OY3tWIYa/2WqEcw/HmotbOaV65wdCHm86667dH6ThQsXksqY
4JzkWAuFnmSzYEmzeTieRFxJ+z3BE6kmhdZc097kiWsT+HFxHzZLPbcPsdQj
uhxC1NAYtgQJ/9MUC+YojySOcbRUu5NoA/EkkGwgtomZs/WWGGRkA2eiUPST
pOKxy/mSDJIV3vQv2A69YmJyMlAx5NsOx/36YRUWEsczlOzCU9LxS2Q2dAk6
mydgNPd6U1nQSiD4VvmtBImYFN7eXIotE5Pn+HGridiWFc0orClzLe9rL6yY
KyXBSTUACa5LuwMJFjmHxdl0co8HKbqVN3elGDcatlcquFUko4E0QZnYk5RN
PUpxVQqGpPoFjuj3s1gRb+kvp/5tv51rWCCfN+EQHwQjR+P3iwWn2gSUF/HF
REDPF00EnODa5bkgBidGsvQJy4NeCJsSJsuGRbsmqunDoMXt6SDzvDeiclEV
VnCCJ0UNG/K94i8bxO0m3bhPbixOD3gVVJhgzENiBGqIZ8gFw3Z3e+asQaYW
x+azcHtwgKpMDG+cFYnT6jmLZibbrDvT2DOntMqimcYbRihIQOgQGax6xnRL
EyQS9CEhLsy3+MP3qOwEhtZcv+Bilsib4KOati8vYwRrKDIZmn80MMnOzzD0
keSImmBx5KpymOlPVZYV11ip7FHAmPSyGtrMCp6WF8h5iiSO0co9KuvSpUtU
hlX8ueeei3tmROJ3o2aL5qKJh+sh0Zo6NPEE1Hl+VZAIQK7wSJ9hnWrHqbo9
krPNH5PgKmeHt+qiFai38hensat4Wggqm8ddZE9Gxs+o+xXK0D1Rdv311we5
m82/HnO3mtWKfRVLiFKSQo7ro+nG0r/drsBbW71VaNHuznJ4QXFWEa2tWVdr
xTjyuA4fd3K18PY04g2S0RJOZUxZa4ZfXRl5FSICgkpOovhcI6kQ6Plzt6lb
hi3Xpq3Dhwk40WroDVHEh0njHWWvyId0/wc3qXFdRjJU3cRQqdIlPrbF+8S3
yzTxNe3J68vaYRoeS+apd0IcMRHTjhyP2FKKC6FIpKrCPW7YKigbmSwQ/Xiq
eCKOVL7vvvuu+RV/4jfKVUFtb1hiG2FQ7G8EOasZKCJhrFRUq1tHrEgMa77v
W/CO2K6ehJmwQVaGQszDEbMyXCQSNm1mgVMYKQCHDBkSlT344INRGU4/QFl0
j51Z6nggUjyCHordGZDJEOT782xTvs3g6DnfXRPeeZ+AoqXHRXbfgVuT4AQO
GhhcNOkwjJLC5UmgkPLx61//OjJu6z+kOIzKOK28jgdJ6F19eagkF1px7HHd
KwXba3HcllQi2nuQbRpLCU3xwO7GI2mM5jQtUGpz/GoboKCgtHnFREFPe5Ec
VKFMHNGkYO5Vq4nj16h1L4StXuQ6YANcMyX4MZShcQHpthEl0KJFi5xOqh19
Irf5LbfEm5u54X0Q0xoF6HmaRNZtbEIAqqBMc/G8RUMKoYYs4vBrDx06NPoV
fYPBf+NGfaBLEbWwAfYaRuqmTnlOiFOoN8WeBhAwaJCAItU7kbcJU2ayI2V2
yndnmqw18mmZqPXDUtiasKojJAUzZnb7Q8x0fWaJKozceX1CjYO2bZj1w2Mu
5lvldkyQTcKz1YlRYyt49FPilnllyqD6+c9/HjGf8bEDuThfPQ7RKUpjqvnv
Yr55YWMFWbI8e5wYejWV4RbNYiUtaGMe67NBcDYN/pCQGKco7NmzJ2obefjz
+tQCV8Szr5U8tY4owJoeq3ytzsdmGs++bkz71Xz7BnEuJTN1aDqlR8K2TmyN
V5u94S8lUYBHgYd5/oVmkmx6oEOICj2Z4PApnLqCk3fwP9JlGqBveuiSvukp
LMLW+XkMXoKumLL5MZuW5YkDtDkE3sTnDuEzrw90ItQp9BSDH1JuwRD0wQcf
hCLDBTg8chCVvNFaiOC8TaQS7/fwSHQeD1rKFgReDybBpyOwlCoG8uKAFRze
Ef+SSSS4TT1aCAuXu3kcUzwfGZYFYbcw1Y/DZ2DNwBC5fv365qY7IWcexhYk
S8e5Mf369cOoWkqAZ7blyP0M5CkbYIWVkrA5m98qQcMGjoPAsgfHPvXu3Vtv
mxg7dmzcT8r1gUF0RJKRhvhVHXaerF0IlJjFINmQ/bLCEkYQHX43A2GOgyGQ
YpKO68Gs0bVrV9LGcBwLDowyWEsBYJJTSVhdzfAIkc0N4lYdg1KZ0C+5gUOQ
IA8qhzJ5LfOgzIQJExyLOQFAwT44CgLyk0IiyfS41FR9BJ0Hvs6ZZvbx6HCF
KyHf//73dS5GnASDCxr07NmzWxi4oWjhcJNCnyjBCc91CE4FIZbYCjaVWTNQ
o830kTbnmJh9/d8cc0Xyg+UenYC3b98+cnzjIBA4zYoUSdWz7zO0Pny4mObT
8gNzuQhlVYVWt2wMcbZEV+Eo8hrH2BnQc0fYkpTX+jixnnoUzsahMk5LjXdg
Z8mhGYsHtgp3vzCZDrEYm80HXEtmdC4w94gEXN9h06ZCq2E4Pg/nruAP35s1
a8YprpzaJAW7SUZsKySditMCWrMZsKe7LMdpU9DBI400qnzjxo1RmbV5jmW5
kN1Vcs9LZtyIdWSnHzFsuQ06yw9BMZnt4oND3eggYBJhnHfj4GMlw8ycBFmI
RfBHfHsPij3K4bm5j2xVw4c8w8UiPO5igYELjl784gyUlzMSFtqyGQqyEPZO
yFGZbjW0y1PY3GxyCHOROnL0SOYo87QAkiMajrhERoXbSsyZuoTEoEHnPGct
FVJBZ431W+FKm21ZpDZx6ieV1TIY1zHYCREZwb3fWVeH7fni9S4mbdq00Ye3
tW7dOirDZ3ySOPYy4YnjREzEdZAQVCtsrfbA83PCgEqv2SBX6wMw4Y/AobcY
uLDAxQnb+I6ySME3emCj9ut5gAmL3I4MLR5buH2HS2V7fiDNB0m46dq/f38M
caN3jXVg6HckAsxesRGKjVLwiGIhhW01OJF14MCBem5vsLn5SERSeXBiokZ0
F6iKP8C9devWWAdprK24EZFB5kAGUruxkxCOJCy8ogUa56P81KJedrqgeGYT
GZQEtw4zEFa67BCMErItk9+86FF4P/NoOOtkiqmgZNsqb172CL0/VEOa/TNt
6S6bw7N6Wg6Fn+aNjCkr6hAhs7lDCCrWEsnKmrCU1YKsIRGOfnmHqbJRhnuc
/4nDenHh0HL0qt27d3M00Z+ChDXCbF6hT6DFIZbwI3Xq1En16dMH/2MYwtPj
GoYepLVxm3SELZkl2awJbBz4jQv+DrM2Qe6XGOzscySXzS8Yj88Z6XmXh2eJ
EBJktXPRgpaCQ39hf8aMiV4ydepUCS1pATGNgSsWntJTn2zgj66gpbBnh2nD
F1OX80wLwvYEjyiPPPKIjijA4TX4w8nOtbW10hTtDQTcUWHDLFrwmfy4tCW8
fS65izWcQ53uSbZRIqznZWrDFxNhPYuEkK/XEJbMjXYcQFNDkrvvvluf3ovx
GicwHzp0yIBUuuaZeSbklBa37BymLEvO/FKCTTOAG0xcmG2zK8f3Yj/Otocl
LS13dN8YtE1YxM9//nP9mzyNdJA6fh1r7uCkeXStw8Z61717d/Wzn/1MYn6J
m8xSQhqFhaxXbGdnZ+xJ3qCTnnVfSL5YqUYOX8EmX5SQTjnIR8hyQ72zmEI/
lNskvCPGy/7lLyeExWBRSsB1GPqk4JmmBk8cu4UUCXQhgHLKlCkaJfIMeo0I
++kaZg1glYhsK1c7DImzbHlDKxds6Npe+XOgyvW94rYpb5tnymFKHpH8rTfF
DLhJT5lkgd/iOlQ8fEY5IrB3714dOBSHD5VrtRRH1SPbVaSaYtFnZsMKfSY7
vGDvv/++XhfhFPFf/OIXXLhAymGK3pTNbZeX49+4jFRAGb0qFHTnDZhcBiRK
ecZF5xa2UhWH40jlC/pbBN4mPXzuYR0QHi8rUlJf5ZW3wuagssIWHPOaOViH
2luyZIk+FX7Hjh163d2tWzfwm1g9adIkHVyD/3379tXhRoWsNo0LsSrNhOkJ
L/He3zpmB1zak2WJpxNK2+iiV31PUtGNyvGeY7LorOSSn/l9PZweQ06D5W+7
d7yVFapXr17kJNFnEt55552qc+fOpP9CbfjKV75iI3YEtjNks/sKqYTJpuaH
hONtz6BvouQzZsRxoxPo+DZ7bxBzwIGQwor1qJbqlS4O+NxA7zvNhC0X3Jk6
XPhZf1su8jhYs1AFkQfDP5WRDrl//34dM4UpAddVV12l/va3v5USO5XNiiEY
24UgpGAQEe9U9pWH1AQ5fBZoIclVQ3ZACSaRZB4RFsusUXZyPG7QbguGYw6B
jRrm/lmzZsH/3dxQEzYNWJrGjh2rtcfQqnKTkD+wtLPLT+WLhQNEGpoD3Epx
ZufNsQOoLTZ/lpfOtnyxEMt2xMOHodqBN/CCYO87NnUMGDBAsjlJ532N4MFt
nH/4HL64LV+ckgTjSJpNsQzChSxx48eP198j3VgimrR4v4phZmmJuGfw4DbK
uIqovmXLlumQaqwBb7jhBkhIRp8YJV/wHJ6r+KY9Wx/8XAcPHtT1Yu0B99yB
AweKbsNPKz9G4JT1Tz25Q6DtOgY1WZvmnX+fmnNSBlgM2yvN/COogNm6/c50
IIW9+t4iQ9BTdVXV6Y14mmlK5jgu3DVDI6XZVrilotNIlpN/s6bIT9QeSgN2
Ll+1fBqrW7bXRiK7zbI7T5dgD3cb3mU3/KmEDaTmi9shSwmNYKX0p5LyogVG
sDgmMHu+sEBVg0xVNmCUgSswJFH6Kg+CAL30Z0/rvr7NxaBukCsJhnS6taxM
r4VVq7Ik2XJbejK9pYy2Ecn5I3hTApF+dHi9LyEh5dvYQm1F1MzwORMeSQmZ
4WS/9tpr9a4OWLhg0hBMV7RF0QOEO1oTx7fWL9jGUoDj8EMuUHPmzNF2tBid
w6qurg7aVpZ18n0MP+KOkDw8NKk1JPgy2wUMCzQsBug6//zz1eLFixu2VuPV
FtsSxqktpzBl8ba3GlKi7IlT9oTwLpqAL4Zae8ClCcL1YeembO6Ifty1a5fj
8vAMkCnZLD0zUclHkHPbrqsSBnC8t2nj69rxED3XiZdu4XhVYaWQ50E1EfBk
w8EWussuu0x76+vr67PsoEqm0E7oYQSSZ1Ph9l9uSd2rK2zj5nJzZD3wpBR/
NJVt2bxb1/v4ohcLz9AI6pFeOKSNE2AuXmG0K9QImkFmGiy2EFRYW1urPvzw
w7i2zCkyPSWWOOTZPSr5p4MuPWGbeTL3R5qbR7D0+J1Fsu9lypjHm/c9x1+e
aRlHDtobu5IWtkSqtlEuH7FGx94ZXOBlRUUFkkfJnhnxgHTBDC844TwWS1lh
7S4+kTmBxuN9MUVO0p+T0RGTlrZIMNELvhguIZ58EE3oaO5KOIcdxtvPUCRZ
clxn7fJ0YAF8NAj8HDNmjFZupk+fTrKUZZnYki8WfHCt+ae56AvLn+r3V8mf
GpXTYRIjmMMkhDC0lMMkBMdLlvR6nJ2T3T85t7h/ErkA/RUtTWZCAmPvcbLu
2nLgZHvOtLCjE++FDVayoi0GxEyZuDYRCOHKfkknQgj+D7uFYZEQmNN56TZc
IqJcFCOn/A2a0qqfIqeEVMoeusKZy1wASsBfUsLCSzhYgXKDotganVhVWHAC
2icH4BVu6UAXx+C00EXvhCc7S0FiyhDPF/e4knIwOu/i4Kg9k+8bggNCiGYj
ieRMXSkBs578NOAMc4+OQmiEYMy0KaMJM5NHvB1f7HsqbWnbVMxEy0mFx9DS
TjynJHSCwukVB9j/Ak9bIY5WYL9wdm3YdRSCxsNW2JkXyoBYkqOHA+U9nh/2
+Q0plol9PPpODdmDiPfwGKTUJo31+vMC+93UNQ536Lp+7jirGk3DOuZJwdzC
7SEJzO91fC1B875b+Rt8De3S2yxt1yObDSY9zmQ131gG8ARVll3FlLAhOtXM
HvZjchCnnIhbysblkozy6xjcA6c8pGQ5Z8ei7Gb9dTy2LdLh8VoweRpZJwB3
DMfTIXHOrKMJPoTgERjpSuH/8LVmUGosh0QjfAOuTZuOceWO1buPbyownzTY
nSAa++UDJxKkupdvPABuuhMiYReKi6u1L8BaUQat7xmMd9wG99Ey4EGnRfII
gQZYzLOZgGU7ZOLRUTI2Myw22Ib+LYWdWQkaBu2iIQlPvBKAS9CShVVDyWfi
hQ8+FIIdDbgUL4SMB7RFbunSpWRFnjZtmho+fLgOu4uKOevQcot1JqpNXA8W
+ylv7JJzGbpl8dmrZg1eo26//XZ1xx13FJp56aWXdHogOMf27duntw4fOHCA
M2uuDBE7JW08v0QTEg9mCAPob2HVBAhRcD629g4YMKCAX8eOHRFUW/QhPWse
5BZWwjKewBWSAgorHF6/T0IMH87gwYMLEEOsFi1axHFAWMU0LPt4hnDH9kcA
5vd4KMIHiCVbRBygxNfQFm5e35V6w8svv6x7A8y9Kb3BaYXXUU3GFr13GnkW
opYKsoScI8OGDdOjxVNPPcWNFvrzbIYtLW0k8hpYxIPHKAXrKSWntRivQVVl
23gYUAWc2gTVLKAHFSv7Il9HWtM9/zn3c0f9L+b9C+o=\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data plotted against random peak correspondence", "Subsection",
 CellChangeTimes->{{3.5105811764724503`*^9, 3.5105811886216593`*^9}, {
  3.510582317652169*^9, 3.510582318614987*^9}}],

Cell["\<\
Compare that when each is paired with a random element from the same sample\
\>", "Text",
 CellChangeTimes->{{3.5105786431404877`*^9, 3.510578664738483*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRandom", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"rawSample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sample", "=", 
             RowBox[{"RandomSample", "[", "rawSample", "]"}]}], "}"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"f", "=", 
               RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"f", ",", "#"}], "}"}], "&"}], ",", 
               RowBox[{"Rest", "[", "sample", "]"}]}], "]"}]}], "]"}]}], 
          "]"}]}], "]"}], ",", "pos"}], "]"}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}, {3.510578677955529*^9, 3.51057869460358*^9}, {
  3.510578805484024*^9, 3.510578899046955*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRandom", ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Random peak in sample\>\"", ",", "\"\<Other peaks\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.510575093124865*^9, 3.510575098383708*^9}, {
  3.510575190778582*^9, 3.510575249487133*^9}, {3.5105789289311*^9, 
  3.510578934014724*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Random peak in sample\"", TraditionalForm], 
    FormBox["\"Other peaks\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.510578938267201*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQm0VlX1/+RNDMnkQ0SGhylDOJKiiJqtcqzltIpUcEINcWLSsjRS4b0H
DiUmRSbweAxpg1qJZuuvgBo8QRBatWJV2loiapmYmWQZef53n3v2ffvu77fP
dz/+9Z+/teC9d757z9nT2WcP5+xzxqTrp3z22knXX3nZpKGnzpw0fcqVl103
9JRpM5Ommr1Kpb2mlEqlN4eW6HeX/Br+858r6b/wR/j9Uf+j1j322GOuoaHB
3Xjjje7Pf/7zWNx8XfrSY/5Hjdt3333dr3/9a//XsaBNPd6/f3/3m9/8Jve4
bAuPz/M/DnZPPfWUO+yww9xJJ53kfvazn7l//OMfbuzYsW7ixIlu+/bt7tBD
D3XXXHONu/32290+++zjHnroIbd69WrXt29fN2PGDPfuu+/6n42NjW7NmjUe
65tuuskdccQRbubMme7Tn/60O/roo922bdv8d9TPlClTXEtLizv33HPdH//4
x1x/f/jDH9yFF17oRowY4TZt2uR+/OMfux49ergvfelLCSIEc51H5+yzz3Zf
+cpX3Gc+8xl6rtTFf9fHzZo1y40ZM8ZddtllbuHChX7MHTt2QDwefPBB16VL
Fzd//nz/DNFh9uzZoa/uHi56lvB44oknLJzTxw9y69evd+PHj3d33XWXmzx5
snvnnXfMoQui7MEH6Pp2CT59FOpTUkbf5n/0cBdddJFrbW31T/7iF79w9fX1
HpG7777bnXLKKb794YcfJmYFAgxwo0aNch0dHf47wu7www/3v69bt8717NnT
vfnmm/7vadOmuSuuuML//txzz7n999/f/f3vf/d/T5061V13nZe6XH/f/va3
3VlnnRXGqnFDhgxhIcmYSZhv3rzZP//MM8+4gw46yL3//vt+/F69ennhYbh3
7twZwaXWde/e3XPjmGOOIUrV+uau7uCDD85AAujWBFFYsGCB+/3vf++/It4S
9GC0LkFCbUT7SkRNBOlDAJNoGMhekWfvxRdf7ObOneuf+P73v+/xog/1TnJN
059GOO644wIkedzpJ7P3q1/9KukDRobklrlLsnbaaadlXbS1tbljj/V6Jtfd
/fffT0gzc5uamhRzu0ql5P7yl7+QBnWvvPKKnz4nn3xybRjdRqDWz5Irr7zS
cyFRXIinAEfmKQ362muv0ZT3xKZ5BUZjMgD0AiA9JX4mXvQhgImnAcerJQ/r
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
L+DnLrUH9P+f9J/zfWmvfwepCn/I\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Subtracting known peak", "Subsection",
 CellChangeTimes->{{3.510581197920885*^9, 3.510581200152623*^9}, {
  3.510581239564937*^9, 3.51058124073827*^9}}],

Cell["\<\
I'm going to investigate what happens when you subtract the first peak and \
then order by sample number - is the increase in order visible/detectable?\
\>", "Text",
 CellChangeTimes->{{3.510580142956915*^9, 3.510580191348404*^9}, {
  3.510581213173916*^9, 3.510581222574148*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"posAllMinusFirst", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"sample", ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"f", "=", 
           RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "f"}], "&"}], ",", "sample"}], "]"}]}], "]"}]}],
       "]"}], ",", "pos"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}, {3.510580059062235*^9, 3.510580131941783*^9}, {
  3.5105803507495203`*^9, 3.5105803539024067`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"posAllMinusFirstAgainstRawSampleNumber", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sample", ",", "sampleNumber"}], "}"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sampleNumber", ",", "#"}], "}"}], "&"}], ",", 
           "sample"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"posAllMinusFirst", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "posAllMinusFirst", "]"}], "]"}]}], "}"}]}], 
      "]"}], ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.51057943508823*^9, 3.51057959166945*^9}, {
  3.510579676083007*^9, 3.510579683845134*^9}, {3.510580201104723*^9, 
  3.510580235622819*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"posAllMinusFirstAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak-firstPeak\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5105802421876698`*^9, 3.5105802709938793`*^9}, {
  3.510580333198353*^9, 3.5105803348507843`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
J3jBOw7ac2d2UoDH2xVHdpaKArcd9UpruYNfv5oc+9PE4qz3xlfGrwZvZlWy
aDFLBcbCxW2fz+Kff5rYeGJVae5lOvKjniUG9vj/B5pYdaFRvPkacfAC/oI5
caF8wKe01OUnNInA35tvTh85IQ3MMNS9LNqC6rN36v9aXfQO6ivEHttdU0AD
v3NKOcZJnwJcPUR2U1qSBO5OOMGb79AO+YeyU3IiW3jBz5c1aa4+geKFrHbN
JwqKARMM1vqvmMf3p8WxPy2s+3GFW8FZGvikrXy00y+owA1usVyVG/H9aWEm
6Zb+Ghfo4Ft9hIv1bfH7mxbWG3W2pT9ECHydWmJMzmtuYAEn3ejyR1zAa529
+Td1SQLrMIajSSwGMCabJ16/5iXUt088Pr12DM2XsHedZb0aBfjbYJ/VUjEZ
mF3mGOwWUQX5NOMET18XAppveg1pVQGKJ66IPiv8UBj45oqWnB4/fH/aHPvT
xsgOel+EWyXBy4S0LYnvoQITJUjHT7bi+9PGunrcs2aK6OBDyzTYeeb48yFt
LOF2oqZkGB94AZH7G8R3L4KvFrvtGiWyDLxt4eH1q1fJEK+buP+R3SMGMBYQ
S/jwoRD6q94qNn43SQGfUh64KrhXAviqgq1R6WNRlC9Ze0gs/QXk6xQFxSRY
f4f+XQVLfeGNKP4H+yiLuX4VsCHjyNerIfj1qcOxPx1skpnCor+lgLdkPGLa
p0gCi+jzubFs8fuvDibO6kowEmaAx/jW5azpxPeng332NrlWqkoEv+B6q1rT
6W/wrCrye/+PC8CHxNw/Z78Sg3hnV+cHXnWovuuTXVusNrZB//ToTSnN+hLg
ZUs6vlhsR1xtUc7tv04EuJtMMTONb4b8S8fZdiaSk9D/PTFqf/k5YYi/ibHI
67v5gNWzPbEuCfz+u5FjfxuxjsUDDt+0pcHP2o8vCn+jAv90/2pzxmuaibNQ
qdUdNRs6eCV/45IzEfj3v42Y74Zo2hYbEfB1Pr/ZPhnnAe5tS9ogsIUbOE7N
qsx8FvW7vqL8zxgDBjBh8IEf8VAD1Ge4VLbfzpECb+Q2dANzoQAPHuz8bSJZ
Ajg1nkSqo6H8iEGjI66iqD+rKnxHfAmKD2OxWrekovn1xMzGyaP49buJY3+b
MFKOT5DPKynwI7JNTR7mVOCYuIEQIVn8/rsJs8izTPCGz/dNmFLsis8BOfjn
3yYsRcM/87WSAPi3mz8mbTnPBaxTu68hjwuxeyLFZeAOBXjVjRezP7wYwKG8
Dc6r+0qhv1jerQHrx5LgLedOyCWVSwDnRr9TWJMmDkxYiG60NrwI892c6Yxq
l18EHjZPDZnSRvGbk7Pnhw8JAp+ZtwzecBq/fnU59qeL2dh9Y8lHU8F/PqW7
OZmGuLDwydJxQ3x/uhjVrDPCb5AOvi5s4evJ4MEKnNnSVlVhv0jgPaX99fRU
l8Ffoq6NXFpCLOdUZbRSRgLiddcel79ykwEcWkm0Nw2rhf75xk5ngr5QwN/4
VFDvdw/lZ7hFT2tZiAETZiUUXm17Dvkiv+fmqw7NQf945mcScUYU4p3H2g8Y
HF4FHKxzNVuAjO9Pj2N/ev/8v1K0ekO8DPjB7/0Or/+iAheWuJgEaeHPr/Sw
bOvz+Tv+pIPHLNN3Mxvw50N6GG/g9yD7OlHwoUuBRc7cvMDpjW7iF4J4gHPt
iUMMBg1Y7cCrWjMKA5hdGf9by2g11E8PHrvY/0sK/J7ecy/H5CjA9lNr29y7
EGMD4gtyn5ogf/rJ0JU194jgeTOl1KRdUPzRVF0HDWM0/7tgbO5FIX796nPs
Tx/bVyqzw5sgB/7Xjnmzm6Y04G7xoBMDIvjzA32s9PmKZfufqF7ouYfOd7aV
gt8/eTY8Q00KfMeoyT2FHiHgl0m+cSkWJOBWkeRYagYDeFfhXw9N/0L1T/B8
2iL6BH/epI8prPO7p9SL/IVf08F96ySBqxtyPQodVwO7ilqPx7uNQ/79vWM5
E3tEwI/clbOzFEHxJvyPGpqiKcDnO7TJMm/x+Qw49meAnYm4N30nlAZ+kWvo
BjuKCrxtIIPv6nX8/Blg0U9Sunkq6eBjZr9eCNTGn48YYJfK4jw+MITAz2c+
ENBhcwNPugQ4PijnApY//fzWm+uSwOOEgODc/f+al2gt2e4fAfX3FF5zrglA
8+0Q2HI1dEwC2IedsoYVQQYO/ZybX9X9FPJlCcUXetYTwJtMRhjsVkXxWTqi
PGXzaH4tE0HVYz/x/Rpy7M8Qe3NMxCu8mAE+IDtv5KUKDZid0qLmqoOfP0OM
9DD59n4eOqonUlyqL58O3tG7sXP4EBX8WP34iMW0ILCikqeddh0fsCq5OSHZ
HPUXHH3DPseH6k9ukhLu0R2qgHrKNY3FvrLga/N0B3spksAaywryhvkyKH+b
H7f9sTHIV9ryYH+PqzB4Zj/r9l1vFC/WM3fXBJ7nGGIhgzt7NhTi8xlx7M8I
87oW1rjJjgoeY24NEt2NmPWiOL/6En7+jLCipYFilSY6+FDbTAVDG/z1GWEv
S330zoWTwJN8vDWP1y+BZ4mdy0mbXQYuCZpieH4jQ/yPr/Iz67L+NS+/sVJW
71PoP5QlHt60UhL8Sd+23y7WSwC/+BHyo22tGMo/Tkgt/oTysd2zjNvic9Df
v+B9+E9+FL+kJNt1LGEVsMXBpjTSUfz8GXPsz/if+8tDQ4/nsuDfGex+cCBB
Cnjb71GEej78+58x1j1457qjNh3V+7wu8nBuXQXOZkY2Tvs6yeD9nfyXgpP5
gRNJ50Qnj6wAXrhvz+uhheYj3V7MGr+P6ts0ifRqH+iG+jfPeU6FW8iAZycx
jLtLKcBxX+pVY35H83f7GR+cM+mDfA3FT9msBDSPSdDYt7OeKL7r4NtS8T/F
gc87nHrgRcPfz80c+9uMGWEJYzV6NPAUs64TVZFU4JhTnxqSPPDztxlzfdZq
OFxGR/WU/lRxM8K//23GnFt7Ngz5CYI/VCFQWWDHDWzAVH81HcYFnLgrMpvb
RBJ4e2quPr/Hv+ZNXzl5dyQC6rfujTKM3Yvm26IoLv1gQgK4O9bs8UkmGeWv
7w8uryqG/HTSwOvLOsvAwTNy0nbfxSG+YZf+x6BUIeCyIf4DYrOr2f8BuNzs
Zw==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak-firstPeak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.510580272558716*^9, 3.510580357481205*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQeQFUW3vrLLLoJhCT88ARWVZXUXXXgqFqs+fCVmxZwDIiigJHPkBxFB
BRRDmQUXEEOZM5YgBpJPS0stKBOlgCClYAIx0m9O3+nZmb7n6z59d5///6qc
qg137kz36dOnTz7dRw24ZMi5wwdcMnTggC6HXDRg1JChAy/ucvDIi6JbJVvk
clsMyeVy67rk6H8V/Rv/0tdQ+hV/iP9/Tv8pVS+++KIqLy9XV111lfrpp5+e
yX/7vP5Totq3b68++eQT/cn6qkOHDurTTz9Nf/WA/lOpli1bpo488kg1YcIE
df3116tRo0ap3377Ta1atUrtvvvuatiwYeqmm25Sbdu2VU8++aSaN2+eatOm
jbrwwgvVN998o84880xVVVWl3nnnHfXSSy+pVq1aqWuuuUaDT90ec8wxasqU
Keqkk07Sz9D1xBNPqGbNmqmpU6fqz6NHj1Z77723GjhwoLrrrrsigAm2HTJ9
bdq0Sf9t166deu211/R7Y8aM0X3T30svvVTtuOOO6s033xTD+Pvvv6v9999f
fz958mR18sknq88//7yZ7n5LGyzdJXXdunVrNWLECLV69ercVWlstlL33nuv
7sFcAwYMUPfcc4+69dZb1cEHH6zvPfXUU6pXr165fDfNVXV1tVq0aJH+bvbs
2eroo4+Ov2ujdthhBz1DBpvvvvuu/p9G2bVrV7V582b9uWXLlnqkCxYsUNtu
u6367rvvkr7WrVtXwnS1cOFCVVtbm4BB5GOav/zyy9Vxxx0XBCIhk4j466+/
1s89+uijqm/fvvp/AJb+P2776iwi33vvPfXnn3/qJ2iQhxxyiLr22ms1hHvs
sYemZkLCvvvum0BZU1OTQPnwww+noNxGk0YakfFqUD///LOG+quvvtKfiTQI
kbfccos66KCDypmm6W8acTSwNWvW6O9mzJihjj/+eAFIrRKQDOKIwumiNdy8
eXM97BiMqCWlF3KqPUN602NqJczQYiNwYjagfvjhB/XII4+oCy64AGKK5rNf
v36Q5ExbGzdu1GBGCySDKSLtXXfdVU2cOFEzEJqp999/vyTVFZEaR3JpzM2c
ORNiDoFoMEeTSNfHH3+sP9N9AJZ+LobJIjkit7POOkttvfXWGmFffvll0urp
p5+u/3/11VeJY8SQ/EMTb319vf6OuFmPHj10OwTRlltumZAVLa6nn35a///C
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
\
\>"]]
}, Open  ]],

Cell["For comparison, here is the raw data", "Text",
 CellChangeTimes->{{3.5105805850417013`*^9, 3.510580600328252*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105796208945827`*^9, 3.510579622942609*^9}, {
  3.510579689431654*^9, 3.5105797598585873`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJxN2Xk8lH3UP/AZywzZxjpjyYxBZN9liStpuWUrlZKIxtJNRWVpQ5REhAqV
tWhRSNudJbKVUPaisoXInjX77/m9nq7zffqjXu/X55zzPS6ua0Yj43p8lxsb
gUDY9z9//f9///fPhOnVTAUVBZY0hltEv3cpLIYApnvq9F6PWzLFTaMl5HUr
MCF3PF3mkHK7qxS3j/CPF0VjEpAf1csf1XEWBf+wbU7LfUQDqx5PfhF5kQp+
x4x15PLjBo/pqDqXxw3B/L1XRIxa9zEg/+B+UGbQlgP8IiLeRKuDDXwhUMU8
8l9+MPFwzxtLEdTPotO4l3Qkwf3PZvocqgXA5vc7T+V4C4Mtkq7H2t8Z/Hs9
CNiA0tsTepYyGG6iqHGyC3ke8l9nLPTcfNkg/30mvxw7IguOYG2XFo8fgXpn
t5SPpW4MyD3b41gGyRTwanvwjoRHVLAj6yR1apIGbnuNWR19vwrzfpc8DdmC
9YJdTb0KCu3R/Ck5pSFx2xXIiZePHuTMIUPOijNU9lkggRe9x7opfqh/o0ty
3qAhOp++Q0a0fyuq/9ax5cLRW2j/l87z7GyN/X/P48Jcy4p/NOXTMdwz0rLr
DzEJYH7VIsurZStQn27+vHL7ISbkBNPNOgka7pBP5dH2V5+Wgvz7vaaqXi0R
MEu2YKUZfv64MNWEg3HrVZE5m9e6k0pI4DFismGJRXspbpM3XtZCcgzI1Q0V
1Ipd2MDDoo6NZ4fZwXEzMh7f7/GC6zh4/pFRRv3+3ysW1iVKgM/xkCIKklH9
xHr+0KTLQuC0gbbUNDp+/SjY0yB2/3+c8OtBwRzD/AJazSYhb1IMVg6Z44Dc
eFfSBqaNHNjwvQX3A54/UF9HWr15XhrNC2yU1uzewwNe0WO5m+eJgXVW6oK0
D4mD2TfxqyoSZtD5okMXeF8jZ17Q4Q3NZkB9umd3+TvFBcj/HNrgO9a4BnJ3
qkeWvT0b+ICLhlL+U9S/9OJL8ScdtA/v0dRrZWVEcAPZj27twQ92WBkROVOH
378i2F4vw4FgCn7/imC0ip0UkYo5yDcbz1tO27JBnuB/0/TqWVlwWKTwWV75
fqgfx8Ry3cwYkKuuEDeQ/6OAK3pUcw+yqODXo8y1IVE0sPtyh2loOAH89Wc1
3/q3HTCf26nWtfcOmt+1afPEhCqqX2Piqrj1JRm83WLp+kYpZO8YtYmiE6j/
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
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.5105805785939074`*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXXeQlcWyP+6yC4IBVsQrQUBlF0mLjwLroZRUXVAxgAkVDIiAgiLBZ0CC
eIkmFEMJKsFVVLSQoGUsRZRH8D4sfcqDQgrLgKkUlSQY530955tvvzOnfzM9
Z1fv/cOvasOZM19PT09Pd093z8xZg68fPuzawdePGDK41anXDR4zfMSQ/2p1
yujroqLiAzKZA4ZnMpnvWmXofxX9G//Szwj6FX+I/39O/6mjXnzxRVW3bl01
fvx4tXv37mxx5nn9p1g1adJEffjhh/qT9dURRxyhtm7dmv5qnv7TRm3evFmd
eeaZasaMGWr69OlqzJgx6ueff1bbt29XHTt2VCNHjlR33HGHOuyww9TSpUvV
ypUrVVlZmRo7dqz65ptv1KWXXqoqKirUhg0b1EsvvaQaNGigJk6cqNGnZs8+
+2w1a9YsdcEFF+g69Dz77LOqqKhIzZ49W3+eNGmS6tq1qxoyZIiaM2dOhDDh
dlROW/v27dN/GzdurN544w393uTJk3Xb9PeGG25QLVu2VKtXrxbj+Msvv6ge
PXro7++66y514YUXqm3bthXp5g+00dJNUtONGjVSo0aNUl988UVmQpqaDdTD
Dz+sWzDP4MGD1UMPPaTuvfdedcopp+iyZcuWqW7dumWyzZSodu3aqXXr1unv
nnzySdWvX7/4uzJ11FFH6REy1HznnXf0/9TLY489Vv3+++/6c/369XVP16xZ
ow499FD1/fffJ23t2LGjmGlq7dq1qrKyMkGD2MeAv+mmm9S5554bhCIRk5j4
q6++0vWefvpp1atXL/0/QEv/H8OemEvId999V/3222+6BnXy1FNPVf/4xz80
hp06ddLcTEQ48cQTEyzbt2+fYPnUU0+lsDxEs0aakPFsUD/++KPG+vPPP9ef
iTWIkPfcc4/q3bt3XQY0/U0Tjjr25Zdf6u8ee+wxdd555wlQapCgZAhHHE4P
zeGSkhLd7RiNCJLSEzkFz7DegphbiTI02QidWAyonTt3qsWLF6trrrkGUorG
s2/fvpDlDKy9e/dqNKMJkkMpYu22bduqmTNnagFCI/Xee+8Vp5oiVuNYLk25
xx9/HFIOoWgoR4NIz5YtW/RnKgdo6XoxThbLEbtddtll6uCDD9YE++STTxKo
F198sf7/tddeI4kRY3K4Zt6qqir9HUmzzp07aziE0YEHHpiwFU2u5cuX6/9f
eOEF1bBhQ41lmpDE8h06dIhgRyMfjTVJ3A8++EC3lJ6I8+fP1+/RBKvGpUQd
csghgA/LRHgaar7//vu6Hskt0gD0xLhlUaubRk2DpgGiGfXrr79mxqep2lyt
WrVKNW3alISlrk66hVr+6aef1PDhw9W0adPUOeeco+bN02/oSX3MMceou+++
W8vvVq1a6e9IP5100knqiiuu0PVIyh555JFa4l577bWqvLycWD3b4boJUemh
SUTqYfTo0aQ6E/Xy1ltvqdatW6u5c+eq66+/XrVp00arOHpWrFihiouLNUH3
7Nmj1VdE0CAUDUEffPBBdeWVV2oUI/2RRbG+jVYC+uijj1Z33nmnIXIOPUvV
+vXrVc+ePZV5SG9FHf2b/ro43e/MoTFj/PDDDzQyujqRPpLCEbtn66eET+b2
3JZI/tDMoRGirp122mlECtOSUTn0qWVcRoNrQXsl/ur555/XyvS7777LtIrL
SDR16dJF7d+/31TXSDIm0J/5f4X+U0eTlsaXlHjEF5UxOTdu3KilCdGEvlq4
cGGmY/wKzfFI0Oqf6JUiHlK7mAOs2hoHBvpxunoDbYqRyCSpTD80Al9//XXC
BqkWMr53uE60jTv49ttvqz59+mizb9CgQTRMGdCT7FTKlMcss2nTJj2jiHVI
vxMLR3qjU/z1okWL1JIlSzTCkf2qmfWzzz7rGJODJsGECRMS1gbQ2oHqALrp
1UcffaQFhXkiOyXqVdRG9B3TSkyNg7j3NGaguYr4tWHDhml7nR4iONntEe+j
ThXlEpK0V//+/ZNGyXqNJOl/6K+LVbNmzbQqok8d6HcRUaLI/XK7pGIpA6Zt
XPbKK69oDUGC3gPwOOYVDnS2U/USY5UekkN16tTRyiYGXxS/GkPXnw7IJQvZ
paQ0zEMTJxoHw18kqI2tQYDr1atHw9Uxj0IATru8igBiu/hrGuARI0ZouUdP
DNf0JAarP2WJVT/vFWcLJerVV1/VCoHUZQw9w4EPIVSJZkSawVOmTNGLnqiV
TKdCqcSD6xB/R4uooUOHpsnDdqBdzCTp+gzcLBnranFJyon07ccff+wFb9Hn
vvvu4zi6U/wmaUVChD51zqMLeNmmSy6Y9nH/aNypX/SQCUVygSZDDJSbBBWe
V+NmzOCS3UbmCj0x1IxgbpFBTYKJIKYEU2X8JlnE8ZPJluVLYACiXQwiVT1B
KA02W+8g9cQTT+glOT1kspOxTLIDgG8bkwe9Rk/UTPsYOhmO999/vy5+7rnn
EhMXQI8Fs7EJyJVBLhJiy2gV2zkuJguXXqCf7t27d4x7R0s+WoREvY6tzjwI
7RxVLajHxQNMRju9feutt6rzzz+flk6JfragS16xWjH6kmw74nJaQNG6MjLg
UCuxFTAr7gpRcNeuXfrT8UxZdkaKTLFjspwRPb3p1wGp0mIqyLZcXO0908Ih
v6yesF5N3v0z2virb/+6vmV9MFnms776iw3/6tuf1be/2PBf/u6/O37/hmx4
vLCscw3e5cocaM6PkSUT8Z9vf6Y2/M/2zGO+6nXU2+s/VSf3eEj/RK9V+d9Y
t/aTwDcIpbVrPlHr131K/6ffqH7h7xjOQUzXBjJlm3wg8ro7gC/+Pz8giwoD
+OLOYYNigFsEG8AXd+aR59ocFTysAPi1YaM0jSmr6+6NhYe3wTwUp/LF3flm
0/A1eDDAjZie9GbKKvjXK5mqNwczQiO+a7344nIeSCVfm5tQzTCGrfl+9uKL
wfSoy7TZnCk7nke5qR89q++9+OJyps3OfNW6PCrN+GLA1A7E73dzrwWoGV8M
cI+bNS9Zzu86Dmws+GAuNeOL+2abzbYOveqcmm3NjMtovpF+TNUBuQ0Dvy9u
GGjH3EZa8FVLmarHM2WcXKmbizdwXBZnUc3kOhMkL8nmCieyhkFs83ikOQ+1
1M3IFhUb8bUb8sWluSQAjk2OBD3hyIjUK5BPpq8WCTgJB5QimN+N+NoN+WKL
LMAziMmS1y9A/mZMv8pcRMyDUM7XbuNi0EScWV48Tpz15Jvl5qoZEEraqVr4
jlr02LvpAZHxKZDDHKHq8RDaMFU5bRWLDE6j9OR7Usr3BBSbflMv/IzYjwcC
mLwNXxsUl+KednXQFXST5QQonQhhU/z2etYm5GR8cx4qmARtXKg5+g3JDfoI
BHOYBALzGnCPYB6U8VWBCEgTRdOkiZz8gBs5YVDGlAHWB5LA1VWBNOIQMN1i
FwMsnzRh2BhY4aYbltAAw96IB8z1BJgF2AzKgwoIDwQXwBjIM060OhZBhqBV
CzckUCJKgTVCQzeGYIYR9VOwQTfBxCvlgXAjjstEyzZTlVUQ/nGNpClQ/o61
Eudx4PCIgDtlYUBP4Iyw2gOKBJOD01qiwSh1d5idklJLFTByKQM7aZJHWqZ+
OfIAKdkQNhbiK/L0WyZiak4Oj0iTeYEAdp4RkDVpgABhBESXzLgKYxEngjUn
dgD3hriHsU7/I6nklynchDMWsyX/PHgBi3nNf7NiEXB0GDOG2LU1XxQUa8lP
Uv+pJ95D61onhBBPr8ea+eMIJZUfwJgBuj1MznKyvR4PGKywPdgB1gYEeawq
R+hxGt8HxGk9AicI6JJs/oXVBkttUBv4+MHQG0wWLtjAUZGtnbegy6MG8EA7
GQrWtkw6sAAHsEFIAWjMhqkmF8zboL+O/gc8laaGxTztmTlyNj+MYO08kGkz
GQFeVTkGi0UvDxXjGBJ4uS4OmtmFEjAPlX58s84Zkov4UB6wgOEBhrTXZca0
N9TtM9+khjgHNOdSLufxAPJ8CN9vpwPeibUlNT2eIRnLOgUS75Jn2ceJuCWo
gJcuLPIGIrQOX0168KdNWalmTl9FggK7VHh1GaBZrarjXP3ONYbKU92AXjiP
xSSYWAE2PmCrqXxXTW1W0XMGs1OdyyRTYWa+zNx0+mz9jsUTmbKKuIzY8bYZ
q9Sdt7/lHI8F81ltzxqRIcYRkKKFGcAyuxg4rwtYcbJMKnLq4kSJOmrG9JVJ
1WhowpwUzqV6oHdFFNH0eDtlC5uASGOYiwLIDTChPMJn6pTXuYGRMWOYl1uw
wJSFZLrztcPWPM7QiMip6aoqm+OmfySwptz6upoe6dDo/zC3VwDGteMTOttF
DlH80eXRCXEBiiAEuNJOLACHJGUBbPvlUhbC/CmcXOXUX2HCzPK9e5wSYAUv
q+3MP8u11pztJSQH+4Q5khtVbQkHEIHA60uRPAdyqzpalmN3eNwg1sK/obsj
Ai4v4yFI3bFGpVuGKJgk8YgZZZjet6zzxOvQKDVgmgGeGo/LAoRhZZqiM1Oc
cg5ZA+G0ggP6IrLOXFWBmckG0POKDataC8o4oGlWbakd1BkuZ8kTuQKcDehs
DW2A/Ep671+TcbPZuR4NzVwBMc0aRUwKi0KBwL9VLCWcIZLlHHSEOlvEX02q
3mbO7ldxmiBh4c+AcDuvd9g8tNyqIBkuYGmDtXCATecJA4NgaNgatNq5t0pQ
G2ACYv8gJwFMHyC92NqJmQA28QdYZsBy8VATaEjQNau2Z1wB7R9dwMpOIFJl
3XFmj4gkqKeLwMIJmfBAnAHhx6eRsRASJgJHHWBbU54sIzbEIjU9H/SS5bSF
vIMLJNmmeefxqqS2FR0HthMweT0hYsvqCDap/IZtSqQAAQRixiyQmBv4wx2w
YRRg4kl9Yp5A+Lq11cXr1yESlPK1C8iRsgA7fQEim42zz5x+mDyLxKOlZM5r
z5SRqVH3locCMsFkAfMwX15hSj3MQJV55mopyVM27gXwOkCXy7wJU96y9HXn
vprgXMMwY1s2DQpJpAk1SYFkCTPQgCVWK7wuTnYThfQ8xo/M5ceFRQvPHpRl
3YMcmLCIh9NCq4kDvrAsM5AlJEsPcI1u1aOSzNX02OTsBpfl7Lsc34CPrOQO
Tzp5iLxyej2Z3CNBXzz7HKfxAa9w3VyjWJjJ4AFpeyF6Q5pAC7Z4SjEGKSbA
AHQEzT1LbDZXhfdAW/MwbAkCBB/XHlincQlhngWw2FnlSDcQbUXzZDJZswsn
7Ih8t4AVK9wTUbAIwIvmgp3mTkOhdjak1SyjPSTrVTTNPWECwVrb5SsPW3OE
LXlr5BR3b793b5RjvVQAPgizBESFAFFYr5hod4YT4z9gGMGcCrNZwRqxVrKj
am1dbljE8ol54D/Ke7lgl2qB60GYIYwutTKewEwC7kMQ7Q1b9ljFjs2ZnGzH
zVaPZ46j1LM4njGVNThBNJnNDc9b+QDTzXnmRZCfxSJIswQN7xbd7ilq52yO
AEjJvLKcRzsivUevsGnsMA7oszIM0dmRE2VIAnd9IaTIba8zZvGAtEcnn0Dv
HWtLhrkXeexC8i1gZDDE4uB9eLIFj4d2IU5of+K8wK8HVm9gRgBSy1ZS3lCE
JCvBk70KgIQtnwXyz7MmBlOAtYf8gtVtjgI/A1iHh53b4Jmkgt77WR4AsRbt
5TzeZtkDFi0yT7kzNBzumxAtvIEKLmzzPFjUWxLXkJB1T0hNZA+j8NFQ154g
i9GBN/Ru1ziLpqbH6yO37Q3ilnIexaByiptYLC/zXoG0wnGc4WJws4ZhKAMZ
aLg2TIPmVECZsMOJ3FD0W+I5bYjr/rVmkALiYyjfEhAIbXgEzEyRBY88Hmo+
Y9J1zqeFzaigCdqGb7acB+I5kxCIbIFb0LG3rDWP4agU8JSNUcm3GaCUQWze
5SiRb+3izOYyHmUcUBH5Q02EzBKYwIMbpucFbnjZpkSAZMBZOAaCpYw95oxM
jcbdNHxCFxXR4ZF0ieyePXsCck2BFQpwr3mA3pVfb8l6zyESrLTImCt/3nzz
zaTrcZqSuZNIfzLjeMYZZ+hbA7OfMNnAgZMWEoZsIDko7HwH2RaLAQxBG+XS
gq6ypTtHBw0aFH3K/qbP8aVE8RWO2cNp6aokuiuSrps866yz6PpKF1nYIF/Q
Jh2WsEF5wFbxOB61hmmalOh7kunSIfqh6wnp/tsi+hS1bS4UppqHxPXpukJz
J2rMM1m+Sm3ngKcWyCROYSm3VrFr0z0vKg1F6Bzm9PPAAw8kHGTuwq7mljrq
5ptv1tf1xtRwbZJgza1cI4hb9Bv1IRNZzrNQcwH35intFDgJnegeWXPpK90d
PGXKlEzj+E264ZYubHXQxDgHLdMI5HUbY0cmfoBP2ZWJwx59kEfEXrkkoCPK
6d5aunC4RYsW1O3M4XEj5kLfZIKA/oNQNqtwRIc8cdoGcFCY/4ZbzRiVZVE6
plMsMfVVi6+//jrd3JmEsukePboY2Ucfy+QCHlMjRdnEe1Hgyxk/ETkACnGt
+KmJJ3pM5JL4W7o1mmQX3XS8Zs2apgxNu/KouLbDWOwJfK6esInMevLsnQS1
gUedBZJL7XKmLPavZhmyVMuwDh066LsCI82od/lOnjz5SIa25hxrsPUD+MqB
LxRwtyWNPGe/CIIdHh8cnyphiEO3eNMtCWQ60PP999+rbt26uYhjcRMIy3gY
wZI1ad+YXzU4nSRhnrTEniY7kQgxbdq0xFKgFYjp/RH0WxMkfdh53hY66PUD
fmBBCKGFC3+RJHf5ftiwZ8Ie48aN04f308XX9CxbtkzNmTOHYw/uIg3j9pHR
BGgyELgDtcMOEwfr8ZgKRirTrjPaNETPjh07OKkMbvPg3I9mvso0jycWKYsV
e/xJrplRqi9S3rJli+7nhg0btH7avn075gGg5ETulEq+A679QjIHXNgC3CLB
VVddpS655BK1c+dOvQClBVf0lyOBy/PELm/ySAB8gp5jUyzYF+V2IJJqGj26
M3fr1q36/5EjR+IO5LUDrlcCzOy8SyiXOP1yMaWLc+kadFq7r169WkucO+64
w4Wp1YjzKjN+MQmWHoLk0ma52D/yyCOqR48e+ioc+olUqWrcuLELe4GRM5op
8wQKBAsHoIJiT/iBMSDyxhmUq3WgU9yFuvkB/8uURoxudpmir6fOjkQW+yVL
luRiLxNYhfn2rdoD+drVCJO5UVZWRkfNRKqmQYMGURkdO1NUlDVA/uZA2AI6
ii8OkKajctAin0D0E1lC9LtEy/0uXbroUyQi2U/rkwzH1P8rnzndc2fOM888
o66++mq1bds2baWfcMIJSMtwIvatIB7nltflufiQ3+xX2jkRPXSN0cSJE1Vl
ZWWwxMxtZFgQbwPrpE0a01xPsLFcb7nlFiffe0Sn1eBcHmtgPsToFXD5pAVo
LkNAYLam29RNcmfXgm0yc/lOu4kfcCDtJvfgyqnHhZGBjcnNcM9pt0APpf0J
jughlzeQrOv8KVEeK1eQPn9zXNVauoefzivN4gJOR+D7BMsST9q0BcTlD2dX
5eLYaNhmImnKpSdFnk2W5YkMXCxgSQjygS0gwPwGaTo5J2GVqNtvv13deOON
eoF83XXXkYpwhtzEqYKhG1XDdlkInOkBgxa87ycUXdan5Oc71y46QUTF4VM0
x4ls3LhR2/ZkK9Fz8sknqxUrVhRwLpLMf1rYPgqQFxp2pEJYkmHYFqGw/R9s
k6JMkYBEczA5wQRy5hCEbF1LXyhKJ5OY56KLLlK33XabZqyc6CygP6tI5NvX
wk4ICNthAgZbsDsZ6wwnggGsUZNtVUC9gChL2MYazzGfLDUSXqJFAEUvd+/e
rf36TZs2VS+//LLrfE2gOWtl8xwXmRKwq4erQA456AhIoA84VQQwICBF2MEz
rG6Fx0OBExyAhBKcuGmfk1Sqk0no1Cz6e/rpp5MjToFTs1wbVWSbkMEBkh7C
C05pC9uM4zkmAsgl2eIuYBMMHv+AaebZzw74TZacCI6RcMcU4tCJ9sv16dMn
ZjPETZBQwLAJ2TAGqQ2C5WE7Wxx4e7JlAXae4HyYuQimEqBTrWzeAcwDZJhA
nTvVQiLAdu3apbP/SAXSM3DgQPXtt9/W3E4P25PsISXIKwgxg0M31bC1gzJk
wPQJQ5o9QTDgXISARWbB1mC89DMrfwpOUTxw8uTJ2lL3rfxlw1XAGseq6jyw
KHQfkcx7Bc4j8eT8hq0Fw3bEhZ8LAggADvyxaoflL4HArsc1GDbdQ9ZeIV5R
E2CydERvV7NBO+4AZXnx7kLcegNExkA2syPEm7/vKV2JC9FywAqKxbq268gi
sJV8cUGh1tD9NgHJIFbVSr6YE/1n8z3xoiw9a8OTq2HVdsZd84Bc60fS8i2Y
gJllyIFrAQXwrWlt4Fs63sC3rDYBfIsQIOAHdgk64I9wMbBo40AaeNDsBoMJ
8owcfajFXAouJOZss1byHiwMBzKoODbHFpbRwKYh8QMul6lr+TZBgm24lJzP
YAmuYwJs5AUutVz6+gFZGFXZE4WT+XfzrfVmqg7AGAQkVIznq/ZlqgqO3ZCl
Q3Abw1zXCwmmKmAxh7kTJlmBuRO2BRLMd3d+NYd7TwcFWDvQH94DtjVYLoD0
RLCEsnwKlA97+eWX6z1jlLFEmUHAKcrpEpDqwEW/gQTzpL+DFY3ARAfpkJW5
/Z83b552BtND8c+WLVuqtWvX4v5Lc7SBN951fEeIV84f5AVOgSG5/aeFPzkA
zNO9e3e1ePFiqVMcoO5c8Ijc6lzGDmAVz4FyAo/PP/lDXoB17sE4nwdZ68EM
AG3gpLiWuRiGdu59+umn+TFS0Gsr4ujcKAOnE4g7sNn7PDEsp4FBAxw3GIad
NSbVpgpnChnWoy3TtCGUEperqqpcm2BZDzIfRGUTsuQJI2CaAC89Sw5R3hZw
grsOXU+PVOogQZBh4oOQ+I14cWGdQ+i4L8BME8rzb968udq/f7/ey9u4cWO1
b98+l68S+HQttgERskKiwnmTMTSfSHCYB5DqYRkF4P5uT+gEpFtxIToA2Dqs
koMA+pdc0pN75iIYJcvGifS5at9eu9Q0/5SWlqoffvihgLjJjKkr03wLxs1z
1mpY7FeW5eOJ/YuzFUDYUc7CMlEWFo1LYPMXToHALwjpgZwUwdQzaEyflsME
OcxWotPrafvlpEmTtEE9e/bsTPAJDHmM7pa77BGwaTnnjwgDbgCJFqA2NCPY
6K/MYBZI3GlTVqqZ01el72ZAVEWnH1fDTt1QJQOS5KQ8mjMMngDRAu7wWGds
B9xCESbDHdk37Lmp7MBZJ0435AngkQggDwQEVGSJKkBmeiJ7gA8tznKtBNgu
8nobCH92AJyRoTBBK0h0Bpl/nnQUMKMAQ7H2KEwPsa76BKsS7FSB3BQmYkBf
gIXC0sk5kgLV40l9kln/Hn4PSOcB5mSYVgBAwNyVZdACcSE4kU4PTVceh7Cs
A5AtCfoHDpcFkgV4Jz3zCExdkFvJzhnxHTBg3wcA7jlJBXg0AS9YAht4EMMO
dw7f19bE3SUQjZH5zzzMAk6MkvnFPDvn0mPs2DkHDtgHmRW9+NpgLNzHxwWk
xXBH1bp8WzICjuOxdqB3i5tVrOJZcTF7xKgTvixFZxbfrAP+CIZmIDEGMPQs
HpU8wYx3+fGbYq0+vOli+Vo8kZTNAGB3pgdf5ibK3wcXHHKhRuA4DM9+8KRm
skkXXGaRNCmVy7jhHBKCIL1sRwzI43Cm84gif1yUFbi8gYQXZFQBi5GViDBl
CSgtWfwVHLkGhtfRpft5bFwnm8r2JXlS6632HBi+xqBissEKD3mkTDYBV6UT
AzR2tzGVQCzWtZQKyfOsaToAF1L3nAwK0JNt6gu7rTE8RYAzlJ184d8VzGk/
EIwF2TfOSy4DswmCDeGgLYqy/a9gyMHKA2QSAVpV+rtZIwb0pI3L5t5UOGtC
jGPPkXMyfRKw9WEqT6j4KNHD42+XL1+eHEO1dOnSoriYjrsdO3as3roQFXN+
dnDCKBBKHHdyyRWcxWEkFGuwxOSur8aPH68mTJhg8FObNm3SB8RT8smOHTv0
AYV79+7lglODglgt7AxzsFjkck8bpTpURH3JjkapPkuvf//+SdcqKiroPJ/q
VIbLglgOyNmCVof5yFJ+wPDhwxNkibMWLVrE0Z07fgekaAMxWdCSsRZwziOH
4hGBLdIOfjSksr0W+svGKfjMHNi8ebOeAxQ788wBsDEi3Yo575qOB6RjcqOW
4j1NddSsWbPUmDFjtMBYtmwZJzD0b7O1M18OJMqckKUdedkuATicOgd2ssOn
lAIFzWu5hyoHmmzLX96JVDkwrMr/6Wn673/O95kD/h8y4kk1\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Plot sorted by position of first peak in list (to match diagram from paper)\
\>", "Subsection",
 CellChangeTimes->{{3.510581455332821*^9, 3.5105815060490837`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rankOrdering", "[", 
   RowBox[{"l_List", ",", "numElts_Integer", ",", "predicate_Function"}], 
   "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
    RowBox[{"Sort", "[", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Ordering", "[", 
         RowBox[{"l", ",", "numElts", ",", "predicate"}], "]"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "pos", "]"}], "]"}]}], "}"}], "]"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510577272257135*^9, 3.510577285966035*^9}, {
  3.510577553466466*^9, 3.5105776656095123`*^9}, {3.5105776993556547`*^9, 
  3.510577748672923*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rankPos", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rank", "=", 
       RowBox[{"rankOrdering", "[", 
        RowBox[{"pos", ",", 
         RowBox[{"Length", "[", "pos", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "<", 
           RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{"pos", ",", "rank"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.510576119876075*^9, {3.5105765073072147`*^9, 3.5105765186621037`*^9}, {
   3.510576700169857*^9, 3.5105767093093452`*^9}, {3.510577673898406*^9, 
   3.510577675733574*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRank", "=", "\t", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"sample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"r", "=", 
              RowBox[{"sample", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"data", "=", 
              RowBox[{"sample", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"#", ",", "r"}], "}"}], "&"}], ",", "data"}], "]"}]}], 
          "]"}]}], "]"}], ",", "rankPos"}], "]"}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.510575395813332*^9, 3.510575494879712*^9}, {
  3.510575581080715*^9, 3.510575828971678*^9}, {3.510575972901553*^9, 
  3.510575976030925*^9}, {3.5105761069820547`*^9, 3.510576129103134*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"firstAgainstRank", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "rankPos"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510576161267097*^9, 3.5105761679856243`*^9}, {
  3.5105761988181953`*^9, 3.510576199449526*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"allAgainstRank", ",", "firstAgainstRank"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green"}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Peak position\>\"", ",", 
      "\"\<Sample rank sorted by first generated peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105758443456917`*^9, 3.5105758506113358`*^9}, {
  3.51057603692631*^9, 3.510576089547821*^9}, {3.510576133305142*^9, 
  3.5105761423696547`*^9}, {3.510576186313545*^9, 3.510576227300477*^9}, {
  3.5105763999171543`*^9, 3.510576411493555*^9}, {3.510578352156331*^9, 
  3.510578436891608*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ3bNEXUc9Rc6BAQIcnmsdKDLzUYTyLRySDu55dGmj
PJQv4bChjrnMM04JyrdxCMu2el4vAFNv4qB8Ot+PbaEClK/l0DrfbkLxdxjf
2MH4tk+92SIYX8fhy5FfMey6MP1mDsY/xFK71sDcw+Egk77uisEemHpDB43s
2KiNm2DqrRyKt9XxX1wLkzdw2FRw3epgJMy9Ig4Trf6s2rFUFsr/YH+o4LdN
gC1Mv7lDzZ3PjLoRML6lw5bK6f7ay2Hm6Tmcfq13c/4rmHkyDu98GCzVv8Hc
J+Cgu9bkwZvHMPVGDnLn7C/nBcL4Kg78M6de3MYE4ys4vJmds+KyGMw+UwdX
p86t7Jtg4WnnkF8SvD64F6Zew2GJwVuhX50weVuHT6fVfSeyweSVHPJ2aRZ/
OQszz9ph7dGABq56mLyaAwAKyXSF
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.51057614348634*^9, {3.510576202219102*^9, 3.510576227952499*^9}, {
   3.5105764021485987`*^9, 3.510576412327733*^9}, 3.510576522840292*^9, 
   3.510576730614452*^9, 3.5105770905388603`*^9, 3.510577849578615*^9, 
   3.510578012777624*^9, 3.510578289492696*^9, 3.5105784395042467`*^9, 
   3.5105784776594477`*^9, 3.510578569157852*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQmQXUW5HufOlpnsCZlMEmaSEBIeCUnMhiIqVrGIoqIFJEWAiKgQNxRx
CQJhCSiLoiIiokVZAYK4QkISwLghKBCihRauQSqCSxkUosEN0u98fbr7dp/z
/X363hue1nvvpObm3j69/336+7f+z2tOPfuMt7zz1LNXnnbq1KPOOvXdZ6w8
7b1TjzzzrCyp9oK2thec0dbW9szUNnxX2Vfzoa+V+DA/zPdv6v861MaNG1V3
d7c655xz1F/+8peb87vf0v/V1IQJE9QvfvEL/atwq7+/X/3yl7/0b601dX7n
O99Rc+fOVYcffrj61re+1aGTx6jzzjtPLV68WJ122mnq2muv1b15/PHH1UEH
HaTe8Y53qMsvv1yNGzdOffWrX1Vf+cpXVHt7u/r4xz+u86C6iy66KGsXdXXq
1o899lj10Y9+VJ1wwglq69atbe363jRdzxlnnKEuueQStXTpUvXnP/9Z3Xff
fer4449XV111lXrrW9+q/vrXv6pvfvObur2zzjpLPfvss/r/l770pWrTpk2l
e6xO5Bk7dqx6z3veo/72t7/p/8ePH48ht12Yz8iNZrJOOeUU9eEPf9j8wmef
uvfee9WoUaN0Vbi+9rWvqSeffFJ94hOfUEceeaRLW7JkiRlah+rt7dXTcfDB
B2M685nt17Px0EMP6SL33HOPmjFjhtqzZ4968MEH1aRJk9S//vUvfe9d73qX
eu9736s+9alPqT/84Q86DbNx882agmr27Nnq+9//vv6+//7747tpeqS7J9WJ
68ADD3TlMePz5s27KJyIFStWFCaipmlyxBFHeGmdejSgOVYYRvSSl7zETUJf
X59auXKlnqTnnnsun4Qef0GqZ555BstfPfHEE3oJvfKVr8xLj1A33HCDevGL
X6yz/O53v8Oq0tOaraDSHOy3337qxz/+sWvZ3guq7HFVFovj/+IUjNFTgK5f
c801unHQExfofsABB+jpwTI76qij1I9+9CN97+mnn1a33HKLevvb3+5NRU1P
xcKFC9X27duzSavPg3lm1e7du/U8ZPfDTne5TmPKRo8erZ+OrMPthgB7YRqw
AqSV0KOn4dJLL9U5fvCDH6gpU6aoXbt2qR/+8Idqzpw57VjAbd36IczaVj//
+c/V8uXLdfZvfOMbeFCDBQHyYVFkD2u+IGbpzevrX/+6LnLHHXfoUWLVYgVP
njy5tIJvvfVWdfrpp+u0DRs2qL///e96AqdNm1acCje59p5Up30qPv/5z+vv
X/ziF3XXyZowj4W+QMMtW7bo73g83ve+96kzzzxT79K4/vGPf+jtaM2aNer1
r3+9+tznPtdmKYfZ+OMf/6i+9KUv2R24zRIdW9vAwID67Gc/q975zneqmTNn
Yl3lt6fqXQ478WWXXaaWLVumt6YMFNTb3vY2dfXVV6tXv/rV6p///KemEYi/
Y8cOPcPYBdE9VO/fw8Xq/O53v6tn7jOf+Yw6++yz9V6T7frBpHT5m6YeUK1W
Uw8//PAIb+0jWektMB/7jTfeaNPUm9/8Zm/V1vx7bR/NW1prWvr2t7+tUQiP
JR5DTGmGLCNNSWwPxZawEAAAuH71q19hO3UtefdsSxvNrfXr1+vZyqpr+1p+
axP+08vdJOg6CWQ/39815GSP05VXXqmx7NRTTwVVXmgmCUQEXmFt4g+zko16
gSkF1AZNge4Zur7QzBPI/v73v1998IMf1GCabdht80yNWMVvfOMb1apVq/QS
O/fcczENc02NWFnZZqf/strbefdyIrUdYep85JFHdDcAf0BT7B/Zgzrf3H70
0Uf1wrfX73//exRZaMiDBQ4S4Zct8pOf/AQYrGvE9fKXv1zddtttdhDZo6de
9apX6VvIMjQ0hB0vv92rn9gPfehDrkGhfyPCUWARYkO216xZs7BIX2i6eeed
d+pnDFvkAlPkAx/4gIYHPIdTp05Vr3nNa/Cc2VF88pOf1DNmLzyKH/nIR+wo
Vq9e7fY+XIcccgg2Bn27HQOwO4jQs0L/0RnsT/YCCbPnb4HpP5hObNbZXtJm
F8r999/vdklDhja79M4//3z9fGIvwv4B/mPz5s2289kOp29ja/rTn/6kN/5s
+yl3XuhWWuftGgEbi70Fv/IOdugVDDgwHbf9Br6dfPLJ+n+sEeyFGc3mm1Jo
CFsNGvjCF74wv8n+grSEJJbydlZwAbrA7WdPoe06WKSPfexjYddr6stf/rI6
+uij9S+7xMAqAKYBjCgGZjdjfMvzLPTI9NvyC3gEgJ3YfbMO6ZxAD4DTz372
s5eYyn7605/qJwZZyBN900036TnGBXYJKJ/VbJfaddddp9eGv5zAZuARwXLC
deKJJ6qdO3fa5QR+BfwLLgy1q6tLPfXUU9ITLfSvMNiLL75YHXbYYXrpAu1x
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\
\>"]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4 April 2011 Monday", "Section",
 CellChangeTimes->{{3.510916657573248*^9, 3.5109166648699417`*^9}, {
  3.5109986731897984`*^9, 3.510998673801722*^9}}],

Cell[CellGroupData[{

Cell["Implement beam search - description", "Subsection",
 CellChangeTimes->{{3.5109169160539207`*^9, 3.5109169308850327`*^9}}],

Cell["\<\
I am going to try implementing the beam search idea with the following \
limitations: # peaks is same throughout and every peak is detected every time.\
\>", "Text",
 CellChangeTimes->{{3.510916684837922*^9, 3.510916736369664*^9}}],

Cell[CellGroupData[{

Cell["Variables", "Subsubsection",
 CellChangeTimes->{{3.51091692228314*^9, 3.510916923383144*^9}}],

Cell["There will be a couple of variables:", "Text",
 CellChangeTimes->{{3.5109167492875137`*^9, 3.510916757208952*^9}}],

Cell[TextData[{
 StyleBox["initialPeakPositions",
  FontWeight->"Bold"],
 ": 2d array of the initial permutation of peaks: \
initialPeakPositions[[sample,peak]]  locations are given in ppm"
}], "Text",
 CellChangeTimes->{{3.510916971561101*^9, 3.5109170643548393`*^9}}],

Cell[TextData[{
 StyleBox["beam",
  FontWeight->"Bold"],
 ": list of candidates with their current evaluation, sorted by evaluation"
}], "Text",
 CellChangeTimes->{{3.510916761389574*^9, 3.510916781069995*^9}, {
  3.510916853373171*^9, 3.510916855989883*^9}}],

Cell[TextData[{
 StyleBox["beamSize",
  FontWeight->"Bold"],
 ": number of candidates that will be in the beam at the start of each \
iteration"
}], "Text",
 CellChangeTimes->{{3.510916805620969*^9, 3.510916842386201*^9}}],

Cell[TextData[{
 StyleBox["newCandidates",
  FontWeight->"Bold"],
 ": list of every possible candidate with one inversion different from a \
candidate in the initial beam"
}], "Text",
 CellChangeTimes->{{3.5109168271029253`*^9, 3.5109168301077547`*^9}, {
  3.5109168968693132`*^9, 3.510916906983554*^9}, {3.510916938699407*^9, 
  3.510916949349257*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Types", "Subsubsection",
 CellChangeTimes->{{3.51091707271448*^9, 3.5109170734635553`*^9}}],

Cell[TextData[{
 StyleBox["candidate",
  FontWeight->"Bold"],
 ": each candidate is a list of permutations, one permutation per sample.  \
Each candidate is a potential solution.  If it is a correct solution, when \
each permutation is applied to the appropriate sample in \
initialPeakPositions, the first entries should correspond, the second entries \
should correspond, etc."
}], "Text",
 CellChangeTimes->{{3.5109170754946747`*^9, 3.510917240902967*^9}}],

Cell[TextData[{
 StyleBox["evaluation",
  FontWeight->"Bold"],
 ": an evaluation (evaluation[numEigenvalues,percentVarianceExplained] is \
better if there are fewer eigenvalues, but if the number of eigenvalues are \
equal, it is better if there is more variance explained by those eigenvalues. \
 This should be expanded into some notion of the compactness of the \
representation."
}], "Text",
 CellChangeTimes->{{3.510923504437929*^9, 3.510923511700657*^9}, {
  3.510923548601165*^9, 3.510923615923389*^9}, {3.510933759170084*^9, 
  3.510933794098094*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subsubsection",
 CellChangeTimes->{{3.5109172744907627`*^9, 3.510917275484557*^9}}],

Cell[TextData[{
 StyleBox["evaluate[candidate, initialPositions, pctVar]",
  FontWeight->"Bold"],
 ": applies the candidate to the given positions then calculates a PCA \
choosing enough eigenvectors to account for pctVar of the variance.  The \
evaluation returned gives the number of such eigenvectors and the proportion \
of the variance explained by them"
}], "Text",
 CellChangeTimes->{{3.5109172878202753`*^9, 3.510917291289089*^9}, {
  3.510917495043461*^9, 3.51091751882613*^9}, {3.51092095895608*^9, 
  3.510920985905673*^9}, {3.5109210645410557`*^9, 3.510921113102428*^9}, {
  3.5109230911663437`*^9, 3.5109231026429977`*^9}, {3.5109231328716593`*^9, 
  3.510923133101625*^9}, {3.510923491220467*^9, 3.510923493643278*^9}, {
  3.510933807494545*^9, 3.510933846922699*^9}}],

Cell[TextData[{
 StyleBox["isBetter[evaluation1,evaluation2]",
  FontWeight->"Bold"],
 ": returns true if evaluation1 is better than evaluation 2."
}], "Text",
 CellChangeTimes->{{3.510934418284828*^9, 3.510934449121482*^9}}],

Cell[TextData[{
 StyleBox["beamCorrespondence[peakPositions, beamSize, pctVar]",
  FontWeight->"Bold"],
 ": returns a candidate that gives the best correspondence found for the \
given peak positions"
}], "Text",
 CellChangeTimes->{{3.510934486817137*^9, 3.510934531739522*^9}, {
  3.510936927382484*^9, 3.5109369486194*^9}}],

Cell[TextData[{
 StyleBox["childCandidates[candidate, sampleIndex]",
  FontWeight->"Bold"],
 ": returns a list of all candidates that can be generated by swapping \
individual peaks in the sample at sampleIndex in the given candidate"
}], "Text",
 CellChangeTimes->{{3.510934613373035*^9, 3.510934648614622*^9}, {
  3.510934728300899*^9, 3.510934745746553*^9}, {3.510934804672917*^9, 
  3.510934880724311*^9}}],

Cell[TextData[{
 StyleBox["applyCandidate[candidate, initialPositions]",
  FontWeight->"Bold"],
 ": applies the given candidate to the given list of initial positions, \
returning a permuted list of peak positions"
}], "Text",
 CellChangeTimes->{{3.510934883702364*^9, 3.5109349277406387`*^9}, {
  3.5109349610701103`*^9, 3.510934969089522*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "Subsection",
 CellChangeTimes->{{3.510934565942477*^9, 3.510934566278985*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"childCandidates", "[", 
   RowBox[{"candidate_List", ",", "sampleIndex_Integer"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"swaps", "=", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Sort", ",", 
              RowBox[{"Tuples", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"Length", "[", 
                  RowBox[{"candidate", "[", 
                   RowBox[{"[", "sampleIndex", "]"}], "]"}], " ", "]"}], " ", 
                 "]"}], ",", "2"}], "]"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"TODO", ":", " ", 
        RowBox[{
        "Change", " ", "swapped", " ", "and", " ", "newCandidate", " ", "to", 
         " ", "use", " ", "ReplacePart"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"swapped", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"permutation", ",", "swap"}], "}"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Which", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"i", "\[Equal]", 
              RowBox[{"swap", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", 
               RowBox[{"swap", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"i", "\[Equal]", 
              RowBox[{"swap", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", 
               RowBox[{"swap", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", "True", ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], " ", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "permutation", "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"newCandidate", "=", 
        RowBox[{"Function", "[", 
         RowBox[{"swap", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"i", "\[Equal]", "sampleIndex"}], ",", 
              RowBox[{"swapped", "[", 
               RowBox[{
                RowBox[{"candidate", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "swap"}], "]"}], ",", 
              RowBox[{"candidate", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "candidate", "]"}]}], "}"}]}], "]"}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{"newCandidate", ",", "swaps"}], "]"}]}], "\[IndentingNewLine]",
      "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510935079164504*^9, 3.510935110953186*^9}, {
   3.510935169022759*^9, 3.5109352405448227`*^9}, {3.510935341184766*^9, 
   3.510935443347604*^9}, {3.5109355588117323`*^9, 3.510935560163118*^9}, {
   3.510936227484435*^9, 3.510936244321154*^9}, {3.510936304229713*^9, 
   3.510936731209208*^9}, 3.5109369003376083`*^9, {3.510937600786128*^9, 
   3.510937618338026*^9}, {3.51093913228163*^9, 3.5109391330314713`*^9}, {
   3.510939251571103*^9, 3.510939259421826*^9}, {3.510939304029849*^9, 
   3.510939373422658*^9}, {3.510939412079321*^9, 3.5109395139321413`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isBetter", "[", 
   RowBox[{"ev1_evaluation", ",", " ", "ev2_evaluation"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{
   RowBox[{
    RowBox[{"ev1", "[", 
     RowBox[{"[", "1", "]"}], "]"}], " ", "<", " ", 
    RowBox[{"ev2", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], " ", "||", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"ev1", "[", 
       RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", 
      RowBox[{"ev2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], " ", "&&", " ", 
     RowBox[{
      RowBox[{"ev1", "[", 
       RowBox[{"[", "2", "]"}], "]"}], " ", ">", " ", 
      RowBox[{"ev2", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}], ")"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109368136687593`*^9, 3.510936881790072*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"applyCandidate", "[", 
   RowBox[{"candidate_List", ",", " ", "initialPositions_List"}], "]"}], ":=", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#2", "[", 
      RowBox[{"[", "#1", "]"}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"candidate", ",", "initialPositions"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109349321645412`*^9, 3.5109349557927923`*^9}, {
   3.510935040779944*^9, 3.510935074800559*^9}, 3.510935117617354*^9, {
   3.510938246780596*^9, 3.510938248392943*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"evaluate", "[", 
    StyleBox[
     RowBox[{
     "candidate_List", ",", " ", "initialPositions_List", ",", " ", 
      "pctVar_"}],
     FontWeight->"Bold"], 
    StyleBox["]",
     FontWeight->"Bold"]}], "/;", 
   RowBox[{"NumberQ", "[", "pctVar", "]"}]}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"permuted", "=", 
      RowBox[{"applyCandidate", "[", 
       RowBox[{"candidate", ",", "initialPositions"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"varForEig", "=", 
        RowBox[{"Normalize", "[", 
         RowBox[{
          RowBox[{"Eigenvalues", "[", 
           RowBox[{"Covariance", "[", "permuted", "]"}], "]"}], ",", 
          "Total"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"cumVar", "=", 
          RowBox[{"Accumulate", "[", "varForEig", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"satisfiesPercent", "=", 
            RowBox[{"First", "[", 
             RowBox[{"First", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"cumVar", ",", 
                RowBox[{"x_", "/;", 
                 RowBox[{"x", "\[GreaterEqual]", "pctVar"}]}]}], "]"}], "]"}],
              "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"evaluation", "[", 
           RowBox[{"satisfiesPercent", ",", 
            RowBox[{"cumVar", "[", 
             RowBox[{"[", "satisfiesPercent", "]"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109371779489098`*^9, 3.510937365725601*^9}, {
   3.5109374650909758`*^9, 3.5109374899288197`*^9}, {3.510937694676412*^9, 
   3.510937697285863*^9}, {3.510937868992094*^9, 3.510938067057177*^9}, {
   3.510938335129665*^9, 3.5109383591772614`*^9}, {3.510938397229897*^9, 
   3.510938412719974*^9}, {3.510938463432057*^9, 3.510938465472584*^9}, {
   3.510938553969694*^9, 3.510938584218618*^9}, 3.510940418013275*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"beamCorrespondence", "[", 
      RowBox[{"peakPositions_List", ",", " ", "beamSize_", ",", "pctVar_"}], 
      "]"}],
     FontWeight->"Bold"], 
    StyleBox["/;",
     FontWeight->"Bold"], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Bold"], 
     RowBox[{
      StyleBox[
       RowBox[{"NumberQ", "[", "beamSize", "]"}],
       FontWeight->"Bold"], 
      StyleBox["&&",
       FontWeight->"Bold"], 
      StyleBox[
       RowBox[{"NumberQ", "[", "pctVar", "]"}],
       FontWeight->"Bold"], 
      StyleBox["&&",
       FontWeight->"Bold"], 
      RowBox[{
       StyleBox["pctVar",
        FontWeight->"Bold"], 
       StyleBox["\[GreaterEqual]",
        FontWeight->"Bold"], "0"}], "&&", 
      RowBox[{"pctVar", "\[LessEqual]", "1"}]}], ")"}]}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"idPermutation", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"Dimensions", "[", "peakPositions", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"Length", "[", "peakPositions", "]"}], "}"}]}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"numSamples", "=", 
        RowBox[{"Length", "[", "peakPositions", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numPeaks", "=", 
        RowBox[{
         RowBox[{"Dimensions", "[", "peakPositions", "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newBeam", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"oldBeam", ",", "sampleIndexToModify"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"children", "=", 
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"childCandidates", "[", 
                    RowBox[{"#", ",", "sampleIndexToModify"}], "]"}], "&"}], 
                   ",", "oldBeam"}], "]"}], ",", "1"}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"evaluated", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"evaluate", "[", 
                    RowBox[{"#", ",", "peakPositions", ",", "pctVar"}], 
                    "]"}]}], "}"}], "&"}], ",", "children"}], "]"}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"With", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"sorted", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"First", ",", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"evaluated", ",", 
                    RowBox[{
                    RowBox[{"isBetter", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}],
                     "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Take", "[", 
                  RowBox[{"sorted", ",", "beamSize"}], "]"}]}], 
                "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"doIteration", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"beam", ",", 
             RowBox[{"Fold", "[", 
              RowBox[{"newBeam", ",", "beam", ",", 
               RowBox[{"Range", "[", "numSamples", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"FixedPoint", "[", 
           RowBox[{"doIteration", ",", " ", 
            RowBox[{"{", "idPermutation", "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJwlzU0ogwEAxvFtoQhRQ5FlY5ottRJROyCfITVhJ2xSY7UtDWXsYkRmKF9T
c1CbUb5mTFk2ymRJ0ZaE+YjLaGUHlDLv8zo8/U5Pf6ZEIeygUSiUdGIwGEgS
z3ECJVZVqwy+9+cp4fOUdRCau8PTcPRaZoAilcUI9zobTFDqqlqF8bb6dVix
1myDhZPRdpjjXH+FUZ6tb+ixjKTOE3I5p6R+2lodLHqsEUHXRowEUme8KuiR
a4chpz00AzXs+0U4y+VZ4MHEkw1+l/Hs8IKqdkC6evwIXh0bz6AuHHcOB4Jd
l1AZQfeSvdvaO3jTwn2A7s3Q2/+v7wPqe0++oLYp+Rc+SrNoC4QOFiUWmt27
CVBqWEmBy22KNBg4N5HqdrYz4JJTw4R+loQNo3yZ2ZAx5suF5ZUCPuQbxPnw
p0dTAEv5VAF8iZSS6hsPi+F+4lA1DHYJGXbCT6Oc9A+HH+T+
  "]],

Cell[CellGroupData[{

Cell["Simple bench test", "Subsubsection",
 CellChangeTimes->{{3.510938180028338*^9, 3.510938188080493*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Note", " ", "that", " ", "the", " ", "following", " ", "could", " ", "do", 
   " ", "just", " ", "one", " ", "inversion", " ", "if", " ", "it", " ", 
   "inverted", " ", "the", " ", "second", " ", "sample", " ", "first"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.51094434318824*^9, 3.510944373644581*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"beamCorrespondence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.21", ",", "1.15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.01", ",", "6.05"}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51094106058296*^9, 3.510941074660767*^9}, {
  3.510941132636059*^9, 3.510941244117814*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510941075510078*^9, 3.5109411151152773`*^9, 3.51094116613356*^9, 
   3.510941247623427*^9, 3.510943054577787*^9, 3.510943168229887*^9, 
   3.510943246974063*^9, 3.510943338654558*^9, {3.510943388841902*^9, 
   3.51094339590874*^9}, 3.510943483560804*^9, 3.51094358767413*^9, 
   3.510943633139732*^9, 3.510943736886188*^9, {3.510943805747065*^9, 
   3.510943843019068*^9}, 3.510943886271378*^9, {3.5109439168971786`*^9, 
   3.5109439351760807`*^9}, 3.510943967143024*^9, 3.510944015998839*^9, 
   3.5109440535041027`*^9, {3.510944116073001*^9, 3.5109441339027987`*^9}, 
   3.5109441835794487`*^9, 3.510944293780555*^9, 3.5109443348647833`*^9, 
   3.510944390062936*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5109435423121147`*^9, 3.5109435661233387`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5109435667860327`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"idCandidate", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Range", "[", "20", "]"}], ",", 
     RowBox[{"{", "30", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510938084880466*^9, 3.51093815136075*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"appliedIDCandidate", "=", 
   RowBox[{"applyCandidate", "[", 
    RowBox[{"idCandidate", ",", "pos"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510938155169319*^9, 3.5109381574506683`*^9}, {
   3.510938191542911*^9, 3.5109382140334873`*^9}, 3.510938258817873*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pos", "\[Equal]", "appliedIDCandidate"}]], "Input",
 CellChangeTimes->{{3.510938260261409*^9, 3.510938265519433*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5109382661818647`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"posEvaluation", "=", 
  RowBox[{"evaluate", "[", 
   RowBox[{"idCandidate", ",", "pos", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510938273746421*^9, 3.5109383103573837`*^9}, {
  3.510938615845104*^9, 3.510938618652273*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"1", ",", "0.9407089579887079`"}], "]"}]], "Output",
 CellChangeTimes->{{3.510938312343342*^9, 3.510938339767736*^9}, {
   3.510938564529332*^9, 3.5109385880722837`*^9}, 3.5109386204114103`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Note", " ", "that", " ", "this", " ", "next", " ", "one", " ", "uses", " ",
    "the", " ", "definition", " ", "of", " ", "permutedPos", " ", "from", " ",
    "the", " ", "experiment", " ", "looking", " ", "at", " ", "what", " ", 
   "happens", " ", "to", " ", "the", " ", "eigenvalues", " ", "when", " ", 
   "the", " ", "values", " ", "in", " ", "the", " ", "matrix", " ", "are", 
   " ", "swapped"}], "*)"}]], "Input",
 CellChangeTimes->{{3.5109386503049097`*^9, 3.510938689749892*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"permutedPosEvaluation", "=", 
  RowBox[{"evaluate", "[", 
   RowBox[{"idCandidate", ",", "permutedPos", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510938624247164*^9, 3.510938635837*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"2", ",", "0.9692651209991647`"}], "]"}]], "Output",
 CellChangeTimes->{3.51093863715202*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"posEvaluation", ",", "permutedPosEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938711060605*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938715729741*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"permutedPosEvaluation", ",", "posEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938736810611*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938737363707*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"posEvaluation", ",", "posEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938746413776*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938746948209*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938769713203*^9, 3.5109387876425467`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5109387886105137`*^9, 3.51093918653262*^9, 
  3.5109395241331453`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938769713203*^9, 3.5109387876425467`*^9}, {
  3.5109395398640347`*^9, 3.510939556570874*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5109387886105137`*^9, 3.51093918653262*^9, {3.5109395241331453`*^9, 
   3.510939557069087*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Code for permuted items eigenvalue test", "Subsubsection",
 CellChangeTimes->{{3.510937013193671*^9, 3.510937031129314*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanCenterSamples", "[", "samples_List", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"means", "=", 
      RowBox[{"Mean", "[", "samples", "]"}]}], "}"}], ",", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "-", "means"}], "&"}], ",", "samples"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510927974193233*^9, 3.510928039968194*^9}, {
  3.510928184508163*^9, 3.510928187352792*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"adjustedRSquareds", "::", "usage"}], "=", 
   "\"\<adjustedRSquareds[rsquareds, sampleSize] Given a list of \
\!\(\*SuperscriptBox[\(R\), \(2\)]\) values for each potential variable in a \
PCA model and the sample size from which the model was derived, uses the \
formula for adjusted \!\(\*SuperscriptBox[\(R\), \(2\)]\) from Wikipedia to \
calculate an estimate of the variance explained for the composite model that \
accounts for the size of the model.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510929575302701*^9, 3.5109296813782997`*^9}, {
  3.510929721745829*^9, 3.5109297891280127`*^9}, {3.51093003829943*^9, 
  3.5109300685869703`*^9}, {3.5109303290717583`*^9, 3.510930335248637*^9}, {
  3.51093040006092*^9, 3.510930410090098*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"adjustedRSquareds", "[", 
   RowBox[{"rsquareds_List", ",", "sampleSize_Integer"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cumRSq", "=", 
      RowBox[{"Accumulate", "[", "rsquareds", "]"}]}], "}"}], ",", 
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rsq", ",", "p"}], "}"}], ",", 
        RowBox[{"1", "-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "rsq"}], ")"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"sampleSize", "-", "1"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"sampleSize", "-", "p", "-", "1"}], ")"}]}]}], ")"}]}]}],
        "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"cumRSq", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "rsquareds", "]"}], "]"}]}], "}"}]}], "]"}]}],
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510928960200716*^9, 3.510929151871923*^9}, {
  3.510929272232872*^9, 3.5109293010433683`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
See what happens to eigenvalue list when items are permuted\
\>", "Subsection",
 CellChangeTimes->{{3.5109266429713573`*^9, 3.5109266630401077`*^9}, {
  3.510931564133325*^9, 3.510931576258519*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"permutedPos", "=", "pos"}], ";"}]], "Input",
 CellChangeTimes->{{3.510926495339295*^9, 3.510926505684331*^9}, 
   3.5109278030024223`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.510926506982745*^9, 3.5109265971626577`*^9}, {
  3.510927803596035*^9, 3.510927805145027*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.7907902733385197`", ",", "8.54243621975825`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926537496437*^9, 3.5109265986567717`*^9, 
  3.510927824509749*^9, 3.5109305303993683`*^9, 3.510931619514181*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"permutedPos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
   RowBox[{"permutedPos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.510926615736713*^9, 3.510926630915056*^9}, {
  3.5109278058219347`*^9, 3.510927806202977*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.7907902733385197`", ",", "8.54243621975825`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926631794368*^9, 3.5109278254362392`*^9, 
  3.510930531466042*^9, 3.510931620449918*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"pos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
   RowBox[{"pos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.510926615736713*^9, 3.510926630915056*^9}, {
  3.510926681723378*^9, 3.510926686037467*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.54243621975825`", ",", "1.7907902733385197`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926631794368*^9, 3.510926686661017*^9, 
  3.510927826348722*^9, 3.510930532827058*^9, 3.510931621813336*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"meanCenterSamples", "[", "permutedPos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510928491978866*^9, 3.510928517470462*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.51092850802592*^9, 3.510928518052103*^9}, 
   3.510930534084136*^9, 3.5109316236200953`*^9}]
}, Open  ]],

Cell["p2pos is permutedPermutedPos (permute a second element)", "Text",
 CellChangeTimes->{{3.510931626387123*^9, 3.510931637858477*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2pos", "=", "permutedPos"}], ";"}]], "Input",
 CellChangeTimes->{{3.510928654470599*^9, 3.510928698635169*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "3"}], "]"}], "]"}], ",", 
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "5"}], "]"}], "]"}]}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "5"}], "]"}], "]"}], ",", 
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "3"}], "]"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510928702582868*^9, 3.510928766323742*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510928771058998*^9, 3.510928780662106*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.5109287813422956`*^9, 3.510930538456946*^9, 
  3.5109329866865597`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p2posRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}]}], ",", 
    "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510928821009282*^9, 3.5109288227360067`*^9}, {
  3.510928887455258*^9, 3.510928890706626*^9}, {3.510930572036954*^9, 
  3.510930606553011*^9}, {3.51093113909172*^9, 3.510931140830179*^9}, {
  3.51093300223542*^9, 3.5109330041088057`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6348545950515387`", ",", "0.31931337307762575`", ",", 
   "0.025803966062651763`", ",", "0.01422237632576937`", ",", 
   "0.005805689482414375`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510928823248139*^9, 3.510928891262927*^9, 3.5109305412514973`*^9, {
   3.510930577746539*^9, 3.510930628385954*^9}, 3.510931142405717*^9, 
   3.510933005991632*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{"Eigenvalues", "[", 
     RowBox[{"Covariance", "[", 
      RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}], "]"}], ",", 
    "Total"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Verify", " ", "that", " ", "the", " ", "singular", " ", "values", " ", 
     "of", " ", "the", " ", "mean"}], "-", 
    RowBox[{
    "centered", " ", "matrix", " ", "are", " ", "indeed", " ", "the", " ", 
     "square", " ", "roots", " ", "of", " ", "the", " ", "eigenvalues"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.510933037244114*^9, 3.5109331472147617`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.634854595051539`", ",", "0.3193133730776257`", ",", 
   "0.025803966062651756`", ",", "0.014222376325769398`", ",", 
   "0.005805689482414377`", ",", 
   RowBox[{"-", "1.3798574314518096`*^-16"}], ",", "7.733082256050456`*^-17", 
   ",", 
   RowBox[{"-", "7.33127543639842`*^-17"}], ",", "6.639409733566104`*^-17", 
   ",", 
   RowBox[{"-", "4.795486087138916`*^-17"}], ",", 
   RowBox[{"-", "2.6996807276866496`*^-17"}], ",", "2.5874220252969345`*^-17",
    ",", "1.2538018857698625`*^-17", ",", 
   RowBox[{"-", "1.2316500487044384`*^-17"}], ",", 
   RowBox[{"-", "6.7671626999100186`*^-18"}], ",", "4.70851492801911`*^-18", 
   ",", 
   RowBox[{"-", "3.3918252320077987`*^-18"}], ",", 
   RowBox[{"-", "1.9765175355386508`*^-18"}], ",", "1.3488681663102422`*^-18",
    ",", "3.48220661259433`*^-19"}], "}"}]], "Output",
 CellChangeTimes->{{3.510933060241415*^9, 3.510933080805873*^9}, 
   3.5109331481071463`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "p2posRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.5109305597954483`*^9, 3.5109306133054037`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6348545950515387`", ",", "0.9541679681291645`", ",", 
   "0.9799719341918163`", ",", "0.9941943105175857`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.510930613894319*^9, 3.510930631213751*^9}, 
   3.5109330133392057`*^9, 3.510933150763541*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"adjustedRSquareds", "[", 
  RowBox[{"p2posRSquareds", ",", 
   RowBox[{"Length", "[", "p2pos", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5109306510558367`*^9, 3.5109306790131807`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6218136877319508`", ",", "0.9507730028053989`", ",", 
   "0.9776610035216412`", ",", "0.9932654002003993`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.510930680081273*^9, 3.510933024065641*^9, 
  3.510933151916459*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"permutedPosRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "permutedPos", "]"}], "]"}]}], ",", 
    "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510928834642488*^9, 3.510928848250121*^9}, {
  3.510928880503209*^9, 3.510928882616975*^9}, {3.5109293718357277`*^9, 
  3.510929374224146*^9}, {3.510930734884859*^9, 3.5109307459554462`*^9}, {
  3.510933029363133*^9, 3.51093303102489*^9}, {3.510933169142314*^9, 
  3.51093316995857*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570784`", ",", "0.3240800397420864`", ",", 
   "0.0221624226734264`", ",", "0.008572456327408889`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5109294546883583`*^9, 3.510930426232476*^9, {3.5109307413614483`*^9, 
   3.5109307469060783`*^9}, 3.5109330322305613`*^9, {3.510933153996307*^9, 
   3.510933170532323*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "permutedPosRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.5109307614610977`*^9, 3.5109307678536873`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570784`", ",", "0.9692651209991647`", ",", 
   "0.9914275436725911`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510930768473938*^9, {3.5109331567138166`*^9, 3.5109331747280073`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"adjustedRSquareds", "[", 
  RowBox[{"permutedPosRSquareds", ",", 
   RowBox[{"Length", "[", "permutedPos", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5109293459202223`*^9, 3.5109293815975533`*^9}, {
  3.510929411799135*^9, 3.5109294345814657`*^9}, {3.5109307528078947`*^9, 
  3.5109307776028976`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6325131198734026`", ",", "0.9669884632953991`", ",", 
   "0.9904384140963516`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.510929358778144*^9, 3.510929382104748*^9}, {
   3.510929412413702*^9, 3.510929456068418*^9}, 3.510930431618189*^9, {
   3.510930757758841*^9, 3.510930778207973*^9}, 3.5109331917756577`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"Covariance", "[", "permutedPos", "]"}], "]"}], ",", "Total"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.510926809934339*^9, 3.510926846499769*^9}, {
   3.5109269605171537`*^9, 3.510926966352414*^9}, {3.510927003840249*^9, 
   3.510927004128213*^9}, {3.510927059244248*^9, 3.510927059540593*^9}, 
   3.510927105631255*^9, 3.5109278103884373`*^9, {3.510933471248542*^9, 
   3.5109334720282593`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570786`", ",", "0.3240800397420861`", ",", 
   "0.022162422673426385`", ",", "0.008572456327408875`", ",", 
   "9.5184624692742`*^-17", ",", 
   RowBox[{"-", "7.939096158479048`*^-17"}], ",", 
   RowBox[{"-", "5.5001466593731966`*^-17"}], ",", "2.7645710843295293`*^-17",
    ",", 
   RowBox[{"-", "2.7542841201318965`*^-17"}], ",", 
   RowBox[{"-", "2.1622665495191534`*^-17"}], ",", "1.8311967447826816`*^-17",
    ",", 
   RowBox[{"-", "1.4118133806782207`*^-17"}], ",", 
   RowBox[{"-", "9.350579144046067`*^-18"}], ",", "7.335245654287469`*^-18", 
   ",", 
   RowBox[{"-", "6.3314864463268395`*^-18"}], ",", "4.105110399539437`*^-18", 
   ",", 
   RowBox[{"-", "3.3441945267920624`*^-18"}], ",", "2.5376070176749462`*^-18",
    ",", "8.0131531388826795`*^-19", ",", "1.950311810761628`*^-19"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.510926817795455*^9, 3.510926847250169*^9}, 
   3.51092696767908*^9, 3.510927004852393*^9, 3.510927060012063*^9, 
   3.510927106280469*^9, 3.5109334730118103`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"Covariance", "[", "pos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510927343059461*^9, 3.510927383838277*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.510927349790765*^9, 3.51092738444268*^9, 
  3.510933518670453*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"posRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "pos", "]"}], "]"}]}], ",", "Total"}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.51093353156813*^9, 3.510933537520129*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.9407089579887079`", ",", "0.04779532758597183`", ",", 
   "0.011495714425320306`"}], "}"}]], "Output",
 CellChangeTimes->{3.5109335391541653`*^9, 3.5109335937583647`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "posRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.510933551512521*^9, 3.510933563650041*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9407089579887079`", ",", "0.9885042855746797`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.510933564176303*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["5 April 2011 Tuesday", "Section",
 CellChangeTimes->{{3.510998662434731*^9, 3.510998678006075*^9}}],

Cell[CellGroupData[{

Cell["\<\
Write code for generating a set of peaks and the permutation that would \
return it to the original\
\>", "Subsection",
 CellChangeTimes->{{3.510998689452355*^9, 3.5109987011195593`*^9}, {
  3.510998843825873*^9, 3.510998844432454*^9}, {3.510998965171154*^9, 
  3.510999001503182*^9}, {3.51099912622716*^9, 3.510999128016728*^9}}],

Cell[CellGroupData[{

Cell["Peak generation code", "Subsubsection",
 CellChangeTimes->{{3.511004043717967*^9, 3.511004050404047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutation", "::", "usage"}], "=", 
   "\"\<randomPeaksAndPermutation[numPeaks,numSamples,factorStdDev,\
noiseStdDev,peakResponseStdDev,peakRange] \n\nReturns a list of rules \
{\\\"peaks\\\"\[Rule]...,\\\"permutation\\\"\[Rule]...}.\n\n\\\"peaks\\\" \
gives a list of samples, each sample is a list of peaks sorted by their \
location.\n\n\\\"permutation\\\" gives a list of permutations that, when \
applied to the corresponding sample, will make the \
\!\(\*SuperscriptBox[\(i\), \(th\)]\) position in that sample contain the \
position of the \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak.  Thus, after \
applying all the permutations, the corresponding positions in the sample will \
contain corresponding peaks.\n\nnumPeaks and numSamples determine how many \
peaks and samples will be generated\n\nEach sample has a number of latent \
factors \!\(\*SubscriptBox[\(s\), \(j\)]\).  Each peak has the same number of \
latent response variables \!\(\*SubscriptBox[\(a\), \(i\)]\).  Each peak also \
has a base location \!\(\*SubscriptBox[\(k\), \(i\)]\).  The latent factors \
are selected from a multidimensional Gaussian with mean 0 and standard \
deviations given by factorStdDev.  Similarly the responses are selected from \
a Gaussian with mean 0 and standard deviations in peakResponseStdDev.  The \
peak means are selected independently from a uniform distribution over \
peakRange.\n\nThe \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak in the \
\!\(\*SuperscriptBox[\(j\), \(th\)]\) sample is given a location:\n\
\!\(\*SubscriptBox[\(\[Delta]\), \(ij\)]\)=\!\(\*SubscriptBox[\(k\), \
\(i\)]\)+\!\(\*SubscriptBox[\(a\), \(i\)]\)\[CenterDot]\!\(\*SubscriptBox[\(s\
\), \(j\)]\)+\!\(\*SubscriptBox[\(\[Xi]\), \(ij\)]\)\n\nWhere \
\!\(\*SubscriptBox[\(\[Xi]\), \(ij\)]\) is a normally distributed random \
variable with mean 0 and standard deviation noiseStdDev.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510999513361266*^9, 3.510999608450004*^9}, {
  3.5109997162047863`*^9, 3.510999810873349*^9}, {3.5109998652290983`*^9, 
  3.5109998664567833`*^9}, {3.510999935292083*^9, 3.5110002296275*^9}, {
  3.511000273985261*^9, 3.5110004502046003`*^9}, {3.511000528189788*^9, 
  3.511000531312159*^9}, {3.511000576653603*^9, 3.511000682343005*^9}, {
  3.511000718817196*^9, 3.511000887460273*^9}, {3.5110009347991734`*^9, 
  3.51100095250387*^9}, {3.511001009592391*^9, 3.511001010322723*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutation", "[", 
    RowBox[{
    "numPeaks_Integer", ",", "numSamples_Integer", ",", "factorStdDev_List", 
     ",", "noiseStdDev_", ",", "peakResponseStdDev_List", ",", 
     "peakRange_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "factorStdDev", "]"}], "\[Equal]", 
     RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "&&", 
    RowBox[{"NumberQ", "[", "noiseStdDev", "]"}], "&&", 
    RowBox[{"noiseStdDev", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Length", "[", "peakRange", "]"}], "\[Equal]", "2"}]}]}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"factorStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "factorStdDev", "]"}]}], "]"}]}], ",", 
         RowBox[{"{", "numSamples", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"peakResponseStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "]"}]}], 
         ",", 
         RowBox[{"{", "numPeaks", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"k", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"peakRange", ",", "numPeaks"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rawPos", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"sj", ",", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"ai", ",", "ki"}], "}"}], ",", 
                RowBox[{"ki", "+", 
                 RowBox[{"Dot", "[", 
                  RowBox[{"ai", ",", " ", "sj"}], "]"}], "+", 
                 RowBox[{"RandomReal", "[", 
                  RowBox[{"NormalDistribution", "[", 
                   RowBox[{"0", ",", "noiseStdDev"}], "]"}], "]"}]}]}], "]"}],
               ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "k"}], "}"}]}], "]"}]}], "]"}], ",", "s"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sortOrdering", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Ordering", ",", "rawPos"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"sortedPos", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Sort", ",", "rawPos"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"unsortOrdering", "=", 
            RowBox[{"Map", "[", 
             RowBox[{"Ordering", ",", "sortOrdering"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<peaks\>\"", "\[Rule]", "sortedPos"}], ",", 
            RowBox[{"\"\<permutation\>\"", "\[Rule]", "unsortOrdering"}]}], 
           "}"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510999189261509*^9, 3.510999221714493*^9}, {
  3.5109992581438093`*^9, 3.510999276538602*^9}, {3.510999307952742*^9, 
  3.510999358696295*^9}, {3.510999400722991*^9, 3.5109994721006536`*^9}, {
  3.511000237381385*^9, 3.511000263925104*^9}, {3.5110004862317333`*^9, 
  3.511000500748392*^9}, {3.511000785185664*^9, 3.511000786914557*^9}, {
  3.5110010304887857`*^9, 3.511001325865036*^9}, {3.511001359320874*^9, 
  3.511001438719915*^9}, {3.5110014754930964`*^9, 3.5110015512785463`*^9}, {
  3.5110015910832443`*^9, 3.511001656814919*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Peak plotting code", "Subsubsection",
 CellChangeTimes->{{3.511004058469493*^9, 3.5110040624807043`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"asPeakPlotTuples", "::", "usage"}], " ", "=", 
   "\"\<asPeakPlotTuples[peaks]\nReturns a list of two lists, the first is a \
list of pairs of the peak locations in each sample plotted against the first \
peak location in that sample and the second is the first point in each sample \
plotted against itself.  If fed to ListPlot, it will show the ordering \
obtained by accounting for the variation in the first peak.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5110029963834867`*^9, 3.511003052678643*^9}, {
  3.511003165389855*^9, 3.5110032788465652`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"asPeakPlotTuples", "[", "peaks_List", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"firsts", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "peaks"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pairs", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"sample", ",", "first"}], "}"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "first"}], "}"}], "&"}], ",", "sample"}], 
               "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"peaks", ",", "firsts"}], "}"}]}], "]"}], ",", "1"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"pairs", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", "#"}], "}"}], "&"}], ",", "firsts"}], "]"}]}], 
       "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511002452817254*^9, 3.511002563676488*^9}, {
  3.51100261406141*^9, 3.511002832412487*^9}, {3.511003106329968*^9, 
  3.511003121917863*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"asSortedPlotTuples", "::", "usage"}], " ", "=", 
   "\"\<asSortedPlotTuples[peaks]\nReturns a list of two lists, the first is \
a list of pairs of the peak locations in each sample plotted against the \
sample number in that sample and the second is the first point in each sample \
plotted against the sample.  The samples are sorted according to the location \
of the location of the first peak.  \n\nIf fed to ListPlot, it will show the \
ordering obtained by accounting for the variation in the first peak as would \
be obtained by sorting according to one peak's location.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5110029963834867`*^9, 3.511003052678643*^9}, {
  3.511003165389855*^9, 3.5110032788465652`*^9}, {3.511003681292728*^9, 
  3.5110036905161343`*^9}, {3.511003727795157*^9, 3.511003788334202*^9}, {
  3.511004707129191*^9, 3.5110047078200274`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"asSortedPlotTuples", "[", "unsortedPeaks_List", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sortedPeaks", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"unsortedPeaks", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "#1", "]"}], "<", 
          RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"listOfPairs", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sample", ",", "sampleNum"}], "}"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#", ",", "sampleNum"}], "}"}], "&"}], ",", 
              "sample"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"sortedPeaks", ",", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "sortedPeaks", "]"}], "]"}]}], "}"}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"listOfPairs", ",", "1"}], "]"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", "listOfPairs"}], "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511002452817254*^9, 3.511002563676488*^9}, {
  3.51100261406141*^9, 3.511002832412487*^9}, {3.511003106329968*^9, 
  3.511003121917863*^9}, {3.51100380554959*^9, 3.51100401992444*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Peak plotting code usage examples", "Subsubsection",
 CellChangeTimes->{{3.5110040728418922`*^9, 3.511004077755241*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"20", ",", "30", ",", 
       RowBox[{"{", 
        RowBox[{"0.7", ",", "0.5", ",", "0.2"}], "}"}], ",", "0.2", ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"perm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"asPeakPlotTuples", "[", 
        RowBox[{"applyCandidate", "[", 
         RowBox[{"perm", ",", "pks"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Green"}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511003335392474*^9, 3.511003421861599*^9}, {
  3.5110034533635*^9, 3.511003453995929*^9}, {3.5110034843831787`*^9, 
  3.511003491616115*^9}, {3.5110035285372562`*^9, 3.511003542154455*^9}, {
  3.511003626452129*^9, 3.511003632715788*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
WHOsn4r5QLhGsvoBtH9L/w32hmF0/v8BbuQLWA==
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQrXCF5Wy3joQDjJ65rO/OpLeycDqvoLBRSgBBp7zq
ui9wVwpOt2a+6/qmIgGnk1V27VOdIA2nIx9N+3RqlyKcVnQvLmv7JwGnW/fo
ybUcVIDTB7Tz3zxLl4bT5tnnpFJWyMLpPZG/dbO/ScFp5qrYF3OrFOD0l4hL
4RzBMnBan/myZN0GKTh90UWGW/mjLJz2+u4g9bNSEk7vaGf93HdEAk77eZg2
rdZXgNPelcJPZI5LwWkHt7m7W6bKwmkPXZYGzTlycHojb2JgmpksnPY5sUvu
1kRpOC12/yXjRk8E/e3KSV6fHBE4vfoIV45KuiKc/nSM+8PVQlk4Pclp5ibm
7Qg6ZumvoK8d0nAaAGZXyYw=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.511003422594879*^9, 3.511003569256089*^9}, {
  3.5110036283134727`*^9, 3.511003633121194*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztPQuMVFWWRVe9qqa7+Uhjw6hZQbOjs+roLDtsouzK1xZ1djVRwwD9gdYV
jMbPsioKdEPTNLhiUDcmZp3dYeSXcQaB7qb5GDHZRAO6iVGjJibGaEw0fsfx
h9B9951377m/d859r3RcmV2LVFN13v2ec+/531u/WLRsyfU3L1q2tGPRpObb
F926ZGnHP0+65JbbY1BxRKEwYkmhUPh4UgE+i/ij+pO8lsIf9aWKzxOT/0pi
165d4qKLLkreO3furFHg++67T9x2221i0aJFAJ5Jg5uramRWAq4XN910kxgz
ZoyYMGFC8q6rqxPvvfdeMjqvSkF2HInDhw+LuXPninvvvVe0tbWJHTt2FJhu
xssJ/ij5r07cfffd4p577hH4euWVV8TkyZPF8PCw+PDDD0VjY6P4/PPPpyfF
y9zj5upaw2G/8cYb4uabb9bF33333XjYcaX4GVGtMCOp1yCuv/56sXfv3qQO
oKZSqYiPPvqI665RTnlM8l9RvPzyy6KjowPe8Tf4WxLPPvussF41MIsaNecH
HnhAXHPNNfrhWWedJZ5++unp4cfNeduZpYa1f/9+sWnTJhh8IaOKxENtMk98
DQ0NiVKpJF588UWsVqNaVrWSb+Ms8juju/POO8WSJUt0e7BYt2zZMj38OD1L
puBs9RjItnTpUvH1118nj1VxHKoqnXybpVbJgQMHxBlnnCGOHj2KxQtU+e9r
anPUOFeuXCmuu+46e1rkOCX1KrAZRU9Pj5g2bZp48803M+ux83vwwQdDC5R5
nJ4fU1Du1tqEZLDL4PXSSy8luw5WnapGrTYk4SOPPCKuvfbapKoqXshanQQ7
efXVV5P9Db0SzIl5zDEnpricboPYunWraGlpSYq+8MILYuzYscmGY6ohbxoc
HBQPPfRQUm3Pnj3ivPPOC/WmeNNEhYzt27eLs88+G8YZfxMJA9+4caO49dZb
Ewb+xBNPzKTBzflbQKp88cUXCairq0tcffXV4rHHHtNSg+w0Eu+//36yRHp7
e8WVV14p+vr6uCqOoCkm8/7000+Tb/9GwAZk8QRXGcL5n2R1I+Tjb0IVAyCo
A4UREjCSKNtAwEb9GZY7kcbyv1Gukvz9gaT/h8opkk4kHl2eE3ZZznJNsisp
YmLOCLrTvn1CHDyo+KRbnCo3gYBVCFhEwEpsvyPtfu3nTtmROdusU7Dh4SGx
7/kecfC/NxT+kpgfVXcsAZPcPTKwWBvDZ6fx/cu+FOxviHLjs0gUDzAWpQnr
l01NoMFNNLhMg0s0uEiDlWhzCTQ4WAPPofTatXbp2qraHqnAg891x+JL/osJ
dg5dWhovZR+MIyolIyoaUPz9R+F+PfAUGnyuR5L+fpIkLriJBpdpcIkGF2kw
SZL+fk2SNWtIkuRqG1HTf6STJIlbWpPEBeOIgiSh+/XAU2iwTxLYVH19QoBB
PDw8gQY30eAyDS7R4CINliSpS7MxLBKreVbx2qoaR9wAP+s7skrsfW4NfD6H
Li1pUu+D3SENDIBqjs8Kp4Y79sBTaLAiSkA1/RaPzJPvqoc/60c/oOcH9PyA
ntCj1uS/SGzYsEHccccd4q677hK33347GOCk8quqJc6PWMKBx3Tq1Kna33jx
xReL3bt356gJzh7wB+Br3rx5Yv369UnNCCoOyfJnyaYytVvJqytSpPT0iHhG
suEM7RtdXKtWrRLnTZok/hjz/48//liccsopcZF9rCIOylBvr6P0ymHVUgqx
3aVsss4tBs2tWyfE4sVy5H7xMqf+y/GPjKd9TPQ8PUdsODRXDhLxsH69HuAo
uynoEZ4DDTo64HkZUWgPzGuiJjyakX4T8NijQpGgwv02sfPqyaeotSu6uw0Y
xjs4WJBan6tjybHXk5ryuvZ20RJ/Xxe/L/v5z5N4CfjbVde+nh8lzUd28/io
INW7lA2AXk2rd1O0rS1d1Jvv2rX+nLoPzYrnBJ6tYkJ6hQcokZp7HdE7Va7I
jtIqp/HLGDpRGsV2FRtnaDK5o/hXbznk0tH1cujsdJdDf39gOYwktfTfLV8u
5hqY4hwp24JdBnGXmrau3aGXgenVFG1tJZeBPcA1a/y5dB6a7i4DOf/wMrB6
Dy6D1CitchqvjHEVpVFrV7FxhmZaeBnkMgvkMqiVDDBm6snQ4DNlyND2wKd/
+IOY1NQk/vj73yew+fPniw8++EBhhTBnwGbo6pLTNfZDERcYZV64lo/hTXbZ
3bslMePuxerVQhw/TtQZF7KokhGCaFh16O/FmkMzk88aM9CmGa70wlXMjKDr
WCqLBQvkzOIu5T4Y6w4Tm4LhUlYVZ+gV7SIwG8lvUzNMkXijXBeouzz55JPi
hhtuiMfbmagUGbrLn1yHOsOejRJo42xkMoKwiahHqTY1flu2XpFsmwLpbKQc
laMVzHYCNhLl/oqASeHOyn6qmTEE7BcErGJjMiXoT1KE5qWKyzca6Wa0JpXp
KUMqFxhf4Uk0eJQCe447xmv5ExpM+grTwl/IfUi1MJoGX0GDyx7qXZatUc9y
cgb1lMjO8IiVEPX4ikJjSoER+56PjnFQ/oQGk27BtMx1sO+2MJoGX0GDfexT
Qopyo1fSggtYLLDhnh7DSy0ucZLdBbB30BYPHJCUaXA5Oih1aIUQfjGJCuHY
OjZ/8x2A7gQa6IEg+YAz7Tm8ItZuZ4sDz/eOszui/HayVYnA+rRRBY3TVRSv
9TDpyWUquBJ0jVJ8LVX0b4mijNdWLRBv7TGG0ijcrTkZJcNAtJPXNazkdoxc
9QdeTOtMRKWBBjPMkwniTEYMWnZKFQZGBgP3wDNo8Klh0lDcKT8jZbiLxqlr
5LCkYVpnIisNNJjhrEwwR5PGsh2qUPozuLsHnkGDLdKYTDjOkBiFA87QRpkd
qnHpGhySJLVpkuSKszSEhpqKeTAxHEmJMsfHGe26Mdy1B55BgxUB/uS69kyb
VoEAeB0BqyWalbA6123I6+ySWnTMu0x0WYOdECrz8IH9qIKPIqpSbjJKxEhY
A6eVc59/Y+MznxLKRogrLGI9GdLWJnd8hFLJbsW4Z1M8nXJOsHq8rqJcU4OX
FrR/BPCNzdTRkyGdb6wPkgSjtu65x2gl/j89QuTQR9m4cJAQtsRobXUI4bZi
CJHi4AwhaK1eV1HOof7LMwhBxvNzev9IMCrunoOK1ud9QrgMjYlNM7HghBAJ
HWoRR7Z0MI4cSs5EWIVm2/LxaF4j9lTZ4YF+0Xd4JcoKRrIwwoBxsknwKF51
5j7H09ss8XyCBMBOpEffPuBIRbio3K2TCdhoAka5kPR2BboCf+voMAs9WzI7
bkbGM4beLNtLNTFHPS31jTTPVW8yMc5WG6Mpvj+GBo+nwVp3gp1swFrVhZ3h
M3cnriVpHbPmCs7G7qC9XcYi1YyZIUtFwdNF/Ggpis+RlIRO4Q2ZBrAWyzCg
rH5qZaa0KVRR1q51LQYzjJrE2izK+SrPRkpTam834goCqmqPnIzd5bSO/4LG
Y4u3MKjcrxR4PA3WCwOOExhyOp4JZs1qwwF8PsYSpNTGIk7cqADeglICSD2T
7riyXFh+17QWQ2pNs2fXYEuwxkwPqHWkWrIpAVXizlcfmqG0hpJYtP9UoV+4
VMuuVYnjXLdOPq7Qj2FaureyDIPj4OANwXjUEyJXj1OY06sc9pAM4KZjZPH3
8Yj9nJa/XnZueX/ZuQJ5DA2mDAZqhTB+Kr08QXExamyJ2kiwVhYvDuiJJXcF
DA6SunNvr8TrKInXlSsh/iRXq+/Cc8Mgidlem/ReK+E2V4VNAswXusKcCioM
Wi8nYleFKpSqpWO8FdG3bb7mfwkP3N6uyzBeqZIN9tds0dZXgTgSBvJAojDd
KjTR1lZE8PTp9tqhrGFqaTiMO+AJoerqDFYXV2rZTqJozRpbOlXVdanobkNR
aXu9UUqrtxHVZlZOHNdbg1QirKSf/rSgecMFF7j7evVq80ymo9B8A0e3cKFa
fJEcKWeNQXmIMmvy14nhwb1iwcEmvfB6fvfXZjn4yn3FbRq2BK5nnbaiNrW9
31taCpGNZDkMs9GhvMSWmQawQ0/tZ8xtxq5mPLHLvdWUy2I83Uf4/Plm9CB4
1QgbcH1AORsD3PrAwFVkEIMTlqffDEJt5uE/8+it/Yk2t+zupvah1AE8Axy4
RNxN3+FVaGyDSx33BiM/9GGO9ApJcwA9gbLszdimiJeUFLBlHWS5DMn0Psar
y9j4TGl/UeQybCfTLCYoR4k0QCI6FuQ+eXlrqnq9HAEpijxvcIFx1TKkLwVa
9mAFBj3MlJlxKHoFzNiFNq4c2US7XpNGKP+r40pJO0Gl2jOa17MximisjXT1
2EwdOp6I/IM7rgt4gZmhE+Wd4Crf/eM2srLSGhw0V3MEitb3SRVQ2VJOVpwn
/LDnwW2ttrYU5ZlDSodiVKtioP/fSpxdwWKdsZz8BULp7lohpJBN5Bn6q8G2
eu1MwN5ebSjbTYBqEVfR2Jbfndk6+1ItpP6NM1Eu9D4+RY8y6Mvt6yPVVcvP
DSsUX/39kgJ1abUJiqU3wVabKHl1RAluTC+ZEBszrNqQKKUTR+k2tH4Uz+xn
PxPikkvwm/xrpm+WEeZjtLUZcW+b+QsXWqpixdXH7OUm5UTC4IZHFETnwxPN
zrl7SipF3J/6wEAy8hrHt2OPA/CH9MBExoEBJZtKqHLKd1tbiZiyE0ui2Rzj
LSE1NjQBPRVImzGSdNLqLjjuKiRnOjk/2Z31Co2Jse/z03XrtDJ35pnuitXa
bklW9c21CFwdpkr87urEUEet6LlbwaEqjspwdW0OGD+OWS/+/tHrxQstdXRQ
tlEZ/+K2gOU/JV4yU6dCz/9hky077MYoUk52or1WsKpev5atIIQbjVWZ65Q/
KML5ohotU061SQLJsdSo5WxgZUhUwnazjb6Yddaqphc+Zkz3tl8be9uwP9c6
shEgd4p8ZnviJId2hYoy9srEMIsEwv/do09GNE6nZ2ZE46wqkgYqR8GOD4L9
ZrT5CFmU70iDjF/A/4IFLoml8WRYW3oZIxmN+PKRt2aNqQ8ZyHZdtcw6u0xA
ce194zR2Umn5iHy9kemUfccq++UvHUJGiGObJUlW6RpARgvgicnG9kJavq+L
S24YGW5orBg3ZdgwdcdOcfwKvkGSEgTj6fHgCoCymP8NY7H7pGOBNWjBxl+H
BvpMhvrxr6F6DSxIGCMmwmNrWRYWkSpIJeYwZpCizK5dQpx7Lrh5ZJHh4V9J
+mUepSuKt99+W4wfr72+WcU/++wzEUWROHbsWKh4myre3NwsXnvtNZyDe1gO
Cz311FPi/vvvN4XoNttV8WXLlomvvvoK10NWcZjgww8/zBbPab5IpbbeBtGG
mGkiHTHCI2obNrh+NV/tiGHgK9u3YxEEE7X9Y0KYxp7zDvCldYndEh14khGQ
jZeWwQtOEh49epTHjGfmGMsp6DsP2GRKhvDVGeHeo3IwguflJDscvNTybj+P
7NA7e+fYeG6fEdH+ThePcBlifX19cv8VvOF6w507dwbxmPbkcqKOdCl5iSDy
URiPlBBGPAYPmknrrf9yBo+29PXxaPUZwCPFmhxOaXhyrqwTil2XXM6OPiXv
3JJ96gpenuCyrazhPbuT6MneI6sT15XGhwn+6MNH2pD2ZWf66FVhF48T8V0+
+vYpHD9GwllsjLomp0w0cRJRTmK0MZ+Pyw+p0axZ53rY+RmpmDW2lbICqdCj
C+OvG3JhVH4J5cZZbaM25UmYQoMpYczkjYe8YRXct743Srt73N2MIsvLg6cY
OaVnMt4SxuOXcXkQNT6mJabfLg/zue6xoTBfh8hBjQCYrjwtb+ZMOReKpop2
F7j8vowUgjK2GaJNENfdoTK7IcJiKHTfHPucPLRdJqoy/o5UPNVeGyoPAkro
A/z5Tbwy1SMbKvPJ5XLuKTSYJxeld5SNvGRCUL5y1N1dsI0FJ5VThp9qoA3t
9oX6riNCY2HvthZNslilKeKI/CrQbFcXmV+CA8fHhCmp9Sll1to6UjwYScV8
Rh6Tdsr4YhT5KOlCnfxOKTB6cdNBciYsV0OtyrA2hpGG/q0mcWJfs6GH7zDg
W2IWcpGahmyF5LrbeMxpoWUlFeopo14FKg94DMCxeuCAnN7otDMSDFlwRIHN
ASTzLSNb14oCbtnIKECWdSS7nZjEo/ZsmSe6H79AHPiXC6R3EnaNPGlnLHdw
8wDTshUqmSFjhmSPwT4ymB3J3JGF05J/wowMQFnE9DmDDn/kkoER14wVdHek
Li5I5cHyrxnxt3pOAe+opoGbZVDnWriQ3KiMj5xc+PBevVrhiuFnaAtV5Oqk
bPZ4QkW/CUtD1BkHZUCdTykhZs3iLaYIM+5MlZaWEPr+0d6BaRWVzXhK1iEv
ZSQCYL/s3+/iBxqRR2tlGRiuj0O5T6GMirpghgRydyyIBnzZDcXgylKBhZqk
tRLaWrjicAgDWy1htmGmsYFivUXH62AvYq9dXdqN7cUrlKIquPDNNhvpuQLE
OqPQzW1WIsRd9RgwLNrYcIkvkWZ2u6VTaeXJymDViwqwaa8QnaRUhPWoy+ud
YQfD4DNQGU8tVUTXr880qVZw1QpiNl6rGuNuKFTGGEbaalxq4yi6Gn3emt1j
Huazz6VrzFOJwd55xLR72LEplGOpTPSihYChbwEXrRWZtzd0a6uTySgr6iBV
V6fxjKw9NAeRojnwjBn2OjLDX7WKDq/Ce9YsMqREGQGULfUbG/d5zol73BhT
XKn7dSuu1CUjCCU38oESLJDHZ+eb2mlnfX16zqB+qNgLbwyVRd8Vhhw6fwxV
sMjORcXBuYcdbTxhkABGao3EyptI7fV4dAGK/AMuPou7y+MrkYtWqcyg74Ag
A+U7iGdw7JhkD83N1I09Naia2/sXHgNS5sxBriN7PTusXkHrkOxx6aXyEAY0
A7sRMgyADUDPoKaBAIWoxMyZMgMBuorxery9RbQMNIrF//XjxBujNQjYeNAu
eLaBmfFXJzjqnOR5gLBYHo6SUhD5IHWVQlb+G8Ag7r1hw69s0lXjiCgUCplO
Bztdpr2dVPSkBkcGWmv4zqGOrmJuaSto6W7f3Abv+Hv3ioJzH5fiolr2suZi
KpOplhisPh3kKzCxcvKoh+Pc1xI7OGY8BSbQ7uDYb6yzM4xjynXR2amrGEoa
HPuh+/h7Z5eLY4eLh6K7Ho5RQDM49pVoAseuBa5xnLbtHRwz5jwcDIUrt0CQ
HT+uY85UQNNzjkt2Nol2KmB5OBUAzAW6gR1rR25RBYBndtvx96HOlWLV5kli
zVMz5AVi2Ac8d8dRDE2wjlI4qAhvPeLfDjGD9BgaQvx/r579Nlk2bV2Q4Zds
/zTlF6fOU2r5H7jktGivQFRlTYwT7UPtun9+vfZqUEPTV/kRVkHe6W2xscZY
90zcKpeTmXEbVEKlo7Q9z/PhiADHSpE+zN5s2AMzRB3lyHtfDQN2+dRmD7GU
D4xBbC53cIkGV0Klo8AFnCnmSyG2/0hnELHklQf5b5thwGHEUokmgUhrpqO2
RIOZY3iydOaVlk7SDypmnphAMayPDBzuEsOrVmKTzHArqhaj8jG1GLCyaE+k
g/f/Hy4BxzQL+LG89vZ2sXz5cnHjjTeKFStWxEQh17RX89FHHxWXXZb8qg7U
EKeffrp45plnctSEmznhhk58XXjhhfBLlDlqHjp0KPmhNPyJuaamJvHWW28l
Ne3MJ5lNVUp+Ju+qq65Kfh5v8+bNgeQn7OH1118Xp512WpIA9c477ySpW19+
+WVgbJPkI0fEXUDAcNfEOBLnnJP8LkXSS7lcFp988gnVg3O+xjiC61RLqXiC
7Enr4jlltNRCJaOwsqKcMvyRUbqfJqK8HFedDRNq9VA+29U2elMS9HwajBlh
8Itxt9xyS/Jbi7CsN23aRKpkY3AORBBApxNYQpq3ZaoQ5pTrjMir2taWdlcJ
y6FH6k2ZeduNdPVQzoKeDOiN5lmXRyBXEp9Pg8eEiEAEGTURMq6oriHKVSHh
7TiJk5S1tTVMBFLHykzObqSrl6xROETg79b2ieAK1/NpcJAIvk2m3Zle/rCX
YiXHXq1SgMkTCe+xk7+GnMutmXuViuE+T6ZrOa4+J2BZ5hy6Csvfj7ohUddA
800+obbenmaA/etEC1ZcWGk24PhT4eVioB7qnslRyG1t4uDGuamsMUeLTLN/
KsHrcR5rZLqI4l+SXxAh2Zi/BK99q/YEYhBsOMDgtlblroqkTePyVdq9ScTV
mETdQKBdY4lgMA6WvEPowTvZ2AQkEh0ZYDOV/q3zXSy5jI92UBIxMCbFIxNL
FIMoEskXRfpeA8r4qe73xlJZJWBIw1tyZfl4DFddthzvv74t88Tee2ckF7/5
cSqJwwZ3WMRvBnjD/i2PO/EdPWq0aaLYwd8RsLFEE3nuGNMSxj0D4CRcGV5b
Jnp2BKDqxcqIzZvsSvE9CkYhpEyPloptrbTRmmJ/02gwpTfoazJyXqOlz2wQ
RwUqVFvqWUQPiXINDm5voy6WZHxxZRxWzqTX6i7PDmUZMW7NFR5pXOY6jQYH
SZMz602Thjh9UKHa8kmTfW1H//aFQdJQ1+HnT3Ct7vLsb5Db6JPGZYvTaHBC
moQy6peNacGSSvOkjz04eTmenh7RA5CTcTMWEslgXRLCuCAlBXLcLkrDmDuy
o8AcGM+pwvwJ4j07kR59py5JuS5syTFbFnaEyalEA5TQyQtzjEUjx8hf0XGL
OPqX5cwKZbM1ECOg/F2UtKau6q7Qo79VYTSSCPLskFlYyYWfwmI2lyQUmT9z
Q/lSyNtM166litoS2z8UqJWkDI8Uc404A2ZyP5ifkShb4/N5/C0uQTyTRxPE
hQcJUsXV1KxQCxLENXWCBCFOF2qC5Lo6IDVwBswkijA/HlG2xpdBEFcAGIK4
8CBBKDnIgOt4eeZKKHnoi8hrc4vppBHfsxULW63X0KZbPT1OxgnGJJEwF3uX
rWH5olfh/3sVU7AUId1OQSlpcxpRmzLIcsUbTOrEyTZR8vmjeHeaexgyb2YE
dec2JYkoW5KvS0u9Gw2+t2718J1io5SAZxhxrkCCnSbX00Nekx3yd2XGVQaf
6y7gLcGWnVFlPoXeh7kEEyOWmasrqeASNYYbwmRymWuQTN8g1GBn2llkyutw
y4y89B/ppMlUVXaGJlMuccUIa+YySSr8lEEmc/eDIZPLg4Nk+gaxCsjRM3kg
kkxV+/Qk38p3o2R1GR7MvY+MOGNkd7ARVpIulWQ5Qcy1woj/Aea9BMk=\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"20", ",", "30", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "0.1"}], "}"}], ",", "0.1", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "0.5", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"perm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"asSortedPlotTuples", "[", 
        RowBox[{"applyCandidate", "[", 
         RowBox[{"perm", ",", "pks"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Green"}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511003335392474*^9, 3.511003421861599*^9}, {
  3.5110034533635*^9, 3.511003453995929*^9}, {3.5110034843831787`*^9, 
  3.511003491616115*^9}, {3.5110035285372562`*^9, 3.511003542154455*^9}, {
  3.511003626452129*^9, 3.511003632715788*^9}, {3.511004090429294*^9, 
  3.511004233572281*^9}, {3.511004730199543*^9, 3.511004778009754*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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

     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQzeEcvskinMGBAQw+2H+PspjGHssI5TM4xLyt+jBp
M4zP4XDjYYftSgsmKF/A4V6e6YNl72F8EQeryC+M+gosUL6Ew+GmRNMpr2F8
GYeP618eU1jJCuUrOORnhn9Z+Y4DyldysLsy09H5ESeUr+KgHnFF/I8lN5Sv
5lCelvc+cBeMr+Ewrz3j4SEZHihfy+FyxeGKblteKF/HoWRu8sv/m2B8PYcH
GT+6N5yC8Q0cyvi+yVk58UH5hg5rRM4Ur14M4xs5VPR5c+9czQ/lGztEK+XE
H/sB45s4eH3bVr1eQADKN3X47jJRRVwMxjdzOOx88MUbPRjf3KE6IvJE2TIY
38JhbWCK6KQNML6lA1NnjHqniiCUb+Xwb7JHXnonjG/tUPvNT3K6rzCUb+Og
OG/mI9l3ML6tA5ffAlOzM2JQvp0DAGupc6M=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.511004105530129*^9, 3.511004254286818*^9}, {
  3.5110047341426983`*^9, 3.511004781190228*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXVmMHtWV/un/78W9eWncbmxivGXYQiSiIRMWaYaMwcGxwQQveAHbGJS2
DAIyUSzBgKHdhkBAiuGJhwSNMNgPiM2NbWweeIIBMhICZN4QCi9GCB7YJBb3
naq6S93l+27dars9mtH8yE33+avuvXVO1fnud865t5Zv/v3wLbdt/v3WLZvn
Lfnd5juGt275t3lX3v67TNQ8rdE4bbjRaHwyr5H/LrJf1Y/iszX/of6o8XtX
8b928f7774slS5aIBx54QGzevFk8+eSTjScj3y0vvmuJF154QVx66aXFv+ee
e65NiR955BFx5513Fodn4qWFuNs/uhgIaL3XHluH2LNnj3j22WeLo7/88kvR
09MjPv7447/Gv16u+rzrrrvE3XffLfTn6NGjYv78+WJ8fFx89tlnYmBgQHz9
9ddLyeGk9R45xEazGP+WLVvyf9lf8ucbb7yhz8/+kj/nzJkjXn311eKv/wCy
ZfnPtrzvNnVhu3fvFqtWrTJDOfvss8Vrr7221BzYAZrpdnX31Vdfiddff704
/9133xVdXV3i2LFjf41/vTwYy/bt28Xw8LAZS27BTDVLgwNJiz3u7fb5558X
xh4ZGRFr1qwRhw8fNrcb+u7qiQ4IN+fcYE3x/fffi3vuuccxjS1bEfT+2GOP
xU3TBprpl71OUV9t27bN3CTX5D+b+dN8DfsW3JsffPBBcSsfP348vJWb9uGN
NtBsnz2elpg9e3bRQv7vkksuuVqeUXoYM5Dg0OWq8b1794pzzjkn71Td9i3x
6KOPijvuuKMwwfPPP780cqjXqjLSejAObaT8wr/44ovir2uBbAZvovjZc2q+
L9x07rsbp0lBBzih/xTI+v6P9HHq+v1/U/2v6Rea6jdAdu0JyP6nuuoU2YRF
iEOHhDhyRB5Q/q3wrOnITi9kU0rZ4cPu+ZmfFLt2CfHQQ40Fdvfq/CZosx/I
9PjGx4+LQ3/bJY7810PB+NrAeTOBrB3IWkCW2t4diddwhq3qbBAHDxZuW2h1
HDyYd1lM94q/lYU0cnrHD+geSrE6vV2evnNnefiuXY35shmp/bKZNtx6Hxa3
q7EffHtnBj7yv9wccOzkembgpltYLG+QjlBbsocaHdxe60qHPGONjbndj43F
jeUeb4xVil1j7dgRGqt4UvK2yvbzBlC3Pbhbba6xt3a45kKjJ1c0AzfdwmJj
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
J7rXStK8qvxaSRun/TfCYkNS\
\>"]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Write code for determining the % error between an ideal permutation and a \
calculated one\
\>", "Subsection",
 CellChangeTimes->{{3.511004834156089*^9, 3.511004856281458*^9}}],

Cell["\<\
Since we only care about correspondence not the actual ordering in which the \
peaks were originally generated, we can sort the two correspondences based on \
their first permutation.\
\>", "Text",
 CellChangeTimes->{{3.51100485915587*^9, 3.5110049013424177`*^9}}],

Cell[CellGroupData[{

Cell["Difference code", "Subsubsection",
 CellChangeTimes->{{3.511005768002555*^9, 3.511005779498851*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fracDifferent", "::", "usage"}], "=", 
  "\"\<fracDifferent[perm1,perm2] \nReturns the fraction of correspondences \
that are different between the two permutations\>\""}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511005712248262*^9, 3.511005756662681*^9}}],

Cell[BoxData["\<\"fracDifferent[perm1,perm2] \\nReturns the fraction of \
correspondences that are different between the two permutations\"\>"], \
"Output",
 CellChangeTimes->{3.511007240792583*^9, 3.511219268868545*^9, 
  3.511822891952002*^9, 3.511865748354185*^9, 3.511866586531703*^9, 
  3.5118668005271997`*^9, 3.511867986341322*^9, 3.512214937875362*^9, 
  3.512251370134759*^9, 3.512381584655541*^9, 3.512395190775235*^9, 
  3.512395581191772*^9, 3.512410082658227*^9, 3.512412373422942*^9, 
  3.5124670207710743`*^9, 3.512474137394105*^9, 3.512482796831456*^9, 
  3.512489135793782*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fracDifferent", "[", 
    RowBox[{"perm1_List", ",", "perm2_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Dimensions", "[", "perm1", "]"}], "\[Equal]", 
     RowBox[{"Dimensions", "[", "perm2", "]"}]}], "&&", 
    RowBox[{
     RowBox[{"Length", "[", "perm1", "]"}], "\[GreaterEqual]", "1"}]}]}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"o1", "=", 
       RowBox[{"Ordering", "[", 
        RowBox[{"perm1", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
      RowBox[{"o2", "=", 
       RowBox[{"Ordering", "[", 
        RowBox[{"perm2", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"sortP1", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "o1", "]"}], "]"}], "&"}], ",", "perm1"}], "]"}]}], 
        ",", 
        RowBox[{"sortP2", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "o2", "]"}], "]"}], "&"}], ",", "perm2"}], 
          "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"numDiff", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"HammingDistance", ",", 
            RowBox[{"{", 
             RowBox[{"sortP1", ",", "sortP2"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Total", "[", "numDiff", "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Dimensions", "[", "perm1", "]"}], ")"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511004926952838*^9, 3.511005163038164*^9}, {
  3.511005272478218*^9, 3.511005433796213*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test difference code", "Subsubsection",
 CellChangeTimes->{{3.511005528425271*^9, 3.5110055397651167`*^9}}],

Cell["Each test below should be true", "Text",
 CellChangeTimes->{{3.511005542793489*^9, 3.5110055497784557`*^9}, {
  3.511005692285171*^9, 3.511005698237705*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"1", "/", "3"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"2", "/", "9"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"4", "/", "9"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.511005442316543*^9, 3.511005516646502*^9}, {
  3.511005552850153*^9, 3.511005673177286*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.511005508744364*^9, 3.511005517083509*^9}, 
   3.511005571159214*^9, {3.511005613024694*^9, 3.511005636597497*^9}, 
   3.5110056737575903`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Test beam search algorithm accuracy using synthetic data - it fails\
\>", "Subsection",
 CellChangeTimes->{{3.5110059282191257`*^9, 3.511005949281344*^9}, {
  3.511009371251419*^9, 3.511009373258576*^9}}],

Cell[CellGroupData[{

Cell["\<\
Test one randomly chosen test sample - doesn't produce good results\
\>", "Subsubsection",
 CellChangeTimes->{{3.511008890842813*^9, 3.511008904932934*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"5", ",", "5", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0.1", ",", "0.01"}], "}"}], ",", "0.0001", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"peaks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"correctPerm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"beamPerm", "=", 
         RowBox[{"beamCorrespondence", "[", 
          RowBox[{"peaks", ",", "1", ",", 
           RowBox[{"90", "/", "100"}]}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"fracDifferent", "[", 
        RowBox[{"correctPerm", ",", "beamPerm"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511007103935389*^9, 3.5110072318273573`*^9}, {
  3.511007384247465*^9, 3.511007385756609*^9}, {3.511007517492507*^9, 
  3.511007549154875*^9}, {3.511007591245886*^9, 3.5110076058569803`*^9}, {
  3.511007770387322*^9, 3.511007774735757*^9}, {3.511007821870696*^9, 
  3.511007840141357*^9}, {3.5110078856839743`*^9, 3.511007886510253*^9}, {
  3.5110093883678503`*^9, 3.511009388530448*^9}}],

Cell[BoxData[
 FractionBox["1", "5"]], "Output",
 CellChangeTimes->{
  3.51100724182764*^9, {3.511007378491118*^9, 3.511007387446106*^9}, {
   3.511007485811697*^9, 3.51100755708504*^9}, {3.511007598933837*^9, 
   3.511007620554159*^9}, 3.511007797501336*^9, 3.511007827740528*^9, 
   3.5110078731628532`*^9, {3.511008020335705*^9, 3.51100802920251*^9}, {
   3.511009389156073*^9, 3.51100941623073*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Look at raw data - the permutation found by the beam search has a better \
evaluation than the true model\
\>", "Subsubsection",
 CellChangeTimes->{{3.511009182663031*^9, 3.511009216932345*^9}, {
  3.5110092571978283`*^9, 3.511009262273303*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oneTestRun", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"raw", "=", 
      RowBox[{"randomPeaksAndPermutation", "[", 
       RowBox[{"5", ",", "5", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0.1", ",", "0.01"}], "}"}], ",", "0.0001", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"peaks", "=", 
         RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
        RowBox[{"correctPerm", "=", 
         RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"beamPerm", "=", 
          RowBox[{"beamCorrespondence", "[", 
           RowBox[{"peaks", ",", "5", ",", 
            RowBox[{"9999", "/", "10000"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"oCorrect", "=", 
             RowBox[{"Ordering", "[", 
              RowBox[{"correctPerm", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{"oBeam", "=", 
             RowBox[{"Ordering", "[", 
              RowBox[{"beamPerm", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<correct\>\"", "\[Rule]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "oCorrect", "]"}], "]"}], "&"}], ",", 
               "correctPerm"}], "]"}]}], ",", 
            RowBox[{"\"\<beam\>\"", "\[Rule]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "oBeam", "]"}], "]"}], "&"}], ",", "beamPerm"}],
               "]"}]}], ",", 
            RowBox[{"\"\<peaks\>\"", "\[Rule]", "peaks"}], ",", 
            RowBox[{"\"\<error\>\"", "\[Rule]", 
             RowBox[{"fracDifferent", "[", 
              RowBox[{"correctPerm", ",", "beamPerm"}], "]"}]}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511007103935389*^9, 3.5110072318273573`*^9}, {
  3.511007384247465*^9, 3.511007385756609*^9}, {3.511007517492507*^9, 
  3.511007549154875*^9}, {3.511007591245886*^9, 3.5110076058569803`*^9}, {
  3.511007770387322*^9, 3.511007774735757*^9}, {3.511007821870696*^9, 
  3.511007840141357*^9}, {3.5110078856839743`*^9, 3.511007886510253*^9}, {
  3.511008053942896*^9, 3.51100819261339*^9}, {3.5110082768360662`*^9, 
  3.511008321791383*^9}, {3.511008368072792*^9, 3.511008372338105*^9}, {
  3.51100869373742*^9, 3.511008706868116*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"correct\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"beam\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"peaks\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.9823026461168887`", ",", "3.6346779849002537`", ",", 
        "5.27682052980657`", ",", "7.318364549047718`", ",", 
        "10.610960035086437`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1.096048785329963`", ",", "3.541009671540488`", ",", 
        "5.111422853987667`", ",", "7.303000681795698`", ",", 
        "10.512839922037179`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.6147940928534189`", ",", "3.969907039441116`", ",", 
        "5.755726689148052`", ",", "7.352307735530798`", ",", 
        "10.670626261665266`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2.058865755071433`", ",", "2.3406170323905853`", ",", 
        "3.6985211456049836`", ",", "7.166850075186587`", ",", 
        "10.232559519052309`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.03359040323324232`", ",", "4.722627455090603`", ",", 
        "6.622237328197323`", ",", "7.438583387904023`", ",", 
        "10.849977130885305`"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"error\"\>", "\[Rule]", 
    FractionBox["4", "25"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511008194117055*^9, 3.5110082853218803`*^9, 3.511008324313058*^9, 
   3.5110083735270863`*^9, {3.511008698378639*^9, 3.5110087079830503`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pks", "=", 
  RowBox[{"\"\<peaks\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008513491726*^9, 3.511008525345607*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.9823026461168887`", ",", "3.6346779849002537`", ",", 
     "5.27682052980657`", ",", "7.318364549047718`", ",", 
     "10.610960035086437`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.096048785329963`", ",", "3.541009671540488`", ",", 
     "5.111422853987667`", ",", "7.303000681795698`", ",", 
     "10.512839922037179`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.6147940928534189`", ",", "3.969907039441116`", ",", 
     "5.755726689148052`", ",", "7.352307735530798`", ",", 
     "10.670626261665266`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.058865755071433`", ",", "2.3406170323905853`", ",", 
     "3.6985211456049836`", ",", "7.166850075186587`", ",", 
     "10.232559519052309`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.03359040323324232`", ",", "4.722627455090603`", ",", 
     "6.622237328197323`", ",", "7.438583387904023`", ",", 
     "10.849977130885305`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511008528923657*^9, 3.511008716213334*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correct", "=", 
  RowBox[{"\"\<correct\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008537693356*^9, 3.5110085546700497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.511008555335916*^9, 3.511008717621523*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"beam", "=", 
  RowBox[{"\"\<beam\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008557555874*^9, 3.511008564186593*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.511008565183269*^9, 3.511008718827014*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluate", "[", 
  RowBox[{"correct", ",", "pks", ",", 
   RowBox[{"9999", "/", "10000"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511008593205011*^9, 3.5110086128789177`*^9}, {
  3.511008658743696*^9, 3.5110086611591043`*^9}, {3.511008723484035*^9, 
  3.511008727259886*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", "0.9999999999810076`"}], "]"}]], "Output",
 CellChangeTimes->{
  3.511008613394011*^9, 3.511008672590452*^9, {3.511008724548794*^9, 
   3.511008727916494*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluate", "[", 
  RowBox[{"beam", ",", "pks", ",", 
   RowBox[{"9999", "/", "10000"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511008615968237*^9, 3.511008623192707*^9}, {
  3.5110086648999043`*^9, 3.511008668468174*^9}, {3.511008731828061*^9, 
  3.511008733830921*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"2", ",", "0.9999993286986165`"}], "]"}]], "Output",
 CellChangeTimes->{3.511008623681943*^9, 3.51100866922755*^9, 
  3.5110087348520603`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["7 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.511219116155064*^9, 3.511219133093357*^9}}],

Cell[CellGroupData[{

Cell["\<\
Theoretical background to cross-validation evaluation function\
\>", "Subsection",
 CellChangeTimes->{{3.511219143465796*^9, 3.5112191638533916`*^9}, {
  3.5112301127803783`*^9, 3.511230123929912*^9}, {3.5112303322740107`*^9, 
  3.5112303355828753`*^9}}],

Cell["\<\
I want to try to come up with a routine that uses cross-validation to \
evaluate model fit.  One open question is whether to use the minimum or \
average value over all folds as the evaluation.\
\>", "Text",
 CellChangeTimes->{{3.51121914865551*^9, 3.5112191764353647`*^9}, {
  3.511219936083868*^9, 3.511219957077806*^9}}],

Cell[TextData[{
 "I spent several hours calculating to discover that (if samples are in \
columns) then the shift factors (s in the paper) are the columns of the \
transformed samples and the reaction factors are the columns of the PCA \
eigenvector matrix.  If X is the mean-centered data, we have \
X=\[CapitalAlpha]S where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{
     SuperscriptBox["P", "T"], "=", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]]],
 " where P is the matrix of eigenvectors of the covariance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"n", "-", "1"}]], "X", " ", 
    SuperscriptBox["X", "T"]}], TraditionalForm]]],
 ".  This relationship still holds even if you grab only the most significant \
eigenvectors."
}], "Text",
 CellChangeTimes->{{3.5112297638897343`*^9, 3.511229826054237*^9}, {
  3.511229871497705*^9, 3.5112299563107643`*^9}, {3.5112299876630096`*^9, 
  3.511230023648621*^9}, {3.511230095088478*^9, 3.511230102550654*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["11-13 April 2011 Monday-Wednesday", "Section",
 CellChangeTimes->{{3.511820750724427*^9, 3.511820758155676*^9}}],

Cell["\<\
Discuss and investigate different options for version control and hosting for \
the development of the metabolomics code.\
\>", "Text",
 CellChangeTimes->{{3.511820764446878*^9, 3.511820782851989*^9}, {
  3.511821108925292*^9, 3.5118211197376823`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["14 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.511816351396853*^9, 3.511816358660035*^9}}],

Cell["Install fresh ubuntu on bio-db", "Subsection",
 CellChangeTimes->{{3.5118207247630377`*^9, 3.511820737386832*^9}}],

Cell[CellGroupData[{

Cell["Work on creating evaluation based on cross-validation", "Subsection",
 CellChangeTimes->{{3.5118163730546103`*^9, 3.511816374053586*^9}, {
  3.511820713362322*^9, 3.5118207169880133`*^9}, {3.511820789049819*^9, 
  3.5118207894091663`*^9}, {3.511821122451015*^9, 3.511821150456105*^9}}],

Cell[CellGroupData[{

Cell["\<\
First attempt is to use the expectation maximization algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.511826577243286*^9, 3.511826591073162*^9}}],

Cell["\<\
The following is a direct translation from the paper (I didn't use the \
missing values formulation yet).  I can't get it to work\
\>", "Text",
 CellChangeTimes->{{3.5118266433248873`*^9, 3.511826687291123*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"emPCA", "[", 
   RowBox[{"y_List", ",", "numEigenvectors_Integer"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"eStep", " ", "=", " ", 
       RowBox[{"Function", "[", 
        RowBox[{"c", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ct", "=", 
             RowBox[{"Transpose", "[", "c", "]"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Inverse", "[", 
             RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}], 
          "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"mStep", "=", 
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"xt", "=", 
             RowBox[{"Transpose", "[", "x", "]"}]}], "}"}], ",", 
           RowBox[{"y", ".", "xt", ".", 
            RowBox[{"Inverse", "[", 
             RowBox[{"x", ".", "xt"}], "]"}]}]}], "]"}]}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"iteration", "=", 
         RowBox[{"Function", "[", 
          RowBox[{"c", ",", 
           RowBox[{"mStep", "[", 
            RowBox[{"eStep", "[", "c", "]"}], "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"initialMatrix", "=", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "1"}], "/", 
                RowBox[{"(", 
                 RowBox[{"1", "+", "numEigenvectors"}], ")"}]}], ",", 
               RowBox[{"1", "/", 
                RowBox[{"(", 
                 RowBox[{"1", "+", "numEigenvectors"}], ")"}]}]}], "}"}], ",",
              "numEigenvectors"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"Length", "[", "y", "]"}], "}"}]}], "]"}]}]}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"FixedPoint", "[", 
       RowBox[{"iteration", ",", "initialMatrix"}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51182225878246*^9, 3.511822259770529*^9}, {
  3.511822297191152*^9, 3.511822440202243*^9}, {3.51182247898211*^9, 
  3.5118227954702187`*^9}, {3.511822878737665*^9, 3.511822885244844*^9}, {
  3.511823892631011*^9, 3.5118238973028708`*^9}, {3.5118239451165133`*^9, 
  3.511823970022994*^9}, {3.511824004378869*^9, 3.511824036952547*^9}, {
  3.5118240739529753`*^9, 3.5118241106677933`*^9}, {3.51182414344217*^9, 
  3.5118241715706053`*^9}, {3.5118280536227827`*^9, 3.5118280619055367`*^9}, {
  3.5118664157756987`*^9, 3.5118664645681877`*^9}, {3.511866760553266*^9, 
  3.511866766659512*^9}, {3.511866847863205*^9, 3.511866849476807*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "testPCAValues", "]"}]], "Input",
 CellChangeTimes->{{3.511866356675618*^9, 3.511866366931859*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.5118663793106213`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["I can't get it to work because it doesn't", "Subsubsection",
 CellChangeTimes->{{3.5118280726318607`*^9, 3.511828110471066*^9}}],

Cell["\<\
Here I demonstrate symbolically that the steps given in the paper will always \
yield the same estimate for c when there are two eigenvectors for a space of \
2D points.  I, however, saw the same equations (with different letters) in \
another paper.  So, there must be something I am not understanding here.\
\>", "Text",
 CellChangeTimes->{{3.511828112365816*^9, 3.511828129038965*^9}, {
  3.511828230422995*^9, 3.5118282358501253`*^9}, {3.511828272756041*^9, 
  3.51182828578802*^9}, {3.511831714385721*^9, 3.511831745309984*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"l", ",", "m"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824743628162*^9, 3.51182476047898*^9}, {
  3.511827234371356*^9, 3.511827251534829*^9}, {3.511827289066482*^9, 
  3.511827291974543*^9}, {3.511827335632998*^9, 3.511827338272303*^9}, {
  3.5118280095942173`*^9, 3.511828012512713*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "k", ",", "e", ",", "l"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "f", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511827293070529*^9, 3.5118273389239683`*^9, 
  3.511828014230467*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"g", ",", "h"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5118242057710876`*^9, 3.511824225466058*^9}, {
  3.511827257173251*^9, 3.511827265705167*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "h"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824226611719*^9, 3.511824534133803*^9, 3.5118247651524353`*^9, 
   3.511825966034443*^9, {3.511827267414835*^9, 3.511827295049968*^9}, 
   3.511827340651195*^9, 3.511828015444652*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ct", "=", 
  RowBox[{"Transpose", "[", "c", "]"}]}]], "Input",
 CellChangeTimes->{{3.511824231039188*^9, 3.511824235937892*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "i"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"h", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824237135078*^9, 3.511824537183404*^9, 3.511824768141323*^9, 
   3.511825967765525*^9, {3.51182727023735*^9, 3.5118272962197104`*^9}, 
   3.511827341674924*^9, 3.511828016423279*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}]], "Input",
 CellChangeTimes->{{3.511824249139772*^9, 3.5118242837829247`*^9}, {
   3.511824582023341*^9, 3.511824587718305*^9}, 3.511824773195694*^9, 
   3.511825972254356*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "k"}]}], ",", 
     RowBox[{
      RowBox[{"e", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"f", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "l"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "m"}]}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "k"}]}], ",", 
     RowBox[{
      RowBox[{"e", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"f", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "l"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "m"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5118259727397213`*^9, {3.511827272571354*^9, 3.511827298241509*^9}, 
   3.5118273470241423`*^9, 3.5118280184597178`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"xt", "=", 
   RowBox[{"Transpose", "[", "x", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.511824637378038*^9, 3.511824646094982*^9}, {
  3.5118259748194933`*^9, 3.5118259813115387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cnew", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"y", ".", "xt", ".", 
    RowBox[{"Inverse", "[", 
     RowBox[{"x", ".", "xt"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824656873125*^9, 3.511824696490347*^9}, 
   3.5118247835429077`*^9, {3.511827375302516*^9, 3.51182737840842*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "h"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118246751416807`*^9, 3.511824702734563*^9}, 
   3.511824785218449*^9, {3.5118273541553717`*^9, 3.511827379242393*^9}, 
   3.511828027058408*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", "cnew"}]], "Input",
 CellChangeTimes->{{3.511824707482449*^9, 3.511824709134823*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.03000510576471571`", ",", "0.04317831704160113`", ",", 
     RowBox[{"-", "0.01765818345774761`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.1493817896165539`"}], ",", "0.14485202529410213`", ",", 
     "0.2264860978978671`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.016841501264197978`"}], ",", 
     RowBox[{"-", "0.22131285820080016`"}], ",", "0.06616783233854862`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511824710952999*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"c", ",", "ct", ",", "cnew", ",", "x", ",", "xt", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511828169756722*^9, 3.511828194113166*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Here is some old code I used to test my implementation and discover that it \
didn't work\
\>", "Subsubsection",
 CellChangeTimes->{{3.511828147500149*^9, 3.5118281670148973`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPCAValues", "=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rotxy", "=", 
       RowBox[{"RotationTransform", "[", 
        RowBox[{
         RowBox[{"\[Pi]", "/", "4"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"rotxy", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "5", ",", "2"}], "}"}], " ", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"NormalDistribution", "[", 
            RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "10", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.511822913598412*^9, 3.511823004073517*^9}, {
   3.5118230460181*^9, 3.5118230637830563`*^9}, {3.511823424411964*^9, 
   3.51182358564915*^9}, 3.511823730740614*^9, {3.51182376798318*^9, 
   3.511823795175675*^9}, {3.5118259078471193`*^9, 3.5118259299211893`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], ",", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
   "testPCAValues"}], "]"}]], "Input",
 CellChangeTimes->{{3.5118230073904676`*^9, 3.511823038405684*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], 
   PointBox[{{0.18940152845302283`, 
    1.8108345229800502`}, {-0.16711705993044637`, -0.4225862210468362}, {
    4.68913098701095, -6.071686372735446}, {-1.2907148376899495`, 
    2.059342380974703}, {-1.111807659515405, 1.0889009462438664`}, {
    2.2474094241241405`, -1.3543023862311965`}, {
    4.950572262894917, -4.56128982537505}, {-5.582115718348625, 
    6.658839358540183}, {-0.17377344377904952`, 
    1.0042142401073417`}, {-0.4510127124628575, -1.2048827274712897`}}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.5118230395223703`*^9, 3.511823065602384*^9}, 
   3.511823483609436*^9, 3.511823529735321*^9, 3.511823570537191*^9, {
   3.51182377348003*^9, 3.5118237980916986`*^9}, {3.511825911565703*^9, 
   3.511825931924614*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvectors", "[", 
  RowBox[{"Covariance", "[", "testPCAValues", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51182309322336*^9, 3.511823117601553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.6450364034577876`", ",", 
     RowBox[{"-", "0.7601981946716658`"}], ",", 
     RowBox[{"-", "0.07763210052666648`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.1392118674155323`", ",", "0.017011220320279033`", ",", 
     "0.9901164953448129`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7513641555097784`", ",", "0.6494684928471548`", ",", 
     RowBox[{"-", "0.11680146665997973`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118231002692757`*^9, 3.511823118446273*^9}, 
   3.511823799355966*^9, {3.511825914367676*^9, 3.511825933114903*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emPCA", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "testPCAValues", "]"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511823128097065*^9, 3.511823135452425*^9}, {
  3.51182327405853*^9, 3.511823278497478*^9}, {3.511823330072089*^9, 
  3.511823360309957*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.1064721260971414`"}], ",", "0.2238329505071155`", ",", 
       
       RowBox[{"-", "0.15455346300164052`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1723087793945891`", ",", "0.24536488594100525`", ",", 
       "0.039545437961167496`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669771118`"}], ",", 
       RowBox[{"-", "0.07341842112114794`"}], ",", 
       RowBox[{"-", "0.1408177074356689`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609686107`"}], ",", "0.22383295050777718`", 
       ",", 
       RowBox[{"-", "0.15455346300165473`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939473288`", ",", "0.2453648859424291`", ",", 
       "0.039545437960772034`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669763813`"}], ",", 
       RowBox[{"-", "0.07341842112181407`"}], ",", 
       RowBox[{"-", "0.14081770743537803`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609674561`"}], ",", "0.22383295050893537`", 
       ",", 
       RowBox[{"-", "0.15455346300197448`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939425238`", ",", "0.24536488594146988`", ",", 
       "0.03954543796073651`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669710477`"}], ",", 
       RowBox[{"-", "0.07341842112014518`"}], ",", 
       RowBox[{"-", "0.14081770743555522`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609746326`"}], ",", "0.22383295050794771`", 
       ",", 
       RowBox[{"-", "0.15455346300218054`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939367417`", ",", "0.2453648859377182`", ",", 
       "0.03954543796161403`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669707768`"}], ",", 
       RowBox[{"-", "0.07341842111763075`"}], ",", 
       RowBox[{"-", "0.1408177074364243`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609760803`"}], ",", "0.22383295050981644`", 
       ",", 
       RowBox[{"-", "0.15455346300295858`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1723087793932363`", ",", "0.24536488593624028`", ",", 
       "0.03954543796179877`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669680324`"}], ",", 
       RowBox[{"-", "0.07341842111514119`"}], ",", 
       RowBox[{"-", "0.1408177074370931`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609712575`"}], ",", "0.22383295050973118`", 
       ",", 
       RowBox[{"-", "0.15455346300255002`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939296896`", ",", "0.24536488593667372`", ",", 
       "0.03954543796143284`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669626522`"}], ",", 
       RowBox[{"-", "0.07341842111553198`"}], ",", 
       RowBox[{"-", "0.1408177074365362`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609720924`"}], ",", "0.22383295051051988`", 
       ",", 
       RowBox[{"-", "0.15455346300289463`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939294587`", ",", "0.24536488593648187`", ",", 
       "0.03954543796148613`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669629653`"}], ",", 
       RowBox[{"-", "0.07341842111471752`"}], ",", 
       RowBox[{"-", "0.14081770743684885`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.1064721260974899`"}], ",", "0.22383295051226781`", ",", 
       RowBox[{"-", "0.15455346300373307`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939305334`", ",", "0.24536488593644634`", ",", 
       "0.039545437961585606`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669659052`"}], ",", 
       RowBox[{"-", "0.07341842111353802`"}], ",", 
       RowBox[{"-", "0.14081770743749544`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609785406`"}], ",", "0.2238329505147547`", ",", 
       RowBox[{"-", "0.15455346300489126`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939324607`", ",", "0.24536488593643213`", ",", 
       "0.03954543796173482`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2126891166969782`"}], ",", 
       RowBox[{"-", "0.0734184211118949`"}], ",", 
       RowBox[{"-", "0.14081770743837918`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609751744`"}], ",", "0.2238329505120049`", ",", 
       RowBox[{"-", "0.1545534630036549`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939336864`", ",", "0.24536488593708583`", ",", 
       "0.039545437961596264`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669680812`"}], ",", 
       RowBox[{"-", "0.07341842111416508`"}], ",", 
       RowBox[{"-", "0.14081770743744393`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609745704`"}], ",", "0.22383295051419339`", 
       ",", 
       RowBox[{"-", "0.15455346300438677`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939356137`", ",", "0.24536488593818717`", ",", 
       "0.039545437961361785`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669695045`"}], ",", 
       RowBox[{"-", "0.07341842111372632`"}], ",", 
       RowBox[{"-", "0.1408177074377086`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.511823235891837*^9, 3.511823279263089*^9, {3.511823348970051*^9, 
   3.511823360851534*^9}, 3.511823856773307*^9, 3.511823905201662*^9, {
   3.51182403357724*^9, 3.5118240478254757`*^9}, 3.511824117435596*^9, 
   3.511824178892668*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["15 April 2011 Friday", "Section",
 CellChangeTimes->{{3.5118656355005083`*^9, 3.511865640703101*^9}}],

Cell[CellGroupData[{

Cell["Try a different approach to see if EM method works", "Subsection",
 CellChangeTimes->{{3.5118280726318607`*^9, 3.511828110471066*^9}, {
   3.5118656598541594`*^9, 3.5118657141949377`*^9}, 3.511867387745481*^9}],

Cell["\<\
Maybe it didn't work because my eigenvector matrix had all included.  It \
doesn't give the same result.  Whether it converges to something or not, I'll \
have to check in the sequel.\
\>", "Text",
 CellChangeTimes->{
  3.511865723557836*^9, {3.511866247227812*^9, 3.511866266209203*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"l", ",", "m"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824743628162*^9, 3.51182476047898*^9}, {
  3.511827234371356*^9, 3.511827251534829*^9}, {3.511827289066482*^9, 
  3.511827291974543*^9}, {3.511827335632998*^9, 3.511827338272303*^9}, {
  3.5118280095942173`*^9, 3.511828012512713*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "k", ",", "e", ",", "l"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "f", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511827293070529*^9, 3.5118273389239683`*^9, 
  3.511828014230467*^9, 3.5118657509938583`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "g", "}"}], ",", 
    RowBox[{"{", "h", "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5118242057710876`*^9, 3.511824225466058*^9}, {
  3.511827257173251*^9, 3.511827265705167*^9}, {3.511865741216736*^9, 
  3.511865742786963*^9}, {3.511866006493957*^9, 3.511866008301683*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "g", "}"}], ",", 
   RowBox[{"{", "h", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824226611719*^9, 3.511824534133803*^9, 3.5118247651524353`*^9, 
   3.511825966034443*^9, {3.511827267414835*^9, 3.511827295049968*^9}, 
   3.511827340651195*^9, 3.511828015444652*^9, {3.511865748808923*^9, 
   3.5118657524467297`*^9}, 3.5118660089854593`*^9, 3.511866228771812*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ct", "=", 
  RowBox[{"Transpose", "[", "c", "]"}]}]], "Input",
 CellChangeTimes->{{3.511824231039188*^9, 3.511824235937892*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"g", ",", "h"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824237135078*^9, 3.511824537183404*^9, 3.511824768141323*^9, 
   3.511825967765525*^9, {3.51182727023735*^9, 3.5118272962197104`*^9}, 
   3.511827341674924*^9, 3.511828016423279*^9, 3.5118657538789454`*^9, {
   3.511866010422905*^9, 3.511866031779213*^9}, 3.511866090722723*^9, 
   3.511866230397913*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}]], "Input",
 CellChangeTimes->{{3.511824249139772*^9, 3.5118242837829247`*^9}, {
   3.511824582023341*^9, 3.511824587718305*^9}, 3.511824773195694*^9, 
   3.511825972254356*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "g"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"b", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"d", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"g", " ", "k"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"e", " ", "g"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"f", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"g", " ", "l"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"h", " ", "m"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5118259727397213`*^9, {3.511827272571354*^9, 3.511827298241509*^9}, 
   3.5118273470241423`*^9, 3.5118280184597178`*^9, 3.511865757725314*^9, {
   3.511866011848209*^9, 3.511866037613937*^9}, 3.5118660944800577`*^9, 
   3.511866232108172*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"xt", "=", 
   RowBox[{"Transpose", "[", "x", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.511824637378038*^9, 3.511824646094982*^9}, {
  3.5118259748194933`*^9, 3.5118259813115387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cnew", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"y", ".", "xt", ".", 
    RowBox[{"Inverse", "[", 
     RowBox[{"x", ".", "xt"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824656873125*^9, 3.511824696490347*^9}, 
   3.5118247835429077`*^9, {3.511827375302516*^9, 3.51182737840842*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["a", "2"], " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["e", "2"], " ", "g"}], "+", 
        RowBox[{"a", " ", "b", " ", "h"}], "+", 
        RowBox[{"e", " ", "f", " ", "h"}], "+", 
        RowBox[{"d", " ", "h", " ", "k"}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["k", "2"]}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["l", "2"]}], "+", 
        RowBox[{"h", " ", "l", " ", "m"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}], ",", 
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"a", " ", "b", " ", "g"}], "+", 
        RowBox[{"e", " ", "f", " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["b", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["d", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["f", "2"], " ", "h"}], "+", 
        RowBox[{"d", " ", "g", " ", "k"}], "+", 
        RowBox[{"g", " ", "l", " ", "m"}], "+", 
        RowBox[{"h", " ", 
         SuperscriptBox["m", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118246751416807`*^9, 3.511824702734563*^9}, 
   3.511824785218449*^9, {3.5118273541553717`*^9, 3.511827379242393*^9}, 
   3.511828027058408*^9, 3.5118660182275343`*^9, 3.5118660559544888`*^9, {
   3.5118662222947702`*^9, 3.511866234907547*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", "cnew"}]], "Input",
 CellChangeTimes->{{3.511824707482449*^9, 3.511824709134823*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["a", "2"], " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["e", "2"], " ", "g"}], "+", 
        RowBox[{"a", " ", "b", " ", "h"}], "+", 
        RowBox[{"e", " ", "f", " ", "h"}], "+", 
        RowBox[{"d", " ", "h", " ", "k"}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["k", "2"]}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["l", "2"]}], "+", 
        RowBox[{"h", " ", "l", " ", "m"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}], ",", 
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"a", " ", "b", " ", "g"}], "+", 
        RowBox[{"e", " ", "f", " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["b", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["d", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["f", "2"], " ", "h"}], "+", 
        RowBox[{"d", " ", "g", " ", "k"}], "+", 
        RowBox[{"g", " ", "l", " ", "m"}], "+", 
        RowBox[{"h", " ", 
         SuperscriptBox["m", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511824710952999*^9, 3.51186602753262*^9, 
  3.511866080730216*^9, 3.511866238298141*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"c", ",", "ct", ",", "cnew", ",", "x", ",", "xt", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511828169756722*^9, 3.511828194113166*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
I tried testing the EM method with fewer eigenvectors \[LongDash] it still \
doesn't work\
\>", "Subsection",
 CellChangeTimes->{{3.511828147500149*^9, 3.5118281670148973`*^9}, {
  3.5118670805656233`*^9, 3.5118670866150703`*^9}, {3.51186727406637*^9, 
  3.5118672956229677`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPCAValues", "=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rotxy", "=", 
       RowBox[{"RotationTransform", "[", 
        RowBox[{
         RowBox[{"\[Pi]", "/", "4"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"rotxy", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "5", ",", "2"}], "}"}], " ", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"NormalDistribution", "[", 
            RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "20", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.511822913598412*^9, 3.511823004073517*^9}, {
   3.5118230460181*^9, 3.5118230637830563`*^9}, {3.511823424411964*^9, 
   3.51182358564915*^9}, 3.511823730740614*^9, {3.51182376798318*^9, 
   3.511823795175675*^9}, {3.5118259078471193`*^9, 3.5118259299211893`*^9}, 
   3.51186658086516*^9, {3.511866714431807*^9, 3.511866724405883*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], ",", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
   "testPCAValues"}], "]"}]], "Input",
 CellChangeTimes->{{3.5118230073904676`*^9, 3.511823038405684*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJwBUQGu/iFib1JlAgAAABQAAAACAAAAipUEWCJmC0CEvdZ1WtQQwKBto359
0iDApi8D+F4VI0A6GPC7E3oAQIXVO7SiefG/0xxJ0gWEEUBxvip1qP4LwHQ0
TahfLxvAoL27itRPCkB+izdIyxoQwGgnALSTvQFA4JfGODT5D8BUzKE9Y9YP
QAS3KaKN1Pq/7uFFW7Z9CUA0fB84qdL/Pyyhe4L06fe/dxYyvd8567/mp9dw
+jXxPyslcWagz/y/ltUNo2OxAUCHQigFKschwA7J66po+x9AfEkGgvqw4L9+
1FmSE5n4P2hnAGCqiAzA9Dc/AfeDBEAGpc767C34P6xg+5k27Oa/UuEGhtZO
0L/MKvzep2j2P/SIGnJcUwVAWJoPkkfy+b/bLoXqoScSwNNbvLobTBVA+nN7
8Wp3+b96TY545d/RPxvf5oKA+AxAw70rwxpACMCTC6EC
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.5118230395223703`*^9, 3.511823065602384*^9}, 
   3.511823483609436*^9, 3.511823529735321*^9, 3.511823570537191*^9, {
   3.51182377348003*^9, 3.5118237980916986`*^9}, {3.511825911565703*^9, 
   3.511825931924614*^9}, 3.51186630487007*^9, 3.511866593215919*^9, {
   3.5118667157595387`*^9, 3.511866725867012*^9}, 3.511866809489738*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvectors", "[", 
  RowBox[{"Covariance", "[", "testPCAValues", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51182309322336*^9, 3.511823117601553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7404896823905587`"}], ",", "0.672053884915989`", ",", 
     RowBox[{"-", "0.004313472204141603`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.023620370280576626`", ",", "0.032438825228843365`", ",", 
     "0.9991945760088878`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6716525205647171`"}], ",", 
     RowBox[{"-", "0.7397913884245338`"}], ",", "0.039894777001044754`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118231002692757`*^9, 3.511823118446273*^9}, 
   3.511823799355966*^9, {3.511825914367676*^9, 3.511825933114903*^9}, 
   3.511866307615197*^9, 3.51186659047123*^9, {3.511866717289679*^9, 
   3.511866727208481*^9}, 3.511866813049716*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emPCA", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "testPCAValues", "]"}], ",", "1"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511823128097065*^9, 3.511823135452425*^9}, {
  3.51182327405853*^9, 3.511823278497478*^9}, {3.511823330072089*^9, 
  3.511823360309957*^9}, {3.511866309884387*^9, 3.511866310223401*^9}, {
  3.511866837203855*^9, 3.511866841561882*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{
  3.511823235891837*^9, 3.511823279263089*^9, {3.511823348970051*^9, 
   3.511823360851534*^9}, 3.511823856773307*^9, 3.511823905201662*^9, {
   3.51182403357724*^9, 3.5118240478254757`*^9}, 3.511824117435596*^9, 
   3.511824178892668*^9, 3.5118663782688*^9, 3.511866471743322*^9, 
   3.51186660242815*^9, {3.5118667095616903`*^9, 3.511866718943942*^9}, 
   3.511866778125751*^9, {3.511866818532917*^9, 3.511866868925498*^9}, 
   3.511867049731161*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tried writing cross-validation without using missing values", \
"Subsection",
 CellChangeTimes->{{3.5118674205047913`*^9, 3.511867441497856*^9}}],

Cell[TextData[{
 "This section also includes work I did on 19 April.  It relies on the \
description of PCA and SVD given in",
 StyleBox[" Practical approaches to principal component analysis in the \
presence of missing values",
  FontSlant->"Italic"],
 " by Ilin and Raiko.  That description is available in many places, but I \
wanted to note where I got it."
}], "Text",
 CellChangeTimes->{{3.512213113017078*^9, 3.5122131206921*^9}, {
  3.512213272681509*^9, 3.512213341200807*^9}, {3.5122133762170963`*^9, 
  3.5122133877471867`*^9}}],

Cell["\<\
This section also includes bug fixes from 21 April and 22 April\
\>", "Text",
 CellChangeTimes->{{3.512383318443296*^9, 3.512383333064789*^9}, {
   3.5124727816296253`*^9, 3.512472784129084*^9}, 3.512472966331161*^9, {
   3.512475627675312*^9, 3.5124756308990583`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wxDecompose", "::", "usage"}], "=", 
   "\"\<wxDecompose[matrix,fracVar,minComponents]\nGiven a matrix whose \
columns have data and whose rows have zero mean, decomposes it into W and X \
so that W.X\[TildeTilde]the original matrix and they have at least \
minComponents dimensions and sufficient dimensions to capture fracVar \
fraction of the variance \n\nSee 19 April 2011 for how wx decomposition \
relates to sample and peak parameter sets\n\nReturns {W,X}\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.51187433405383*^9, 3.511874428767314*^9}, {
  3.512214411033833*^9, 3.512214429702531*^9}, {3.5124863836306047`*^9, 
  3.5124864248269*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wxDecompose", "[", 
    RowBox[{"matrix_List", ",", "fracVar_", ",", 
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}], "\[Equal]", "2"}], "&&", 
    RowBox[{"NumberQ", "[", "fracVar", "]"}]}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"svd", "=", 
      RowBox[{"SingularValueDecomposition", "[", "matrix", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"u", "=", 
         RowBox[{"svd", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"\[CapitalSigma]", "=", 
         RowBox[{"svd", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
        RowBox[{"vt", "=", 
         RowBox[{"ConjugateTranspose", "[", 
          RowBox[{"svd", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"numSing", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"svd", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"singularValues", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[CapitalSigma]", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Range", "[", "numSing", "]"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"fracVariances", "=", 
            RowBox[{"Normalize", "[", 
             RowBox[{
              RowBox[{"singularValues", " ", "singularValues"}], ",", 
              "Total"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"cumulativeVars", "=", 
              RowBox[{"Accumulate", "[", "fracVariances", "]"}]}], "}"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"componentsForFracvar", "=", 
                RowBox[{"First", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{"cumulativeVars", ",", 
                    RowBox[{"x_", "/;", 
                    RowBox[{"x", "\[GreaterEqual]", "fracVar"}]}], ",", "1"}],
                    "]"}], "]"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"componentsRequired", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"minComponents", ",", "componentsForFracvar"}], 
                   "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{"With", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"w", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "u", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "componentsRequired", "]"}], "]"}], 
                    "]"}], "]"}]}], ",", 
                    RowBox[{"x", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[CapitalSigma]", ".", "vt"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "componentsRequired", "]"}], "]"}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"w", ",", "x"}], "}"}]}], "\[IndentingNewLine]", 
                 "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511872836935199*^9, 3.511873052256298*^9}, {
   3.51187309571113*^9, 3.5118731428736677`*^9}, {3.511873179462064*^9, 
   3.511873200107635*^9}, 3.511873252743943*^9, {3.511873293406554*^9, 
   3.5118732954100113`*^9}, {3.511873430917823*^9, 3.511873445028585*^9}, {
   3.511874006348283*^9, 3.5118740079462*^9}, {3.511874214256291*^9, 
   3.511874311517632*^9}, {3.512235641071343*^9, 3.512235651803873*^9}, {
   3.5122357827226954`*^9, 3.512235794154726*^9}, {3.512239855815856*^9, 
   3.512239896719326*^9}, {3.512383345381628*^9, 3.512383345865201*^9}, {
   3.512486284508099*^9, 3.5124862950222387`*^9}, {3.512486435668827*^9, 
   3.5124864419915037`*^9}, {3.512486505120953*^9, 3.5124865543374767`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reactionParameters", "::", "usage"}], "=", 
   "\"\<reactionParameters[positions,excludedSamples,fracVar,minComponents]\n\
Calculates the reaction parameters for each peak using SVD based PCA given a \
set of corresponding peak positions.  Samples at indices given by \
excludedSamples are not used to create the estimatereactionParameters\n\n\
positions is an array of dimensions samples\[Cross]peaks\n\nReturns \
{means,reactionCoefficients} where means is a 1\[Cross]peaks array and \
reactionCoefficients is a peaks\[Cross]d array where d is the number of \
components needed to get fracVar fraction of the variance or minComponents, \
whichever is larger\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867862249156*^9, 3.5118679750181847`*^9}, {
   3.511868047044405*^9, 3.5118682344055157`*^9}, {3.511868289001177*^9, 
   3.511868373435944*^9}, 3.511868666853695*^9, {3.511869029087685*^9, 
   3.511869035118875*^9}, {3.511869079639963*^9, 3.511869085392963*^9}, 
   3.511869150053361*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reactionParameters", "[", 
    RowBox[{
    "positions_List", ",", " ", "excludedSamples_List", ",", "fracVar_", ",", 
     
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"includedSamples", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "positions", "]"}], "]"}], ",", 
        "excludedSamples"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"editedPositions", "=", 
        RowBox[{"positions", "[", 
         RowBox[{"[", "includedSamples", "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"means", "=", 
          RowBox[{"Mean", "[", "editedPositions", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"meanCenteredPos", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "-", "means"}], "&"}], ",", "editedPositions"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"wxd", "=", 
              RowBox[{"wxDecompose", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "meanCenteredPos", "]"}], ",", 
                "fracVar", ",", "minComponents"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"w", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                RowBox[{"x", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"means", ",", " ", "w"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867634809342*^9, 3.5118676887450666`*^9}, {
   3.511867783773283*^9, 3.511867848347035*^9}, {3.511867981102407*^9, 
   3.5118679951572323`*^9}, {3.511868335114819*^9, 3.511868365203348*^9}, {
   3.51186882804211*^9, 3.511868853335334*^9}, {3.511868976255762*^9, 
   3.51186900669958*^9}, {3.511869038982575*^9, 3.5118690420521603`*^9}, {
   3.511872130454726*^9, 3.5118721425715523`*^9}, {3.511872173450019*^9, 
   3.511872343378471*^9}, {3.511872431097919*^9, 3.511872527906323*^9}, {
   3.511872574295742*^9, 3.5118726769177227`*^9}, {3.511872707033804*^9, 
   3.5118727622113543`*^9}, 3.511872884925878*^9, {3.5118744614287157`*^9, 
   3.511874511103971*^9}, {3.5122343213505163`*^9, 3.51223434875383*^9}, {
   3.51247280172294*^9, 3.512472843515829*^9}, {3.512475489937388*^9, 
   3.512475526571883*^9}, {3.5124755737702017`*^9, 3.512475641317971*^9}, {
   3.5124829159321337`*^9, 3.5124829175480843`*^9}, {3.512485939569365*^9, 
   3.512485950945801*^9}, {3.512486120135434*^9, 3.512486129623007*^9}, 
   3.5124861774897423`*^9, {3.512486209715159*^9, 3.512486263822072*^9}, {
   3.512486363330021*^9, 3.5124863670031843`*^9}, {3.51248647415965*^9, 
   3.512486484374013*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleParameters", "::", "usage"}], "=", 
   "\"\<sampleParameters[positions,excludedPeaks,fracVar,minComponents]\n\
Calculates the reaction parameters for each peak using SVD based PCA given a \
set of corresponding peak positions.  peaks at indices given by excludedPeaks \
are not used to create the estimate\n\npositions is an array of dimensions \
samples\[Cross]peaks\n\nReturns sampleCoefficients, a d\[Cross]samples array \
where d is the number of components needed to get fracVar fraction of the \
variance or minComponents, whichever is larger\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867862249156*^9, 3.5118679750181847`*^9}, {
   3.511868047044405*^9, 3.5118682344055157`*^9}, {3.511868289001177*^9, 
   3.511868373435944*^9}, {3.511868481125922*^9, 3.51186851183703*^9}, {
   3.511868584589797*^9, 3.5118686159195633`*^9}, 3.511868663802155*^9, {
   3.51186901800113*^9, 3.511869025606139*^9}, {3.511869069288373*^9, 
   3.5118690765660667`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleParameters", "[", 
    RowBox[{
    "positions_List", ",", " ", "excludedPeaks_List", ",", "fracVar_", ",", 
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"includedPeaks", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{
          RowBox[{"Dimensions", "[", "positions", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "excludedPeaks"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"editedPositions", "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", "positions", "]"}], "[", 
          RowBox[{"[", "includedPeaks", "]"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"means", "=", 
          RowBox[{"Mean", "[", "editedPositions", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"meanCenteredPos", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "-", "means"}], "&"}], ",", "editedPositions"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"wxd", "=", 
              RowBox[{"wxDecompose", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "meanCenteredPos", "]"}], ",", 
                "fracVar", ",", "minComponents"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"w", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                RowBox[{"x", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
              "\[IndentingNewLine]", "x"}], "\[IndentingNewLine]", "]"}]}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867634809342*^9, 3.5118676887450666`*^9}, {
  3.511867783773283*^9, 3.511867848347035*^9}, {3.511867981102407*^9, 
  3.5118679951572323`*^9}, {3.511868335114819*^9, 3.511868365203348*^9}, {
  3.511868642985024*^9, 3.51186865547156*^9}, {3.511868859403586*^9, 
  3.511868866086565*^9}, {3.511869055920473*^9, 3.511869063159749*^9}, {
  3.512234364908141*^9, 3.512234427291312*^9}, {3.512234459916006*^9, 
  3.5122344734711*^9}, {3.512475644526998*^9, 3.5124756915370827`*^9}, {
  3.5124828478110228`*^9, 3.512482897106379*^9}, {3.512486579955283*^9, 
  3.512486584439505*^9}, {3.512487653476987*^9, 3.512487654842448*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"evaluationExcludingData", "::", "usage"}], "=", 
   "\"\<estimationError[positions,testSamples,testPeaks,fracVar]\nReturns an \
evaluation object from estimating the testPeaks peaks in the testSamples \
samples using the data from the rest of the corresponding peak positions and \
the hough-transform linear model - in this case, gives negative root sum of \
squared error (rather than variance accounted for) and the number of \
dimensions required to get it\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.51186915593705*^9, 3.511869175936789*^9}, {
  3.511869300368232*^9, 3.5118694043359623`*^9}, {3.511869587703101*^9, 
  3.511869723905116*^9}, {3.511871437814871*^9, 3.51187146317939*^9}, {
  3.511871734224078*^9, 3.511871743947302*^9}, {3.511872022219335*^9, 
  3.511872080667845*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"evaluationExcludingData", "[", 
     RowBox[{
     "positions_List", ",", " ", "testSamples_List", ",", " ", 
      "testPeaks_List", ",", " ", "fracVar_"}], "]"}], "/;", 
    RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sampCoeff", "=", 
        RowBox[{"sampleParameters", "[", 
         RowBox[{"positions", ",", "testPeaks", ",", "fracVar"}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"reactCoeff", "=", 
        RowBox[{"reactionParameters", "[", 
         RowBox[{"positions", ",", "testSamples", ",", "fracVar"}], "]"}]}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reactCompNeeded", "=", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"reactCoeff", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"sampCompNeeded", "=", 
          RowBox[{"Length", "[", "sampCoeff", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"reactCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reactCompNeeded", "<", "sampCompNeeded"}], ",", 
           RowBox[{"reactionParameters", "[", 
            RowBox[{
            "positions", ",", "testSamples", ",", "fracVar", ",", 
             "sampCompNeeded"}], "]"}], ",", "reactCoeff"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sampCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"sampCompNeeded", "<", "reactCompNeeded"}], ",", 
           RowBox[{"sampleParameters", "[", 
            RowBox[{
            "positions", ",", "testPeaks", ",", "fracVar", ",", 
             "reactCompNeeded"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"estimatedPositions", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "+", 
                RowBox[{"First", "[", "reactCoeff", "]"}]}], "&"}], ",", 
              RowBox[{
               RowBox[{"reactCoeff", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ".", "sampCoeff"}]}], "]"}]}],
            "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"errors", "=", 
               RowBox[{"positions", "-", "estimatedPositions"}]}], ",", 
              RowBox[{"prinCompNeeded", "=", 
               RowBox[{"Max", "[", 
                RowBox[{"reactCompNeeded", ",", "sampCompNeeded"}], "]"}]}]}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"testErrors", "=", 
                RowBox[{"Transpose", "[", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"errors", "[", 
                    RowBox[{"[", "testSamples", "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "testPeaks", "]"}], "]"}], "]"}]}], "}"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"evaluation", "[", 
               RowBox[{"prinCompNeeded", ",", 
                RowBox[{"-", 
                 RowBox[{"Norm", "[", 
                  RowBox[{"testErrors", ",", "\"\<Frobenius\>\""}], "]"}]}]}],
                "]"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511868706674631*^9, 3.511868734809435*^9}, {
   3.5118688724096203`*^9, 3.51186888396852*^9}, {3.511869049305642*^9, 
   3.511869049961523*^9}, {3.511869675792551*^9, 3.511869679776599*^9}, {
   3.5118697581441393`*^9, 3.511869902015358*^9}, {3.511869965518659*^9, 
   3.51186998577255*^9}, {3.511870016154146*^9, 3.5118700204960833`*^9}, {
   3.5118701056745768`*^9, 3.5118701270589657`*^9}, {3.5118701683964043`*^9, 
   3.511870393826042*^9}, {3.5118704728662777`*^9, 3.511870492173098*^9}, {
   3.511870718629366*^9, 3.511870857068286*^9}, {3.511870887436969*^9, 
   3.511870970278597*^9}, 3.511871004055237*^9, {3.511871328529257*^9, 
   3.511871351767191*^9}, {3.5118714429595127`*^9, 3.511871593325675*^9}, {
   3.511871678173822*^9, 3.511871703938517*^9}, 3.511872048104251*^9, {
   3.511872090190297*^9, 3.5118721016799803`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["18 April 2011 Monday", "Section",
 CellChangeTimes->{{3.51220762555131*^9, 3.512207629961317*^9}}],

Cell[CellGroupData[{

Cell["\<\
Investigate using techniques from compressed sampling for peak matching\
\>", "Subsection",
 CellChangeTimes->{{3.512207634529702*^9, 3.5122076371298923`*^9}, {
  3.5122077053709173`*^9, 3.5122077077630463`*^9}, {3.512207738953519*^9, 
  3.51220775512346*^9}}],

Cell[CellGroupData[{

Cell["The technique", "Subsubsection",
 CellChangeTimes->{{3.5122098023327513`*^9, 3.512209804186956*^9}}],

Cell["\<\
Compressed sampling reconstructs a sparse coefficient matrix from a random \
sample of a signal.  Let f be a big vector containing the signal.  We assume \
that there is a basis in which f  is sparse, that is, if \[Beta] is a matrix \
of basis vectors and c is a sparse matrix of coefficients.\
\>", "Text",
 CellChangeTimes->{{3.5122078737934313`*^9, 3.512207886173491*^9}, {
  3.5122079190913143`*^9, 3.512207932001313*^9}, {3.512208457862558*^9, 
  3.512208460573002*^9}, {3.512208515561674*^9, 3.512208591030822*^9}}],

Cell["f=\[Beta] c", "Text",
 CellChangeTimes->{{3.5122085979642887`*^9, 3.5122086016033573`*^9}}],

Cell["\<\
Further, if \[Phi] is a sampling operator matrix (could be a subset of the \
identity matrix, for a random sample, or could be another matrix involving \
sampling averages of several function values) we can construct b, a sample of \
f, by writing\
\>", "Text",
 CellChangeTimes->{{3.512208606372451*^9, 3.51220866005823*^9}, {
  3.512208818657545*^9, 3.512208889443869*^9}}],

Cell["b=\[Phi] f", "Text",
 CellChangeTimes->{
  3.5122088083053637`*^9, {3.512208891448607*^9, 3.512208897664283*^9}}],

Cell["\<\
Note that \[Phi] has to carry a significant amount of information.  For \
example, if all the entries in \[Phi] are the same, then each sample adds no \
new information, and the problem cannot be solved.  If the samples all come \
from the beginning of the signal, then certain components may not be able to \
be reconstructed (this will depend on how the information about the signal is \
spread over the sparse basis vectors).\
\>", "Text",
 CellChangeTimes->{{3.5122089010727873`*^9, 3.5122089294666977`*^9}, {
  3.512208965303339*^9, 3.512208965607153*^9}, {3.512209087134952*^9, 
  3.5122091146867228`*^9}, {3.512209219031986*^9, 3.5122092389097767`*^9}, {
  3.5122092757540216`*^9, 3.512209334776148*^9}, {3.512209416957448*^9, 
  3.512209452962159*^9}}],

Cell["The reconstruction takes place by solving for", "Text",
 CellChangeTimes->{{3.512209472508246*^9, 3.512209486536283*^9}}],

Cell["\<\
A x = b where A = \[Phi] \[Beta], that is, where A is a sample of the basis \
vectors.  \
\>", "Text",
 CellChangeTimes->{{3.512209489801694*^9, 3.512209613336532*^9}, 
   3.5122096658299303`*^9}],

Cell["\<\
Then we approximate f by f \[TildeTilde] \[Beta] x.\
\>", "Text",
 CellChangeTimes->{{3.512209615162644*^9, 3.512209651815868*^9}}],

Cell[TextData[{
 "Since the sampling matrix takes a very small subset of the original \
vectors, the system of equations, A x = b is underdetermined.  The magic of \
the compressed reconstruction is to assume that c is sparse.  Then it turns \
out that (1) maximizing sparsity usually gives a unique solution (2) that \
solution is highly likely to be the correct one (3) you can maximize sparsity \
by minimizing the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " norm of x with the linear constraints given by A and b."
}], "Text",
 CellChangeTimes->{{3.5122096560411*^9, 3.512209794663268*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why I was interested", "Subsubsection",
 CellChangeTimes->{{3.512209808556814*^9, 3.512209811455234*^9}}],

Cell["\<\
I saw a linear combination involving a sparse matrix and thought such a \
linear combination resembles what we are doing.  In particular a permutation \
matrix is a sparse matrix and the \[Beta] matrix bears a resemblance to the \
linear model\
\>", "Text",
 CellChangeTimes->{{3.512209812982006*^9, 3.51220984002022*^9}, {
  3.512209909116531*^9, 3.512209934758561*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why I don't think it will work now", "Subsubsection",
 CellChangeTimes->{{3.512209952194242*^9, 3.512209958523588*^9}}],

Cell["\<\
The technique requires knowing a sampling matrix and the matrix of basis \
vectors, or, at least their product.  This doesn't seem to translate well to \
our problem where we'd have to a priori know the linear model (peak responses \
and sample parameters) which would take the place of the basis vectors.\
\>", "Text",
 CellChangeTimes->{{3.512210048978149*^9, 3.512210154429014*^9}, {
  3.512210224612221*^9, 3.5122102460044947`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Potential profit", "Subsubsection",
 CellChangeTimes->{{3.5122102587837877`*^9, 3.512210261192203*^9}}],

Cell[TextData[{
 "The idea of being able to solve for the permutation by minimizing the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " norm of a particular matrix with constraints determined by the peak \
samples is still intriguing to me.  I have a feeling I might be able to make \
something out of this."
}], "Text",
 CellChangeTimes->{{3.512210264968317*^9, 3.5122102976150217`*^9}, {
  3.512210329183045*^9, 3.51221035805725*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Meet with Dan and Paul", "Subsection",
 CellChangeTimes->{{3.512207757783503*^9, 3.512207765851366*^9}}],

Cell["\<\
We discussed moving from sending matlab scripts around to sending \
platform-dependent executables.\
\>", "Text",
 CellChangeTimes->{{3.512210380453668*^9, 3.5122104113530807`*^9}}],

Cell["\<\
The scientists have trouble finding which thing they should click on to \
accomplish their tasks amid the myriad of .m files.\
\>", "Text",
 CellChangeTimes->{{3.512210413019143*^9, 3.512210442356997*^9}}],

Cell["\<\
In order to do the deployment, we'll have VMs of Linux, Windows, and OS X \
running.  We run the Matlab deployment in each of these.\
\>", "Text",
 CellChangeTimes->{{3.512210445769054*^9, 3.5122104599469852`*^9}, {
  3.512211148321204*^9, 3.512211172437559*^9}}],

Cell["\<\
Further, for our development of the website code, we'll distribute a VM \
containing an ubuntu system on which rails etc has been already configured.  \
Then the current code can be downloaded into this VM and developers can run \
it within the VM, all having the same setup as the final deployment platform. \
 We may just run the final deployment as another instance of this VM.  But \
not sure if it would be too slow.  The benefits of VMWare and VirtualBox were \
discussed and it seems (from a cursory inspection of benchmarks) that they \
are the same.  Dan, however, has a bad experience running a game-server on \
VirtualBox, but it worked better under VMWare.\
\>", "Text",
 CellChangeTimes->{{3.512211175457575*^9, 3.512211234631885*^9}, {
  3.512211347097892*^9, 3.512211449292729*^9}}],

Cell["\<\
In order to run the deployment virtual machines on the development server, we \
decided to install ubuntu desktop (since virtualbox apparently can't run \
without an x server).  I'm not sure about that, but I don't do system \
administration.\
\>", "Text",
 CellChangeTimes->{{3.512212733028454*^9, 3.512212749242679*^9}, {
  3.512212795162965*^9, 3.512212867755122*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["19 April 2011 Tuesday", "Section",
 CellChangeTimes->{{3.512212881224852*^9, 3.5122128857140427`*^9}}],

Cell[CellGroupData[{

Cell["Cross-validation evaluation fit", "Subsection",
 CellChangeTimes->{{3.5122129008283863`*^9, 3.512212904876568*^9}, {
  3.512213027789164*^9, 3.512213064449731*^9}, {3.512234952090103*^9, 
  3.512234970901031*^9}}],

Cell[CellGroupData[{

Cell["Completed existing code", "Subsubsection",
 CellChangeTimes->{{3.512234928835568*^9, 3.5122349417455387`*^9}}],

Cell[TextData[{
 "I modified the code for cross validation under April ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["15", "th"], TraditionalForm]]],
 ".  Made it functional"
}], "Text",
 CellChangeTimes->{{3.512213067957254*^9, 3.512213102575041*^9}, {
  3.512234898686433*^9, 3.5122349057912493`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bench Tested", "Subsubsection",
 CellChangeTimes->{{3.512234936397044*^9, 3.51223494648011*^9}}],

Cell[CellGroupData[{

Cell["wxDecompose", "Subsubsubsection",
 CellChangeTimes->{{3.512235400666326*^9, 3.512235425095306*^9}}],

Cell[CellGroupData[{

Cell["Combining gives back initial matrix", "Subsubsubsubsection",
 CellChangeTimes->{{3.51237994415739*^9, 3.512379949597342*^9}}],

Cell["\<\
Check that combining the decomposition gives us back our initial matrix\
\>", "Text",
 CellChangeTimes->{{3.512236690815798*^9, 3.5122367096767797`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], " ", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
         RowBox[{"3", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
         RowBox[{"2", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", "=", 
        RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mc", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"wxDecompose", "[", 
         RowBox[{"mc", ",", "1"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512235067742722*^9, 3.512235142996434*^9}, {
  3.512235206130992*^9, 3.512235320401341*^9}, {3.512235432615212*^9, 
  3.512235539998122*^9}, {3.512236573654295*^9, 3.512236574094975*^9}, {
  3.512236660879538*^9, 3.512236662878117*^9}, {3.512239641118102*^9, 
  3.51223964174113*^9}, {3.512239680156008*^9, 3.51223968111383*^9}, {
  3.5122397269837837`*^9, 3.512239733342594*^9}, {3.5122400921856127`*^9, 
  3.512240101895694*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox["3", 
        RowBox[{"2", " ", 
         SqrtBox["5"]}]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox["1", 
        RowBox[{"2", " ", 
         SqrtBox["5"]}]]}], "}"}], ",", 
     RowBox[{"{", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]], "}"}], ",", 
     RowBox[{"{", 
      FractionBox["3", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      SqrtBox["5"], ",", 
      RowBox[{"3", " ", 
       SqrtBox["5"]}], ",", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512235489000155*^9, 3.5122355108879833`*^9}, 
   3.512235541377232*^9, 3.512235663978362*^9, 3.512235697359226*^9, 
   3.51223580375412*^9, 3.512236665394104*^9, 3.512239642228258*^9, 
   3.5122396818805304`*^9, 3.5122397341740513`*^9, 3.512239772653172*^9, 
   3.512239817886245*^9, 3.512239870610386*^9, 3.512239919927115*^9, 
   3.5122399566348467`*^9, 3.512240102503952*^9}]
}, Open  ]],

Cell["Here is the original matrix", "Text",
 CellChangeTimes->{{3.512240012077417*^9, 3.512240015298099*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "mc"}], "\[IndentingNewLine]", "]"}]}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.512240002014921*^9, 3.512240003728387*^9}, {
  3.51224014279405*^9, 3.512240143377778*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["9", "2"]}], ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["9", "2"], ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5122400054129972`*^9}]
}, Open  ]],

Cell["Here is w.x", "Text",
 CellChangeTimes->{{3.512240021687048*^9, 3.5122400235244217`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", ".", "x"}]], "Input",
 CellChangeTimes->{{3.5122358427751293`*^9, 3.5122358437791367`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["9", "2"]}], ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["9", "2"], ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512235844298132*^9, 3.5122366338708878`*^9, 
  3.512239686323502*^9, 3.512239807374701*^9, 3.512239963241531*^9}]
}, Open  ]],

Cell["\<\
It is the eigenvectors of mc (the mean centered matrix) times its transpose.\
\>", "Text",
 CellChangeTimes->{{3.512251252255515*^9, 3.51225127945712*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Normalize", "/@", 
        RowBox[{"Eigenvectors", "[", 
         RowBox[{"mc", ".", 
          RowBox[{"Transpose", "[", "mc", "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]]}], ",", 
     RowBox[{"-", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]]}], ",", 
     FractionBox["1", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]], ",", 
     FractionBox["3", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["2"]], ",", "0", ",", "0", ",", 
     FractionBox["1", 
      SqrtBox["2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["10"]], ",", "0", ",", 
     FractionBox["3", 
      SqrtBox["10"]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", 
       SqrtBox["10"]]}], ",", 
     FractionBox["3", 
      SqrtBox["10"]], ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512240155625193*^9, 3.5122401871527853`*^9}, {
  3.512240218840249*^9, 3.5122402290425577`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"3", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
       RowBox[{"2", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Covariance", "[", "p", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512238409921771*^9, 3.5122384310141983`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8", ",", "12", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512238413011178*^9, 3.5122384315870657`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"3", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
       RowBox[{"2", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Covariance", "[", 
    RowBox[{"Transpose", "[", "p", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512238409921771*^9, 3.5122384310141983`*^9}, {
  3.512240610650231*^9, 3.512240613248901*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["5", "3"], ",", "5", ",", 
     FractionBox["10", "3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["10", "3"], ",", "10", ",", 
     FractionBox["20", "3"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512238413011178*^9, 3.5122384315870657`*^9}, 
   3.512240614145204*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
         RowBox[{"3", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
         RowBox[{"2", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", "=", 
        RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mc", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"mc", ".", 
         RowBox[{"Transpose", "[", "mc", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}, {
  3.5122406446482277`*^9, 3.512240645374517*^9}, {3.512240744645268*^9, 
  3.5122408180691643`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["63", "2"], ",", 
     FractionBox["21", "2"], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["63", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["21", "2"], ",", 
     FractionBox["7", "2"], ",", 
     RowBox[{"-", 
      FractionBox["7", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["7", "2"]}], ",", 
     FractionBox["7", "2"], ",", 
     FractionBox["21", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["63", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     FractionBox["21", "2"], ",", 
     FractionBox["63", "2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512240645946641*^9, {3.5122407455373583`*^9, 3.5122408186552258`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Transpose", "[", "mc", "]"}], ".", "mc"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}, {
  3.5122406446482277`*^9, 3.512240645374517*^9}, {3.512240690192177*^9, 
  3.5122406979503193`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "15", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "45", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "30", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512240698964127*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Try to recover w and x from w.x", "Subsubsubsubsection",
 CellChangeTimes->{{3.51238055045829*^9, 3.5123805647255707`*^9}}],

Cell["\<\
Looking at it later, this is a fool's errand - you need to make sure that the \
maximum variance is along the axes before you can recover the matrices\
\>", "Text",
 CellChangeTimes->{{3.5123805700712643`*^9, 3.512380606419672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", " ", "0", ",", " ", "2", ",", " ", 
    RowBox[{"-", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.512251722231174*^9, 3.512251843353711*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["2", "3"], ",", "0", ",", 
   FractionBox["2", "3"], ",", 
   RowBox[{"-", 
    FractionBox["1", "3"]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512251725710904*^9, 3.5122518437953873`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"x", "=."}]], "Input",
 CellChangeTimes->{{3.5122525124244013`*^9, 3.512252513800366*^9}}],

Cell["Find some nice unit vectors", "Text",
 CellChangeTimes->{{3.512253665806835*^9, 3.5122536850752373`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rational4DUnitVectorsFromRange", "[", "maxElt_Integer", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"r", "=", "maxElt"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Normalize", "/@", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"range", "=", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"2", " ", "r"}], "+", "1"}], "]"}], "-", "r", "-", 
          "1"}]}], "}"}], ",", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{"{", 
           RowBox[{"range", ",", "range", ",", "range", ",", "range"}], "}"}],
           "]"}], ",", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "l", "}"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"len", "=", 
               RowBox[{"Norm", "[", "l", "]"}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"len", " ", "\[NotEqual]", " ", "0"}], "&&", 
              RowBox[{"And", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Element", "[", 
                   RowBox[{
                    RowBox[{"#", "/", "len"}], ",", "Rationals"}], "]"}], 
                  "&"}], ",", "l"}], "]"}]}]}]}], "]"}]}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512252505825358*^9, 3.512252693399481*^9}, {
  3.512252725805727*^9, 3.512252791835145*^9}, {3.5122528336712847`*^9, 
  3.512252936730659*^9}, {3.512252972581173*^9, 3.51225321029818*^9}, {
  3.512253242185171*^9, 3.512253378537113*^9}, {3.5122534431744623`*^9, 
  3.512253467629076*^9}, {3.5122535097810583`*^9, 3.512253615818131*^9}, {
  3.512253695036701*^9, 3.512253709072158*^9}, {3.512254856725918*^9, 
  3.512254981091508*^9}, {3.512255637043603*^9, 3.5122556380841513`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{
     RowBox[{"rational4DUnitVectorsFromRange", "[", "7", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Sort", "[", 
        RowBox[{"Abs", "[", "#1", "]"}], "]"}], "\[Equal]", 
       RowBox[{"Sort", "[", 
        RowBox[{"Abs", "[", "#2", "]"}], "]"}]}], "&"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Max", "[", 
      RowBox[{"Denominator", "/@", "#1"}], "]"}], "<", 
     RowBox[{"Max", "[", 
      RowBox[{"Denominator", "/@", "#2"}], "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512254988493742*^9, 3.51225500186796*^9}, {
  3.512255145766921*^9, 3.512255150143222*^9}, {3.512255285878312*^9, 
  3.512255320789267*^9}, {3.51225551664668*^9, 3.512255528479906*^9}, {
  3.512255568534391*^9, 3.512255644171842*^9}, {3.512255694638942*^9, 
  3.512255694899534*^9}, {3.5122557414848127`*^9, 3.512255790950781*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "3"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "5"]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "7"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["6", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["5", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "9"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "11"]}], ",", 
     RowBox[{"-", 
      FractionBox["6", "11"]}], ",", 
     RowBox[{"-", 
      FractionBox["6", "11"]}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512255151119609*^9, 3.512255289548423*^9, 3.512255322533062*^9, 
   3.512255531824832*^9, {3.512255571363162*^9, 3.512255646636766*^9}, 
   3.512255702268757*^9, {3.512255784044478*^9, 3.512255798806127*^9}}]
}, Open  ]],

Cell["\<\
It looks like any orthogonal basis w with only two basis vectors that will \
produce a zero mean requires that the two rows of the x vector be linearly \
dependent.  (Though I only tried two different w1 vectors)\
\>", "Text",
 CellChangeTimes->{{3.512258126374015*^9, 3.512258246754367*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"ea", ",", "eb", ",", "ec", ",", "ed"}], "}"}]}]}], "}"}], 
    ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "ea"}], "+", 
    RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ad"}], "\[Equal]", 
   RowBox[{"6", " ", "bd", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ac"}], "\[Equal]", 
   RowBox[{"6", " ", "bc", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ab"}], "\[Equal]", 
   RowBox[{"6", " ", "bb", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "aa"}], "\[Equal]", 
   RowBox[{"6", " ", "ba", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{{3.512257714921525*^9, 3.5122577467359247`*^9}, {
   3.5122577808109303`*^9, 3.512257804867828*^9}, 3.512257874883718*^9, {
   3.512257938173696*^9, 3.51225794767994*^9}, 3.512258088169729*^9}]
}, Open  ]],

Cell["So, I need to try a 3D basis", "Text",
 CellChangeTimes->{{3.5122582327535152`*^9, 3.512258255975925*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"ea", ",", "eb", ",", "ec", ",", "ed"}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{"fa", ",", "fb", ",", "fc", ",", "fd"}], "}"}]}]}], "}"}], 
    ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w3", "]"}], "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w2", "]"}], "\[NotEqual]", "0"}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"eb", "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"eb", "+", 
        RowBox[{"9", " ", "ec"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"eb", "+", 
        RowBox[{"9", " ", "ed"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{"fb", "\[Equal]", "0"}], "&&", 
      RowBox[{
       SqrtBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "eb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ec", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ed", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "]"}], "2"]}],
           ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fc", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fd", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{"fc", "+", "fd"}], "]"}], "2"]}], ")"}]}]], 
       "\[NotEqual]", "0"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "eb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ec", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ed", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "]"}], "2"]}],
           ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fc", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fd", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "fb"}], "+", "fc", "+", "fd"}], "]"}], "2"]}],
           ")"}]}]], "\[NotEqual]", "0"}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
            RowBox[{"26", " ", "ed"}]}], "\[Equal]", "0"}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"35", " ", "eb"}], "+", 
                RowBox[{"3", " ", "ec"}]}], ")"}], " ", "fb"}], 
             RowBox[{"3", " ", 
              RowBox[{"(", 
               RowBox[{"eb", "+", 
                RowBox[{"9", " ", "ec"}]}], ")"}]}]], "+", "fc"}], "\[Equal]",
            "0"}], "&&", 
          RowBox[{
           RowBox[{"eb", "+", 
            RowBox[{"9", " ", "ec"}]}], "\[NotEqual]", "0"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{"34", " ", "eb", " ", "fb"}], "+", 
              RowBox[{"3", " ", "ec", " ", "fb"}], "+", 
              RowBox[{"3", " ", "ed", " ", "fb"}], "+", 
              RowBox[{"3", " ", "eb", " ", "fc"}], "+", 
              RowBox[{"26", " ", "ec", " ", "fc"}], "+", 
              RowBox[{"ed", " ", "fc"}]}], 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
              RowBox[{"26", " ", "ed"}]}]], "+", "fd"}], "\[Equal]", "0"}], "&&", 
          RowBox[{
           RowBox[{
            RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
            RowBox[{"26", " ", "ed"}]}], "\[NotEqual]", "0"}]}], ")"}]}], 
       ")"}]}], ")"}]}], ")"}], "&&", 
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "fa"}], "+", 
    RowBox[{"3", " ", "fb"}], "+", "fc", "+", "fd"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "ea"}], "+", 
    RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"5", " ", "ad"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bd", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cd", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "ac"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bc", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cc", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "ab"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bb", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cb", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "aa"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ba", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"ca", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], 
     ")"}]}]}]}]], "Output",
 CellChangeTimes->{
  3.5122583779385633`*^9, {3.512258458060216*^9, 3.512258485543825*^9}, {
   3.5122611647254343`*^9, 3.512261177782691*^9}}]
}, Open  ]],

Cell["\<\
That looks more promising.  Substitue numbers and see how things simplify \
then substitute again until we get a tautology.\
\>", "Text",
 CellChangeTimes->{{3.5122587677032633`*^9, 3.5122587859289923`*^9}, {
  3.512259061662291*^9, 3.512259066702692*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "10"}], "/", "13"}], ",", "1", ",", "1", ",", 
         RowBox[{
          RowBox[{"-", "2"}], "/", "13"}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "5"}], ",", 
         RowBox[{
          RowBox[{"-", "15"}], "/", "13"}], ",", 
         RowBox[{"19", "/", "13"}], ",", "1"}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"42", "/", "325"}], 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ba", "+", "ca"}], ",", 
              RowBox[{"bb", "+", "cb"}], ",", 
              RowBox[{"bc", "+", "cc"}], ",", 
              RowBox[{"bd", "+", "cd"}]}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"1", "/", "5"}], 
            RowBox[{"{", 
             RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"1", "/", "7"}], 
            RowBox[{"{", 
             RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}]}], 
          "}"}]}], "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w3", "]"}], "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w2", "]"}], "\[NotEqual]", "0"}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512258586492375*^9, 3.512258587392478*^9}, {
   3.512258620837556*^9, 3.5122586211388607`*^9}, {3.512258720669063*^9, 
   3.512258723018224*^9}, {3.512258802370916*^9, 3.512258814035931*^9}, {
   3.512258854281949*^9, 3.512258874369522*^9}, {3.512258906858073*^9, 
   3.512258910545706*^9}, {3.512258943363241*^9, 3.512259038944717*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.512258600283174*^9, 3.5122586327328997`*^9, 3.512258725540051*^9, 
   3.51225882021484*^9, {3.5122588554724607`*^9, 3.512258875531135*^9}, 
   3.5122589119927883`*^9, {3.51225894457412*^9, 3.512259009946144*^9}, 
   3.5122590421376743`*^9}]
}, Open  ]],

Cell["\<\
But when we make the vectors unit - there is a problem - b becomes a multiple \
of c, continuing anyway for now\
\>", "Text",
 CellChangeTimes->{{3.512261187808515*^9, 3.512261255789425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "5"}], " ", 
          SqrtBox[
           FractionBox["2", "221"]]}], ",", 
         SqrtBox[
          FractionBox["13", "34"]], ",", 
         SqrtBox[
          FractionBox["13", "34"]], ",", 
         RowBox[{"-", 
          SqrtBox[
           FractionBox["2", "221"]]}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["13", "138"], ",", 
         RowBox[{"-", 
          FractionBox["25", "46"]}], ",", 
         FractionBox["95", "138"], ",", 
         FractionBox["65", "138"]}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x2", "=", 
         RowBox[{
          RowBox[{"1", "/", "5"}], 
          RowBox[{"{", 
           RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}]}], ",", 
        RowBox[{"x3", "=", 
         RowBox[{
          RowBox[{"1", "/", "7"}], 
          RowBox[{"{", 
           RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}]}]}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x1", "=", 
          RowBox[{
           RowBox[{"42", "/", "325"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"5", "x2"}], "+", 
             RowBox[{"7", "x3"}]}], ")"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Reduce", "[", 
         RowBox[{
          RowBox[{"Mean", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
            RowBox[{"{", 
             RowBox[{"x1", ",", "x2", ",", "x3"}], "}"}]}], "]"}], "\[Equal]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5122591926954327`*^9, 3.512259328680694*^9}, {
  3.512259584909047*^9, 3.512259594447154*^9}, {3.5122597853389273`*^9, 
  3.512259793284792*^9}, {3.512260659753489*^9, 3.5122606837358007`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"bd", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cd"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"bc", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cc"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"bb", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cb"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"ba", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "ca"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}]}]], "Output",
 CellChangeTimes->{3.512259939843884*^9, 3.51226068515448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "10"}], "/", "13"}], ",", "1", ",", "1", ",", 
         RowBox[{
          RowBox[{"-", "2"}], "/", "13"}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "5"}], ",", 
         RowBox[{
          RowBox[{"-", "15"}], "/", "13"}], ",", 
         RowBox[{"19", "/", "13"}], ",", "1"}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x2", "=", 
         RowBox[{
          RowBox[{"1", "/", "5"}], 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], ",", 
        RowBox[{"x3", "=", 
         RowBox[{
          RowBox[{"1", "/", "7"}], 
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}]}]}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x1", "=", 
          RowBox[{
           RowBox[{"42", "/", "325"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"5", "x2"}], "+", 
             RowBox[{"7", "x3"}]}], ")"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], "]"}], ",", 
          RowBox[{"Evaluate", "[", 
           RowBox[{"{", 
            RowBox[{"x1", ",", "x2", ",", "x3"}], "}"}], "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5122591926954327`*^9, 3.512259328680694*^9}, {
  3.512259584909047*^9, 3.512259594447154*^9}, {3.5122597853389273`*^9, 
  3.512259793284792*^9}, {3.512259945557584*^9, 3.5122600311558447`*^9}, {
  3.512260385824963*^9, 3.5122603948148603`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512259963683838*^9, 3.5122600322070303`*^9, 
  3.5122603959798183`*^9}]
}, Open  ]],

Cell["\<\
Now, I can substitue my favorite numbers in for the b and c vectors and get \
my test data.\
\>", "Text",
 CellChangeTimes->{{3.512259080958535*^9, 3.512259115568174*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}, {3.512260458782188*^9, 
   3.512260470736064*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512260472811849*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"Transpose", "[", "testResultPw", "]"}]}], "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512260547296463*^9, 3.5122605524233513`*^9}, {
  3.51226127423415*^9, 3.512261290420186*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512260553057485*^9, 3.5122612918721533`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normalize", "/@", "testResultPx"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512261339549748*^9, 3.512261354473412*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.21081851067789195`", ",", "0.5270462766947299`", ",", 
     "0.6324555320336759`", ",", "0.5270462766947299`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.18257418583505536`", ",", "0.3651483716701107`", ",", 
     "0.5477225575051661`", ",", "0.7302967433402214`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.22360679774997896`", ",", "0.6708203932499369`", ",", 
     "0.6708203932499369`", ",", "0.22360679774997896`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512261351211918*^9, 3.512261355017931*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", " ", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{
    RowBox[{"testResultMc", "//", "N"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512260510677772*^9, 3.512260527754318*^9}, {
  3.512260561887888*^9, 3.512260586552517*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.6998904091577189`", ",", 
       RowBox[{"-", "0.30243002524324164`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.09350890384581023`", ",", "0.8490274000055038`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.7022060108819639`"}], ",", 
       RowBox[{"-", "0.13490755901162998`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.09119330212156479`"}], ",", 
       RowBox[{"-", "0.4116898157506324`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.5103203173657647`"}], ",", 
       RowBox[{"-", "1.2400257043918246`"}], ",", 
       RowBox[{"-", "1.5309609520972949`"}], ",", 
       RowBox[{"-", "1.3831260604821751`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.054587685366237794`"}], ",", 
       RowBox[{"-", "0.35526412130180257`"}], ",", 
       RowBox[{"-", "0.1637630560987137`"}], ",", "0.5199155102430291`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512260506440216*^9, 3.512260532876094*^9}, 
   3.5122605871220617`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Maybe I have to have w=orthogonal unit vectors to get it back from the \
decomposition\
\>", "Subsubsubsubsection",
 CellChangeTimes->{{3.51226139933591*^9, 3.512261417428155*^9}, 
   3.5123798377622766`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rotated4DUnit", "[", 
   RowBox[{"\[Theta]1_", ",", "\[Theta]2_", ",", "\[Theta]3_"}], "]"}], ":=", 
  
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"u1", "=", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u2", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u3", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u4", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RotationTransform", "[", 
      RowBox[{"\[Theta]1", ",", 
       RowBox[{"{", 
        RowBox[{"u2", ",", "u1"}], "}"}]}], "]"}], "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RotationTransform", "[", 
       RowBox[{"\[Theta]2", ",", 
        RowBox[{"{", 
         RowBox[{"u3", ",", "u2"}], "}"}]}], "]"}], "[", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"RotationTransform", "[", 
        RowBox[{"\[Theta]3", ",", 
         RowBox[{"{", 
          RowBox[{"u4", ",", "u3"}], "}"}]}], "]"}], "[", "u4", 
       "\[IndentingNewLine]", "]"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512261964656996*^9, 3.5122620543035192`*^9}, {
  3.512262108947351*^9, 3.512262191440878*^9}, {3.512262242333143*^9, 
  3.512262274624807*^9}, {3.5122624098779583`*^9, 3.512262425710971*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"rotated4DUnit", "[", 
        RowBox[{"e1", ",", "e2", ",", "e3"}], "]"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"rotated4DUnit", "[", 
        RowBox[{"f1", ",", "f2", ",", "f3"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}, {3.512261452689002*^9, 
   3.512261459731244*^9}, {3.51226176184903*^9, 3.512261826020124*^9}, {
   3.512262532921968*^9, 3.512262591995434*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.512262768723279*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}, {3.512261452689002*^9, 
   3.512261459731244*^9}, {3.51226176184903*^9, 3.512261826020124*^9}, {
   3.512262532921968*^9, 3.512262591995434*^9}, {3.512262784896785*^9, 
   3.512262805723563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ad", "+", "bd", "+", "cd"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"ac", "+", "bc", "+", "cc"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"ab", "+", "bb", "+", "cb"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"aa", "+", "ba", "+", "ca"}], "\[Equal]", "0"}]}]], "Output",
 CellChangeTimes->{3.5122628065565643`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"w1", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
     RowBox[{"w2", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
     RowBox[{"w3", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}]}], "}"}], ",", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.5122628888916063`*^9, 3.512262895293326*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512262896863924*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "2"}], ",", 
            RowBox[{"-", "2"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "2"}]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}, {3.512262911778878*^9, 
   3.5122629997137537`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512263000890814*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", 
  RowBox[{"Simplify", "[", " ", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512263042723549*^9, 3.512263059580419*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0", "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "5125"}], "-", 
        RowBox[{"920", " ", 
         SqrtBox["31"]}]}], 
       SqrtBox[
        RowBox[{"424124764", "+", 
         RowBox[{"76175054", " ", 
          SqrtBox["31"]}]}]]], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"3", " ", 
         RowBox[{"(", 
          RowBox[{"2243", "+", 
           RowBox[{"403", " ", 
            SqrtBox["31"]}]}], ")"}]}], 
        SqrtBox[
         RowBox[{"424124764", "+", 
          RowBox[{"76175054", " ", 
           SqrtBox["31"]}]}]]]}], "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{"11854", "+", 
        RowBox[{"2129", " ", 
         SqrtBox["31"]}]}], 
       SqrtBox[
        RowBox[{"424124764", "+", 
         RowBox[{"76175054", " ", 
          SqrtBox["31"]}]}]]], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       FractionBox["1", "165"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"409", "+", 
         RowBox[{"74", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "55"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"262", "+", 
         RowBox[{"47", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "33"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"239", "+", 
         RowBox[{"43", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "55"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["6676", "3"], "-", 
         FractionBox["37166", 
          RowBox[{"3", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"262", "+", 
         RowBox[{"47", " ", 
          SqrtBox["31"]}]}], ")"}]}]}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512263043733841*^9, 3.5122630604102592`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"w", ".", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5122630817485733`*^9, 3.512263098547103*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["2", 
       SqrtBox["31"]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["9", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["4", 
       SqrtBox["31"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["7", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["4", 
       SqrtBox["31"]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["7", 
       SqrtBox["31"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], "+", 
      FractionBox["3", 
       SqrtBox["31"]]}], ",", 
     RowBox[{"1", "+", 
      FractionBox["11", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      FractionBox["3", "2"], "+", 
      FractionBox["17", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{"2", "+", 
      FractionBox["11", 
       SqrtBox["31"]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512263082951777*^9, 3.512263101011434*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigensystem", "[", 
  RowBox[{"testResultMc", ".", 
   RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512263225830699*^9, 3.512263251419894*^9}, {
  3.51226329676893*^9, 3.512263298088932*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"23", "+", 
      RowBox[{"4", " ", 
       SqrtBox["31"]}]}], ",", 
     RowBox[{"23", "-", 
      RowBox[{"4", " ", 
       SqrtBox["31"]}]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["47", "4"]}], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{"23", "+", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", 
       RowBox[{
        FractionBox["43", "4"], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "23"}], "-", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["47", "4"]}], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{"23", "-", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", 
       RowBox[{
        FractionBox["43", "4"], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "23"}], "+", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512263252176783*^9, 3.51226329887564*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Earlier attempts at generating test data", "Subsubsection",
 CellChangeTimes->{{3.512259148954152*^9, 3.512259154199258*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            FractionBox["2", 
             SqrtBox["21"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["2", "3"], ",", 
            SqrtBox[
             FractionBox["3", "7"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["2", "3"]}], ",", 
            FractionBox["2", 
             SqrtBox["21"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "3"], ",", 
            RowBox[{"-", 
             FractionBox["2", 
              SqrtBox["21"]]}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["4", "5"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "5"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "5"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["4", "7"], ",", 
            FractionBox["4", "7"], ",", 
            RowBox[{"-", 
             FractionBox["4", "7"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "7"]}]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["1", "15"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["1", "30"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["1", "30"], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "60"]}], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "28"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "15"]}], "+", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "30"]}], "+", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "30"]}], "-", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        FractionBox["7", "60"], "-", 
        FractionBox["1", 
         RowBox[{"4", " ", 
          SqrtBox["21"]}]]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["3", "5"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["3", "10"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["3", "10"], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["3", "20"]}], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "28"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "5"]}], "-", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "10"]}], "-", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "10"]}], "+", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        FractionBox["1", "20"], "+", 
        FractionBox["13", 
         RowBox[{"28", " ", 
          SqrtBox["21"]}]]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "15"]}], "+", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "30"]}], "+", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "30"]}], "-", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      FractionBox["1", "60"], "-", 
      FractionBox["5", 
       RowBox[{"28", " ", 
        SqrtBox["21"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       FractionBox["2", 
        SqrtBox["21"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["2", "3"], ",", 
       SqrtBox[
        FractionBox["3", "7"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["2", "3"]}], ",", 
       FractionBox["2", 
        SqrtBox["21"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "3"], ",", 
       RowBox[{"-", 
        FractionBox["2", 
         SqrtBox["21"]]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["4", "5"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "5"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "5"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["4", "7"], ",", 
       FractionBox["4", "7"], ",", 
       RowBox[{"-", 
        FractionBox["4", "7"]}], ",", 
       RowBox[{"-", 
        FractionBox["1", "7"]}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512251883613925*^9, 3.512251901467946*^9}, 
   3.512253894113966*^9, 3.512254177943125*^9, {3.512254225286641*^9, 
   3.512254252996396*^9}, 3.512254806820397*^9, 3.512255348968403*^9, 
   3.512256128474188*^9, {3.512256364353035*^9, 3.512256373855639*^9}, 
   3.51225641376763*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPw", "//", "N"}]], "Input",
 CellChangeTimes->{{3.5122564206112556`*^9, 3.512256430946691*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.4364357804719848`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6666666666666666`", ",", "0.6546536707079771`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6666666666666666`"}], ",", "0.4364357804719848`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.3333333333333333`", ",", 
     RowBox[{"-", "0.4364357804719848`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512256424321066*^9, 3.51225643176593*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultMc", "//", "N"}]], "Input",
 CellChangeTimes->{{3.512253957655257*^9, 3.5122539610998163`*^9}, {
  3.512254206506547*^9, 3.5122542586925793`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.1601886196249491`", ",", "0.12685528629161577`", ",", 
     RowBox[{"-", "0.0601886196249491`"}], ",", 
     RowBox[{"-", "0.040047154906237274`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.24844877643067428`"}], ",", 
     RowBox[{"-", "0.015115443097340947`"}], ",", 
     RowBox[{"-", "0.45155122356932575`"}], ",", "0.06211219410766857`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.6935219529582825`", ",", "0.3935219529582824`", ",", 
     "0.20647804704171757`", ",", 
     RowBox[{"-", "0.1733804882395706`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6052617961525573`"}], ",", 
     RowBox[{"-", "0.5052617961525573`"}], ",", "0.30526179615255733`", ",", 
     "0.15131544903813932`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512253961627091*^9, 3.5122542612668047`*^9, 
  3.512255351097127*^9, 3.512256131319497*^9, 3.5122564364852867`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", " ", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{
    RowBox[{"testResultMc", "//", "N"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512251437781951*^9, 3.512251478264104*^9}, {
  3.512251525565535*^9, 3.512251532066971*^9}, {3.512251596235393*^9, 
  3.512251618994896*^9}, {3.512251650026148*^9, 3.512251661360869*^9}, {
  3.5122519116428957`*^9, 3.5122519122193747`*^9}, {3.512252028262917*^9, 
  3.5122520438852663`*^9}, {3.512253942419812*^9, 3.512253998142556*^9}, {
  3.512254266007453*^9, 3.5122542688611794`*^9}, {3.51225614267599*^9, 
  3.512256276841227*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.17515390017686427`"}], ",", 
       RowBox[{"-", "0.10713530696241576`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.1942709308772682`", ",", 
       RowBox[{"-", "0.7660082305939329`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6919796412825371`"}], ",", "0.3351725624789807`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.6728626105821331`", ",", "0.5379709750773685`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9634851410382419`"}], ",", 
       RowBox[{"-", "0.6374366403846755`"}], ",", 
       RowBox[{"-", "0.014660360922456485`"}], ",", "0.24087128525956036`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.07998820214666803`", ",", 
       RowBox[{"-", "0.1419305459957935`"}], ",", "0.5857680422807161`", ",", 
       
       RowBox[{"-", "0.019997050536667012`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512256277541814*^9, 3.51225643767778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512254001233542*^9, 3.512254005950938*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.17515390017686436`"}], "}"}], ",", 
     RowBox[{"{", "0.19427093087726854`", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.6919796412825374`"}], "}"}], ",", 
     RowBox[{"{", "0.6728626105821333`", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.9634851410382413`"}], ",", 
      RowBox[{"-", "0.637436640384675`"}], ",", 
      RowBox[{"-", "0.014660360922456801`"}], ",", "0.24087128525956025`"}], 
     "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512254006706592*^9, 3.5122542810470047`*^9, 
  3.512254822887538*^9, 3.512255354849365*^9, 3.512256137586864*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"w", ".", "x"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512251535164116*^9, 3.512251535596217*^9}, {
  3.5122540194333897`*^9, 3.512254022555026*^9}, {3.512255375166731*^9, 
  3.512255376884604*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.2271050316505327`", ",", "0.15421985127863877`", ",", 
     RowBox[{"-", "0.00844949053485097`"}], ",", 
     RowBox[{"-", "0.056776257912633174`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2567122902438908`"}], ",", 
     RowBox[{"-", "0.17432520510480165`"}], ",", "0.0095510348266235`", ",", 
     "0.0641780725609727`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7109223535449561`", ",", "0.4827649076620792`", ",", 
     RowBox[{"-", "0.026450015896325438`"}], ",", 
     RowBox[{"-", "0.17773058838623904`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6813150949515981`"}], ",", 
     RowBox[{"-", "0.4626595538359163`"}], ",", "0.02534847160455291`", ",", 
     "0.17032877373789954`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512251538317966*^9, 3.5122515987021103`*^9, {3.5122540088614473`*^9, 
   3.512254023592952*^9}, {3.512255366159531*^9, 3.512255377668187*^9}}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Explanation between PCA (or equiv. WX decomposition) and sample and peak \
parameter sets\
\>", "Subsection",
 CellChangeTimes->{{3.512214440977141*^9, 3.512214460702648*^9}}],

Cell["PCA finds Y = W X + M where", "Text",
 CellChangeTimes->{{3.512214463909453*^9, 3.5122144755766487`*^9}}],

Cell[CellGroupData[{

Cell["Y is d \[Cross] n", "Item",
 CellChangeTimes->{{3.5122144779904823`*^9, 3.512214483195887*^9}, {
  3.512233318910033*^9, 3.5122333242249603`*^9}}],

Cell["Data is in columns of Y", "Subitem",
 CellChangeTimes->{{3.512233415077718*^9, 3.512233418856593*^9}}],

Cell["X is c \[Cross] n", "Item",
 CellChangeTimes->{{3.512214513734543*^9, 3.512214518626689*^9}, {
  3.512233326131793*^9, 3.5122333266483727`*^9}}],

Cell[TextData[{
 "Weights for each eigenvector in the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " sample are in the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " row of x"
}], "Subitem",
 CellChangeTimes->{{3.512233438744173*^9, 3.512233478275079*^9}}],

Cell["W is d \[Cross] c", "Item",
 CellChangeTimes->{{3.5122332878566437`*^9, 3.512233291141612*^9}, {
  3.512233328351462*^9, 3.5122333285940237`*^9}}],

Cell["\<\
Basis vectors for projected subspace (eigenvectors) are columns of W\
\>", "Subitem",
 CellChangeTimes->{{3.512233509171575*^9, 3.512233532437648*^9}}],

Cell["\<\
M is d \[Cross] n (n copies of bias vector)\
\>", "Item",
 CellChangeTimes->{{3.51223330838208*^9, 3.512233339997197*^9}}],

Cell["d = number of dimensions per data point", "Item",
 CellChangeTimes->{{3.512233349354783*^9, 3.512233359039206*^9}}],

Cell["n = number of data points", "Item",
 CellChangeTimes->{{3.5122333679499197`*^9, 3.512233372945415*^9}}],

Cell["c = number of principal components", "Item",
 CellChangeTimes->{{3.512233382418679*^9, 3.512233390216816*^9}}]
}, Open  ]],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "=", 
    SuperscriptBox["P", "T"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "where P is the peak position matrix, P is samples \[Cross] peaks and Y is \
samples \[Cross] peaks"
}], "Text",
 CellChangeTimes->{{3.512233544987081*^9, 3.5122336123966312`*^9}}],

Cell["Thus, d= peaks and n=samples", "Text",
 CellChangeTimes->{{3.5122336194593554`*^9, 3.512233625591215*^9}}],

Cell["\<\
X = c \[Cross] samples and W is peaks \[Cross] c.\
\>", "Text",
 CellChangeTimes->{{3.512233630990807*^9, 3.512233633706522*^9}, {
  3.51223366474547*^9, 3.5122336814768763`*^9}}],

Cell[CellGroupData[{

Cell["Crucial point", "Subsubsection",
 CellChangeTimes->{{3.512233683260457*^9, 3.5122336973018293`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"Y", "=", 
   RowBox[{
    SuperscriptBox["P", "T"], "=", 
    RowBox[{
     RowBox[{"W", " ", "X"}], "+", "M"}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.512233699892136*^9, 3.5122337522367067`*^9}, {
  3.512233854255949*^9, 3.512233872408031*^9}}],

Cell["each column of X is a list of sample parameters", "Text",
 CellChangeTimes->{{3.512233874273602*^9, 3.512233877055335*^9}}],

Cell["each row of W is a list of peak parameters", "Text",
 CellChangeTimes->{{3.512233878902811*^9, 3.512233891982082*^9}}],

Cell["\<\
each row column of M is the same list of peak biases (potentially means)\
\>", "Text",
 CellChangeTimes->{{3.512233894474066*^9, 3.51223401070079*^9}, {
  3.5122342098333807`*^9, 3.512234218950671*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Mean-centering makes distributional assumptions", "Subsection",
 CellChangeTimes->{{3.5122340166881523`*^9, 3.5122340326278048`*^9}, {
  3.512234161789192*^9, 3.512234171368363*^9}}],

Cell["\<\
By subtracting the mean, from the peaks we implicitly look for the axis of \
most variation with respect to the mean.  Is that a good assumption?  Does it \
mean that the things driving the peak movements are varying around a known \
center?  This needs more thought.\
\>", "Text",
 CellChangeTimes->{{3.51223404311935*^9, 3.5122340526745787`*^9}, {
  3.512234085860079*^9, 3.512234121546838*^9}, {3.512234181392221*^9, 
  3.512234207351366*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["21 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.512380005404171*^9, 3.5123800145755253`*^9}}],

Cell[CellGroupData[{

Cell["Bench tested wxDecompose", "Subsection",
 CellChangeTimes->{{3.5123804250524063`*^9, 3.5123804328480883`*^9}}],

Cell[CellGroupData[{

Cell["\<\
First, try to combine and get back the initial matrix using my fools-errand \
created initial vectors -- it didn't work\
\>", "Subsubsection",
 CellChangeTimes->{{3.5123807779009533`*^9, 3.512380789963516*^9}, {
  3.512381540092507*^9, 3.512381570879325*^9}, {3.512382422502974*^9, 
  3.512382426145192*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381585479815*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";", " ", 
  RowBox[{"N", "[", 
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512381591560526*^9, 3.5123816659132357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.6998904091577187`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.09350890384581013`"}], "}"}], ",", 
     RowBox[{"{", "0.7022060108819641`", "}"}], ",", 
     RowBox[{"{", "0.09119330212156483`", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "0.5103203173657649`", ",", "1.2400257043918248`", ",", 
      "1.5309609520972949`", ",", "1.3831260604821751`"}], "}"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512381643181397*^9, 3.512381667125225*^9}}]
}, Open  ]],

Cell["It doesn't work", "Text",
 CellChangeTimes->{{3.5123818114008102`*^9, 3.512381813686006*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultW", ".", "testResultX"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.51238167564336*^9, 3.512381701555533*^9}, {
  3.512381767952585*^9, 3.512381773680173*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35716829572262204`"}], ",", 
     RowBox[{"-", "0.8678820976128825`"}], ",", 
     RowBox[{"-", "1.071504887167866`"}], ",", 
     RowBox[{"-", "0.968036664387573`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.04771949348711862`"}], ",", 
     RowBox[{"-", "0.11595344435830812`"}], ",", 
     RowBox[{"-", "0.14315848046135587`"}], ",", 
     RowBox[{"-", "0.12933460179626188`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3583499943294316`", ",", "0.8707535032720808`", ",", 
     "1.075049982988295`", ",", "0.9712394334780743`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.04653779488030904`", ",", "0.1130820386991099`", ",", 
     "0.13961338464092712`", ",", "0.12613183270576073`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512381684209599*^9, 3.5123817090052853`*^9}, 
   3.512381775111574*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultMc", "//", "N"}]], "Input",
 CellChangeTimes->{{3.51238177738032*^9, 3.512381784314239*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.34065934065934067`"}], ",", 
     RowBox[{"-", "0.7604395604395604`"}], ",", 
     RowBox[{"-", "1.021978021978022`"}], ",", 
     RowBox[{"-", "1.1252747252747253`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.09406593406593407`"}], ",", 
     RowBox[{"-", "0.4175824175824176`"}], ",", 
     RowBox[{"-", "0.2821978021978022`"}], ",", "0.3120879120879121`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3657142857142857`", ",", "0.9186813186813186`", ",", 
     "1.0971428571428572`", ",", "0.9010989010989011`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.06901098901098901`", ",", "0.25934065934065936`", ",", 
     "0.20703296703296703`", ",", 
     RowBox[{"-", "0.08791208791208792`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381784855551*^9}]
}, Open  ]],

Cell["The SVD does work.", "Text",
 CellChangeTimes->{{3.512382255908396*^9, 3.512382263258245*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultU", ",", "testResult\[CapitalSigma]", ",", "testResultV"}], 
    "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "testResultMc", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512381850904155*^9, 3.512381930105798*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"testResultU", ".", "testResult\[CapitalSigma]", ".", 
   RowBox[{"Transpose", "[", "testResultV", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5123819399977283`*^9, 3.5123819715604467`*^9}, {
  3.512382009041636*^9, 3.5123820141577873`*^9}, {3.5123820943222103`*^9, 
  3.5123820978530903`*^9}, {3.512382219765387*^9, 3.512382221763235*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["31", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["346", "455"]}], ",", 
     RowBox[{"-", 
      FractionBox["93", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["512", "455"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["214", "2275"]}], ",", 
     RowBox[{"-", 
      FractionBox["38", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["642", "2275"]}], ",", 
     FractionBox["142", "455"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["64", "175"], ",", 
     FractionBox["418", "455"], ",", 
     FractionBox["192", "175"], ",", 
     FractionBox["82", "91"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["157", "2275"], ",", 
     FractionBox["118", "455"], ",", 
     FractionBox["471", "2275"], ",", 
     RowBox[{"-", 
      FractionBox["8", "91"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5123819630755653`*^9, 3.51238197223481*^9}, 
   3.512382060705611*^9, 3.5123822408389673`*^9}]
}, Open  ]],

Cell["\<\
The problem is that I am only getting one component when I should get two \
(there are two non-zero singular values, so to get 100%(=1 as a fraction), I \
should be getting two components).\
\>", "Text",
 CellChangeTimes->{{3.512382273372962*^9, 3.512382350878837*^9}}],

Cell[CellGroupData[{

Cell[BoxData["testResult\[CapitalSigma]"], "Input",
 CellChangeTimes->{{3.512381978081627*^9, 3.5123819809451933`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "455"], " ", 
      SqrtBox[
       RowBox[{
        FractionBox["6", "5"], " ", 
        RowBox[{"(", 
         RowBox[{"559079", "+", 
          SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      FractionBox["1", "455"], " ", 
      SqrtBox[
       RowBox[{
        FractionBox["6", "5"], " ", 
        RowBox[{"(", 
         RowBox[{"559079", "-", 
          SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381981841825*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Fix bug from last test", "Subsubsection",
 CellChangeTimes->{{3.512382435560967*^9, 3.512382440978187*^9}}],

Cell[CellGroupData[{

Cell["\<\
Hand execute wxDecompose on the results to find out where it is getting only \
one\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.5123825361083384`*^9, 3.512382574369339*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512382405447802*^9, 3.51238240726154*^9}, {
  3.512382452413643*^9, 3.512382489254044*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.5123824705314817`*^9, 3.512382490031045*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultSingularValues", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testResult\[CapitalSigma]", "[", 
      RowBox[{"[", 
       RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", "4", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51238259366298*^9, 3.5123826222748137`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "455"], " ", 
    SqrtBox[
     RowBox[{
      FractionBox["6", "5"], " ", 
      RowBox[{"(", 
       RowBox[{"559079", "+", 
        SqrtBox["235738817841"]}], ")"}]}]]}], ",", 
   RowBox[{
    FractionBox["1", "455"], " ", 
    SqrtBox[
     RowBox[{
      FractionBox["6", "5"], " ", 
      RowBox[{"(", 
       RowBox[{"559079", "-", 
        SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5123826063636627`*^9, 3.51238262310817*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultFracVariances", "=", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"testResultSingularValues", " ", "testResultSingularValues"}], 
     ",", "Total"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512382643825823*^9, 3.512382690835347*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], "+", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", 
   RowBox[{
    FractionBox["1", "2"], "-", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512382676828966*^9, 3.5123826925206013`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultCumulativeVars", "=", 
  RowBox[{"Accumulate", "[", "testResultFracVariances", "]"}]}]], "Input",
 CellChangeTimes->{{3.512382972360444*^9, 3.512382981434856*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], "+", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", "1", ",", "1", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5123829838415728`*^9}]
}, Open  ]],

Cell["\<\
The bug is that the first element in the list of fractional variances is not \
an integer or a real but an expression, thus values of one or more are found \
in many different places within it -- need to restrict to the top level\
\>", "Text",
 CellChangeTimes->{{3.512383165302959*^9, 3.512383269928924*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultComponentsRequired", "=", 
  RowBox[{"Position", "[", 
   RowBox[{"testResultCumulativeVars", ",", 
    RowBox[{"x_", "/;", 
     RowBox[{"x", "\[GreaterEqual]", "1"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5123829994091873`*^9, 3.5123830593103943`*^9}, {
  3.512383122470324*^9, 3.512383130562351*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512383038448328*^9, 3.512383059953404*^9}, {
  3.512383123666121*^9, 3.5123831313164673`*^9}}]
}, Open  ]],

Cell["Restricted to the top level, produces the correct result", "Text",
 CellChangeTimes->{{3.5123832748098917`*^9, 3.512383282133334*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultComponentsRequired", "=", 
  RowBox[{"First", "[", 
   RowBox[{"First", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"testResultCumulativeVars", ",", 
      RowBox[{"x_", "/;", 
       RowBox[{"x", "\[GreaterEqual]", "1"}]}], ",", "1"}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5123829994091873`*^9, 3.5123830593103943`*^9}, {
  3.512383122470324*^9, 3.512383155776731*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.512383038448328*^9, 3.512383059953404*^9}, {
  3.512383123666121*^9, 3.512383156727376*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Now repeat the first test on the fixed code", "Subsubsection",
 CellChangeTimes->{{3.5123807779009533`*^9, 3.512380789963516*^9}, {
  3.512381540092507*^9, 3.512381570879325*^9}, {3.512382422502974*^9, 
  3.512382426145192*^9}, {3.512383416763343*^9, 3.5123834314541283`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381585479815*^9, 3.512383436982881*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";", " ", 
  RowBox[{"N", "[", 
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512381591560526*^9, 3.5123816659132357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6998904091577187`"}], ",", 
       RowBox[{"-", "0.3024300252432852`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.09350890384581013`"}], ",", "0.8490274000054981`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.7022060108819641`", ",", 
       RowBox[{"-", "0.13490755901158638`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.09119330212156483`", ",", 
       RowBox[{"-", "0.41168981575062674`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.5103203173657649`", ",", "1.2400257043918248`", ",", 
       "1.5309609520972949`", ",", "1.3831260604821751`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.05458768536623642`"}], ",", 
       RowBox[{"-", "0.35526412130179474`"}], ",", 
       RowBox[{"-", "0.16376305609870925`"}], ",", "0.5199155102430358`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512381643181397*^9, 3.512381667125225*^9}, 
   3.512383441363161*^9}]
}, Open  ]],

Cell["It works", "Text",
 CellChangeTimes->{{3.5123818114008102`*^9, 3.512381813686006*^9}, {
  3.5123835384797792`*^9, 3.51238353945226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"testResultW", ".", "testResultX"}], "]"}]], "Input",
 CellChangeTimes->{{3.51238167564336*^9, 3.512381701555533*^9}, {
  3.512381767952585*^9, 3.512381773680173*^9}, {3.512383470969119*^9, 
  3.512383475243671*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["31", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["346", "455"]}], ",", 
     RowBox[{"-", 
      FractionBox["93", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["512", "455"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["214", "2275"]}], ",", 
     RowBox[{"-", 
      FractionBox["38", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["642", "2275"]}], ",", 
     FractionBox["142", "455"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["64", "175"], ",", 
     FractionBox["418", "455"], ",", 
     FractionBox["192", "175"], ",", 
     FractionBox["82", "91"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["157", "2275"], ",", 
     FractionBox["118", "455"], ",", 
     FractionBox["471", "2275"], ",", 
     RowBox[{"-", 
      FractionBox["8", "91"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512381684209599*^9, 3.5123817090052853`*^9}, 
   3.512381775111574*^9, {3.512383467154832*^9, 3.5123834888144417`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Test with eigenvector-transformed 4-Gaussian", "Subsubsection",
 CellChangeTimes->{{3.5123837615701847`*^9, 3.512383791215588*^9}}],

Cell["\<\
I will generate a large dataset of zero-mean 4-d Gaussian points with maximum \
variance on the axes and multiply them by an orthogonal matrix and see if the \
orthogonal matrix is recovered\
\>", "Text",
 CellChangeTimes->{{3.5123837946489964`*^9, 3.512383881022747*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomReal", "[", 
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", "1000", "}"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Precision", "[", 
  RowBox[{"testResultGaussianPoints", "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123930679183073`*^9, 3.512393093449354*^9}, {
  3.512393137852747*^9, 3.512393245861327*^9}}],

Cell[BoxData["MachinePrecision"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.5123932066490383`*^9, 3.51239324673228*^9}, 
   3.5123933008294992`*^9, {3.5123934524090137`*^9, 3.512393469142762*^9}, 
   3.512395194974617*^9, 3.5123955860885963`*^9, 3.5124150198448963`*^9}]
}, Open  ]],

Cell["\<\
To transform these, I will need a 4-d basis - so I need to choose a vector \
orthogonal to the ones I already have.  And make it a unit basis\
\>", "Text",
 CellChangeTimes->{{3.512384880927423*^9, 3.5123849045261993`*^9}, {
  3.512385073004408*^9, 3.5123850772408457`*^9}, {3.512385847864894*^9, 
  3.51238584858178*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["5", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["10", "13"]}], ",", 
      FractionBox["1", "5"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], ",", "1", ",", 
      RowBox[{"-", 
       FractionBox["15", "13"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", "1", ",", 
      FractionBox["19", "13"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.512384180133891*^9, 3.512384184459736*^9}, {
  3.512384524751484*^9, 3.51238453291866*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["2", "13"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["15", "13"]}], ",", 
     FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5123845335933657`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["5", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "2"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "6"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
      RowBox[{"-", 
       FractionBox["2", "13"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      FractionBox["1", "5"], ",", 
      RowBox[{"-", 
       FractionBox["15", "13"]}], ",", 
      FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5123850902778883`*^9, 3.512385120599719*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385104942881*^9, 3.512385121689966*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{"aa", ",", "ab", ",", "ac", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"v", ".", "#"}], "\[Equal]", "0"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "6"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}], ",", 
            FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]}], "]"}]}]}], 
    "]"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.512384554176525*^9, 3.512384648392416*^9}, {
  3.512384924964652*^9, 3.512385021748955*^9}, {3.512385164754942*^9, 
  3.51238523831398*^9}, {3.512385855617836*^9, 3.5123858839746027`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ac", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["494", "1249"]}]}], "&&", 
  RowBox[{"ab", "\[Equal]", 
   FractionBox["390", "1249"]}], "&&", 
  RowBox[{"aa", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["385", "1249"]}]}]}]], "Output",
 CellChangeTimes->{{3.5123849451319523`*^9, 3.512385023000844*^9}, {
  3.5123852037017097`*^9, 3.5123852403725853`*^9}, {3.512385859923664*^9, 
  3.512385886384185*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385383497527*^9, 3.512385429046273*^9}, 
   3.5123856793668118`*^9, 3.5123859213933907`*^9, 3.512395209939125*^9, 
   3.512395595938345*^9, 3.51241008837963*^9, 3.512412379577099*^9}]
}, Open  ]],

Cell["Verify that I do indeed have a unit, orthogonal basis", "Text",
 CellChangeTimes->{{3.512386000291481*^9, 3.512386014067955*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", ".", 
  RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}]], "Input",
 CellChangeTimes->{{3.512385957445182*^9, 3.512385998651586*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385981465995*^9, 3.512385993178735*^9}, 
   3.512395214024688*^9}]
}, Open  ]],

Cell["Now perform the test", "Text",
 CellChangeTimes->{{3.51238544099096*^9, 3.512385449381736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
      "testResultPx"}], "}"}], "=", 
    RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pw", "=", 
          RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
         RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"p", "=", 
           RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m", "=", 
             RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"mc", "=", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
   ";", 
   RowBox[{"testResultPw", "//", "N"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.040000000000190994`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.8333333333333334`"}], ",", 
       RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", 
       ",", 
       RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
       RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",",
        "0.6884057971014492`", ",", 
       RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.16666666666666666`"}], ",", 
       RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", 
       ",", "0.8609981394187871`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512384104114069*^9, 3.512384123534058*^9}, 
   3.5123855104739943`*^9, 3.512385553103589*^9, {3.512385695189035*^9, 
   3.512385738011581*^9}, 3.512385774969882*^9, {3.51238617503297*^9, 
   3.5123862206006393`*^9}, 3.5123862551259727`*^9, 3.512386310754005*^9, 
   3.512393263093844*^9, 3.512393311626803*^9, 3.512393568805049*^9, 
   3.512395223308667*^9, 3.5123956025602837`*^9, 3.512410092396832*^9, {
   3.512412033301639*^9, 3.512412059676825*^9}, 3.512412097767974*^9, {
   3.512412285573913*^9, 3.512412339440832*^9}, 3.512412392511932*^9, 
   3.512415040068426*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
    RowBox[{"wxDecompose", "[", 
     RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123860251205*^9, 3.5123860537145977`*^9}, {
  3.512410174327344*^9, 3.512410189320537*^9}, {3.512410220808455*^9, 
  3.512410257167083*^9}, {3.512410296516162*^9, 3.512410327670237*^9}, {
  3.51241036839038*^9, 3.512410371249632*^9}, {3.5124119424235992`*^9, 
  3.512411943828287*^9}, {3.512412398695326*^9, 3.51241240111547*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.24999999999977263`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.512413300935359*^9, 3.512415046129693*^9}]
}, Open  ]],

Cell["\<\
Surprisingly, I get only 3 components - due to rounding error?  (This happens \
even at precisions up to 512 bits)  I tried with exact numbers but even 20 \
Gaussian samples took more than 3 hours (at which point I gave up).  I gave \
up after half an hour for 5 samples with exact numbers.  I also tried 20 \
samples at a precision of 1048560 (that is about 3.5 million bits) and still \
came up with 3 components.\
\>", "Text",
 CellChangeTimes->{{3.512386342362707*^9, 3.51238636036588*^9}, {
  3.512386749622781*^9, 3.5123867508470373`*^9}, {3.5123933799481163`*^9, 
  3.5123933923985977`*^9}, {3.512410097839855*^9, 3.512410124570704*^9}, {
  3.512411912689452*^9, 3.5124119324005938`*^9}, {3.512414748946766*^9, 
  3.512414785963414*^9}, {3.512414838619248*^9, 3.512414840359902*^9}, {
  3.512414913793494*^9, 3.5124149792098618`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "/@", 
  RowBox[{"{", 
   RowBox[{"testResultW", ",", "testResultX"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512385746225093*^9, 3.5123857610501957`*^9}, {
  3.512386064233514*^9, 3.512386083389132*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1000"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512386084142371*^9, {3.512386178866839*^9, 3.512386223956114*^9}, 
   3.512386280337523*^9, 3.512386315436316*^9, 3.5123932864288197`*^9, 
   3.512393366125641*^9, 3.512412078175353*^9, 3.5124121332093897`*^9, 
   3.5124147418597603`*^9, 3.512415049405097*^9}]
}, Open  ]],

Cell["The reconstruction is still very close to the original", "Text",
 CellChangeTimes->{{3.512386384243618*^9, 3.512386408696678*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"testResultW", ".", "testResultX"}], "-", "testResultMc"}], ",", 
   "\"\<Frobenius\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.512386105364884*^9, 3.512386133673686*^9}}],

Cell[BoxData["4.717739642996267`*^-13"], "Output",
 CellChangeTimes->{3.5123861355917683`*^9, 3.512386200865828*^9, 
  3.512386235282693*^9, 3.5123862832732487`*^9, 3.512386318544692*^9, 
  3.512415053650732*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Find out what is happening with only getting 3 components", \
"Subsubsection",
 CellChangeTimes->{{3.512386772707881*^9, 3.512386786273829*^9}}],

Cell["\<\
If I leave out the matrix multiplication, I get 4 components -- ergo, the \
multiplication is doing something and my algorithm is working correctly.\
\>", "Text",
 CellChangeTimes->{{3.512432863069661*^9, 3.512432887763151*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultU", ",", "testResult\[CapitalSigma]", ",", "testResultV"}], 
    "}"}], "=", 
   RowBox[{
   "SingularValueDecomposition", "[", "testResultGaussianPoints", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512381850904155*^9, 3.512381930105798*^9}, {
  3.51238711519282*^9, 3.512387140921042*^9}, {3.512387294809482*^9, 
  3.5123872979039717`*^9}, {3.5124151819336987`*^9, 3.51241518769203*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}]], "Input",
 CellChangeTimes->{{3.5123870559468527`*^9, 3.512387063466419*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "1000"}], "}"}]], "Output",
 CellChangeTimes->{3.5123870641706247`*^9, 3.512387299665325*^9, 
  3.512415082236719*^9, 3.512415191749187*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"testResult\[CapitalSigma]", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "4"}], "]"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "5"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123869758981457`*^9, 3.512387028267605*^9}, {
   3.5123870732530737`*^9, 3.512387093458503*^9}, 3.512415100814711*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"328.70565346024944`", ",", "0.`", ",", "0.`", ",", "0.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "319.0264887804246`", ",", "0.`", ",", "0.`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "314.48910567953374`", ",", "0.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "305.55862339840763`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5123869968125343`*^9, 3.512387032816375*^9, {3.512387078284433*^9, 
   3.512387094131385*^9}, 3.512387148278658*^9, {3.512415093046549*^9, 
   3.5124151017432833`*^9}, 3.512415193007668*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512382405447802*^9, 3.51238240726154*^9}, {
  3.512382452413643*^9, 3.512382489254044*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.5123824705314817`*^9, 3.512382490031045*^9}, 
   3.512386903947085*^9, 3.51241510547127*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultSingularValues", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testResult\[CapitalSigma]", "[", 
      RowBox[{"[", 
       RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", "4", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51238259366298*^9, 3.5123826222748137`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "328.5856437480018`", ",", "315.8954516546304`", ",", "307.37748942324777`",
    ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.5123826063636627`*^9, 3.51238262310817*^9}, 
   3.512386906942441*^9, 3.5123871520135813`*^9, 3.5123873139868097`*^9, 
   3.512415110618719*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["22 April 2011 Friday", "Section",
 CellChangeTimes->{{3.512466907493278*^9, 3.512466912927067*^9}}],

Cell[CellGroupData[{

Cell["Bench test wxDecompose", "Subsection",
 CellChangeTimes->{{3.512473992579303*^9, 3.5124739966840982`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Smaller point list and calculating exact eigenvalues a different way confirms \
that only 3 non-zero eigenvalues\
\>", "Subsubsection",
 CellChangeTimes->{{3.5124669151871033`*^9, 3.512466936507618*^9}, {
  3.512468339972925*^9, 3.5124683914162292`*^9}, {3.512470247357069*^9, 
  3.512470252098098*^9}}],

Cell["\<\
Before giving up on figuring out what was going on yesterday, I decided to \
try one more time, but this time, use 16 exact integers and calculate the \
eigenvalues of the covariance matrix only (rather than calculating the full \
svd).  This confirmed that there are only 3 non-zero eigenvalues.  However, \
reconstruction works just fine and I get the original matrix back.  \
\>", "Text",
 CellChangeTimes->{{3.512470541576614*^9, 3.512470600222539*^9}, {
   3.512470635095899*^9, 3.512470697034683*^9}, {3.512470784212852*^9, 
   3.5124707896442537`*^9}, 3.51247082096764*^9}],

Cell["\<\
Maybe it has something to do with subtracting the mean before calculating the \
covariance?  I sent an email to Raymer.  If he doesn't know, I'll try \
math.stackexchange.com.\
\>", "Text",
 CellChangeTimes->{
  3.51247082502785*^9, {3.5124710058432903`*^9, 3.512471006235547*^9}, {
   3.5124710557794456`*^9, 3.5124710777255373`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512467021394806*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.512470935696005*^9, 3.512470945520816*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", 
       FractionBox["5", "6"]}], 
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      RowBox[{"-", 
       FractionBox["1", "6"]}], 
      RowBox[{"-", 
       FractionBox["1", "6"]}]},
     {
      RowBox[{
       RowBox[{"-", "5"}], " ", 
       SqrtBox[
        FractionBox["2", "221"]]}], 
      SqrtBox[
       FractionBox["13", "34"]], 
      SqrtBox[
       FractionBox["13", "34"]], 
      RowBox[{"-", 
       SqrtBox[
        FractionBox["2", "221"]]}]},
     {
      FractionBox["13", "138"], 
      RowBox[{"-", 
       FractionBox["25", "46"]}], 
      FractionBox["95", "138"], 
      FractionBox["65", "138"]},
     {
      RowBox[{"-", 
       FractionBox["385", 
        RowBox[{"69", " ", 
         SqrtBox["442"]}]]}], 
      FractionBox[
       RowBox[{"5", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "23"], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"19", " ", 
         SqrtBox[
          FractionBox["26", "17"]]}], "69"]}], 
      FractionBox["1249", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.512470946130034*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"testResultPwTransp", ",", "17"}], "]"}]], "Input",
 CellChangeTimes->{{3.512469335659975*^9, 3.512469346286833*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.83333333333333333333333333333333333333`17."}], ",", 
     RowBox[{"-", "0.5`17."}], ",", 
     RowBox[{"-", "0.16666666666666666666666666666666666667`17."}], ",", 
     RowBox[{"-", "0.16666666666666666666666666666666666667`17."}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.47565149415449407892352617777139836964`17."}], ",", 
     "0.61834694240084230260058403110281788054`17.", ",", 
     "0.61834694240084230260058403110281788054`17.", ",", 
     RowBox[{"-", "0.09513029883089881578470523555427967393`17."}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.09420289855072463768115942028985507246`17.", ",", 
     RowBox[{"-", "0.54347826086956521739130434782608695652`17."}], ",", 
     "0.68840579710144927536231884057971014493`17.", ",", 
     "0.47101449275362318840579710144927536232`17."}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.26539974673837713099356170788693967002`17."}], ",", 
     "0.26884649669601839243503653526209473067`17.", ",", 
     RowBox[{"-", "0.34053889581495663041771294466531999218`17."}], ",", 
     "0.86099813941878710808041187831373415027`17."}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512469340804078*^9, 3.5124693468638687`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NullSpace", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512467144827536*^9, 3.512467174553526*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.5124671752256002`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SetPrecision", "[", 
       RowBox[{"#", ",", "Infinity"}], "]"}], "&"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"{", "16", "}"}]}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}, {3.512467771744691*^9, 3.51246779559381*^9}, {
   3.512467846797667*^9, 3.5124678477764683`*^9}, {3.512468142789845*^9, 
   3.512468143811792*^9}, {3.51246817519199*^9, 3.5124681787457447`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
     "testResultPx"}], "}"}], "=", 
   RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"pw", "=", 
         RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
        RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"p", "=", 
          RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", "=", 
            RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"mc", "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
  ";", 
  RowBox[{"testResultPw", "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}, {3.512467655033833*^9, 
  3.512467659353112*^9}, {3.512471574867228*^9, 3.512471596610546*^9}, {
  3.512472311341092*^9, 3.512472329462494*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", ",", 
     
     RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`", ",", 
     RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", ",", 
     "0.8609981394187871`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512467646391835*^9, 3.512467659962002*^9}, 
   3.5124677984380817`*^9, 3.512467849856251*^9, {3.5124681709401073`*^9, 
   3.5124681814410057`*^9}, 3.512471599584174*^9, 3.512472334086504*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", 
  RowBox[{"testResultMc", ".", 
   RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512467706296453*^9, 3.512467741750884*^9}, {
  3.51246819292692*^9, 3.512468202631871*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "5"}], "]"}], ",", 
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "4"}], "]"}], ",", 
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "1"}], "]"}], ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512467722392185*^9, 3.512467743062554*^9}, 
   3.512467802597672*^9, 3.5124678510173397`*^9, {3.512468184647748*^9, 
   3.512468203552166*^9}, 3.5124716060088177`*^9, 3.51247237874249*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"testResultMc", ".", 
     RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], ",", "100"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5124694941079903`*^9, 3.5124695019367647`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2370.2805652289513907493154830496322040884539346475628752391018868017022074\
89469341453033925464197686540267818049633926535172342259409914914`100.", ",", 
   "1735.473916677741756717975620817037229778137489027422623606832598629511971\
57498909968427527392099850063696787147170272405476089865183031926`100.", ",", 
   "937.4925337888882496139626700060102624858129730603548470778265454639538604\
09740225013225840222423292495536426034791235676244645276708977066`100.", ",", 
   "0"}], "}"}]], "Output",
 CellChangeTimes->{3.512469502732276*^9, 3.512471620742478*^9, 
  3.512472384574901*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Log", "[", 
   RowBox[{"2", ",", 
    RowBox[{"10", "^", "256"}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512467820975621*^9, 3.5124678408919163`*^9}}],

Cell[BoxData["850.4135922911648`"], "Output",
 CellChangeTimes->{{3.51246783097488*^9, 3.512467842282774*^9}, 
   3.512472387190893*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512467868527203*^9, 3.512467927604157*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", "2210"}], "+", 
     RowBox[{"1073", " ", 
      SqrtBox["442"]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox[
       RowBox[{"37", " ", 
        RowBox[{"(", 
         RowBox[{"11252878", "+", 
          RowBox[{"128180", " ", 
           SqrtBox["442"]}]}], ")"}]}]]}]}], "30498"], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "2210"}], "+", 
     RowBox[{"1073", " ", 
      SqrtBox["442"]}], "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox[
       RowBox[{"37", " ", 
        RowBox[{"(", 
         RowBox[{"11252878", "+", 
          RowBox[{"128180", " ", 
           SqrtBox["442"]}]}], ")"}]}]]}]}], "30498"], ",", 
   RowBox[{"-", "1"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.512467880584723*^9, 3.512467928369904*^9}, 
   3.512472388659775*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvectors", "[", "testResultPwTransp", "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512468881795991*^9, 3.512468890731176*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.2532911819650452`", "\[InvisibleSpace]", "-", 
      RowBox[{"0.1836641837335375`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.1803604071474738`"}], "+", 
      RowBox[{"0.6770729830351344`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.5601997644451698`"}], "-", 
      RowBox[{"1.509659078389694`", " ", "\[ImaginaryI]"}]}], ",", "1.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.2532911819650452`", "\[InvisibleSpace]", "+", 
      RowBox[{"0.1836641837335375`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.1803604071474738`"}], "-", 
      RowBox[{"0.6770729830351344`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.5601997644451698`"}], "+", 
      RowBox[{"1.509659078389694`", " ", "\[ImaginaryI]"}]}], ",", "1.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.813690563785489`", ",", "2.902025683063605`", ",", 
     "0.10761351459467387`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.29253681895689265`"}], ",", "0.6328313706120337`", ",", 
     "0.31941089668971817`", ",", "1.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512468891961443*^9, 3.512472390764616*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inverse", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512468086015419*^9, 3.512468093553405*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     FractionBox["95", "138"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     FractionBox["65", "138"], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512468094225542*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultReconstructed", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Inverse", "[", 
      RowBox[{"Transpose", "[", "testResultPwTransp", "]"}], "]"}], ".", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "+", "testResultM"}], "&"}], ",", "testResultMc"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5124696038695393`*^9, 3.512469703100696*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"testResultGaussianPoints", ".", 
     RowBox[{"Transpose", "[", "testResultGaussianPoints", "]"}]}], "]"}], 
   ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.512469809633794*^9, 3.51246984694594*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2511.9761462476004551612255952522176823562220665800816739529569097363264930\
99657919683498976764417304847271842918789223067567853519294587225`100.", ",", 
   "2204.223171098558594386953576796031022571202603371118787787323471292401224\
520021093940801292330873335722827711378450106325075183071395425055`100.", ",",
    "1401.62380581138995213418044502842632369241685711741133631759942568081470\
9171453100714656623572608269178233755089004890013956507792448931368`100.", 
   ",", "852.\
421976006572602057826504909809889623648800566018929787814848225665724234217706\
545045945615878327190143253113755780593400455616863996492`100."}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124698382037907`*^9, 3.512469847728092*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Found the problem: I was mean centering incorrectly in my test harness\
\>", "Subsubsection",
 CellChangeTimes->{{3.5124669151871033`*^9, 3.512466936507618*^9}, {
  3.512468339972925*^9, 3.5124683914162292`*^9}, {3.512470247357069*^9, 
  3.512470252098098*^9}, {3.5124724026398478`*^9, 3.512472421906876*^9}, {
  3.512473284222896*^9, 3.5124732891841383`*^9}}],

Cell["\<\
I was mean-centering incorrectly, subtracting the mean of each point from \
that point rather than the mean of each dimension from that dimension.  This \
is merely a bug in my test-code (my real code does things correctly).\
\>", "Text",
 CellChangeTimes->{
  3.51247082502785*^9, {3.5124710058432903`*^9, 3.512471006235547*^9}, {
   3.5124710557794456`*^9, 3.5124710777255373`*^9}, {3.5124724459194613`*^9, 
   3.512472470890758*^9}, {3.512472977308967*^9, 3.5124729917398977`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512467021394806*^9, 3.512472581544812*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SetPrecision", "[", 
       RowBox[{"#", ",", "Infinity"}], "]"}], "&"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"{", "16", "}"}]}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}, {3.512467771744691*^9, 3.51246779559381*^9}, {
   3.512467846797667*^9, 3.5124678477764683`*^9}, {3.512468142789845*^9, 
   3.512468143811792*^9}, {3.51246817519199*^9, 3.5124681787457447`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
     "testResultPx"}], "}"}], "=", 
   RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"pw", "=", 
         RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
        RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"p", "=", 
          RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", "=", 
            RowBox[{"Mean", "[", 
             RowBox[{"Transpose", "[", "p", "]"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"mc", "=", 
              RowBox[{"Transpose", "[", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "-", "m"}], "&"}], ",", 
                 RowBox[{"Transpose", "[", "p", "]"}]}], "]"}], "]"}]}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
  ";", 
  RowBox[{"testResultPw", "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}, {3.512467655033833*^9, 
  3.512467659353112*^9}, {3.512471574867228*^9, 3.512471596610546*^9}, {
  3.512472311341092*^9, 3.512472329462494*^9}, {3.512472536766765*^9, 
  3.512472561645844*^9}, {3.512472601892325*^9, 3.512472604890677*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", ",", 
     
     RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`", ",", 
     RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", ",", 
     "0.8609981394187871`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512467646391835*^9, 3.512467659962002*^9}, 
   3.5124677984380817`*^9, 3.512467849856251*^9, {3.5124681709401073`*^9, 
   3.5124681814410057`*^9}, 3.512471599584174*^9, 3.512472334086504*^9, {
   3.5124725659066887`*^9, 3.5124726065585117`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvalues", "[", 
   RowBox[{"testResultMc", ".", 
    RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512467706296453*^9, 3.512467741750884*^9}, {
  3.51246819292692*^9, 3.512468202631871*^9}, {3.512472621803874*^9, 
  3.5124726228006887`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2661.6150827923625`", ",", "1465.2593735115895`", ",", 
   "877.2834436694743`", ",", "633.6754846908572`"}], "}"}]], "Output",
 CellChangeTimes->{{3.512467722392185*^9, 3.512467743062554*^9}, 
   3.512467802597672*^9, 3.5124678510173397`*^9, {3.512468184647748*^9, 
   3.512468203552166*^9}, 3.5124716060088177`*^9, {3.512472617275248*^9, 
   3.5124726237843*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvectors", "[", "testResultPwTransp", "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512468881795991*^9, 3.512468890731176*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultReconstructed", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Inverse", "[", 
      RowBox[{"Transpose", "[", "testResultPwTransp", "]"}], "]"}], ".", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "+", "testResultM"}], "&"}], ",", 
        RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5124696038695393`*^9, 3.512469703100696*^9}, {
  3.512472691657089*^9, 3.512472709903233*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultReconstructed", "\[Equal]", 
  "testResultGaussianPoints"}]], "Input",
 CellChangeTimes->{{3.51247271358808*^9, 3.512472723186618*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5124727241094103`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test reactionParameters", "Subsection",
 CellChangeTimes->{{3.512474000579908*^9, 3.512474005830237*^9}}],

Cell[CellGroupData[{

Cell["\<\
Does reactionParameters result match wxDecompose on a hand-edited matrix\
\>", "Subsubsection",
 CellChangeTimes->{{3.512474010834817*^9, 3.512474047152914*^9}}],

Cell["\<\
Make a matrix of 16 samples containing 4 peaks, each peak position a Gaussian \
with a given mean and standard deviation.\
\>", "Text",
 CellChangeTimes->{{3.512474310917018*^9, 3.5124743439655437`*^9}, {
  3.5124744394459667`*^9, 3.5124744460669003`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaks", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"NormalDistribution", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "16", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474060635439*^9, 3.512474078552411*^9}, {
  3.512474122878778*^9, 3.512474153216523*^9}, {3.5124742027408524`*^9, 
  3.5124742196184587`*^9}, {3.5124743728080053`*^9, 3.5124744345366917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPeaksBySamp", "=", 
   RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474160790123*^9, 3.51247416545975*^9}, {
  3.5124742248440323`*^9, 3.512474239512686*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "reactionParameters"}]], "Input",
 CellChangeTimes->{{3.5124742844275827`*^9, 3.512474288906386*^9}}],

Cell[BoxData[
 StyleBox["\<\"reactionParameters[positions,excludedSamples,fracVar,\
minComponents]\\nCalculates the reaction parameters for each peak using SVD \
based PCA given a set of corresponding peak positions.  Samples at indices \
given by excludedSamples are not used to create the \
estimatereactionParameters\\n\\npositions is an array of dimensions samples\
\[Cross]peaks\\n\\nReturns {means,reactionCoefficients} where means is a 1\
\[Cross]peaks array and reactionCoefficients is a peaks\[Cross]d array where \
d is the number of components needed to get fracVar fraction of the variance \
or minComponents, whichever is larger\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.51247428969228*^9},
 CellTags->"Info3512459889-7380264"]
}, Open  ]],

Cell["Remove odd numbered samples", "Text",
 CellChangeTimes->{{3.5124745194732237`*^9, 3.512474544694936*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaksHandEdited", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testSampByPeaks", "[", 
       RowBox[{"[", 
        RowBox[{"2", " ", "#"}], "]"}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"Length", "[", "testSampByPeaks", "]"}], "/", "2"}], "]"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474506442319*^9, 3.512474514263143*^9}, {
  3.512474554444693*^9, 3.512474635447776*^9}}],

Cell["Calculate means of remaining samples", "Text",
 CellChangeTimes->{{3.512474719135758*^9, 3.512474728495425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testMeansHandEdited", "=", 
  RowBox[{"Mean", "[", "testSampByPeaksHandEdited", "]"}]}]], "Input",
 CellChangeTimes->{{3.512474683715517*^9, 3.5124747077601213`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
   "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}]], "Output",
 CellChangeTimes->{3.512474712256209*^9, 3.5124828049746437`*^9}]
}, Open  ]],

Cell["Create a mean-centered transpose", "Text",
 CellChangeTimes->{{3.512474895309862*^9, 3.512474900844461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testPeaksBySampCenteredHandEdited", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "-", "testMeansHandEdited"}], "&"}], ",", 
     "testSampByPeaksHandEdited"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124747353542957`*^9, 3.512474828943585*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2.4541768541260485`", ",", "1.2881624157471678`", ",", 
     "1.7780499346432694`", ",", 
     RowBox[{"-", "0.9563242015722224`"}], ",", 
     RowBox[{"-", "0.7359217283428011`"}], ",", 
     RowBox[{"-", "2.9752249289242467`"}], ",", "0.5909480859469534`", ",", 
     RowBox[{"-", "1.44386643162417`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.1591298261131175`"}], ",", "2.989479411073013`", ",", 
     "0.9158170929888783`", ",", 
     RowBox[{"-", "1.6844041953579967`"}], ",", 
     RowBox[{"-", "1.3531307783257973`"}], ",", "1.365232950953581`", ",", 
     "0.10560510481198815`", ",", 
     RowBox[{"-", "1.1794697600305493`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.108115647812166`"}], ",", "0.17751565381887424`", ",", 
     "4.299172203746764`", ",", "6.890808217191932`", ",", 
     RowBox[{"-", "7.953227371662206`"}], ",", 
     RowBox[{"-", "4.409022573909608`"}], ",", "1.6118274156709749`", ",", 
     "7.49104210295544`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.2549412536679374`"}], ",", "1.354535601427843`", ",", 
     "1.0501224105333629`", ",", 
     RowBox[{"-", "0.7791004151762317`"}], ",", 
     RowBox[{"-", "3.7480666936521008`"}], ",", "0.7111637490248892`", ",", 
     "0.4954293659218032`", ",", "2.17085723558837`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124747868932753`*^9, 3.51247482969271*^9}, 
   3.512482807577585*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Mean", ",", "testPeaksBySampCenteredHandEdited"}], "]"}]], "Input",\

 CellChangeTimes->{{3.512474805342667*^9, 3.5124748480871477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.1102230246251565`*^-16"}], ",", 
   RowBox[{"-", "2.7755575615628914`*^-17"}], ",", "4.440892098500626`*^-16", 
   ",", 
   RowBox[{"-", "2.220446049250313`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512474883145926*^9, 3.5124828109015417`*^9}]
}, Open  ]],

Cell["Calculate the decomposition", "Text",
 CellChangeTimes->{{3.512474907962441*^9, 3.512474911564301*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}], "=", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
  3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
  3.512486674249909*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", " ", "/@", 
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512487506412157*^9, 3.512487515932146*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5124875175051193`*^9}]
}, Open  ]],

Cell["So, our expected result is {means, w}", "Text",
 CellChangeTimes->{{3.5124751336574163`*^9, 3.512475152116227*^9}, {
  3.512487529593944*^9, 3.512487529594048*^9}, {3.512487568047202*^9, 
  3.5124875797921333`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "=", 
  RowBox[{"{", 
   RowBox[{"testMeansHandEdited", ",", "testWHandEdited"}], "}"}]}]], "Input",\

 CellChangeTimes->{{3.51247515939333*^9, 3.512475198981567*^9}, {
  3.5124875423881283`*^9, 3.512487544598*^9}, {3.5124875835333033`*^9, 
  3.5124875867553453`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
     "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5124752012094307`*^9, 3.512482817360544*^9, 3.5124866593986*^9, {
   3.512487539438904*^9, 3.512487547481099*^9}, 3.512487588875031*^9}]
}, Open  ]],

Cell["Actual: it works (after fixing a bug)", "Text",
 CellChangeTimes->{{3.51247520737986*^9, 3.512475208964757*^9}, {
  3.512487217819169*^9, 3.5124872205892467`*^9}, {3.5124875970911217`*^9, 
  3.5124876020754633`*^9}, {3.51248844830683*^9, 3.5124884486972437`*^9}, {
  3.512488552135634*^9, 3.512488555006483*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reactionParameters", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"9", "/", "10"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.512475210915781*^9, 3.512475255632621*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
     "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512475257253497*^9, 3.5124755488742228`*^9, 
  3.5124757428633537`*^9, 3.512482828162709*^9, 3.512486601782569*^9, 
  3.512486636554912*^9, 3.512487603430482*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Check that wxDecompose works with my new additions", "Subsubsection",
 CellChangeTimes->{{3.512486704434765*^9, 3.512486720211022*^9}}],

Cell["\<\
To fix a bug in reactionParameters and sampleParameters, I had to add a \
minComponents argument to wxDecompose - see if it works (use the data from \
the previous code)\
\>", "Text",
 CellChangeTimes->{{3.512486723114324*^9, 3.512486793735099*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wxDecompose", "[", 
  RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
   3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
   3.512486674249909*^9}, 3.512486802814889*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9, {3.512486797828886*^9, 3.512486803479192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wxDecompose", "[", 
  RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
   RowBox[{"9", "/", "10"}], ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.512486684061603*^9, 3.512486685804553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`", ",", 
       RowBox[{"-", "0.9008373678409747`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`", 
       ",", "0.3024978708530984`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}], ",", 
       RowBox[{"-", "0.09500221481918919`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`", ",", 
       "0.29658330028869645`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2.1633541960576848`"}], ",", "0.12875457560754403`", ",", 
       RowBox[{"-", "1.4216832133157806`"}], ",", 
       RowBox[{"-", "0.5337463211216376`"}], ",", 
       RowBox[{"-", "0.10241316116901499`"}], ",", "3.722960056029618`", ",", 
       
       RowBox[{"-", "0.5065938969082785`"}], ",", "0.8760761569352357`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512486686716223*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test sampleParameters", "Subsection",
 CellChangeTimes->{{3.512474000579908*^9, 3.512474005830237*^9}, {
  3.5124890614821243`*^9, 3.512489062274596*^9}}],

Cell[CellGroupData[{

Cell["\<\
Does sampleParameters result match wxDecompose on a hand-edited matrix\
\>", "Subsubsection",
 CellChangeTimes->{{3.512474010834817*^9, 3.512474047152914*^9}, {
  3.51248907159542*^9, 3.512489072281455*^9}}],

Cell["\<\
Make a matrix of 16 samples containing 4 peaks, each peak position a Gaussian \
with a given mean and standard deviation.\
\>", "Text",
 CellChangeTimes->{{3.512474310917018*^9, 3.5124743439655437`*^9}, {
  3.5124744394459667`*^9, 3.5124744460669003`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaks", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"NormalDistribution", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "16", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474060635439*^9, 3.512474078552411*^9}, {
  3.512474122878778*^9, 3.512474153216523*^9}, {3.5124742027408524`*^9, 
  3.5124742196184587`*^9}, {3.5124743728080053`*^9, 3.5124744345366917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPeaksBySamp", "=", 
   RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474160790123*^9, 3.51247416545975*^9}, {
  3.5124742248440323`*^9, 3.512474239512686*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sampleParameters"}]], "Input",
 CellChangeTimes->{{3.5124742844275827`*^9, 3.512474288906386*^9}, {
  3.512489150494426*^9, 3.51248915117518*^9}}],

Cell[BoxData[
 StyleBox["\<\"sampleParameters[positions,excludedPeaks,fracVar,minComponents]\
\\nCalculates the reaction parameters for each peak using SVD based PCA given \
a set of corresponding peak positions.  peaks at indices given by \
excludedPeaks are not used to create the estimate\\n\\npositions is an array \
of dimensions samples\[Cross]peaks\\n\\nReturns sampleCoefficients, a d\
\[Cross]samples array where d is the number of components needed to get \
fracVar fraction of the variance or minComponents, whichever is larger\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512489152721878*^9},
 CellTags->"Info3512474752-6925473"]
}, Open  ]],

Cell["Remove odd numbered peaks", "Text",
 CellChangeTimes->{{3.5124745194732237`*^9, 3.512474544694936*^9}, {
  3.5124892902955217`*^9, 3.512489290739788*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaksHandEdited", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tsp", "=", 
        RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], "}"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"tsp", "[", 
          RowBox[{"[", 
           RowBox[{"2", " ", "#"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"Length", "[", "tsp", "]"}], "/", "2"}], "]"}], "]"}]}], 
       "]"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474506442319*^9, 3.512474514263143*^9}, {
  3.512474554444693*^9, 3.512474635447776*^9}, {3.5124891923801107`*^9, 
  3.5124892479984303`*^9}, {3.512489560583335*^9, 3.512489563386348*^9}}],

Cell["Calculate means of remaining samples", "Text",
 CellChangeTimes->{{3.512474719135758*^9, 3.512474728495425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testMeansHandEdited", "=", 
  RowBox[{"Mean", "[", "testSampByPeaksHandEdited", "]"}]}]], "Input",
 CellChangeTimes->{{3.512474683715517*^9, 3.5124747077601213`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.8554888482528616`", ",", "3.8860196195973677`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.512474712256209*^9, 3.5124828049746437`*^9, 3.512489301221422*^9, {
   3.5124895655335903`*^9, 3.51248958012827*^9}}]
}, Open  ]],

Cell["Create a mean-centered transpose", "Text",
 CellChangeTimes->{{3.512474895309862*^9, 3.512474900844461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testPeaksBySampCenteredHandEdited", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "-", "testMeansHandEdited"}], "&"}], ",", 
     "testSampByPeaksHandEdited"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124747353542957`*^9, 3.512474828943585*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.4784127729727206`"}], ",", 
     RowBox[{"-", "0.36162209167986237`"}], ",", "0.6928911978812823`", ",", 
     "0.4410656266014429`", ",", "0.7006030956874408`", ",", 
     RowBox[{"-", "1.798977347412468`"}], ",", "0.0286434976522979`", ",", 
     RowBox[{"-", "0.35529492161758014`"}], ",", 
     RowBox[{"-", "0.20782429334561126`"}], ",", 
     RowBox[{"-", "1.580213297652115`"}], ",", 
     RowBox[{"-", "1.4214221169834231`"}], ",", 
     RowBox[{"-", "0.5401447710053547`"}], ",", "1.5416338658927482`", ",", 
     "4.918748728684656`", ",", "0.18139774824156996`", ",", 
     "0.23892785202769795`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6560246873536397`"}], ",", 
     RowBox[{"-", "2.2368820539174887`"}], ",", "1.6997193293769377`", ",", 
     RowBox[{"-", "2.113599905298442`"}], ",", 
     RowBox[{"-", "1.4646091268238064`"}], ",", 
     RowBox[{"-", "1.1204003997748213`"}], ",", "3.969116802805717`", ",", 
     RowBox[{"-", "1.714449857163801`"}], ",", "0.10376353753950562`", ",", 
     "4.690842616965062`", ",", "0.5706543948761387`", ",", 
     "1.275661898279298`", ",", 
     RowBox[{"-", "1.1973870540320304`"}], ",", 
     RowBox[{"-", "0.17186173157720974`"}], ",", 
     RowBox[{"-", "0.6024806989238956`"}], ",", 
     RowBox[{"-", "1.0320630649775295`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5124747868932753`*^9, 3.51247482969271*^9}, 
   3.512482807577585*^9, 3.512489543535573*^9, 3.512489587769743*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Mean", ",", "testPeaksBySampCenteredHandEdited"}], "]"}]], "Input",\

 CellChangeTimes->{{3.512474805342667*^9, 3.5124748480871477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"-", "3.608224830031759`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512474883145926*^9, 3.5124828109015417`*^9, 
  3.512489604493498*^9}]
}, Open  ]],

Cell["Calculate the decomposition", "Text",
 CellChangeTimes->{{3.512474907962441*^9, 3.512474911564301*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}], "=", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
  3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
  3.512486674249909*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.32555410171311205`"}], ",", 
       RowBox[{"-", "0.9455234142303239`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.9455234142303239`", ",", 
       RowBox[{"-", "0.32555410171311205`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.18657074177344288`", ",", 
       RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
       RowBox[{"-", "2.1420489226394355`"}], ",", 
       RowBox[{"-", "1.6129064335812886`"}], ",", 
       RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
       RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",",
        "4.949746447442161`", ",", "1.0023168922385142`", ",", 
       "1.3820145391842602`", ",", 
       RowBox[{"-", "1.63404272386478`"}], ",", 
       RowBox[{"-", "1.7638181151358632`"}], ",", 
       RowBox[{"-", "0.6287143884359588`"}], ",", 
       RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
       RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
       
       RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
       
       RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
       "0.16272209014989816`", ",", 
       RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
       "0.09542256467567925`", ",", 
       RowBox[{"-", "1.0678366495936973`"}], ",", 
       RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",",
        "0.11008048562609432`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9, 3.5124896140667963`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", " ", "/@", 
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512487506412157*^9, 3.512487515932146*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5124875175051193`*^9, 3.51248962124321*^9}]
}, Open  ]],

Cell["So, our expected result is x", "Text",
 CellChangeTimes->{{3.5124751336574163`*^9, 3.512475152116227*^9}, {
   3.512487529593944*^9, 3.512487529594048*^9}, {3.512487568047202*^9, 
   3.5124875797921333`*^9}, 3.512489632520133*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "=", "testXHandEdited"}]], "Input",
 CellChangeTimes->{{3.51247515939333*^9, 3.512475198981567*^9}, {
  3.5124875423881283`*^9, 3.512487544598*^9}, {3.5124875835333033`*^9, 
  3.5124875867553453`*^9}, {3.512489639934833*^9, 3.512489642433758*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.18657074177344288`", ",", 
     RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
     RowBox[{"-", "2.1420489226394355`"}], ",", 
     RowBox[{"-", "1.6129064335812886`"}], ",", 
     RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
     RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",", 
     "4.949746447442161`", ",", "1.0023168922385142`", ",", 
     "1.3820145391842602`", ",", 
     RowBox[{"-", "1.63404272386478`"}], ",", 
     RowBox[{"-", "1.7638181151358632`"}], ",", 
     RowBox[{"-", "0.6287143884359588`"}], ",", 
     RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
     RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
     RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
     RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
     "0.16272209014989816`", ",", 
     RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
     "0.09542256467567925`", ",", 
     RowBox[{"-", "1.0678366495936973`"}], ",", 
     RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",", 
     "0.11008048562609432`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5124752012094307`*^9, 3.512482817360544*^9, 3.5124866593986*^9, {
   3.512487539438904*^9, 3.512487547481099*^9}, 3.512487588875031*^9, 
   3.512489645183146*^9}]
}, Open  ]],

Cell["Actual: it works", "Text",
 CellChangeTimes->{{3.51247520737986*^9, 3.512475208964757*^9}, {
   3.512487217819169*^9, 3.5124872205892467`*^9}, {3.5124875970911217`*^9, 
   3.5124876020754633`*^9}, {3.51248844830683*^9, 3.5124884486972437`*^9}, {
   3.512488552135634*^9, 3.512488555006483*^9}, 3.512489675499004*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleParameters", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"9", "/", "10"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.512475210915781*^9, 3.512475255632621*^9}, {
  3.512489650617848*^9, 3.512489668156967*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.18657074177344288`", ",", 
     RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
     RowBox[{"-", "2.1420489226394355`"}], ",", 
     RowBox[{"-", "1.6129064335812886`"}], ",", 
     RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
     RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",", 
     "4.949746447442161`", ",", "1.0023168922385142`", ",", 
     "1.3820145391842602`", ",", 
     RowBox[{"-", "1.63404272386478`"}], ",", 
     RowBox[{"-", "1.7638181151358632`"}], ",", 
     RowBox[{"-", "0.6287143884359588`"}], ",", 
     RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
     RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
     RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
     RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
     "0.16272209014989816`", ",", 
     RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
     "0.09542256467567925`", ",", 
     RowBox[{"-", "1.0678366495936973`"}], ",", 
     RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",", 
     "0.11008048562609432`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512475257253497*^9, 3.5124755488742228`*^9, 
  3.5124757428633537`*^9, 3.512482828162709*^9, 3.512486601782569*^9, 
  3.512486636554912*^9, 3.512487603430482*^9, 3.512489669260077*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{1590, 1173},
WindowMargins->{{1280, Automatic}, {Automatic, 0}},
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{611.28, 789.57},
"PostScriptOutputFile"->"EricLabBook.nb.ps"},
ShowSelection->True,
FrontEndVersion->"7.0 for Linux x86 (64-bit) (February 25, 2009)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3512459889-7380264"->{
  Cell[569464, 14123, 757, 11, 144, "Print",
   CellTags->"Info3512459889-7380264"]},
 "Info3512474752-6925473"->{
  Cell[586659, 14609, 658, 10, 144, "Print",
   CellTags->"Info3512474752-6925473"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3512459889-7380264", 599443, 14928},
 {"Info3512474752-6925473", 599558, 14931}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 156, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[748, 28, 160, 3, 39, "Subsection"],
Cell[911, 33, 727, 11, 111, "Text"],
Cell[1641, 46, 284, 5, 51, "Text"],
Cell[1928, 53, 23819, 399, 261, 7937, 137, "CachedBoxData", "BoxData", \
"Input"],
Cell[25750, 454, 301, 6, 51, "Text"],
Cell[26054, 462, 23371, 391, 261, 7888, 136, "CachedBoxData", "BoxData", \
"Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[49462, 858, 177, 4, 31, "Subsection"],
Cell[49642, 864, 126, 1, 31, "Text"],
Cell[49771, 867, 858, 19, 32, "Input"],
Cell[50632, 888, 174, 2, 31, "Text"],
Cell[50809, 892, 416, 12, 32, "Input"],
Cell[51228, 906, 118, 1, 31, "Text"],
Cell[51349, 909, 300, 8, 32, "Input"],
Cell[51652, 919, 118, 1, 31, "Text"],
Cell[51773, 922, 746, 21, 77, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[52556, 948, 101, 1, 31, "Subsection"],
Cell[52660, 951, 123, 1, 31, "Text"],
Cell[52786, 954, 813, 23, 99, "Input"],
Cell[CellGroupData[{
Cell[53624, 981, 479, 12, 77, "Input"],
Cell[54106, 995, 17946, 301, 253, 7313, 125, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[72101, 1302, 189, 2, 31, "Subsection"],
Cell[72293, 1306, 180, 4, 31, "Text"],
Cell[72476, 1312, 761, 12, 51, "Text"],
Cell[73240, 1326, 885, 24, 77, "Input"],
Cell[CellGroupData[{
Cell[74150, 1354, 487, 12, 55, "Input"],
Cell[74640, 1368, 19936, 333, 253, 7136, 122, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[94625, 1707, 188, 2, 31, "Subsection"],
Cell[94816, 1711, 167, 3, 31, "Text"],
Cell[94986, 1716, 1210, 31, 143, "Input"],
Cell[CellGroupData[{
Cell[96221, 1751, 536, 13, 55, "Input"],
Cell[96760, 1766, 20027, 335, 253, 7149, 122, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[116836, 2107, 158, 2, 31, "Subsection"],
Cell[116997, 2111, 290, 5, 51, "Text"],
Cell[117290, 2118, 818, 21, 55, "Input"],
Cell[118111, 2141, 902, 24, 99, "Input"],
Cell[CellGroupData[{
Cell[119038, 2169, 507, 12, 77, "Input"],
Cell[119548, 2183, 18508, 311, 252, 7222, 124, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[138071, 2497, 120, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[138216, 2502, 479, 12, 77, "Input"],
Cell[138698, 2516, 17895, 300, 253, 7313, 125, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[156642, 2822, 173, 3, 31, "Subsection"],
Cell[156818, 2827, 793, 22, 55, "Input",
 InitializationCell->True],
Cell[157614, 2851, 894, 26, 55, "Input"],
Cell[158511, 2879, 1089, 29, 55, "Input"],
Cell[159603, 2910, 512, 15, 32, "Input"],
Cell[CellGroupData[{
Cell[160140, 2929, 889, 22, 55, "Input"],
Cell[161032, 2953, 23730, 397, 261, 7889, 136, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[184823, 3357, 157, 2, 43, "Section"],
Cell[CellGroupData[{
Cell[185005, 3363, 127, 1, 39, "Subsection"],
Cell[185135, 3366, 241, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[185401, 3374, 99, 1, 29, "Subsubsection"],
Cell[185503, 3377, 120, 1, 31, "Text"],
Cell[185626, 3380, 269, 6, 31, "Text"],
Cell[185898, 3388, 259, 6, 31, "Text"],
Cell[186160, 3396, 222, 6, 31, "Text"],
Cell[186385, 3404, 353, 8, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186775, 3417, 97, 1, 29, "Subsubsection"],
Cell[186875, 3420, 459, 9, 51, "Text"],
Cell[187337, 3431, 559, 11, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187933, 3447, 102, 1, 29, "Subsubsection"],
Cell[188038, 3450, 782, 13, 51, "Text"],
Cell[188823, 3465, 225, 5, 31, "Text"],
Cell[189051, 3472, 325, 7, 31, "Text"],
Cell[189379, 3481, 410, 8, 31, "Text"],
Cell[189792, 3491, 345, 7, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[190186, 3504, 92, 1, 39, "Subsection"],
Cell[190281, 3507, 4248, 102, 253, "Input",
 InitializationCell->True],
Cell[194532, 3611, 813, 24, 32, "Input",
 InitializationCell->True],
Cell[195348, 3637, 590, 15, 32, "Input",
 InitializationCell->True],
Cell[195941, 3654, 2241, 56, 143, "Input",
 InitializationCell->True],
Cell[198185, 3712, 5203, 135, 341, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[203413, 3851, 108, 1, 29, "Subsubsection"],
Cell[203524, 3854, 352, 7, 32, "Input"],
Cell[CellGroupData[{
Cell[203901, 3865, 473, 13, 32, "Input"],
Cell[204377, 3880, 954, 20, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205368, 3905, 379, 11, 32, "Input"],
Cell[205750, 3918, 553, 19, 31, "Output"]
}, Open  ]],
Cell[206318, 3940, 263, 7, 32, "Input"],
Cell[206584, 3949, 305, 6, 32, "Input"],
Cell[CellGroupData[{
Cell[206914, 3959, 141, 2, 32, "Input"],
Cell[207058, 3963, 75, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207170, 3969, 285, 6, 32, "Input"],
Cell[207458, 3977, 247, 4, 31, "Output"]
}, Open  ]],
Cell[207720, 3984, 533, 9, 55, "Input"],
Cell[CellGroupData[{
Cell[208278, 3997, 247, 5, 32, "Input"],
Cell[208528, 4004, 146, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208711, 4012, 182, 3, 32, "Input"],
Cell[208896, 4017, 99, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209032, 4023, 182, 3, 32, "Input"],
Cell[209217, 4028, 100, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209354, 4034, 174, 3, 32, "Input"],
Cell[209531, 4039, 100, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209668, 4045, 314, 9, 32, "Input"],
Cell[209985, 4056, 475, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210497, 4077, 375, 10, 32, "Input"],
Cell[210875, 4089, 873, 29, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[211797, 4124, 130, 1, 23, "Subsubsection"],
Cell[211930, 4127, 520, 15, 55, "Input",
 InitializationCell->True],
Cell[212453, 4144, 820, 14, 209, "Input",
 InitializationCell->True],
Cell[213276, 4160, 1148, 33, 121, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[214473, 4199, 208, 4, 39, "Subsection"],
Cell[214684, 4205, 173, 4, 32, "Input"],
Cell[CellGroupData[{
Cell[214882, 4213, 632, 19, 55, "Input"],
Cell[215517, 4234, 246, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215800, 4244, 369, 10, 32, "Input"],
Cell[216172, 4256, 222, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216431, 4266, 351, 10, 32, "Input"],
Cell[216785, 4278, 242, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217064, 4288, 183, 3, 32, "Input"],
Cell[217250, 4293, 143, 2, 31, "Output"]
}, Open  ]],
Cell[217408, 4298, 137, 1, 31, "Text"],
Cell[217548, 4301, 147, 3, 32, "Input"],
Cell[217698, 4306, 591, 19, 32, "Input"],
Cell[CellGroupData[{
Cell[218314, 4329, 177, 3, 32, "Input"],
Cell[218494, 4334, 121, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218652, 4341, 565, 13, 77, "Input"],
Cell[219220, 4356, 399, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219656, 4370, 654, 17, 99, "Input"],
Cell[220313, 4389, 961, 20, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221311, 4414, 146, 2, 32, "Input"],
Cell[221460, 4418, 303, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221800, 4430, 214, 4, 32, "Input"],
Cell[222017, 4436, 276, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222330, 4448, 626, 14, 99, "Input"],
Cell[222959, 4464, 371, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223367, 4477, 152, 2, 32, "Input"],
Cell[223522, 4481, 251, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223810, 4492, 330, 6, 32, "Input"],
Cell[224143, 4500, 368, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224548, 4512, 496, 10, 32, "Input"],
Cell[225047, 4524, 1060, 22, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226144, 4551, 168, 3, 32, "Input"],
Cell[226315, 4556, 116, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226468, 4563, 364, 10, 77, "Input"],
Cell[226835, 4575, 215, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227087, 4585, 140, 2, 32, "Input"],
Cell[227230, 4589, 166, 4, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[227457, 4600, 105, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[227587, 4605, 340, 6, 39, "Subsection"],
Cell[CellGroupData[{
Cell[227952, 4615, 111, 1, 29, "Subsubsection"],
Cell[228066, 4618, 2485, 37, 561, "Input",
 InitializationCell->True],
Cell[230554, 4657, 4254, 105, 429, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[234845, 4767, 111, 1, 23, "Subsubsection"],
Cell[234959, 4770, 638, 12, 121, "Input",
 InitializationCell->True],
Cell[235600, 4784, 1500, 43, 99, "Input",
 InitializationCell->True],
Cell[237103, 4829, 946, 16, 187, "Input",
 InitializationCell->True],
Cell[238052, 4847, 1729, 46, 165, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[239818, 4898, 126, 1, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[239969, 4903, 1368, 35, 99, "Input"],
Cell[241340, 4940, 17060, 286, 254, 7495, 128, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258437, 5231, 1462, 36, 99, "Input"],
Cell[259902, 5269, 18586, 312, 248, 7833, 134, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[278549, 5588, 186, 4, 31, "Subsection"],
Cell[278738, 5594, 274, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[279037, 5603, 106, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[279168, 5608, 310, 6, 55, "Input",
 InitializationCell->True],
Cell[279481, 5616, 594, 9, 70, "Output"]
}, Open  ]],
Cell[280090, 5628, 2106, 61, 143, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[282233, 5694, 119, 1, 23, "Subsubsection"],
Cell[282355, 5697, 163, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[282543, 5703, 2996, 87, 143, "Input"],
Cell[285542, 5792, 197, 3, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[285800, 5802, 214, 4, 31, "Subsection"],
Cell[CellGroupData[{
Cell[286039, 5810, 166, 3, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[286230, 5817, 1605, 39, 121, "Input"],
Cell[287838, 5858, 403, 7, 47, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[288290, 5871, 255, 5, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[288570, 5880, 3054, 73, 165, "Input"],
Cell[291627, 5955, 2549, 63, 116, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294213, 6023, 162, 3, 32, "Input"],
Cell[294378, 6028, 1083, 28, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295498, 6061, 170, 3, 32, "Input"],
Cell[295671, 6066, 565, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296273, 6085, 162, 3, 32, "Input"],
Cell[296438, 6090, 565, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297040, 6109, 301, 6, 32, "Input"],
Cell[297344, 6117, 222, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297603, 6127, 296, 6, 32, "Input"],
Cell[297902, 6135, 195, 4, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[298170, 6147, 106, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[298301, 6152, 264, 5, 39, "Subsection"],
Cell[298568, 6159, 333, 6, 31, "Text"],
Cell[298904, 6167, 1049, 25, 59, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[300002, 6198, 118, 1, 43, "Section"],
Cell[300123, 6201, 262, 5, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[300422, 6211, 107, 1, 43, "Section"],
Cell[300532, 6214, 120, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[300677, 6219, 291, 3, 31, "Subsection"],
Cell[CellGroupData[{
Cell[300993, 6226, 161, 3, 29, "Subsubsection"],
Cell[301157, 6231, 221, 4, 31, "Text"],
Cell[301381, 6237, 2955, 71, 187, "Input"],
Cell[CellGroupData[{
Cell[304361, 6312, 141, 2, 32, "Input"],
Cell[304505, 6316, 118, 3, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[304672, 6325, 134, 1, 23, "Subsubsection"],
Cell[304809, 6328, 543, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[305377, 6340, 626, 16, 32, "Input"],
Cell[306006, 6358, 302, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[306345, 6371, 315, 9, 32, "Input"],
Cell[306663, 6382, 382, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307082, 6397, 152, 3, 32, "Input"],
Cell[307237, 6402, 381, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307655, 6417, 310, 7, 32, "Input"],
Cell[307968, 6426, 18267, 531, 207, "Output"]
}, Open  ]],
Cell[326250, 6960, 224, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[326499, 6969, 324, 7, 32, "Input"],
Cell[326826, 6978, 339, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327202, 6992, 118, 2, 32, "Input"],
Cell[327323, 6996, 567, 15, 31, "Output"]
}, Open  ]],
Cell[327905, 7014, 195, 4, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[328137, 7023, 190, 4, 23, "Subsubsection"],
Cell[328330, 7029, 1248, 32, 77, "Input"],
Cell[CellGroupData[{
Cell[329603, 7065, 335, 10, 32, "Input"],
Cell[329941, 7077, 914, 18, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[330892, 7100, 179, 3, 32, "Input"],
Cell[331074, 7105, 640, 15, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331751, 7125, 296, 7, 32, "Input"],
Cell[332050, 7134, 6517, 181, 232, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[338640, 7323, 107, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[338772, 7328, 216, 2, 39, "Subsection"],
Cell[338991, 7332, 298, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[339314, 7342, 626, 16, 32, "Input"],
Cell[339943, 7360, 326, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340306, 7373, 358, 8, 32, "Input"],
Cell[340667, 7383, 430, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341134, 7397, 152, 3, 32, "Input"],
Cell[341289, 7402, 429, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341755, 7416, 310, 7, 32, "Input"],
Cell[342068, 7425, 1572, 52, 50, "Output"]
}, Open  ]],
Cell[343655, 7480, 224, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[343904, 7489, 324, 7, 32, "Input"],
Cell[344231, 7498, 3807, 106, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348075, 7609, 118, 2, 32, "Input"],
Cell[348196, 7613, 3649, 104, 54, "Output"]
}, Open  ]],
Cell[351860, 7720, 195, 4, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[352092, 7729, 290, 6, 31, "Subsection"],
Cell[352385, 7737, 1319, 33, 77, "Input"],
Cell[CellGroupData[{
Cell[353729, 7774, 335, 10, 32, "Input"],
Cell[354067, 7786, 1055, 20, 245, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355159, 7811, 179, 3, 32, "Input"],
Cell[355341, 7816, 788, 19, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356166, 7840, 391, 8, 32, "Input"],
Cell[356560, 7850, 508, 8, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[357117, 7864, 151, 2, 31, "Subsection"],
Cell[357271, 7868, 540, 11, 51, "Text"],
Cell[357814, 7881, 279, 5, 31, "Text"],
Cell[358096, 7888, 727, 14, 165, "Input",
 InitializationCell->True],
Cell[358826, 7904, 4908, 114, 253, "Input",
 InitializationCell->True],
Cell[363737, 8020, 1072, 18, 187, "Input",
 InitializationCell->True],
Cell[364812, 8040, 3595, 81, 209, "Input",
 InitializationCell->True],
Cell[368410, 8123, 1043, 17, 165, "Input",
 InitializationCell->True],
Cell[369456, 8142, 3089, 73, 209, "Input",
 InitializationCell->True],
Cell[372548, 8217, 867, 15, 99, "Input",
 InitializationCell->True],
Cell[373418, 8234, 4709, 106, 297, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[378176, 8346, 104, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[378305, 8351, 270, 5, 39, "Subsection"],
Cell[CellGroupData[{
Cell[378600, 8360, 106, 1, 29, "Subsubsection"],
Cell[378709, 8363, 531, 8, 51, "Text"],
Cell[379243, 8373, 97, 1, 31, "Text"],
Cell[379343, 8376, 385, 7, 51, "Text"],
Cell[379731, 8385, 119, 2, 31, "Text"],
Cell[379853, 8389, 770, 12, 71, "Text"],
Cell[380626, 8403, 127, 1, 31, "Text"],
Cell[380756, 8406, 206, 5, 31, "Text"],
Cell[380965, 8413, 141, 3, 31, "Text"],
Cell[381109, 8418, 662, 13, 71, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381808, 8436, 111, 1, 29, "Subsubsection"],
Cell[381922, 8439, 381, 7, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382340, 8451, 125, 1, 29, "Subsubsection"],
Cell[382468, 8454, 446, 7, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382951, 8466, 109, 1, 29, "Subsubsection"],
Cell[383063, 8469, 500, 11, 51, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[383612, 8486, 110, 1, 31, "Subsection"],
Cell[383725, 8489, 191, 4, 31, "Text"],
Cell[383919, 8495, 215, 4, 31, "Text"],
Cell[384137, 8501, 273, 5, 31, "Text"],
Cell[384413, 8508, 807, 12, 91, "Text"],
Cell[385223, 8522, 381, 7, 51, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[385653, 8535, 108, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[385786, 8540, 219, 3, 39, "Subsection"],
Cell[CellGroupData[{
Cell[386030, 8547, 116, 1, 29, "Subsubsection"],
Cell[386149, 8550, 304, 8, 34, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[386490, 8563, 102, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[386617, 8568, 105, 1, 30, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[386747, 8573, 131, 1, 29, "Subsubsubsubsection"],
Cell[386881, 8576, 163, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[387069, 8583, 1668, 44, 121, "Input"],
Cell[388740, 8629, 1170, 36, 52, "Output"]
}, Open  ]],
Cell[389925, 8668, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[390059, 8673, 1140, 33, 121, "Input"],
Cell[391202, 8708, 695, 25, 47, "Output"]
}, Open  ]],
Cell[391912, 8736, 95, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[392032, 8741, 119, 2, 32, "Input"],
Cell[392154, 8745, 786, 26, 47, "Output"]
}, Open  ]],
Cell[392955, 8774, 165, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[393145, 8781, 1545, 40, 121, "Input"],
Cell[394693, 8823, 1075, 39, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[395805, 8867, 584, 17, 32, "Input"],
Cell[396392, 8886, 440, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396869, 8902, 671, 19, 32, "Input"],
Cell[397543, 8923, 456, 14, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398036, 8942, 1618, 42, 121, "Input"],
Cell[399657, 8986, 1036, 36, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[400730, 9027, 1561, 40, 121, "Input"],
Cell[402294, 9069, 310, 9, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[402653, 9084, 129, 1, 23, "Subsubsubsubsection"],
Cell[402785, 9087, 242, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[403052, 9095, 230, 5, 32, "Input"],
Cell[403285, 9102, 247, 7, 47, "Output"]
}, Open  ]],
Cell[403547, 9112, 113, 2, 32, "Input"],
Cell[403663, 9116, 111, 1, 31, "Text"],
Cell[403777, 9119, 2014, 48, 77, "Input"],
Cell[CellGroupData[{
Cell[405816, 9171, 952, 22, 32, "Input"],
Cell[406771, 9195, 3538, 127, 83, "Output"]
}, Open  ]],
Cell[410324, 9325, 302, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[410651, 9334, 1692, 46, 54, "Input"],
Cell[412346, 9382, 1341, 40, 31, "Output"]
}, Open  ]],
Cell[413702, 9425, 112, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[413839, 9430, 2517, 63, 84, "Input"],
Cell[416359, 9495, 6267, 184, 168, "Output"]
}, Open  ]],
Cell[422641, 9682, 266, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[422932, 9691, 3314, 83, 105, "Input"],
Cell[426249, 9776, 296, 5, 31, "Output"]
}, Open  ]],
Cell[426560, 9784, 201, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[426786, 9792, 2691, 81, 190, "Input"],
Cell[429480, 9875, 952, 34, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[430469, 9914, 2444, 72, 171, "Input"],
Cell[432916, 9988, 1497, 50, 47, "Output"]
}, Open  ]],
Cell[434428, 10041, 181, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[434634, 10049, 3413, 92, 201, "Input"],
Cell[438050, 10143, 2560, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440647, 10233, 287, 7, 32, "Input"],
Cell[440937, 10242, 765, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441739, 10268, 159, 3, 32, "Input"],
Cell[441901, 10273, 612, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442550, 10294, 315, 8, 32, "Input"],
Cell[442868, 10304, 1227, 34, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[444144, 10344, 218, 5, 23, "Subsubsubsubsection"],
Cell[444365, 10351, 1555, 41, 121, "Input"],
Cell[CellGroupData[{
Cell[445945, 10396, 2522, 60, 105, "Input"],
Cell[448470, 10458, 77, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[448584, 10464, 2336, 53, 77, "Input"],
Cell[450923, 10519, 385, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451345, 10534, 640, 18, 55, "Input"],
Cell[451988, 10554, 371, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452396, 10570, 2739, 71, 165, "Input"],
Cell[455138, 10643, 1486, 47, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[456661, 10695, 277, 7, 32, "Input"],
Cell[456941, 10704, 2536, 88, 138, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459514, 10797, 156, 3, 32, "Input"],
Cell[459673, 10802, 1743, 66, 95, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461453, 10873, 260, 5, 32, "Input"],
Cell[461716, 10880, 1737, 58, 76, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[463526, 10946, 131, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[463682, 10951, 3122, 87, 226, "Input"],
Cell[466807, 11040, 4736, 169, 179, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[471580, 11214, 129, 2, 32, "Input"],
Cell[471712, 11218, 529, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472278, 11237, 180, 3, 32, "Input"],
Cell[472461, 11242, 995, 24, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[473493, 11271, 659, 13, 32, "Input"],
Cell[474155, 11286, 1145, 33, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[475337, 11324, 163, 4, 32, "Input"],
Cell[475503, 11330, 740, 19, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[476280, 11354, 239, 5, 32, "Input"],
Cell[476522, 11361, 1014, 23, 52, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[477597, 11391, 185, 4, 31, "Subsection"],
Cell[477785, 11397, 111, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[477921, 11402, 152, 2, 25, "Item"],
Cell[478076, 11406, 108, 1, 25, "Subitem"],
Cell[478187, 11409, 150, 2, 25, "Item"],
Cell[478340, 11413, 392, 13, 28, "Subitem"],
Cell[478735, 11428, 152, 2, 25, "Item"],
Cell[478890, 11432, 161, 3, 25, "Subitem"],
Cell[479054, 11437, 132, 3, 25, "Item"],
Cell[479189, 11442, 121, 1, 25, "Item"],
Cell[479313, 11445, 109, 1, 25, "Item"],
Cell[479425, 11448, 116, 1, 25, "Item"]
}, Open  ]],
Cell[479556, 11452, 338, 10, 33, "Text"],
Cell[479897, 11464, 112, 1, 31, "Text"],
Cell[480012, 11467, 189, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[480226, 11475, 106, 1, 29, "Subsubsection"],
Cell[480335, 11478, 343, 9, 33, "Text"],
Cell[480681, 11489, 129, 1, 31, "Text"],
Cell[480813, 11492, 124, 1, 31, "Text"],
Cell[480940, 11495, 212, 4, 31, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[481201, 11505, 188, 2, 31, "Subsection"],
Cell[481392, 11509, 456, 8, 51, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[481897, 11523, 109, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[482031, 11528, 116, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[482172, 11533, 318, 6, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[482515, 11543, 2796, 83, 201, "Input"],
Cell[485314, 11628, 2560, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487911, 11718, 386, 10, 32, "Input"],
Cell[488300, 11730, 613, 17, 31, "Output"]
}, Open  ]],
Cell[488928, 11750, 99, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[489052, 11755, 207, 4, 32, "Input"],
Cell[489262, 11761, 949, 25, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490248, 11791, 126, 2, 32, "Input"],
Cell[490377, 11795, 899, 24, 52, "Output"]
}, Open  ]],
Cell[491291, 11822, 100, 1, 31, "Text"],
Cell[491394, 11825, 314, 9, 32, "Input"],
Cell[CellGroupData[{
Cell[491733, 11838, 399, 6, 32, "Input"],
Cell[492135, 11846, 1102, 36, 47, "Output"]
}, Open  ]],
Cell[493252, 11885, 279, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[493556, 11894, 119, 1, 32, "Input"],
Cell[493678, 11897, 859, 29, 58, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[494586, 11932, 113, 1, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[494724, 11937, 186, 4, 30, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[494935, 11945, 234, 5, 32, "Input"],
Cell[495172, 11952, 96, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[495305, 11958, 357, 9, 32, "Input"],
Cell[495665, 11969, 569, 20, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[496271, 11994, 320, 7, 32, "Input"],
Cell[496594, 12003, 368, 12, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[496999, 12020, 197, 3, 32, "Input"],
Cell[497199, 12025, 242, 8, 51, "Output"]
}, Open  ]],
Cell[497456, 12036, 319, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[497800, 12045, 344, 7, 32, "Input"],
Cell[498147, 12054, 420, 11, 31, "Output"]
}, Open  ]],
Cell[498582, 12068, 140, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[498747, 12073, 431, 10, 32, "Input"],
Cell[499181, 12085, 143, 2, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[499385, 12094, 282, 3, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[499692, 12101, 2796, 83, 201, "Input"],
Cell[502491, 12186, 2582, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[505110, 12276, 386, 10, 32, "Input"],
Cell[505499, 12288, 1149, 32, 52, "Output"]
}, Open  ]],
Cell[506663, 12323, 142, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[506830, 12329, 271, 5, 32, "Input"],
Cell[507104, 12336, 1127, 36, 47, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[508280, 12378, 137, 1, 23, "Subsubsection"],
Cell[508420, 12381, 282, 5, 31, "Text"],
Cell[508705, 12388, 1353, 26, 32, "Input"],
Cell[CellGroupData[{
Cell[510083, 12418, 279, 6, 32, "Input"],
Cell[510365, 12426, 310, 5, 31, "Output"]
}, Open  ]],
Cell[510690, 12434, 332, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[511047, 12444, 880, 29, 54, "Input"],
Cell[511930, 12475, 711, 25, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512678, 12505, 789, 26, 54, "Input"],
Cell[513470, 12533, 910, 33, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[514417, 12571, 1482, 42, 54, "Input"],
Cell[515902, 12615, 446, 12, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516385, 12632, 1268, 38, 54, "Input"],
Cell[517656, 12672, 1525, 53, 80, "Output"]
}, Open  ]],
Cell[519196, 12728, 135, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[519356, 12733, 185, 3, 32, "Input"],
Cell[519544, 12738, 461, 12, 31, "Output"]
}, Open  ]],
Cell[520020, 12753, 101, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[520146, 12758, 1896, 47, 165, "Input"],
Cell[522045, 12807, 1570, 34, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[523652, 12846, 603, 12, 32, "Input"],
Cell[524258, 12860, 159, 3, 31, "Output"]
}, Open  ]],
Cell[524432, 12866, 851, 13, 51, "Text"],
Cell[CellGroupData[{
Cell[525308, 12883, 243, 5, 32, "Input"],
Cell[525554, 12890, 459, 11, 31, "Output"]
}, Open  ]],
Cell[526028, 12904, 136, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[526189, 12909, 246, 6, 32, "Input"],
Cell[526438, 12917, 212, 3, 33, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[526699, 12926, 150, 2, 29, "Subsubsection"],
Cell[526852, 12930, 238, 4, 31, "Text"],
Cell[527093, 12936, 476, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[527594, 12952, 155, 2, 32, "Input"],
Cell[527752, 12956, 189, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[527978, 12965, 385, 9, 32, "Input"],
Cell[528366, 12976, 788, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[529191, 13002, 234, 5, 32, "Input"],
Cell[529428, 13009, 143, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[529608, 13016, 357, 9, 32, "Input"],
Cell[529968, 13027, 321, 7, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[530362, 13042, 105, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[530492, 13047, 112, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[530629, 13052, 313, 6, 29, "Subsubsection"],
Cell[530945, 13060, 590, 9, 51, "Text"],
Cell[531538, 13071, 345, 7, 31, "Text"],
Cell[CellGroupData[{
Cell[531908, 13082, 1268, 38, 54, "Input"],
Cell[533179, 13122, 1358, 51, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[534574, 13178, 142, 2, 32, "Input"],
Cell[534719, 13182, 1688, 60, 156, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536444, 13247, 161, 3, 32, "Input"],
Cell[536608, 13252, 1324, 29, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[537969, 13286, 145, 2, 32, "Input"],
Cell[538117, 13290, 89, 2, 31, "Output"]
}, Open  ]],
Cell[538221, 13295, 1733, 34, 32, "Input"],
Cell[CellGroupData[{
Cell[539979, 13333, 1968, 48, 187, "Input"],
Cell[541950, 13383, 1076, 26, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543063, 13414, 260, 5, 32, "Input"],
Cell[543326, 13421, 6439, 117, 941, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[549802, 13543, 277, 7, 32, "Input"],
Cell[550082, 13552, 633, 11, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550752, 13568, 200, 5, 32, "Input"],
Cell[550955, 13575, 136, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551128, 13582, 147, 2, 32, "Input"],
Cell[551278, 13586, 884, 29, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552199, 13620, 175, 4, 32, "Input"],
Cell[552377, 13626, 1332, 33, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[553746, 13664, 143, 2, 32, "Input"],
Cell[553892, 13668, 1358, 51, 80, "Output"]
}, Open  ]],
Cell[555265, 13722, 452, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[555742, 13738, 297, 7, 32, "Input"],
Cell[556042, 13747, 764, 13, 92, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[556855, 13766, 370, 6, 23, "Subsubsection"],
Cell[557228, 13774, 494, 8, 31, "Text"],
Cell[CellGroupData[{
Cell[557747, 13786, 1268, 38, 54, "Input"],
Cell[559018, 13826, 1380, 51, 80, "Output"]
}, Open  ]],
Cell[560413, 13880, 1733, 34, 32, "Input"],
Cell[CellGroupData[{
Cell[562171, 13918, 2214, 52, 187, "Input"],
Cell[564388, 13972, 1130, 27, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[565555, 14004, 340, 8, 32, "Input"],
Cell[565898, 14014, 408, 8, 31, "Output"]
}, Open  ]],
Cell[566321, 14025, 175, 4, 32, "Input"],
Cell[566499, 14031, 584, 15, 32, "Input"],
Cell[CellGroupData[{
Cell[567108, 14050, 169, 3, 32, "Input"],
Cell[567280, 14055, 75, 1, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[567416, 14063, 117, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[567558, 14068, 171, 3, 29, "Subsubsection"],
Cell[567732, 14073, 266, 5, 31, "Text"],
Cell[568001, 14080, 1055, 28, 32, "Input"],
Cell[569059, 14110, 248, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[569332, 14119, 129, 2, 32, "Input"],
Cell[569464, 14123, 757, 11, 144, "Print",
 CellTags->"Info3512459889-7380264"]
}, Open  ]],
Cell[570236, 14137, 111, 1, 31, "Text"],
Cell[570350, 14140, 545, 15, 32, "Input"],
Cell[570898, 14157, 118, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[571041, 14162, 190, 3, 32, "Input"],
Cell[571234, 14167, 238, 5, 31, "Output"]
}, Open  ]],
Cell[571487, 14175, 114, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[571626, 14180, 337, 8, 32, "Input"],
Cell[571966, 14190, 1530, 35, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[573533, 14230, 184, 4, 32, "Input"],
Cell[573720, 14236, 310, 7, 33, "Output"]
}, Open  ]],
Cell[574045, 14246, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[574179, 14251, 408, 9, 32, "Input"],
Cell[574590, 14262, 1553, 41, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[576180, 14308, 205, 4, 32, "Input"],
Cell[576388, 14314, 215, 7, 31, "Output"]
}, Open  ]],
Cell[576618, 14324, 221, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[576864, 14331, 307, 7, 32, "Input"],
Cell[577174, 14340, 929, 26, 31, "Output"]
}, Open  ]],
Cell[578118, 14369, 318, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[578461, 14377, 342, 8, 32, "Input"],
Cell[578806, 14387, 952, 26, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[579807, 14419, 141, 1, 29, "Subsubsection"],
Cell[579951, 14422, 259, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[580235, 14431, 332, 6, 32, "Input"],
Cell[580570, 14439, 1599, 41, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[582206, 14485, 220, 4, 32, "Input"],
Cell[582429, 14491, 1980, 48, 72, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[584470, 14546, 166, 2, 31, "Subsection"],
Cell[CellGroupData[{
Cell[584661, 14552, 217, 4, 29, "Subsubsection"],
Cell[584881, 14558, 266, 5, 31, "Text"],
Cell[585150, 14565, 1055, 28, 32, "Input"],
Cell[586208, 14595, 248, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[586481, 14604, 175, 3, 32, "Input"],
Cell[586659, 14609, 658, 10, 144, "Print",
 CellTags->"Info3512474752-6925473"]
}, Open  ]],
Cell[587332, 14622, 160, 2, 31, "Text"],
Cell[587495, 14626, 860, 22, 32, "Input"],
Cell[588358, 14650, 118, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[588501, 14655, 190, 3, 32, "Input"],
Cell[588694, 14660, 254, 6, 31, "Output"]
}, Open  ]],
Cell[588963, 14669, 114, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[589102, 14674, 337, 8, 32, "Input"],
Cell[589442, 14684, 1571, 31, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[591050, 14720, 184, 4, 32, "Input"],
Cell[591237, 14726, 207, 5, 33, "Output"]
}, Open  ]],
Cell[591459, 14734, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[591593, 14739, 408, 9, 32, "Input"],
Cell[592004, 14750, 1975, 42, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[594016, 14797, 205, 4, 32, "Input"],
Cell[594224, 14803, 237, 7, 31, "Output"]
}, Open  ]],
Cell[594476, 14813, 236, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[594737, 14820, 286, 4, 32, "Input"],
Cell[595026, 14826, 1561, 30, 52, "Output"]
}, Open  ]],
Cell[596602, 14859, 322, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[596949, 14867, 315, 7, 32, "Input"],
Cell[597267, 14876, 1580, 29, 52, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
