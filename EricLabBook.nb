(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   1692625,      40498]
NotebookOptionsPosition[   1615881,      38066]
NotebookOutlinePosition[   1617824,      38124]
CellTagsIndexPosition[   1617420,      38112]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["31 March 2011 Thursday", "Section",
 CellChangeTimes->{{3.510578169540861*^9, 3.510578178722415*^9}, {
  3.510998669117622*^9, 3.510998669315875*^9}}],

Cell[CellGroupData[{

Cell["\<\
Overview of exploration of hough-peak-model-based synthetic data\
\>", "Subsection",
 CellChangeTimes->{{3.510998759193699*^9, 3.510998806306418*^9}}],

Cell["\<\
Simulate 30 samples from something like the peak model of the hough transform \
method with 20 peaks in the samples.  All peaks are present in all samples.  \
A key factor to a nice ordering appearing is that the sample parameters vary \
greatly in magnitude.  Further, the range of the multiplied sample parameters \
must be significantly smaller than the range of mean peak positions in order \
for the sorted sample plot to look right.\
\>", "Text",
 CellChangeTimes->{{3.510574493172945*^9, 3.510574529917838*^9}, {
  3.510574560412709*^9, 3.5105745887809153`*^9}, {3.510574643729322*^9, 
  3.510574657397826*^9}, {3.510577905175281*^9, 3.5105779483027067`*^9}, {
  3.5105780576724052`*^9, 3.510578135628316*^9}}],

Cell["\<\
Below is a table reproduced when there are 3 parameters, all with a standard \
deviation of 0.7 (after sorting by the position of the green peak)\
\>", "Text",
 CellChangeTimes->{{3.510578517659648*^9, 3.510578537448668*^9}, {
  3.510580710176375*^9, 3.510580723672188*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1:eJxF2Xk8VO37B/CxbxPGGMvMmJ20iSeEipNWIZEtsiYVihSR8qRkX7IWWSqU
UiHRRoOIpJUsoURKliFbdt/n93t1rtMfer1fn/u+rmtuM2dmDqart8VBfhwO
Z/vfj//7f+LRlz8D3AUD3P//00A8X+oc6SvvAVfkFE5aW0gjqB2Tln6TnrLA
q9ICYpiXieByg5HqIpoImMnX9YYYOAr13DVu/Hliy4bc/EXA5fREOvj+Wcbs
lVNUsK/two1oER7sXyZ+Io2ziQB5bvDb13nTEuBvkTr7FG2x/dP373p5HMXs
ZPQybCyKBCZJzlu3WmE5Zy6vTqJpEvqdu/RsZ1pJPhc1w0H5p0kSNu/LUyGJ
n5fz/7UeMhZhbYPYfDFA/VxgiOdcJQ156LX645M5bLA9uXTIfgUR3De1c9jU
UADspXkxN9f/F9QzL15fWhbFgryp/ZPWWj4GuH23ygLSQsf2R5knbysYg/3n
OMXLctmSkL/Pimq6QpDA6r3pwOsnUcA/Nngtzf6igidzJ6ceEhXATzMMHFNx
NPBBi/UvN9+bhX6SIhEbD7Z85aKW3ciO2R+Hrb9GPxPbWL70d/0/yKVYMcVy
7Q4uanFHswFZRVkEtSzhW8EUgwmeE3FofbpZDnycr0XJ8YgouFn7pvnyVTiw
80Mje0siB6tnVnYoxZYBrjyZf2ZgNQ285Wqam5XmPMw3+yI+4EsTEfKkUuVo
9Rt48FbLo7vwenSwx3x5cU0fFZynsFbvmR8J/HDxVwXDQAn8yfgCju8lD/rd
LdIclSAUw3l8Zb9+cXYMm1d00b506gI632qk9hhO0qJkAOykrtZYP4c+/1Yj
sU+y9vi9Z4HvibsZSz4ggEVdHY7OfxEENx73iP7mNAb1bEOfxC3uYkMu911s
y0FhBjh1hTzbyYsGDqmXC5bk9MH+JIcqwSZ5KciHrs9YlhEkwc6D+Ke/L1LA
s9Vb4qIsMPvVGRVG8cuBTX3SI9fwqOCYbJWojd4T0G+nja/rB0IBeKj1ipfZ
CSVY75FunUTRmPqbUxH1hud3okSzwHZRIV9okvII6m2bSk/J3KOD7a1kGqJV
ZcDClRMDM5uEsfXBOKXGIRGwdOrNglFBZfDDsXXZm8SZ4Ca387xtiQyw3Vb/
OL7QUZinXHLkkhsB65ex4bLFzBwBbLHrYs/KMhp4MuJrRp61Ijig4N1Lj/Wy
4JSLo5cc8pTAVPfNh2aF3kE/4TSDsNqGPrDQbuOFrFRsvbu858e61eN/c2mE
cupQ4srx3+A7cScHS6rR+aSRG94pr9bEMsH7LnDXurpIg4Uvhbx7ul4EPHxh
aeBcxBzUiyzinBOw5kD+oyGXj6rEACdG+wbF11LBOiNbP512rIX9T25ZVO+6
hvVTK6e6V3djxk/sDCQOU8Dh196wqoIUwet2vU4wdCOCeaMRLM1CbP1dQaSf
de8n9Lt7zF1C2xyz8TIZqf4YbL6MS5HLagTR9xsFZKPqjJ2zeh8XtfUeSw//
E+j1QgFZo79KPS1WCfxYmHt9zXN5sJq9vg5eWAqcee1Y5rp7IuCXenHanu+V
weaWP63k9zLAWi1hYxZNimDvXi/vEvoczNcs3VA/aKMAedo1j9vL1bB+FcU1
v02+YvVcXmSdvT5GAfdwXr/SUieAReODBXn8WJ6sEit9saIB+oUfC7+aeegn
+GzJNqEyIgvWP7pq3xkqhl7f1yGK5krhTwXQzy/rEL+g1edlMqQgV2cSOjNV
2GCudfOFpe9EcM0F/PvhbGGwtJEhJab2F9TLba5gmYph+/ee3bHu5WE6OKZ6
/ExDGhXMiyjB2fmNwv6EjiIX2rA05CleAY0aH8TBJPfPXt8o2H5924jhgnHM
3q9Cet+tkgNftxwMNI/EcuLVufv3L01Dv/P767VnJhq5qEu7zlSe+YDNqx+4
nFhGRecTRWTWJ8eb1U6D5UuiKYKn0Pc3UUTDLL1PWooFpo3fiI6iEsClyuFH
u+bEwT1iTe13QrH6lVGpAvx7OJC/EVeWCSmigV/m2KyTvCoP9gkRaRvWquGi
DlykrAgVkoHcz9/UwU5HClzZNj0S6EIBH3B23MzdSgbTnUdG313H5m0oksxb
G6kI3nYisDWkiQfzSoQcjUvvHgDvvjLsJ0PC5mX2u+T4/0BfHyuRXXf7JopM
usEXm8Z8GE/Q3/dKpKyROdNowAILXAk6xRsggtc8Vb4aaiwKrrQpJD17PQ71
0ivJoTfvsyHfwvSs9s2ig9V8jbU731DA//56dZJ7hgf7lXmbLN+RZSAfWlfm
vCcYD3789TSH20MF/7hRUzWLYO5befsit0EWbHggq+rJPNYvgdbcbn0Ym7do
d+vh7/qPwZZ8/rjn/AxYb7fRnMA6ir5eRw0Ejc/sCqKir+dRg7DY9L7MFdLg
4a0djWN2TPB9jSSDz3wSYA96HetIhihYq+igk5/lLNS33G+b9qSTA7mpH6Mh
4CEdHBFXgPCrkcHChhHzWSW/uKgdPebH/cWweZZ+P1rp7y4DtruucfZ4GLZf
LuOZRWmAPFhkj4l0yyK2v1S7yfzKpCJ4+0kJC3X8V5i3tm53YeDEJNjChXTy
xHasPjUZrzIVgz5efaTowBPTSxkzXNQqGVMGD3YSIA9+ZNkRd4cFjgkSTBzM
VwL3uO9parOUAOs8sXZsiB8yQO3tIP6d8wTbL90a0HFEmQ4mx+z9HaNJAR/w
2qBtHioO3n6QOitIlwcfe/jdc2wvH/hm3TU50WgGZvk3Q0JOTLAwMX3pOL8C
2POfOS2CPzb/wjdc9p78JZh3bWyA78Urk3AeywmBfUr5HFgf0TRexs5CX7+q
yGYnF4ZmXzeY7HCtRoeEnp8qsu7AxVQddRaYeDZNkRlFBFNxkvHmdSLgiK9a
4wuUSah3b8KIfb6UDfm5ioba9EY6OGZvjvo6NyrYYNuM6LzFMOyPWhroVmvA
5uF9v+jIVFwGXtqZ8K/PO2y/WX2JQN4MBaySSch17ZMFq80F31irhq23z9mb
yyocg37qK3sDY99zwZ+zxX6EJmDzfipMjK9N+PM3ZyDuzeXGx3d/B1ssD7vd
JYA+3xmIeamb8v5aJnitRr/1Fn1Z8OF/VMbGJSXA3nbmQ9+yJ6DemzuBZ/JV
OZD/3NLqabiSDt6c8DBoXFkRHHuYY4nP74f9z4yIF7riiJBvLEduc57hwZ9d
ztWZb1ECr6eWCI7gqWALoe4D2ZLY/mOBY0duPCaD+XR0HPsmRqFfxb/72E83
tIHr2xRbvd0ZsD6GfUuPQUCvd5oInmyGv/3sGxd1+shj1+Y+EuQ7zQar9r9h
gHnB8WvDz2A54fOYN3JOGDyp/8imHBEAF6y6YXt7JQd80sTB35qL1dtEe/Bv
uiNmx8x7GnOq6P0hTeRcr9LK4QUZyIdxplWRAZLgyjLm031OdHD2BX2yqAYV
TArxSgqgy4E/Zt9VNdWjgW9qfEh5F/UL6zcvWG/7KQ/OQ8IxIdveGZvv866Y
ay1d6PMNh7jmtE8/ChoE028XnVAdRZ9fOOS0awW96zIN3N6syKdlJA02nzrW
d3mZODhs7cbTmt4i4F+KZ88sb1cGV7w+m1KczAC/WzqZu+cQFczwfFGbavsE
5ilVYkXhBYiQfzSqfty5CvNNBb4MEk8JbHTi6Qa+O/Lg4PwsR/IDbN7pyQ1L
VqIUcHdm8IE6qRIuavllPG1b/j/Q//CpbtPNudh8Sb0IgzOCXn91EL32YPmb
SA8X9dFgn8bCKGnIOY7Kd74JssDNX4rfymcqgtlmRsqe+/HgqgcXgj7MoN8H
dZD5Uyza3lQ25OE//Xn3+ehgUe6DqwKGWL0HAwNUw2Ec+JWdolXNajlwnunH
R7vShcGPpXZsl0zD6n003nOqOQ+zm2/xkj2BBFbv91X3qaCA4xA/E9GPf2Be
X2RgQEOqC87DJ61ue+gQ9vjLVxuTJFj8f62LBOThY+vo6P0uXSTPZEbEikyA
fLeX9qkiFRaYp55VpJKuALb69DtsNFkc/NYp8UH1Eno91kXOH0k/WuXHhnzX
bM9SA7zedJEP0+3fJ36SwSGWsYuD63HgJNKMtDkfCexcWNO6PUcEHOe6l+zD
xOrpyv3jKsjCfNmLRIktxfYfXbDp8LOjgs0yZvyLk/7AvA3by1fkT3TBeRTj
hAJrTLHHv4y6LyRNC33/5SA2SmNbLNNHwIHxhhLLOtDz4/z3eVlV++tjFnjh
+weqoaY0uEmX9U2IKQB+plq/RSN8Euopax9gFNuwIV9pZjZI284AR2v4hW+S
xeyqu2XFn9NdsH9r1WjH8Tw85GU9ZBsTMay/2yrDtOviFPBhq+OsGEsyuIpd
zR4wlgO/cefzjD+pBM6w/h390HMM+nnJ6J17sacWLH6s5d5QJVaf2uRD690k
9NebkJY0l+OVm9D3j02IiQfTq0OfAHnehjIjDwYbvPX3pSopsgI4rXMgUbFP
GGw7pCnWno5+/tuE5L+ZSq7MZUFuwidkTiihg+/aFUt8HVUCR55V+mGYywfW
vWmZzPdJBqxdZfZqTQ7Wz/ODnraGPg18RSz7s2IWVl+tqzyrko7Nu0/06dGe
LqxfXhgrka90HubtjN3RcaVrCM6jULrTyeMVE9azu9ueZ99E73duRHQEhNYi
d5oMUBt/2nFQMJ8A+Re5+cRxZQ54Q1Se87V2GbBzrXzBViYOnGwvaoK37Yd6
2l9Esr8IsCCXXy8RQd7BAFvW2R2k+DHBUQvXA07snoL9MZLyDLlRccjv0Otw
zh8w16iPzZhpU8B0787Qh8uVwHa+8bqJkmSw3yX/9isBdPBiZl+NpvkC9Gtc
JPvNmwxwUcfdyhRvfYTVi9BhL75pRs9bDeGpqkcoXvgCFv+UzK/wHT0/NeQl
GWfWo8cCW7hVCzaKEcHS++2H4tcLg+tjBt8pjk5BvbzdxFUOaWzIHzjpfQul
MMDR0zav3RRo4NPTQlpFpTzYv+/yjoX/LoGQ19y2p4e8Wgbu/uFue+ouFbwX
L+lSV0YBs6+2uohdI4Gbb/eM7OzF1ud939eQ6jMG/dTHR8iMgkJwo3eyluNb
bD5TlZmcXz7o9U8F+bF1erjiYS/Y71N/SO0ier1RQbZu7nmvmswC+715GVGl
RgLrRvKlvIe/56gg/AH6f/a29UM91/Ija85nsiG/Y9G33SqFBlbM4hM+bqsA
jlJ24ztUNAz7Xx+cM5YMIELu6/uCtwMnDi70PbaH9oMK/iLVc9EUPk+rIP6U
AsnwNmw/u5RFaL9HBku8Ff2oEz4F/RBikry5eRE4TOSY/VQvA9b7HvGQ2vAD
vb6sR755EI5sCEeff+uR3sWyYY8DyyBfvJ322vcVG0zY/jvh2S9ZcLb3Dlzk
bWFwp/OVF7rj7VBP8UGHqHwKC/IQmsoqvT80sMG5okt54lRwhF0jPub2OOwf
QN64bZmXhryBnyaS5ioK5i2PbJqbpICThbOuRpKw+jt7OTscB+TAmgtWqVdT
sH7PSfuczDcuQL+5JKt6Umo3F7VR1dvTLzwZsL48+aFGpzF6flpIcZBOi20W
er9fC9F/yfOQt5OAnO4TlNSwwAbnOpHaiktlwS2C56oJ1iLg0RNekgvnX0E9
nk+ISXoMC3Kf6EjVzwk0sM7Ii7f9H8ngLSkHL7PHR2F/vHVpv4AwAfLnONat
Xn5RsNN0/U9T+PulFtL2otioTwGrf6CHmrUYKAf2KrY/ISpKBfO5G4frrF2E
fgMfd64Q4KKfX7SQUB3a9d9wflrITZwXaf44+vuVRcgJ7LQb9J9gtp3FQ2si
ej6ySCKuJt+6ggHeM9QmW/pWGsw48JPh/U4YzGrJZTv48YMFei5P8JdywJMZ
L/qqw7B6C86zK5IyaOD8MvsV5V2dMI+jywch6nIC5LVj3eoJ6ZgbPJKP/yui
BL77fu7MJHyflkVagsY1GyKJ4FVsTt8zbyp46FLbobKEL9DvakBBReNMP7ik
K0N1dRG23m0uo2L3afR+MwvZ4bDGc172F3h9a4p1byB6fixkjXFugdotJrjh
c+zX0wpSYMvwALXAWH7wTr37ZWef48D5n84Y1I2zwQ77mvcX1DLA/nr3rr4m
YvXF1rYZ5zh+hXnMoj+7Wv3BQz6CGGni4fxYyIGfN4053yjgoPprBg5URfDK
eKrRM/g+z0JuVbtMJ4nTwGr8zz/am/2EfrzyGS1yZwe4X88cl/OZDOutAuY/
KbWi77/qSIAyxzYN/5qL2mizenuQAnp+6sjX2sLSzHEGmMrY7/N0Nwm8/f2N
Y3lnRcEB9GimVBcOnEG+ZsTZwQE3uqo+T3LA6u1fqPV0nlQC8yempj2TnYb5
wrOTRDLjiZDX17rgv08sA5frrWc9GKSB7eguDyqWU8GBuhqIVif2eArKm2aL
xrB8drC1m/l+APq59SjsX1CtAvfmzFz3uYjNWxcXz1IuQa9/2sjEPZM2hVPo
9VIbeV7T/Dj6FgHyhlRE6FsfE/yrjH3/6WEF8OPoAJ5smDi4+/mAcXwx+v1D
G6ExtXadhvdfbaSlY4AnmUIH6+vWTgttpYBDGUYtJnA/XBtpajy/ZCNJAntG
HGsSPCQKDuYftdlqitVL9aqmJ3+gYfVtLifgY7D9B8ru2/HB61cbuW+YZOQ4
gs1bLi9g3CHaDudhMYvYOMP9T21Eu9KAHsaHft/agCTvSqjcX/rWALWPxyC+
4pk05LyDxlcDU9jg04jDPw9cZcHfi+sP1jEFwdr7tpkkfuqHejfMLysFhbEg
l2vQuK/XQwff0HR0FzfF3JSbsPdw4RTs1yX9Mb3YJwX5dDUdf/2DGNgzWWfQ
biUVXJ3Tqb47Rwn8zy9zgZ0sBbDh/Raz4XEsf2gSXJGWMgf9qkPuqpjf7OWi
njomrHX2LTbf/wB/FUqM
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ/WX7ve+v9v+1ZwADQ4dj5Y2TbqkzOUD4Vg4L5Gt6
z+z5D5U3cuD4F731W/MfKF/HIWtW2GRpw29QvoxDmnj2peM6n6F8AYc5Ezp5
j7B8hfIlHLbPjr7TwskANd/Ywa5SXXibzAeoPIeD4ovExWXPfkP5Wg5RNoGC
SrmPoPwP9jJTeNS+9XBA9ds5dFz+vE15Hky9hsPV9ZP6j078DuUrOPQoL7dS
EITZZ+Jwy6tnwbW7T6DyDA6THzsoqLxnhMpbOOzR8RblVoL539KBVyaycaYp
zHwVB5nLBXKPbVmh8rYOyg9u7Ju/jAXKt3HosFD+d/YKLHz0HHzVfi5+WQDT
r+ZQlJnFb/0MZp+5w54pWwzveMP4pg7LGHJE/xTCwk/EIeX3nL1+VT+gfCWH
0Io/V2Wvw8w3cDje16+kuhmm38zB7IC9fBsjM5Rv7QAAlniAJg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Input",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfQmQXUXZ9ph7Zw/Zk5ksTCYBEshqiYIiKFYhiKKiBYTfABFRATcUcQkC
YUmURUVFBESKsgIiKCoQkgDihqBs0UILRQ1SCC4lKESDW5L+z9unu2933+fp
02cmfL/113dSczPT95ze3j79Pu/arz/+tJPe8d7jTzv5hOOHDzn1+PefdPIJ
Hxw++JRTi6LGCzo6XnBSR0fHc8Md8rsqfjUf+jpZPswf5vfv6P+aav369aq7
u1udfvrp6m9/+9tXym+/q/9rqGnTpqlf/epX+q/oq4GBAfXrX//a/2qtqfP7
3/++WrJkiTrooIPUd7/73aYunqjOPPNM9ZKXvESdcMIJ6rLLLtO9eeKJJ9Ti
xYvVe97zHnXhhReqyZMnq2984xvqxhtvVGPGjFGf+cxn9D1S3bnnnlu0K3V1
6tYPP/xw9alPfUodddRR6oEHHugYo7+bo+s56aST1Jo1a9SyZcvUX//6V3XP
PfeoI488Ul188cXqne98p/r73/+uvvOd7+j2Tj31VLVt2zb9/wEHHKA2bNjQ
9h2qU+6ZNGmS+sAHPqD+8Y9/6P+nTJkiQ+44p5yRa8xkHXfcceoTn/iE+Us+
+9Xdd9+txo8fr6uS65vf/KZ6+umn1Wc/+1l18MEHu7J99tnHDK2p+vr69HTs
u+++Mp3lzA7o2XjwwQf1I3fddZfafffd1Y4dO9T999+vZsyYof7zn//o7973
vvepD37wg+rzn/+8+tOf/qTLZDa+8hVNQbVw4UL1ox/9SP++xx57yO+m6XHu
O1anXAsWLHDPy4wvXbr03HAiVqxYEU1EQ9Pk1a9+tVfWqUcjNJcVJiN6+ctf
7iahv79fnXzyyXqStm/fXk5Cj78g1XPPPSfLXz355JN6Cb3mNa8pn95FXX31
1eplL3uZvuUPf/iDrCo9rcUKapuD3XbbTf3sZz9zLdvvgip7XJXx4/J/PAUT
9RRI1y+99FLduNBTLqH7nnvuqadHltkhhxyifvrTn+rvnn32WfXVr35Vvfvd
7/amoqGnYu+991abN28uJq01D+adVVu3btXzUHwfdrrLdVqmbMKECfrtKDo8
xhBgJ0yDrAC2Enr0NHz84x/Xd/z4xz9Ws2bNUlu2bFE/+clP1KJFi8bIAu7o
1i9h0bZ65JFH1PLly/Xt3/72t+VFDRaEkE8WRfGylgtivt68vvWtb+lHbr31
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
3eKvs0ScQeN9wf8Fa+ukzg==\
\>"]],

Cell["\<\
Below that is a table when the parameters had standard deviations of and \
1,0.1,0.01  It looks much more like what we observe in the real-life urine \
spectra.\
\>", "Text",
 CellChangeTimes->{{3.510578592020303*^9, 3.510578616466826*^9}, {
  3.5105807328313007`*^9, 3.510580751089528*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ3bNEXUc9Rc6BAQIcnmsdKDLzUYTyLRySDu55dGmj
PJQv4bChjrnMM04JyrdxCMu2el4vAFNv4qB8Ot+PbaEClK/l0DrfbkLxdxjf
2MH4tk+92SIYX8fhy5FfMey6MP1mDsY/xFK71sDcw+Egk77uisEemHpDB43s
2KiNm2DqrRyKt9XxX1wLkzdw2FRw3epgJMy9Ig4Trf6s2rFUFsr/YH+o4LdN
gC1Mv7lDzZ3PjLoRML6lw5bK6f7ay2Hm6Tmcfq13c/4rmHkyDu98GCzVv8Hc
J+Cgu9bkwZvHMPVGDnLn7C/nBcL4Kg78M6de3MYE4ys4vJmds+KyGMw+UwdX
p86t7Jtg4WnnkF8SvD64F6Zew2GJwVuhX50weVuHT6fVfSeyweSVHPJ2aRZ/
OQszz9ph7dGABq56mLyaAwAKyXSF
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Input",
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQmQXUW5HufOlpnsCZlMEmaSEBIeCUnMhiIqVrGIoqIFJEWAiKgQNxRx
CQJhCSiLoiIiokVZAYK4QkISwLghKBCihRauQSqCSxkUosEN0u98fbr7dp/z
/X363hue1nvvpObm3j69/336+7f+z2tOPfuMt7zz1LNXnnbq1KPOOvXdZ6w8
7b1TjzzzrCyp9oK2thec0dbW9szUNnxX2Vfzoa+V+DA/zPdv6v861MaNG1V3
d7c655xz1F/+8peb87vf0v/V1IQJE9QvfvEL/atwq7+/X/3yl7/0b601dX7n
O99Rc+fOVYcffrj61re+1aGTx6jzzjtPLV68WJ122mnq2muv1b15/PHH1UEH
HaTe8Y53qMsvv1yNGzdOffWrX1Vf+cpXVHt7u/r4xz+u86C6iy66KGsXdXXq
1o899lj10Y9+VJ1wwglq69atbe363jRdzxlnnKEuueQStXTpUvXnP/9Z3Xff
fer4449XV111lXrrW9+q/vrXv6pvfvObur2zzjpLPfvss/r/l770pWrTpk2l
e6xO5Bk7dqx6z3veo/72t7/p/8ePH48ht12Yz8iNZrJOOeUU9eEPf9j8wmef
uvfee9WoUaN0Vbi+9rWvqSeffFJ94hOfUEceeaRLW7JkiRlah+rt7dXTcfDB
B2M685nt17Px0EMP6SL33HOPmjFjhtqzZ4968MEH1aRJk9S//vUvfe9d73qX
eu9736s+9alPqT/84Q86DbNx882agmr27Nnq+9//vv6+//7747tpeqS7J9WJ
68ADD3TlMePz5s27KJyIFStWFCaipmlyxBFHeGmdejSgOVYYRvSSl7zETUJf
X59auXKlnqTnnnsun4Qef0GqZ555BstfPfHEE3oJvfKVr8xLj1A33HCDevGL
X6yz/O53v8Oq0tOaraDSHOy3337qxz/+sWvZ3guq7HFVFovj/+IUjNFTgK5f
c801unHQExfofsABB+jpwTI76qij1I9+9CN97+mnn1a33HKLevvb3+5NRU1P
xcKFC9X27duzSavPg3lm1e7du/U8ZPfDTne5TmPKRo8erZ+OrMPthgB7YRqw
AqSV0KOn4dJLL9U5fvCDH6gpU6aoXbt2qR/+8Idqzpw57VjAbd36IczaVj//
+c/V8uXLdfZvfOMbeFCDBQHyYVFkD2u+IGbpzevrX/+6LnLHHXfoUWLVYgVP
njy5tIJvvfVWdfrpp+u0DRs2qL///e96AqdNm1acCje59p5Up30qPv/5z+vv
X/ziF3XXyZowj4W+QMMtW7bo73g83ve+96kzzzxT79K4/vGPf+jtaM2aNer1
r3+9+tznPtdmKYfZ+OMf/6i+9KUv2R24zRIdW9vAwID67Gc/q975zneqmTNn
Yl3lt6fqXQ478WWXXaaWLVumt6YMFNTb3vY2dfXVV6tXv/rV6p///KemEYi/
Y8cOPcPYBdE9VO/fw8Xq/O53v6tn7jOf+Yw6++yz9V6T7frBpHT5m6YeUK1W
Uw8//PAIb+0jWektMB/7jTfeaNPUm9/8Zm/V1vx7bR/NW1prWvr2t7+tUQiP
JR5DTGmGLCNNSWwPxZawEAAAuH71q19hO3UtefdsSxvNrfXr1+vZyqpr+1p+
axP+08vdJOg6CWQ/39815GSP05VXXqmx7NRTTwVVXmgmCUQEXmFt4g+zko16
gSkF1AZNge4Zur7QzBPI/v73v1998IMf1GCabdht80yNWMVvfOMb1apVq/QS
O/fcczENc02NWFnZZqf/strbefdyIrUdYep85JFHdDcAf0BT7B/Zgzrf3H70
0Uf1wrfX73//exRZaMiDBQ4S4Zct8pOf/AQYrGvE9fKXv1zddtttdhDZo6de
9apX6VvIMjQ0hB0vv92rn9gPfehDrkGhfyPCUWARYkO216xZs7BIX2i6eeed
d+pnDFvkAlPkAx/4gIYHPIdTp05Vr3nNa/Cc2VF88pOf1DNmLzyKH/nIR+wo
Vq9e7fY+XIcccgg2Bn27HQOwO4jQs0L/0RnsT/YCCbPnb4HpP5hObNbZXtJm
F8r999/vdklDhja79M4//3z9fGIvwv4B/mPz5s2289kOp29ja/rTn/6kN/5s
+yl3XuhWWuftGgEbi70Fv/IOdugVDDgwHbf9Br6dfPLJ+n+sEeyFGc3mm1Jo
CFsNGvjCF74wv8n+grSEJJbydlZwAbrA7WdPoe06WKSPfexjYddr6stf/rI6
+uij9S+7xMAqAKYBjCgGZjdjfMvzLPTI9NvyC3gEgJ3YfbMO6ZxAD4DTz372
s5eYyn7605/qJwZZyBN900036TnGBXYJKJ/VbJfaddddp9eGv5zAZuARwXLC
deKJJ6qdO3fa5QR+BfwLLgy1q6tLPfXUU9ITLfSvMNiLL75YHXbYYXrpAu1x
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\
\>"]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Set up the global variables that contain the synthetic data for the \
experiments\
\>", "Subsection",
 CellChangeTimes->{{3.510580863102728*^9, 3.510580875965304*^9}}],

Cell["s is the sample parameters for each sample", "Text",
 CellChangeTimes->{{3.510575304295822*^9, 3.5105753273426943`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", ".3", ",", ".1"}], "}"}], " ", 
      RowBox[{"RandomReal", "[", 
       RowBox[{
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], ",", 
     RowBox[{"{", "30", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105741712957687`*^9, 3.510574193858625*^9}, {
   3.510574415610277*^9, 3.5105744310826273`*^9}, {3.510575892416996*^9, 
   3.510575911244976*^9}, {3.51057678776304*^9, 3.510576821508143*^9}, 
   3.510577048656671*^9, {3.510577968450513*^9, 3.5105779740377607`*^9}, 
   3.510578271595954*^9, {3.510578455799766*^9, 3.510578463970141*^9}, {
   3.510578541029117*^9, 3.5105785525336323`*^9}, {3.510930498656452*^9, 
   3.510930508177615*^9}}],

Cell["a is the peak multipliers for each sample", "Text",
 CellChangeTimes->{{3.5105753157714567`*^9, 3.510575324561627*^9}, {
  3.510577975995652*^9, 3.510577976639035*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "3"}], "]"}], ",", 
     RowBox[{"{", "20", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510574197161387*^9, 3.510574250187945*^9}, {
  3.510574635404356*^9, 3.510574635867559*^9}}],

Cell["k is the peak mean for each sample", "Text",
 CellChangeTimes->{{3.510575331396139*^9, 3.5105753376932297`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"11", ",", "0"}], "}"}], ",", "20"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510574251809103*^9, 3.510574297380064*^9}, {
  3.510574632464082*^9, 3.510574632983674*^9}}],

Cell["pos is peak positions in each sample", "Text",
 CellChangeTimes->{{3.510574818459641*^9, 3.510574823891282*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pos", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"sj", ",", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ai", ",", "ki"}], "}"}], ",", 
           RowBox[{"ki", "+", 
            RowBox[{"Dot", "[", 
             RowBox[{"ai", ",", " ", "sj"}], "]"}]}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"a", ",", "k"}], "}"}]}], "]"}]}], "]"}], ",", "s"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105743093401117`*^9, 3.51057437599017*^9}, {
  3.510574445160186*^9, 3.510574480543908*^9}, {3.510575029968855*^9, 
  3.510575034103862*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Raw data plot", "Subsection",
 CellChangeTimes->{{3.510580900665372*^9, 3.510580920889209*^9}}],

Cell["First, plot the raw data by sample number", "Text",
 CellChangeTimes->{{3.510579382918489*^9, 3.510579391612954*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRawSampleNumber", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sample", ",", "sampleNumber"}], "}"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sampleNumber", ",", "#"}], "}"}], "&"}], ",", 
           "sample"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"pos", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "pos", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
     "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.51057943508823*^9, 3.51057959166945*^9}, {
  3.510579676083007*^9, 3.510579683845134*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105796208945827`*^9, 3.510579622942609*^9}, {
  3.510579689431654*^9, 3.5105797598585873`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJxN2Xk8lH3UP/AZywzZxjpjyYxBZN9liStpuWUrlZKIxtJNRWVpQ5REhAqV
tWhRSNudJbKVUPaisoXInjX77/m9nq7zffqjXu/X55zzPS6ua0Yj43p8lxsb
gUDY9z9//f9///fPhOnVTAUVBZY0hltEv3cpLIYApnvq9F6PWzLFTaMl5HUr
MCF3PF3mkHK7qxS3j/CPF0VjEpAf1csf1XEWBf+wbU7LfUQDqx5PfhF5kQp+
x4x15PLjBo/pqDqXxw3B/L1XRIxa9zEg/+B+UGbQlgP8IiLeRKuDDXwhUMU8
8l9+MPFwzxtLEdTPotO4l3Qkwf3PZvocqgXA5vc7T+V4C4Mtkq7H2t8Z/Hs9
CNiA0tsTepYyGG6iqHGyC3ke8l9nLPTcfNkg/30mvxw7IguOYG2XFo8fgXpn
t5SPpW4MyD3b41gGyRTwanvwjoRHVLAj6yR1apIGbnuNWR19vwrzfpc8DdmC
9YJdTb0KCu3R/Ck5pSFx2xXIiZePHuTMIUPOijNU9lkggRe9x7opfqh/o0ty
3qAhOp++Q0a0fyuq/9ax5cLRW2j/l87z7GyN/X/P48Jcy4p/NOXTMdwz0rLr
DzEJYH7VIsurZStQn27+vHL7ISbkBNPNOgka7pBP5dH2V5+Wgvz7vaaqXi0R
MEu2YKUZfv64MNWEg3HrVZE5m9e6k0pI4DFismGJRXspbpM3XtZCcgzI1Q0V
1Ipd2MDDoo6NZ4fZwXEzMh7f7/GC6zh4/pFRRv3+3ysW1iVKgM/xkCIKklH9
xHr+0KTLQuC0gbbUNDp+/SjY0yB2/3+c8OtBwRzD/AJazSYhb1IMVg6Z44Dc
eFfSBqaNHNjwvQX3A54/UF9HWr15XhrNC2yU1uzewwNe0WO5m+eJgXVW6oK0
D4mD2TfxqyoSZtD5okMXeF8jZ17Q4Q3NZkB9umd3+TvFBcj/HNrgO9a4BnJ3
qkeWvT0b+ICLhlL+U9S/9OJL8ScdtA/v0dRrZWVEcAPZj27twQ92WBkROVOH
378i2F4vw4FgCn7/imC0ip0UkYo5yDcbz1tO27JBnuB/0/TqWVlwWKTwWV75
fqgfx8Ry3cwYkKuuEDeQ/6OAK3pUcw+yqODXo8y1IVE0sPtyh2loOAH89Wc1
3/q3HTCf26nWtfcOmt+1afPEhCqqX2Piqrj1JRm83WLp+kYpZO8YtYmiE6j/
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
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.5105796963925867`*^9, {3.510579742141613*^9, 3.5105797606560993`*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXXeQlcWyP+6yC4IBVsQrQUBlF0mLjwLroZRUXVAxgAkVDIiAgiLBZ0CC
eIkmFEMJKsFVVLSQoGUsRZRH8D4sfcqDQgrLgKkUlSQY530955tvvzOnfzM9
Z1fv/cOvasOZM19PT09Pd093z8xZg68fPuzawdePGDK41anXDR4zfMSQ/2p1
yujroqLiAzKZA4ZnMpnvWmXofxX9G//Szwj6FX+I/39O/6mjXnzxRVW3bl01
fvx4tXv37mxx5nn9p1g1adJEffjhh/qT9dURRxyhtm7dmv5qnv7TRm3evFmd
eeaZasaMGWr69OlqzJgx6ueff1bbt29XHTt2VCNHjlR33HGHOuyww9TSpUvV
ypUrVVlZmRo7dqz65ptv1KWXXqoqKirUhg0b1EsvvaQaNGigJk6cqNGnZs8+
+2w1a9YsdcEFF+g69Dz77LOqqKhIzZ49W3+eNGmS6tq1qxoyZIiaM2dOhDDh
dlROW/v27dN/GzdurN544w393uTJk3Xb9PeGG25QLVu2VKtXrxbj+Msvv6ge
PXro7++66y514YUXqm3bthXp5g+00dJNUtONGjVSo0aNUl988UVmQpqaDdTD
Dz+sWzDP4MGD1UMPPaTuvfdedcopp+iyZcuWqW7dumWyzZSodu3aqXXr1unv
nnzySdWvX7/4uzJ11FFH6REy1HznnXf0/9TLY489Vv3+++/6c/369XVP16xZ
ow499FD1/fffJ23t2LGjmGlq7dq1qrKyMkGD2MeAv+mmm9S5554bhCIRk5j4
q6++0vWefvpp1atXL/0/QEv/H8OemEvId999V/3222+6BnXy1FNPVf/4xz80
hp06ddLcTEQ48cQTEyzbt2+fYPnUU0+lsDxEs0aakPFsUD/++KPG+vPPP9ef
iTWIkPfcc4/q3bt3XQY0/U0Tjjr25Zdf6u8ee+wxdd555wlQapCgZAhHHE4P
zeGSkhLd7RiNCJLSEzkFz7DegphbiTI02QidWAyonTt3qsWLF6trrrkGUorG
s2/fvpDlDKy9e/dqNKMJkkMpYu22bduqmTNnagFCI/Xee+8Vp5oiVuNYLk25
xx9/HFIOoWgoR4NIz5YtW/RnKgdo6XoxThbLEbtddtll6uCDD9YE++STTxKo
F198sf7/tddeI4kRY3K4Zt6qqir9HUmzzp07aziE0YEHHpiwFU2u5cuX6/9f
eOEF1bBhQ41lmpDE8h06dIhgRyMfjTVJ3A8++EC3lJ6I8+fP1+/RBKvGpUQd
csghgA/LRHgaar7//vu6Hskt0gD0xLhlUaubRk2DpgGiGfXrr79mxqep2lyt
WrVKNW3alISlrk66hVr+6aef1PDhw9W0adPUOeeco+bN02/oSX3MMceou+++
W8vvVq1a6e9IP5100knqiiuu0PVIyh555JFa4l577bWqvLycWD3b4boJUemh
SUTqYfTo0aQ6E/Xy1ltvqdatW6u5c+eq66+/XrVp00arOHpWrFihiouLNUH3
7Nmj1VdE0CAUDUEffPBBdeWVV2oUI/2RRbG+jVYC+uijj1Z33nmnIXIOPUvV
+vXrVc+ePZV5SG9FHf2b/ro43e/MoTFj/PDDDzQyujqRPpLCEbtn66eET+b2
3JZI/tDMoRGirp122mlECtOSUTn0qWVcRoNrQXsl/ur555/XyvS7777LtIrL
SDR16dJF7d+/31TXSDIm0J/5f4X+U0eTlsaXlHjEF5UxOTdu3KilCdGEvlq4
cGGmY/wKzfFI0Oqf6JUiHlK7mAOs2hoHBvpxunoDbYqRyCSpTD80Al9//XXC
BqkWMr53uE60jTv49ttvqz59+mizb9CgQTRMGdCT7FTKlMcss2nTJj2jiHVI
vxMLR3qjU/z1okWL1JIlSzTCkf2qmfWzzz7rGJODJsGECRMS1gbQ2oHqALrp
1UcffaQFhXkiOyXqVdRG9B3TSkyNg7j3NGaguYr4tWHDhml7nR4iONntEe+j
ThXlEpK0V//+/ZNGyXqNJOl/6K+LVbNmzbQqok8d6HcRUaLI/XK7pGIpA6Zt
XPbKK69oDUGC3gPwOOYVDnS2U/USY5UekkN16tTRyiYGXxS/GkPXnw7IJQvZ
paQ0zEMTJxoHw18kqI2tQYDr1atHw9Uxj0IATru8igBiu/hrGuARI0ZouUdP
DNf0JAarP2WJVT/vFWcLJerVV1/VCoHUZQw9w4EPIVSJZkSawVOmTNGLnqiV
TKdCqcSD6xB/R4uooUOHpsnDdqBdzCTp+gzcLBnranFJyon07ccff+wFb9Hn
vvvu4zi6U/wmaUVChD51zqMLeNmmSy6Y9nH/aNypX/SQCUVygSZDDJSbBBWe
V+NmzOCS3UbmCj0x1IxgbpFBTYKJIKYEU2X8JlnE8ZPJluVLYACiXQwiVT1B
KA02W+8g9cQTT+glOT1kspOxTLIDgG8bkwe9Rk/UTPsYOhmO999/vy5+7rnn
EhMXQI8Fs7EJyJVBLhJiy2gV2zkuJguXXqCf7t27d4x7R0s+WoREvY6tzjwI
7RxVLajHxQNMRju9feutt6rzzz+flk6JfragS16xWjH6kmw74nJaQNG6MjLg
UCuxFTAr7gpRcNeuXfrT8UxZdkaKTLFjspwRPb3p1wGp0mIqyLZcXO0908Ih
v6yesF5N3v0z2virb/+6vmV9MFnms776iw3/6tuf1be/2PBf/u6/O37/hmx4
vLCscw3e5cocaM6PkSUT8Z9vf6Y2/M/2zGO+6nXU2+s/VSf3eEj/RK9V+d9Y
t/aTwDcIpbVrPlHr131K/6ffqH7h7xjOQUzXBjJlm3wg8ro7gC/+Pz8giwoD
+OLOYYNigFsEG8AXd+aR59ocFTysAPi1YaM0jSmr6+6NhYe3wTwUp/LF3flm
0/A1eDDAjZie9GbKKvjXK5mqNwczQiO+a7344nIeSCVfm5tQzTCGrfl+9uKL
wfSoy7TZnCk7nke5qR89q++9+OJyps3OfNW6PCrN+GLA1A7E73dzrwWoGV8M
cI+bNS9Zzu86Dmws+GAuNeOL+2abzbYOveqcmm3NjMtovpF+TNUBuQ0Dvy9u
GGjH3EZa8FVLmarHM2WcXKmbizdwXBZnUc3kOhMkL8nmCieyhkFs83ikOQ+1
1M3IFhUb8bUb8sWluSQAjk2OBD3hyIjUK5BPpq8WCTgJB5QimN+N+NoN+WKL
LMAziMmS1y9A/mZMv8pcRMyDUM7XbuNi0EScWV48Tpz15Jvl5qoZEEraqVr4
jlr02LvpAZHxKZDDHKHq8RDaMFU5bRWLDE6j9OR7Usr3BBSbflMv/IzYjwcC
mLwNXxsUl+KednXQFXST5QQonQhhU/z2etYm5GR8cx4qmARtXKg5+g3JDfoI
BHOYBALzGnCPYB6U8VWBCEgTRdOkiZz8gBs5YVDGlAHWB5LA1VWBNOIQMN1i
FwMsnzRh2BhY4aYbltAAw96IB8z1BJgF2AzKgwoIDwQXwBjIM060OhZBhqBV
CzckUCJKgTVCQzeGYIYR9VOwQTfBxCvlgXAjjstEyzZTlVUQ/nGNpClQ/o61
Eudx4PCIgDtlYUBP4Iyw2gOKBJOD01qiwSh1d5idklJLFTByKQM7aZJHWqZ+
OfIAKdkQNhbiK/L0WyZiak4Oj0iTeYEAdp4RkDVpgABhBESXzLgKYxEngjUn
dgD3hriHsU7/I6nklynchDMWsyX/PHgBi3nNf7NiEXB0GDOG2LU1XxQUa8lP
Uv+pJ95D61onhBBPr8ea+eMIJZUfwJgBuj1MznKyvR4PGKywPdgB1gYEeawq
R+hxGt8HxGk9AicI6JJs/oXVBkttUBv4+MHQG0wWLtjAUZGtnbegy6MG8EA7
GQrWtkw6sAAHsEFIAWjMhqkmF8zboL+O/gc8laaGxTztmTlyNj+MYO08kGkz
GQFeVTkGi0UvDxXjGBJ4uS4OmtmFEjAPlX58s84Zkov4UB6wgOEBhrTXZca0
N9TtM9+khjgHNOdSLufxAPJ8CN9vpwPeibUlNT2eIRnLOgUS75Jn2ceJuCWo
gJcuLPIGIrQOX0168KdNWalmTl9FggK7VHh1GaBZrarjXP3ONYbKU92AXjiP
xSSYWAE2PmCrqXxXTW1W0XMGs1OdyyRTYWa+zNx0+mz9jsUTmbKKuIzY8bYZ
q9Sdt7/lHI8F81ltzxqRIcYRkKKFGcAyuxg4rwtYcbJMKnLq4kSJOmrG9JVJ
1WhowpwUzqV6oHdFFNH0eDtlC5uASGOYiwLIDTChPMJn6pTXuYGRMWOYl1uw
wJSFZLrztcPWPM7QiMip6aoqm+OmfySwptz6upoe6dDo/zC3VwDGteMTOttF
DlH80eXRCXEBiiAEuNJOLACHJGUBbPvlUhbC/CmcXOXUX2HCzPK9e5wSYAUv
q+3MP8u11pztJSQH+4Q5khtVbQkHEIHA60uRPAdyqzpalmN3eNwg1sK/obsj
Ai4v4yFI3bFGpVuGKJgk8YgZZZjet6zzxOvQKDVgmgGeGo/LAoRhZZqiM1Oc
cg5ZA+G0ggP6IrLOXFWBmckG0POKDataC8o4oGlWbakd1BkuZ8kTuQKcDehs
DW2A/Ep671+TcbPZuR4NzVwBMc0aRUwKi0KBwL9VLCWcIZLlHHSEOlvEX02q
3mbO7ldxmiBh4c+AcDuvd9g8tNyqIBkuYGmDtXCATecJA4NgaNgatNq5t0pQ
G2ACYv8gJwFMHyC92NqJmQA28QdYZsBy8VATaEjQNau2Z1wB7R9dwMpOIFJl
3XFmj4gkqKeLwMIJmfBAnAHhx6eRsRASJgJHHWBbU54sIzbEIjU9H/SS5bSF
vIMLJNmmeefxqqS2FR0HthMweT0hYsvqCDap/IZtSqQAAQRixiyQmBv4wx2w
YRRg4kl9Yp5A+Lq11cXr1yESlPK1C8iRsgA7fQEim42zz5x+mDyLxKOlZM5r
z5SRqVH3locCMsFkAfMwX15hSj3MQJV55mopyVM27gXwOkCXy7wJU96y9HXn
vprgXMMwY1s2DQpJpAk1SYFkCTPQgCVWK7wuTnYThfQ8xo/M5ceFRQvPHpRl
3YMcmLCIh9NCq4kDvrAsM5AlJEsPcI1u1aOSzNX02OTsBpfl7Lsc34CPrOQO
Tzp5iLxyej2Z3CNBXzz7HKfxAa9w3VyjWJjJ4AFpeyF6Q5pAC7Z4SjEGKSbA
AHQEzT1LbDZXhfdAW/MwbAkCBB/XHlincQlhngWw2FnlSDcQbUXzZDJZswsn
7Ih8t4AVK9wTUbAIwIvmgp3mTkOhdjak1SyjPSTrVTTNPWECwVrb5SsPW3OE
LXlr5BR3b793b5RjvVQAPgizBESFAFFYr5hod4YT4z9gGMGcCrNZwRqxVrKj
am1dbljE8ol54D/Ke7lgl2qB60GYIYwutTKewEwC7kMQ7Q1b9ljFjs2ZnGzH
zVaPZ46j1LM4njGVNThBNJnNDc9b+QDTzXnmRZCfxSJIswQN7xbd7ilq52yO
AEjJvLKcRzsivUevsGnsMA7oszIM0dmRE2VIAnd9IaTIba8zZvGAtEcnn0Dv
HWtLhrkXeexC8i1gZDDE4uB9eLIFj4d2IU5of+K8wK8HVm9gRgBSy1ZS3lCE
JCvBk70KgIQtnwXyz7MmBlOAtYf8gtVtjgI/A1iHh53b4Jmkgt77WR4AsRbt
5TzeZtkDFi0yT7kzNBzumxAtvIEKLmzzPFjUWxLXkJB1T0hNZA+j8NFQ154g
i9GBN/Ru1ziLpqbH6yO37Q3ilnIexaByiptYLC/zXoG0wnGc4WJws4ZhKAMZ
aLg2TIPmVECZsMOJ3FD0W+I5bYjr/rVmkALiYyjfEhAIbXgEzEyRBY88Hmo+
Y9J1zqeFzaigCdqGb7acB+I5kxCIbIFb0LG3rDWP4agU8JSNUcm3GaCUQWze
5SiRb+3izOYyHmUcUBH5Q02EzBKYwIMbpucFbnjZpkSAZMBZOAaCpYw95oxM
jcbdNHxCFxXR4ZF0ieyePXsCck2BFQpwr3mA3pVfb8l6zyESrLTImCt/3nzz
zaTrcZqSuZNIfzLjeMYZZ+hbA7OfMNnAgZMWEoZsIDko7HwH2RaLAQxBG+XS
gq6ypTtHBw0aFH3K/qbP8aVE8RWO2cNp6aokuiuSrps866yz6PpKF1nYIF/Q
Jh2WsEF5wFbxOB61hmmalOh7kunSIfqh6wnp/tsi+hS1bS4UppqHxPXpukJz
J2rMM1m+Sm3ngKcWyCROYSm3VrFr0z0vKg1F6Bzm9PPAAw8kHGTuwq7mljrq
5ptv1tf1xtRwbZJgza1cI4hb9Bv1IRNZzrNQcwH35intFDgJnegeWXPpK90d
PGXKlEzj+E264ZYubHXQxDgHLdMI5HUbY0cmfoBP2ZWJwx59kEfEXrkkoCPK
6d5aunC4RYsW1O3M4XEj5kLfZIKA/oNQNqtwRIc8cdoGcFCY/4ZbzRiVZVE6
plMsMfVVi6+//jrd3JmEsukePboY2Ucfy+QCHlMjRdnEe1Hgyxk/ETkACnGt
+KmJJ3pM5JL4W7o1mmQX3XS8Zs2apgxNu/KouLbDWOwJfK6esInMevLsnQS1
gUedBZJL7XKmLPavZhmyVMuwDh066LsCI82od/lOnjz5SIa25hxrsPUD+MqB
LxRwtyWNPGe/CIIdHh8cnyphiEO3eNMtCWQ60PP999+rbt26uYhjcRMIy3gY
wZI1ad+YXzU4nSRhnrTEniY7kQgxbdq0xFKgFYjp/RH0WxMkfdh53hY66PUD
fmBBCKGFC3+RJHf5ftiwZ8Ie48aN04f308XX9CxbtkzNmTOHYw/uIg3j9pHR
BGgyELgDtcMOEwfr8ZgKRirTrjPaNETPjh07OKkMbvPg3I9mvso0jycWKYsV
e/xJrplRqi9S3rJli+7nhg0btH7avn075gGg5ETulEq+A679QjIHXNgC3CLB
VVddpS655BK1c+dOvQClBVf0lyOBy/PELm/ySAB8gp5jUyzYF+V2IJJqGj26
M3fr1q36/5EjR+IO5LUDrlcCzOy8SyiXOP1yMaWLc+kadFq7r169WkucO+64
w4Wp1YjzKjN+MQmWHoLk0ma52D/yyCOqR48e+ioc+olUqWrcuLELe4GRM5op
8wQKBAsHoIJiT/iBMSDyxhmUq3WgU9yFuvkB/8uURoxudpmir6fOjkQW+yVL
luRiLxNYhfn2rdoD+drVCJO5UVZWRkfNRKqmQYMGURkdO1NUlDVA/uZA2AI6
ii8OkKajctAin0D0E1lC9LtEy/0uXbroUyQi2U/rkwzH1P8rnzndc2fOM888
o66++mq1bds2baWfcMIJSMtwIvatIB7nltflufiQ3+xX2jkRPXSN0cSJE1Vl
ZWWwxMxtZFgQbwPrpE0a01xPsLFcb7nlFiffe0Sn1eBcHmtgPsToFXD5pAVo
LkNAYLam29RNcmfXgm0yc/lOu4kfcCDtJvfgyqnHhZGBjcnNcM9pt0APpf0J
jughlzeQrOv8KVEeK1eQPn9zXNVauoefzivN4gJOR+D7BMsST9q0BcTlD2dX
5eLYaNhmImnKpSdFnk2W5YkMXCxgSQjygS0gwPwGaTo5J2GVqNtvv13deOON
eoF83XXXkYpwhtzEqYKhG1XDdlkInOkBgxa87ycUXdan5Oc71y46QUTF4VM0
x4ls3LhR2/ZkK9Fz8sknqxUrVhRwLpLMf1rYPgqQFxp2pEJYkmHYFqGw/R9s
k6JMkYBEczA5wQRy5hCEbF1LXyhKJ5OY56KLLlK33XabZqyc6CygP6tI5NvX
wk4ICNthAgZbsDsZ6wwnggGsUZNtVUC9gChL2MYazzGfLDUSXqJFAEUvd+/e
rf36TZs2VS+//LLrfE2gOWtl8xwXmRKwq4erQA456AhIoA84VQQwICBF2MEz
rG6Fx0OBExyAhBKcuGmfk1Sqk0no1Cz6e/rpp5MjToFTs1wbVWSbkMEBkh7C
C05pC9uM4zkmAsgl2eIuYBMMHv+AaebZzw74TZacCI6RcMcU4tCJ9sv16dMn
ZjPETZBQwLAJ2TAGqQ2C5WE7Wxx4e7JlAXae4HyYuQimEqBTrWzeAcwDZJhA
nTvVQiLAdu3apbP/SAXSM3DgQPXtt9/W3E4P25PsISXIKwgxg0M31bC1gzJk
wPQJQ5o9QTDgXISARWbB1mC89DMrfwpOUTxw8uTJ2lL3rfxlw1XAGseq6jyw
KHQfkcx7Bc4j8eT8hq0Fw3bEhZ8LAggADvyxaoflL4HArsc1GDbdQ9ZeIV5R
E2CydERvV7NBO+4AZXnx7kLcegNExkA2syPEm7/vKV2JC9FywAqKxbq268gi
sJV8cUGh1tD9NgHJIFbVSr6YE/1n8z3xoiw9a8OTq2HVdsZd84Bc60fS8i2Y
gJllyIFrAQXwrWlt4Fs63sC3rDYBfIsQIOAHdgk64I9wMbBo40AaeNDsBoMJ
8owcfajFXAouJOZss1byHiwMBzKoODbHFpbRwKYh8QMul6lr+TZBgm24lJzP
YAmuYwJs5AUutVz6+gFZGFXZE4WT+XfzrfVmqg7AGAQkVIznq/ZlqgqO3ZCl
Q3Abw1zXCwmmKmAxh7kTJlmBuRO2BRLMd3d+NYd7TwcFWDvQH94DtjVYLoD0
RLCEsnwKlA97+eWX6z1jlLFEmUHAKcrpEpDqwEW/gQTzpL+DFY3ARAfpkJW5
/Z83b552BtND8c+WLVuqtWvX4v5Lc7SBN951fEeIV84f5AVOgSG5/aeFPzkA
zNO9e3e1ePFiqVMcoO5c8Ijc6lzGDmAVz4FyAo/PP/lDXoB17sE4nwdZ68EM
AG3gpLiWuRiGdu59+umn+TFS0Gsr4ujcKAOnE4g7sNn7PDEsp4FBAxw3GIad
NSbVpgpnChnWoy3TtCGUEperqqpcm2BZDzIfRGUTsuQJI2CaAC89Sw5R3hZw
grsOXU+PVOogQZBh4oOQ+I14cWGdQ+i4L8BME8rzb968udq/f7/ey9u4cWO1
b98+l68S+HQttgERskKiwnmTMTSfSHCYB5DqYRkF4P5uT+gEpFtxIToA2Dqs
koMA+pdc0pN75iIYJcvGifS5at9eu9Q0/5SWlqoffvihgLjJjKkr03wLxs1z
1mpY7FeW5eOJ/YuzFUDYUc7CMlEWFo1LYPMXToHALwjpgZwUwdQzaEyflsME
OcxWotPrafvlpEmTtEE9e/bsTPAJDHmM7pa77BGwaTnnjwgDbgCJFqA2NCPY
6K/MYBZI3GlTVqqZ01el72ZAVEWnH1fDTt1QJQOS5KQ8mjMMngDRAu7wWGds
B9xCESbDHdk37Lmp7MBZJ0435AngkQggDwQEVGSJKkBmeiJ7gA8tznKtBNgu
8nobCH92AJyRoTBBK0h0Bpl/nnQUMKMAQ7H2KEwPsa76BKsS7FSB3BQmYkBf
gIXC0sk5kgLV40l9kln/Hn4PSOcB5mSYVgBAwNyVZdACcSE4kU4PTVceh7Cs
A5AtCfoHDpcFkgV4Jz3zCExdkFvJzhnxHTBg3wcA7jlJBXg0AS9YAht4EMMO
dw7f19bE3SUQjZH5zzzMAk6MkvnFPDvn0mPs2DkHDtgHmRW9+NpgLNzHxwWk
xXBH1bp8WzICjuOxdqB3i5tVrOJZcTF7xKgTvixFZxbfrAP+CIZmIDEGMPQs
HpU8wYx3+fGbYq0+vOli+Vo8kZTNAGB3pgdf5ibK3wcXHHKhRuA4DM9+8KRm
skkXXGaRNCmVy7jhHBKCIL1sRwzI43Cm84gif1yUFbi8gYQXZFQBi5GViDBl
CSgtWfwVHLkGhtfRpft5bFwnm8r2JXlS6632HBi+xqBissEKD3mkTDYBV6UT
AzR2tzGVQCzWtZQKyfOsaToAF1L3nAwK0JNt6gu7rTE8RYAzlJ184d8VzGk/
EIwF2TfOSy4DswmCDeGgLYqy/a9gyMHKA2QSAVpV+rtZIwb0pI3L5t5UOGtC
jGPPkXMyfRKw9WEqT6j4KNHD42+XL1+eHEO1dOnSoriYjrsdO3as3roQFXN+
dnDCKBBKHHdyyRWcxWEkFGuwxOSur8aPH68mTJhg8FObNm3SB8RT8smOHTv0
AYV79+7lglODglgt7AxzsFjkck8bpTpURH3JjkapPkuvf//+SdcqKiroPJ/q
VIbLglgOyNmCVof5yFJ+wPDhwxNkibMWLVrE0Z07fgekaAMxWdCSsRZwziOH
4hGBLdIOfjSksr0W+svGKfjMHNi8ebOeAxQ788wBsDEi3Yo575qOB6RjcqOW
4j1NddSsWbPUmDFjtMBYtmwZJzD0b7O1M18OJMqckKUdedkuATicOgd2ssOn
lAIFzWu5hyoHmmzLX96JVDkwrMr/6Wn673/O95kD/h8y4kk1\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data plotted against correct peak correspondence", "Subsection",
 CellChangeTimes->{{3.5105810124508333`*^9, 3.5105810424152803`*^9}, {
  3.510582313055606*^9, 3.510582314110784*^9}}],

Cell["\<\
Look at scatter plot to see if I see any structure when all are plotted \
against one peak\
\>", "Text",
 CellChangeTimes->{{3.510574728119684*^9, 3.510574761135067*^9}}],

Cell["\<\
It looks like we have (roughly) lines.  So, a first order predictor based on \
peak position could be linear.  Choose a one peak in the reference spectrum.  \
Then choose another \
\>", "Text",
 CellChangeTimes->{{3.510581749316676*^9, 3.510581773650427*^9}, {
  3.5105818068307133`*^9, 3.510581822436445*^9}, {3.5105828464090977`*^9, 
  3.51058284950949*^9}, {3.5105828901220417`*^9, 3.510582897067627*^9}, {
  3.510583146474968*^9, 3.510583155061881*^9}, {3.510583330952614*^9, 
  3.510583377416397*^9}, {3.510583418054069*^9, 3.5105834235287247`*^9}, {
  3.510583499801958*^9, 3.510583555009122*^9}, {3.510583724793846*^9, 
  3.510583734325248*^9}, {3.5105838757107763`*^9, 3.510583880839699*^9}, {
  3.5105839620925617`*^9, 3.510583964023361*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstFirst", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"sample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"f", "=", 
             RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"f", ",", "#"}], "}"}], "&"}], ",", 
             RowBox[{"Rest", "[", "sample", "]"}]}], "]"}]}], "]"}]}], "]"}], 
       ",", "pos"}], "]"}], ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstFirst", ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<First peak in sample\>\"", ",", "\"\<Other peaks\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.510575093124865*^9, 3.510575098383708*^9}, {
  3.510575190778582*^9, 3.510575249487133*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
zL8FfKGPjdSezQ9eEfooIWw+RP8fOS1kJg==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"First peak in sample\"", TraditionalForm], 
    FormBox["\"Other peaks\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.5105750991579733`*^9, {3.5105752310828123`*^9, 3.5105752501785107`*^9}, {
   3.5105759245406847`*^9, 3.510575931503681*^9}, {3.510576809725424*^9, 
   3.510576829663622*^9}, 3.510577077798338*^9, 3.51057798426693*^9, 
   3.5105782790263166`*^9, 3.510578469733075*^9, 3.510578560540532*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Data plotted against random peak correspondence", "Subsection",
 CellChangeTimes->{{3.5105811764724503`*^9, 3.5105811886216593`*^9}, {
  3.510582317652169*^9, 3.510582318614987*^9}}],

Cell["\<\
Compare that when each is paired with a random element from the same sample\
\>", "Text",
 CellChangeTimes->{{3.5105786431404877`*^9, 3.510578664738483*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRandom", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"rawSample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"sample", "=", 
             RowBox[{"RandomSample", "[", "rawSample", "]"}]}], "}"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"f", "=", 
               RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"f", ",", "#"}], "}"}], "&"}], ",", 
               RowBox[{"Rest", "[", "sample", "]"}]}], "]"}]}], "]"}]}], 
          "]"}]}], "]"}], ",", "pos"}], "]"}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}, {3.510578677955529*^9, 3.51057869460358*^9}, {
  3.510578805484024*^9, 3.510578899046955*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRandom", ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Random peak in sample\>\"", ",", "\"\<Other peaks\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.510575093124865*^9, 3.510575098383708*^9}, {
  3.510575190778582*^9, 3.510575249487133*^9}, {3.5105789289311*^9, 
  3.510578934014724*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Random peak in sample\"", TraditionalForm], 
    FormBox["\"Other peaks\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.510578938267201*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQm0VlX1/+RNDMnkQ0SGhylDOJKiiJqtcqzltIpUcEINcWLSsjRS4b0H
DiUmRSbweAxpg1qJZuuvgBo8QRBatWJV2loiapmYmWQZef53n3v2ffvu77fP
dz/+9Z+/teC9d757z9nT2WcP5+xzxqTrp3z22knXX3nZpKGnzpw0fcqVl103
9JRpM5Ommr1Kpb2mlEqlN4eW6HeX/Br+858r6b/wR/j9Uf+j1j322GOuoaHB
3Xjjje7Pf/7zWNx8XfrSY/5Hjdt3333dr3/9a//XsaBNPd6/f3/3m9/8Jve4
bAuPz/M/DnZPPfWUO+yww9xJJ53kfvazn7l//OMfbuzYsW7ixIlu+/bt7tBD
D3XXXHONu/32290+++zjHnroIbd69WrXt29fN2PGDPfuu+/6n42NjW7NmjUe
65tuuskdccQRbubMme7Tn/60O/roo922bdv8d9TPlClTXEtLizv33HPdH//4
x1x/f/jDH9yFF17oRowY4TZt2uR+/OMfux49ergvfelLCSIEc51H5+yzz3Zf
+cpX3Gc+8xl6rtTFf9fHzZo1y40ZM8ZddtllbuHChX7MHTt2QDwefPBB16VL
Fzd//nz/DNFh9uzZoa/uHi56lvB44oknLJzTxw9y69evd+PHj3d33XWXmzx5
snvnnXfMoQui7MEH6Pp2CT59FOpTUkbf5n/0cBdddJFrbW31T/7iF79w9fX1
HpG7777bnXLKKb794YcfJmYFAgxwo0aNch0dHf47wu7www/3v69bt8717NnT
vfnmm/7vadOmuSuuuML//txzz7n999/f/f3vf/d/T5061V13nZe6XH/f/va3
3VlnnRXGqnFDhgxhIcmYSZhv3rzZP//MM8+4gw46yL3//vt+/F69ennhYbh3
7twZwaXWde/e3XPjmGOOIUrV+uau7uCDD85AAujWBFFYsGCB+/3vf++/It4S
9GC0LkFCbUT7SkRNBOlDAJNoGMhekWfvxRdf7ObOneuf+P73v+/xog/1TnJN
059GOO644wIkedzpJ7P3q1/9KukDRobklrlLsnbaaadlXbS1tbljj/V6Jtfd
/fffT0gzc5uamhRzu0ql5P7yl7+QBnWvvPKKnz4nn3xybRjdRqDWz5Irr7zS
cyFRXIinAEfmKQ362muv0ZT3xKZ5BUZjMgD0AiA9JX4mXvQhgImnAcerJQ/r
cjy8+uqr3Re+8IUM1T/96U/ugQce8O0ZUCmqJKpCZP3vX//6192pp57KsN9x
xx1Vs5Dk9swzz6w0P8My5Hbt2uVRffHFF/3MGDlypEeGFH0Cidu6dat/TiGS
zX8izZFHHknvJwBjRipMawJtiNq9e/f2yjd5PEqyOoSjOTcRcpKPBqJgbibS
4m699Vavfl5++WXfy69+9Su/ztKH1pcTTjghQDLYa5DFixf7777zne/Qd/53
gojU69/+9jf/N/UpVe/AgQNN1dve3p5JAK3PtNaThHbr1o0kNKyvXb118YMf
/MA/++ijj3raUp9btmxxhxxySBdSUaUGv5b9/Oc/j6CRzlCaVzRLd+/enY7Q
zdPzgAMOyGlehW2Jp+l3v/vdDMNVq1a5v/71r2jIdMR+RRD131lISvYGhEsp
xjUZxjTSZMnjvrm5+/zzz7tBgwb5IYlPZO80Nze7c845xy1atMg/8/TTT3sK
fPOb33TXX3+9GzZsGBkGLKQrVqzwNCMMEgiIAJmyIX1M9sRtt93mzjvvPL8w
kK468MADveomm2Lo0KF+KFrxjz/+eHfppZem9Kz35sWAAQPct771LXfttde6
4cOH0zRho4dU0+c+9zm/ppNBSh+ABAPKpPre977nbcjEHgqAdvPkIwTIjjTw
DVweSHavu+qqq9w999zjPvnJT7r33nvPpF0BZP1zBqYBvoYMdvootEs566ne
W0/M3tdff90rg0Tt9PFf10j9Whoe2kTvQaHVeLZy2zDw3DXpqPMCgGvXrvXW
I6kVskDICvziF7/opZGHFqtzNjSbDnJoIhhZnXJo+VwYui189cYbb/hub7nl
lqzbRx55xButySulQ0UbGZ2JKVi6Nu1iA/3wU2Zx2uCpBtyif/XvH/U/at2d
d97p5WTSpEkkc8cGntIcIsOKFD39I2okNt6x4S0y00liyZxOTPljAzVp1n3+
85+nxdk7BoluKR0TeiSBveSSSzyPSJjJgk/IkNKqdGJ46pe//KXvmAw9slpJ
qyQKcWz4+re//a2XVv787ne/o1fGBYLT5CCi01/8Ctnz5GSx6XjiiSe6H/7w
hwwWzY1PfOIT/it6hKyVZAlVYNFaRisof8gdSQSQfcif/OQnfjKT7DEFb7jh
Br+60qShSXjGGWfQRGewvva1r3ma84eU1bx58xism2++OVPs9Bk3bhxNTwUW
jUFKgD/JSk7TiMlBvjMpykRfBHLUuQ0bNmSrSSBXBvKXv/xlP6VI35DipLX0
8ccfZ5jIhaWvSf2Qd0OrRKK+isF0XICJHLHLL79csKjWiwStegEeBodUFvl+
9JNYRLM5oTC/RQOR5qMBkkXtsDwYRF/AMSY/40AfWrUoxJBIK/dNCyFp0BxE
Nd55OP300/1f40JPZGDRgkZLL71Gjm/iOyqqkOFEck2rLZDrlStXelTpQ8Yg
LbgJqjzuvffe6ykvmfX22297uSJm0WfChAmkmJhZZAayn0OgkUv71ltvBbB4
9pPbPH36dC+Jie/E85gWZ2pKFJwPUixfvrzEQkV2ANkNBMu48DyZGSStJLX0
Xue8r/MY0xwgxtO8T+ZJKfDKA1eFzvqgS3+WSqfQf3uJ1lpq+EAKYme4Kflr
b9CGnvuvevd/yxjmu3tpVnWhhp7/3cD8PzTG/7Pqf8wYxVmlHhoM2saBtuP+
A88dag+/Km1zZHNt3PCy2/TcjtKdlR6vdRue3e5OPOFe/y957Y7Kb3Ssf6nK
Nwik9etecs92bKff5Ru12Qsft/vx/+8D8Dus0DtlSFZJxYkY8UgvfUEvbRiW
CZhGFTsv62hJ1ezpi99YgiFKAa3LcHpu444Mt0MqD6J62x0oJJBI/GD6v8b3
yq9/SMtKyUdVJWX930FjSlwq9qcg5RiRous7gJf9fFu9b1u6ZFP2+LKlz1Pb
wZUHUTR/B4+djtOgn87BUgAjRft3MAz9BIPX/fQlt6z9ec/kBCZIyuH2wO/h
gfcFWC5bujnS+cDwhnKZa8CY/n9EsA3PviyBKI1Mu94/8NBwf7tYQzQK3lPX
xPOO9dv97wk/RuV7N7xY1HtvIGgXgra5oA1Rdnn780zZlcu3ZMOMyANo+I5d
0odLebu/yEsQqzJhOx4gMRg/2gPgljTfgJ+WUsxcT9wh17Z4U0yKGTPDh41h
poT8AIDZfhiFQQpWIUal7hi9G/Cg+4meWCgNeTfcYoThGAB2Ikr9MWhDMJLd
MMT34KeDNuN5r5xlNO8RvfsEckgIwwDZVFHw1IFuakBbT9WWzDIoVw3g3QWY
cBENfgCmUu+AHwl2862rc/g14VeM1W3vIBWyub1tM1OlG36LmadoWAARhToj
IvsPOjswKk/BetyNsaqmyHXLNa9YtiUzGgr0vLYySooIjFJM9hQ563BPxvK9
t6ALNbcv3RwksM5jozovGb1LzLxl1QvQ+4MBGbYJ2pZs9lqK9AojoyhWI17R
diKaUIheK5dvpb/hxFoM+hhhc6kLeNxYUZDAHYiJx4jQn3lzs1YCSyMgHFIW
dvW9EkkZiGc7Xvazj4Q0+W4cAOjjoA0BzsloASF9FzHaDA3RHfAnTKJgB5e9
8kEAT21oa2/bFKVYQmREsZ5hJKIOjzSvZS16dCwG6mO4mS1G1ZzBPrdlTYCz
3qPNH4HbAZVpquZId0Egkqpl2RTOo2J4aMhS7IXR4ywrjcLNLXPWsIQxfFJK
Et27t5B6nsMJ5ZlfS4XIZuoLgZNvG4qx+RhulnZ2Qp+c7CWLbm2Ahawd/iRY
ICoOqcwfNb0/EAPJ0PhlpE9FtnuZLyLdVqHD0WRIXkUI9QjELXee67zXRhpa
rqR1MQDLmpswlpyklRzdHz/aCOCrC3gI4yKjvpzUCXuH2vwyogk9AGz1oK0P
5mtP0GsmS7U5dZA5VQ05Ril4ONgIwhF1vLjBNdoATM7epPk0zLjRYNDaQPYQ
mQhPpK/Tgi7EhFcRMippkt2/cmuwYqsxTQ1ZM5wlNtQVgrmYg5SYfVQ3JOlt
i7O5o1x9w/Jhqiqlx1RVsIwO01gOSZTjn+xgBhlD625G3NpkeuZEvb4yfZVI
GJIyLBBSDWtaUYbxtj9uPi1rzvVurLTGosdDtomAmSKBt0N5mYAOmqGWupZJ
EHSQy95mfImBwvBifIWxQl+NxYgZi8i+ou8lizb5/pPfIyz/FJadcZjMSF4F
UxQ0g8LsluowMrs/BTpPXmNQDPlQY44FYw7GyOw5VdSYzTGZzINixDEioHwk
9CJVZLokxWO0x4DRW+LCBH2TMmwjsI4CY/L6p7QQa2HVuRn5PQrD2IxhNNRB
ZJUfhfvnNUQpkH64/6Nx8+0YyAg0KMBkRAu6gkdZb+3e7Vzz7NXkUJD89MNw
DAQ9GLprBRBGOaNzyrRYxKFBCEJi6eRMlFrcUx8AMHLz+4sR2QI2vOMnsZRW
v1Za0SWJjlJwfTCWxqxEWoUH1TS0fDxErA+DNt71SHI0r3Wtu+O2p0vn84xY
bC6pex60CiZjRimlfw1b2pjt0fBjJ6Irlm9J/ooac9CJwY6menRYaG5tWZ01
J5QcE+lBGjzPdsSWBiQKR2BiGyZcH/y0YV1EQ544r0quIfsADfj1Ci4hNDpr
3ZzZT0qCjhYzQDq71nJi5H0qErsMzA8AHnwIk28wbuZwuAQFhMMNh0Lpkib8
NFONJvLsW550LcmikPzOVNOBKMuCr6Rki1kJBQJUPC8REOcFeskBhTPEaRyl
Omb55nxkhFYwCjPJzLNyqRRlwpLNeS1j+zTKaxlTipGutCdhIobH8J0+G3qV
y3Q/QV5CuLV5TTaSWDNggNSICQ3JU8PYtW3nMfMhQiHzHMyptD71Ad2IcJdh
xJwGemJCqvWfM7tSmOhf65w1IcyRj8kony7o9BJbWHIDuV/i6ogqPcEgy9vz
0W4VUo9Fu5EhaFi1stdk6UU8noQBGBCalV0sGdfavFoIVH3y99rsURAOxjON
XUi5xx1lZO2US+X9ORzgUyFBZFizslPUMLQFWzFwvcxHupd1BmMD3RgMFOme
iCFmpijvvzHIlzZJSQPUFZ/taFIG2z9sQ8zt+o8pQZju6UxNLF2CzdZu4Tmp
1tgrUiqAvQp6dG7LWjkanCicylAU5cQiSkQx09WcZ2uoPE2XBspVBDSbokqk
RgMgh2NcRwMgyZBOHsu0eeuc1bL3CuEjBUtYy1nPG4cqYgyHS319bgaUhdbL
lHEFB1I+Hd6wHEhkPCWElOaNz5C0bYbLoeFDsr4RMpRxPghHLmDP+CiZG41h
HoaxHwDkpF8AR8dWpKTS7xKYQRkwyK1j1hsHWGKsV9OjO8aOdaLyKpHy6xr4
LR8NS6blYaNki3CKFM4V3BzRdyYdK5ZtlTAaSmk0hi6aJTajF3J/3WA8Xo55
+LiPvZYaWtpczZTbalgePFnl06wJDacfedtahSfqrsQ5Mpmd1VOubB9LMsPZ
91fBJ0ZAye9oDGQ0oYwDMzWBkWJ3UDYLq3emlEx1FwPTV+vXbfc2JS2ZRqbZ
CBF0cswO0xTz6HlfgLHvS2+2p11uzBuZjN9oJvxicRljA4AidCMAkdf8RN+k
Jn99bjEQgxXYlKHERvu881rXZpaP2PlRMoIA0RWx6NMp1brmKESbgoKF5QEw
TMKUZd1z5KKNGrxlSy0yFTLOxfYETAgkQ1Y9STjJZqcBWWjhLrBZw4hVILdd
8g0lxrJNLdgqMFILPUBPIgyknm4CMwHt4uKgADEqmIgluculupRKeliiLpsW
Ei02+eTrlJoIPspIABz7Zc35UN8ATAleAynElXg27ra5T1EzS1GxnVloFwlv
Z5ALbg2GIZLRMTYjGGknjsuqBZ3zj8owZhyr2+Qkm1tmr/FLROLOSzHmZQl5
1xFl9xE8sEzbBBKUunjhqJEx2xJn0VRsgbFUFIxqcjxYuYFeSE1EHOBqk6Fw
FiMTp0wy9gOPdgNt7NCqWIAd+8q3sVshJ0INIJWxdbIRAx/sGDYEdidz9ckn
n/QhMfpHvydtA8zpE98WL5Ok0OwsdECCp7YSXhQ04PCj7EGEHw1YJuDmAbhZ
egHUN+3kSiwjNh7R1jZjGxBOdfDUpipgdN4/8eiStiOPPDJpI+9u9OjR9F2g
FtZphi9n5H+VpdoAnrYPfHBAhq1yWvH5+IoRhUOngYxgp8H7Cbh5AG5OOdat
zIaUhpEG2di2hN0AZhlVZaFKUcmUydpoSlHb5ZdfHmWZ6cRBl0BJFHIJwhvW
URcOrZQbTFVtxZbO2NL8WqV5CM1GI3xS1ozO9AUM/SidacX4nsyheY5RfTSG
sxa07WtyDB/YYk9O+ahGYEnGRGdOfUR+lUVwUXCDMv/8SUZnogs/u4RM+MzO
zT86KYwkFemRgdycmxJHPsKoOB95UJ68dPBRk1e2efJ6I9XYcmEc0kCaS0wD
dJCI6YkOa5DO4k97GxRieVhD+r5wf0LlXfCnY7zYO1HiE7H2+Csq9fbWW2+F
v9L/6W9qp7/6A0FG3Rp6pwdurhAAluyZ17LWT0C0wTgVDdMVQRGV7HyCSE8v
60xPo10OxTa+n4YxRdF/wyCMbt6DxiozgnJqVNJo6tSpSds3vvGNpI3qJVJb
8h1cP6K7IIw98mUCxipNZ1U7148eOReHJoxwEMq0bC0e3c7E5CdbhX0pxfad
jg4z1jrTQ7BnUZQq8m2VbGgqAEVFxahCIv07//zzqQ3Z0IYHPxCPU+RMofTQ
jJNRQROAM1j5ZcGIWRmR+1kAuI25Pfxm/EL1FLeOeRXhKpn018AIaVXnA3Hn
cknXJxxjyUnpyxmGUn8WC6G8yPAMAC0SI8vMUGeqEG+TihuiL7zwgk/79u3b
t+SrLCb/U3HLUHgVrgbGpkC2x1QG0vCbDettGehkxfItH8pDTbWsKX05bdq0
5K/kNwoqdnRwmVkINUc2lGU1EzCNw21y5RkQmVNDQB8NeSmkYp55icu32eZj
HoyDAxZqhZsZmmHisdB2GWn8bwx53URgkWQNwoMFyUrVm6/zncpzCgLVo8wh
Kw4RlwEzSgAjhIOxNPYVGl453P+dmtLzxPaCZeJkvtRug/CgeWyPOuoo2kGW
VpQtpaVJqbi9JYzG3vQTAb8uwrQYhsEy9pEw0jrRbu0yjiezUuH2FaqpCCX9
o/qHVCT39ddfTzqkEqs1vihtZfmuy2AlZcfuEc9WxdNWgZ6wStINZl1z5Lx+
xmM6iVFgnlI9UIaP5ymXrrfwiFnHShnGYuWKk4yqcWqPeqBUz4ypqyAHm/Dr
ucWx3qt6KtpJlcSpKjz9TMyQmPmoMGLzUanVkXh4YzFgXA1TutIOyyb8ujIE
yNyiDRBp5Xv6v8bfWJAXx7LKubENEgpppoVSziMxePdhWvABQmNPsf8I8al+
Xy+HnPnmBvqL4/uyPG8McYWh4UOMxM3oDMgT4VE1sY24YHzjIfuaVMCbYgik
h9atW8chX6PsbxU7f8/wzXYRAOsM11DQZuwONqKL8Uwez2qqi0sOBdX2P/nk
k/0+55tvvjk73wIKDPvx/JZWpKKGhzdtm73Qia8m3GzEaI1ooMETRQIq0k4l
urjqOenwo48+mvWPqmeMttIY6T0+OavN8PjJ2XppxEnSciYDJoHLAu5GJBQl
kQ6Q9Kjxwk70aG5uzgWhGUw2xFRZ5RhhFGx8ckLNYEZQWh5zm6G/aZxxY1qo
SDYKRsa3/rNsUO1zKmNFdenpQ6bqwoULuQqjLOUcw1/Bg/YcDwnCIuGhkCxZ
8khxs3hKO+a66ati2xOU4PCe72JnrJXCJJeKLzrZuXMn7+qR9aSLltSKnngs
MyJQxIslt3yzSG2ussqzuIrH3oH0nHyjNDmJZeK0QzPfOAc9CeNRRAnVeIOY
++dJx7eMOYeNSXauFYUqxE9p0iWCIo0Rq3qU3ik7Z/ZqSFcjvK1rZ3Qe9anL
1sDynbJ51i7EyAyX1Kv3Nhhdh0I10ukf/d67d29kmzLRlD3GC572ejrLhZlx
auU/VQgsVzJQjcDyPYA2o/IiRFdzkFGeGK9Jzx0dHUmbOKgTFSEFLFNDKpe5
uVh7mfI2di7Z5UpwYFCtFPFafow5XdXBt/7x5Hn11VfzmJuVyIzgI9v4ir39
MUR8goWpIs9dIfaqFeEGABdKPK/M4luMOyliSgfTXyhmaWTvj8cyPShMKGPz
Zjf81g14DFkwk4PjYQsapE2kgli01qdRkaLo5rpouc9avSDXVAe4fWIJ53on
YhhbcTNv7JOziwGUdXlG5GVGRhNZ6dLNUNy2j4mImRJSzVyEOVtSBcvlZhYl
zPvtt5+/iKR///5JG/2f3gBKZ0/oicYIYIp9xvbnFLCuUMDF8dIcXN38vUqU
HKA7yUjRkD9MVxTR79SW+Ai8ybKIU2j4wDuArHA9aO1O0cfYwJZbG/NLAMND
xU/58/bbbyPQ0Vas1zCzZT01SnS0J5K3YvnWfDIsAmMaW6I8JflZdH6B7r06
99xz/fqdC/6qkV/FTO4HmBwUbXnMIQOC1k7aC0VUoH8E1KZNm6rYX8PgwFmK
8wGhoDfbEnToivIs5FslPpi9Rw5rj/fFdzrlpEZSEQ80klEOvgNIxmV5UhpR
BURKI6TZgcdGGfODQFtDHh7DxbdjlzhCq/jagUE3TnYdiJtV5LGS820Hlct6
3oahHo2hPhA3qyCw4Q/HgsCqw22Avh/GkDJIytKszwuy8kS9IMe2qKPSUYsw
Bc8rwLL0LjS6ppE+dAMkzaodO3YgmhipCg7vKlKdh5vV8HRV0wUXXOBTLHSh
K10Rm/yMDa+MbA6yyuThRYBKfDBVUTRWiwuHlRl0uu6QPpRO4Itkr7nmmhjo
ym5OQW/QScGC4dUyRkRDIpGgWb23BujiLIoW0+pFE+P222+3PdA9LinJJbVU
PtAMsKKjoxxpU5GDJjwiU0WJjZHlURG0++67z+faqZA//aPb+xobG2OuubEv
D272zm+ZTnAzoh9MNeXN5bZEyLMQxj5t9v5U9IAJpzQVH2Iqj1WVCXK8YClH
bWVmvFfACF3TaCco0MKWb6twbhDu68aFsOzdkebZup5hPnNTekvIy/5UTjAn
oZCjCGkvAHHSF/MKZhbyNiNXjmHn1djZJTbpyJBGGtHltP+PfvSjMCNSSOn2
QX6yZ/jGuN2yihoLhjtm7NDb443fxcOvkk4VDtSjQyjVVOoyswHwwBQ+ISdR
4BNyKxLZK5xU8v2+7yNS1iaPXoHbxqWh/iGfXisHXR8kta6IMC5XqHD2N9WN
m93llz7kbmt9KhftMw75SieES9a+X7GEmNx+zuEKcaIGVvsQhrWiPB8NU+uQ
PMdFoFEIgktFS00/PMc4uiSYtqSkG1PqvEFHl7VTVZrEqCN3KStrZNywWnVd
qPoc6HSqUcVUFR2MM+uWKpYBftUTn7OR6pYtQCOnirbbdp7fhmfrYayzrB4D
T0GpBurjq4Wywej+dLqUlO6uJ6+TbqBPeMbsMm6gLbpWdtb9KN/iiuaewrpC
pQTJGM001ZN9yCZ/j4Aw59EdZsw0WIjIDPGqxVROsmC6ZEQR18dUsxwMyTOV
rloP8W1/sRDdNH344YdzeEpe4lsXmXhGLaLygzCYmdUVUZAMoxpYCdiBmV01
ATPbgj5Jd9miIxiZODeV0mtc5YLTa5SssUoQKbWBzldODo+qud8YxtUahgJ+
vH9OrQRWGEClP+n+dz35SL1yG1tIxj3Je1iUCMBr5AgqlGBQY6D6Ycvy5f3l
8Ivvy/yRDGrl3WlDXVbNqM5Ggvts0D6j8mNxaIlWBImcR+EJTawjTU1hTor1
LliwgFKW7KCh26erWFEPj/EP+wf5E6PwzkDGVnmP6Ahsy+zVsR6KnT5pAgKU
+Sjl4d301Hv5oPGK6MwQMm2I4hT7pvPBtGN+/PjxVcSvpNfGRNeVpwYAodL3
J/KWD8W8Cua9siMuipM0Hkwjm5w+VDhpzpw5/vfE5IvRQnV4GAb2o6FZqf+L
xNOiPmkT7kQBSxuvVq1a5XerkoMxefJkYmQMWNXhTNyMPCQ+C6BYr3IolL+g
C+rpQ6Yz5VR27dqlEzmF0koyfSwCPGYMoED6+F+RPqo264uKDL6C+SCtq3A+
FGJe/dWzRa+Jei/wNWfRzF7DSaUC19EqjyOali2by5G7io0yCMZZ6d0AmuTp
Av0baWWY7y5jYIH+1RsGfZYAgZJXcOeOO6sul2CQ5U4DMb0iFy6jlHA7hndi
EHYUFowIjTFPl2LEeJBIXrWKvSTpl+Wn08WugNhEMyr/+I9xpjeiQNBl4Zdg
uCv2UjbuxRjUAh2pocuuW38E9zxBkFb6OxK7UfboSJteDdragNBtjGw9r3i3
Y6Ey8MeBNsPwQpeJzQ9Aa2m0VrkCQBdTWcbdPxX2Tqmn7xIYBYaXuP6StOyq
v0rcUIRNgITGxvg9uAP5btB7UIhcG5WyvZdccok/FkDBJopHGFGkKq6UMypV
GKdzUA+G6jRKCs4XtNHXsRycR3jRokU+XEYfipA2NTWRxYkQtss3FSrXs3L5
luH4aeSqJc0fAeNdEDCLrDyMGbmY5PjwZ9y4ce6BBx6IBQRlipwNutz542DQ
GdIr9+4sFR7+xux2ZXxIQXXD5FBMRTlyI9+R+ul5b2xZiOKoxY6pRbvRKdrN
daFpX9727dtz6QqVhmcrU6AajbIpfIwEeBOWEUOPnBOaVWLVSBrIE7/CfDQ9
7OBzcAUAOi92zjnn+ER3e3t7rOyuCvAUJdVgIUH6OnZUBcWIO+wT6C4D/zLP
KmUF7U3gHTvKnmaqtoiY8rzWtXKDoNQ2NGJrcxYvkcHN4Xnho90hVLCEfEva
G9fY2OjefffdWGBIxWpiEV+ZtUUHpJgCkrAcqzAKmqmZIPNl1OvGDTtC+Uq/
qR6pF47LwkQLLmIMN8uZ+bIlorL28vYt1v0BVKy2BhBKcYiCEHT0gj7Epfr6
eqoVVGmZILjiFwGYWUxFYiuTsjHLWucPfetyMwl19iD4LiQ9485nL31QAsbw
ynj8xs4yxpLnHHeHVzsUvX4V7lPi6uCUQqE9hrNmzfLmy/z580tITUVtFzMj
qZSaVQZ8o7ieQaLP65q80E6d2QoBgozWklVtuFQcs0rIe/b6jGmrpEBkorU0
V5aIbRglcbOAHDNb5EyJHzVENnHnrXMwh9hJn7VEPyazDJ4EyEu1GPRoJbc0
QyFZPOfW1WUZChgLr8maO4sN1Lnrpj9qZqOUyPTEzaig6VGA/FKjVzCiIqmK
GEtUhGoP0rq1ccxhAct6j5E0VsLVQWjKp/q1PNVo5LQUI3viZuNm6DFAT2RT
Nn5rkrG1pMAVgwqxClvTCLSfPvOSF2KqG0JCXIuRRJmG9fkSTIE9JVQm18ho
6+sInjUqIvcXzzEvT8e4jcXN0SpxZU9Xez+yCrWmx9sb9NPgCFyhQmgVXGCj
op6CaSxuNiIjxgaLilfflnWUukrmsTnDNZEhQ5YDgzhGuXijrmAF6VATMV4b
LUYFhY+sdyAtq3i9g3xtDJ0SNCIg0WuhTfYb0wJn2RDi6YXRuPyf6MEISC3D
zfEdEjYYRsCrDB9U+BuVF7kUvx7f7xgDT8mZEXBsws13VO7fCGgWS/xG+kfx
5jNxL8ZV4U24uSxeHo6oKETgERXDIP838OhhlVAzQsT5XrhIhwJuK26uPtNV
9CJQdB2agEMFECNwsNtZ6QQ+D6iUyOOARjJFLeN5CSAMQlH7kncpGrWcooWh
CmXqrWLX0lRuwq9GNGKFCy9U8324/2iJ9ZS6bblgBd71HC+/h6B/EcuWUXBS
rxfknYny1wiU4kvL2YCTg0HbVVg6xwRaScry/U0ysefVzlmYDSit0BP0y0Fu
PYPl+XXFgzG4OZIWQndnG+uqkZuKlZ6QvDIqbhgFlJDDk/wewQSd90LGroge
QgO8UGpA+xrSKaYMv0Zavb62EhpVFRBuwq8YC0KvAFiqTPPV0POR2LJXC4AN
d/DmScpXDmp9I1ExPAjZvLwd3jrRURlGw+9S5DN2yaXKwrxtExm763F14QAp
+xxU+IBP7z300EPMvTvvvNPNmDHDb9JMmmPlr+CsL8NrIMYLecUt5oSAwc8U
9+7uxhtvdDfddBPDR9dW+9JBlNbcuXOnP9m8a9cuFLP+J7k8RrW75vhEwYFD
j1UXQqhLYD2dPB4/fnyG34gRI2hndWeKLk2GVfRf+Gomxbdm3Bz3X8qhpCTZ
lClTMihJrlasWIGojhK8RsEAwxJvxs1xp+afAHPRcqZvWCPSTlSLl8V2orq0
z87+wQzYtm2bnwGUFqgwA3gUHe4Ro/ARHjrPTaUfkpGydYpKjkyfPt2ri4cf
fhipC///OMDyBolEjQeWDgLQX91APy+CLs7HXClgGxo1Aao3Mo3T/RET0Rtr
L+DnLrUH9P+f9J/zfWmvfwepCn/I\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Subtracting known peak", "Subsection",
 CellChangeTimes->{{3.510581197920885*^9, 3.510581200152623*^9}, {
  3.510581239564937*^9, 3.51058124073827*^9}}],

Cell["\<\
I'm going to investigate what happens when you subtract the first peak and \
then order by sample number - is the increase in order visible/detectable?\
\>", "Text",
 CellChangeTimes->{{3.510580142956915*^9, 3.510580191348404*^9}, {
  3.510581213173916*^9, 3.510581222574148*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"posAllMinusFirst", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"sample", ",", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"f", "=", 
           RowBox[{"First", "[", "sample", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "f"}], "&"}], ",", "sample"}], "]"}]}], "]"}]}],
       "]"}], ",", "pos"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5105747770068693`*^9, 3.51057480886528*^9}, {
  3.510574849920814*^9, 3.510574911457838*^9}, {3.51057506690563*^9, 
  3.510575082872293*^9}, {3.510580059062235*^9, 3.510580131941783*^9}, {
  3.5105803507495203`*^9, 3.5105803539024067`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"posAllMinusFirstAgainstRawSampleNumber", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"sample", ",", "sampleNumber"}], "}"}], ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sampleNumber", ",", "#"}], "}"}], "&"}], ",", 
           "sample"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"posAllMinusFirst", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "posAllMinusFirst", "]"}], "]"}]}], "}"}]}], 
      "]"}], ",", "1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.51057943508823*^9, 3.51057959166945*^9}, {
  3.510579676083007*^9, 3.510579683845134*^9}, {3.510580201104723*^9, 
  3.510580235622819*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"posAllMinusFirstAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak-firstPeak\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5105802421876698`*^9, 3.5105802709938793`*^9}, {
  3.510580333198353*^9, 3.5105803348507843`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1: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
J3jBOw7ac2d2UoDH2xVHdpaKArcd9UpruYNfv5oc+9PE4qz3xlfGrwZvZlWy
aDFLBcbCxW2fz+Kff5rYeGJVae5lOvKjniUG9vj/B5pYdaFRvPkacfAC/oI5
caF8wKe01OUnNInA35tvTh85IQ3MMNS9LNqC6rN36v9aXfQO6ivEHttdU0AD
v3NKOcZJnwJcPUR2U1qSBO5OOMGb79AO+YeyU3IiW3jBz5c1aa4+geKFrHbN
JwqKARMM1vqvmMf3p8WxPy2s+3GFW8FZGvikrXy00y+owA1usVyVG/H9aWEm
6Zb+Ghfo4Ft9hIv1bfH7mxbWG3W2pT9ECHydWmJMzmtuYAEn3ejyR1zAa529
+Td1SQLrMIajSSwGMCabJ16/5iXUt088Pr12DM2XsHedZb0aBfjbYJ/VUjEZ
mF3mGOwWUQX5NOMET18XAppveg1pVQGKJ66IPiv8UBj45oqWnB4/fH/aHPvT
xsgOel+EWyXBy4S0LYnvoQITJUjHT7bi+9PGunrcs2aK6OBDyzTYeeb48yFt
LOF2oqZkGB94AZH7G8R3L4KvFrvtGiWyDLxt4eH1q1fJEK+buP+R3SMGMBYQ
S/jwoRD6q94qNn43SQGfUh64KrhXAviqgq1R6WNRlC9Ze0gs/QXk6xQFxSRY
f4f+XQVLfeGNKP4H+yiLuX4VsCHjyNerIfj1qcOxPx1skpnCor+lgLdkPGLa
p0gCi+jzubFs8fuvDibO6kowEmaAx/jW5azpxPeng332NrlWqkoEv+B6q1rT
6W/wrCrye/+PC8CHxNw/Z78Sg3hnV+cHXnWovuuTXVusNrZB//ToTSnN+hLg
ZUs6vlhsR1xtUc7tv04EuJtMMTONb4b8S8fZdiaSk9D/PTFqf/k5YYi/ibHI
67v5gNWzPbEuCfz+u5FjfxuxjsUDDt+0pcHP2o8vCn+jAv90/2pzxmuaibNQ
qdUdNRs6eCV/45IzEfj3v42Y74Zo2hYbEfB1Pr/ZPhnnAe5tS9ogsIUbOE7N
qsx8FvW7vqL8zxgDBjBh8IEf8VAD1Ge4VLbfzpECb+Q2dANzoQAPHuz8bSJZ
Ajg1nkSqo6H8iEGjI66iqD+rKnxHfAmKD2OxWrekovn1xMzGyaP49buJY3+b
MFKOT5DPKynwI7JNTR7mVOCYuIEQIVn8/rsJs8izTPCGz/dNmFLsis8BOfjn
3yYsRcM/87WSAPi3mz8mbTnPBaxTu68hjwuxeyLFZeAOBXjVjRezP7wYwKG8
Dc6r+0qhv1jerQHrx5LgLedOyCWVSwDnRr9TWJMmDkxYiG60NrwI892c6Yxq
l18EHjZPDZnSRvGbk7Pnhw8JAp+ZtwzecBq/fnU59qeL2dh9Y8lHU8F/PqW7
OZmGuLDwydJxQ3x/uhjVrDPCb5AOvi5s4evJ4MEKnNnSVlVhv0jgPaX99fRU
l8Ffoq6NXFpCLOdUZbRSRgLiddcel79ykwEcWkm0Nw2rhf75xk5ngr5QwN/4
VFDvdw/lZ7hFT2tZiAETZiUUXm17Dvkiv+fmqw7NQf945mcScUYU4p3H2g8Y
HF4FHKxzNVuAjO9Pj2N/ev/8v1K0ekO8DPjB7/0Or/+iAheWuJgEaeHPr/Sw
bOvz+Tv+pIPHLNN3Mxvw50N6GG/g9yD7OlHwoUuBRc7cvMDpjW7iF4J4gHPt
iUMMBg1Y7cCrWjMKA5hdGf9by2g11E8PHrvY/0sK/J7ecy/H5CjA9lNr29y7
EGMD4gtyn5ogf/rJ0JU194jgeTOl1KRdUPzRVF0HDWM0/7tgbO5FIX796nPs
Tx/bVyqzw5sgB/7Xjnmzm6Y04G7xoBMDIvjzA32s9PmKZfufqF7ouYfOd7aV
gt8/eTY8Q00KfMeoyT2FHiHgl0m+cSkWJOBWkeRYagYDeFfhXw9N/0L1T/B8
2iL6BH/epI8prPO7p9SL/IVf08F96ySBqxtyPQodVwO7ilqPx7uNQ/79vWM5
E3tEwI/clbOzFEHxJvyPGpqiKcDnO7TJMm/x+Qw49meAnYm4N30nlAZ+kWvo
BjuKCrxtIIPv6nX8/Blg0U9Sunkq6eBjZr9eCNTGn48YYJfK4jw+MITAz2c+
ENBhcwNPugQ4PijnApY//fzWm+uSwOOEgODc/f+al2gt2e4fAfX3FF5zrglA
8+0Q2HI1dEwC2IedsoYVQQYO/ZybX9X9FPJlCcUXetYTwJtMRhjsVkXxWTqi
PGXzaH4tE0HVYz/x/Rpy7M8Qe3NMxCu8mAE+IDtv5KUKDZid0qLmqoOfP0OM
9DD59n4eOqonUlyqL58O3tG7sXP4EBX8WP34iMW0ILCikqeddh0fsCq5OSHZ
HPUXHH3DPseH6k9ukhLu0R2qgHrKNY3FvrLga/N0B3spksAaywryhvkyKH+b
H7f9sTHIV9ryYH+PqzB4Zj/r9l1vFC/WM3fXBJ7nGGIhgzt7NhTi8xlx7M8I
87oW1rjJjgoeY24NEt2NmPWiOL/6En7+jLCipYFilSY6+FDbTAVDG/z1GWEv
S330zoWTwJN8vDWP1y+BZ4mdy0mbXQYuCZpieH4jQ/yPr/Iz67L+NS+/sVJW
71PoP5QlHt60UhL8Sd+23y7WSwC/+BHyo22tGMo/Tkgt/oTysd2zjNvic9Df
v+B9+E9+FL+kJNt1LGEVsMXBpjTSUfz8GXPsz/if+8tDQ4/nsuDfGex+cCBB
Cnjb71GEej78+58x1j1457qjNh3V+7wu8nBuXQXOZkY2Tvs6yeD9nfyXgpP5
gRNJ50Qnj6wAXrhvz+uhheYj3V7MGr+P6ts0ifRqH+iG+jfPeU6FW8iAZycx
jLtLKcBxX+pVY35H83f7GR+cM+mDfA3FT9msBDSPSdDYt7OeKL7r4NtS8T/F
gc87nHrgRcPfz80c+9uMGWEJYzV6NPAUs64TVZFU4JhTnxqSPPDztxlzfdZq
OFxGR/WU/lRxM8K//23GnFt7Ngz5CYI/VCFQWWDHDWzAVH81HcYFnLgrMpvb
RBJ4e2quPr/Hv+ZNXzl5dyQC6rfujTKM3Yvm26IoLv1gQgK4O9bs8UkmGeWv
7w8uryqG/HTSwOvLOsvAwTNy0nbfxSG+YZf+x6BUIeCyIf4DYrOr2f8BuNzs
Zw==
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak-firstPeak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.510580272558716*^9, 3.510580357481205*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQeQFUW3vrLLLoJhCT88ARWVZXUXXXgqFqs+fCVmxZwDIiigJHPkBxFB
BRRDmQUXEEOZM5YgBpJPS0stKBOlgCClYAIx0m9O3+nZmb7n6z59d5///6qc
qg137kz36dOnTz7dRw24ZMi5wwdcMnTggC6HXDRg1JChAy/ucvDIi6JbJVvk
clsMyeVy67rk6H8V/Rv/0tdQ+hV/iP9/Tv8pVS+++KIqLy9XV111lfrpp5+e
yX/7vP5Totq3b68++eQT/cn6qkOHDurTTz9Nf/WA/lOpli1bpo488kg1YcIE
df3116tRo0ap3377Ta1atUrtvvvuatiwYeqmm25Sbdu2VU8++aSaN2+eatOm
jbrwwgvVN998o84880xVVVWl3nnnHfXSSy+pVq1aqWuuuUaDT90ec8wxasqU
Keqkk07Sz9D1xBNPqGbNmqmpU6fqz6NHj1Z77723GjhwoLrrrrsigAm2HTJ9
bdq0Sf9t166deu211/R7Y8aM0X3T30svvVTtuOOO6s033xTD+Pvvv6v9999f
fz958mR18sknq88//7yZ7n5LGyzdJXXdunVrNWLECLV69ercVWlstlL33nuv
7sFcAwYMUPfcc4+69dZb1cEHH6zvPfXUU6pXr165fDfNVXV1tVq0aJH+bvbs
2eroo4+Ov2ujdthhBz1DBpvvvvuu/p9G2bVrV7V582b9uWXLlnqkCxYsUNtu
u6367rvvkr7WrVtXwnS1cOFCVVtbm4BB5GOav/zyy9Vxxx0XBCIhk4j466+/
1s89+uijqm/fvvp/AJb+P2776iwi33vvPfXnn3/qJ2iQhxxyiLr22ms1hHvs
sYemZkLCvvvum0BZU1OTQPnwww+noNxGk0YakfFqUD///LOG+quvvtKfiTQI
kbfccos66KCDypmm6W8acTSwNWvW6O9mzJihjj/+eAFIrRKQDOKIwumiNdy8
eXM97BiMqCWlF3KqPUN602NqJczQYiNwYjagfvjhB/XII4+oCy64AGKK5rNf
v36Q5ExbGzdu1GBGCySDKSLtXXfdVU2cOFEzEJqp999/vyTVFZEaR3JpzM2c
ORNiDoFoMEeTSNfHH3+sP9N9AJZ+LobJIjkit7POOkttvfXWGmFffvll0urp
p5+u/3/11VeJY8SQ/EMTb319vf6OuFmPHj10OwTRlltumZAVLa6nn35a///C
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
\
\>"]]
}, Open  ]],

Cell["For comparison, here is the raw data", "Text",
 CellChangeTimes->{{3.5105805850417013`*^9, 3.510580600328252*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"allAgainstRawSampleNumber", ",", 
   RowBox[{"Frame", "->", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Sample number\>\"", ",", "\"\<Peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105796208945827`*^9, 3.510579622942609*^9}, {
  3.510579689431654*^9, 3.5105797598585873`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJxN2Xk8lH3UP/AZywzZxjpjyYxBZN9liStpuWUrlZKIxtJNRWVpQ5REhAqV
tWhRSNudJbKVUPaisoXInjX77/m9nq7zffqjXu/X55zzPS6ua0Yj43p8lxsb
gUDY9z9//f9///fPhOnVTAUVBZY0hltEv3cpLIYApnvq9F6PWzLFTaMl5HUr
MCF3PF3mkHK7qxS3j/CPF0VjEpAf1csf1XEWBf+wbU7LfUQDqx5PfhF5kQp+
x4x15PLjBo/pqDqXxw3B/L1XRIxa9zEg/+B+UGbQlgP8IiLeRKuDDXwhUMU8
8l9+MPFwzxtLEdTPotO4l3Qkwf3PZvocqgXA5vc7T+V4C4Mtkq7H2t8Z/Hs9
CNiA0tsTepYyGG6iqHGyC3ke8l9nLPTcfNkg/30mvxw7IguOYG2XFo8fgXpn
t5SPpW4MyD3b41gGyRTwanvwjoRHVLAj6yR1apIGbnuNWR19vwrzfpc8DdmC
9YJdTb0KCu3R/Ck5pSFx2xXIiZePHuTMIUPOijNU9lkggRe9x7opfqh/o0ty
3qAhOp++Q0a0fyuq/9ax5cLRW2j/l87z7GyN/X/P48Jcy4p/NOXTMdwz0rLr
DzEJYH7VIsurZStQn27+vHL7ISbkBNPNOgka7pBP5dH2V5+Wgvz7vaaqXi0R
MEu2YKUZfv64MNWEg3HrVZE5m9e6k0pI4DFismGJRXspbpM3XtZCcgzI1Q0V
1Ipd2MDDoo6NZ4fZwXEzMh7f7/GC6zh4/pFRRv3+3ysW1iVKgM/xkCIKklH9
xHr+0KTLQuC0gbbUNDp+/SjY0yB2/3+c8OtBwRzD/AJazSYhb1IMVg6Z44Dc
eFfSBqaNHNjwvQX3A54/UF9HWr15XhrNC2yU1uzewwNe0WO5m+eJgXVW6oK0
D4mD2TfxqyoSZtD5okMXeF8jZ17Q4Q3NZkB9umd3+TvFBcj/HNrgO9a4BnJ3
qkeWvT0b+ICLhlL+U9S/9OJL8ScdtA/v0dRrZWVEcAPZj27twQ92WBkROVOH
378i2F4vw4FgCn7/imC0ip0UkYo5yDcbz1tO27JBnuB/0/TqWVlwWKTwWV75
fqgfx8Ry3cwYkKuuEDeQ/6OAK3pUcw+yqODXo8y1IVE0sPtyh2loOAH89Wc1
3/q3HTCf26nWtfcOmt+1afPEhCqqX2Piqrj1JRm83WLp+kYpZO8YtYmiE6j/
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
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Sample number\"", TraditionalForm], 
    FormBox["\"Peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{3.5105805785939074`*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Plot sorted by position of first peak in list (to match diagram from paper)\
\>", "Subsection",
 CellChangeTimes->{{3.510581455332821*^9, 3.5105815060490837`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rankOrdering", "[", 
   RowBox[{"l_List", ",", "numElts_Integer", ",", "predicate_Function"}], 
   "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", 
    RowBox[{"Sort", "[", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Ordering", "[", 
         RowBox[{"l", ",", "numElts", ",", "predicate"}], "]"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "pos", "]"}], "]"}]}], "}"}], "]"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510577272257135*^9, 3.510577285966035*^9}, {
  3.510577553466466*^9, 3.5105776656095123`*^9}, {3.5105776993556547`*^9, 
  3.510577748672923*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rankPos", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rank", "=", 
       RowBox[{"rankOrdering", "[", 
        RowBox[{"pos", ",", 
         RowBox[{"Length", "[", "pos", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#1", "]"}], "<", 
           RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{"pos", ",", "rank"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.510576119876075*^9, {3.5105765073072147`*^9, 3.5105765186621037`*^9}, {
   3.510576700169857*^9, 3.5105767093093452`*^9}, {3.510577673898406*^9, 
   3.510577675733574*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"allAgainstRank", "=", "\t", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"sample", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"r", "=", 
              RowBox[{"sample", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"data", "=", 
              RowBox[{"sample", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"#", ",", "r"}], "}"}], "&"}], ",", "data"}], "]"}]}], 
          "]"}]}], "]"}], ",", "rankPos"}], "]"}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.510575395813332*^9, 3.510575494879712*^9}, {
  3.510575581080715*^9, 3.510575828971678*^9}, {3.510575972901553*^9, 
  3.510575976030925*^9}, {3.5105761069820547`*^9, 3.510576129103134*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"firstAgainstRank", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", "rankPos"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510576161267097*^9, 3.5105761679856243`*^9}, {
  3.5105761988181953`*^9, 3.510576199449526*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"allAgainstRank", ",", "firstAgainstRank"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green"}], "}"}]}], ",", 
   RowBox[{"Frame", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
   
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Peak position\>\"", ",", 
      "\"\<Sample rank sorted by first generated peak\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5105758443456917`*^9, 3.5105758506113358`*^9}, {
  3.51057603692631*^9, 3.510576089547821*^9}, {3.510576133305142*^9, 
  3.5105761423696547`*^9}, {3.510576186313545*^9, 3.510576227300477*^9}, {
  3.5105763999171543`*^9, 3.510576411493555*^9}, {3.510578352156331*^9, 
  3.510578436891608*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQ3bNEXUc9Rc6BAQIcnmsdKDLzUYTyLRySDu55dGmj
PJQv4bChjrnMM04JyrdxCMu2el4vAFNv4qB8Ot+PbaEClK/l0DrfbkLxdxjf
2MH4tk+92SIYX8fhy5FfMey6MP1mDsY/xFK71sDcw+Egk77uisEemHpDB43s
2KiNm2DqrRyKt9XxX1wLkzdw2FRw3epgJMy9Ig4Trf6s2rFUFsr/YH+o4LdN
gC1Mv7lDzZ3PjLoRML6lw5bK6f7ay2Hm6Tmcfq13c/4rmHkyDu98GCzVv8Hc
J+Cgu9bkwZvHMPVGDnLn7C/nBcL4Kg78M6de3MYE4ys4vJmds+KyGMw+UwdX
p86t7Jtg4WnnkF8SvD64F6Zew2GJwVuhX50weVuHT6fVfSeyweSVHPJ2aRZ/
OQszz9ph7dGABq56mLyaAwAKyXSF
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  Frame->{True, True, False, False},
  FrameLabel->{
    FormBox["\"Peak position\"", TraditionalForm], 
    FormBox[
    "\"Sample rank sorted by first generated peak\"", TraditionalForm]},
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.51057614348634*^9, {3.510576202219102*^9, 3.510576227952499*^9}, {
   3.5105764021485987`*^9, 3.510576412327733*^9}, 3.510576522840292*^9, 
   3.510576730614452*^9, 3.5105770905388603`*^9, 3.510577849578615*^9, 
   3.510578012777624*^9, 3.510578289492696*^9, 3.5105784395042467`*^9, 
   3.5105784776594477`*^9, 3.510578569157852*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXQmQXUW5HufOlpnsCZlMEmaSEBIeCUnMhiIqVrGIoqIFJEWAiKgQNxRx
CQJhCSiLoiIiokVZAYK4QkISwLghKBCihRauQSqCSxkUosEN0u98fbr7dp/z
/X363hue1nvvpObm3j69/336+7f+z2tOPfuMt7zz1LNXnnbq1KPOOvXdZ6w8
7b1TjzzzrCyp9oK2thec0dbW9szUNnxX2Vfzoa+V+DA/zPdv6v861MaNG1V3
d7c655xz1F/+8peb87vf0v/V1IQJE9QvfvEL/atwq7+/X/3yl7/0b601dX7n
O99Rc+fOVYcffrj61re+1aGTx6jzzjtPLV68WJ122mnq2muv1b15/PHH1UEH
HaTe8Y53qMsvv1yNGzdOffWrX1Vf+cpXVHt7u/r4xz+u86C6iy66KGsXdXXq
1o899lj10Y9+VJ1wwglq69atbe363jRdzxlnnKEuueQStXTpUvXnP/9Z3Xff
fer4449XV111lXrrW9+q/vrXv6pvfvObur2zzjpLPfvss/r/l770pWrTpk2l
e6xO5Bk7dqx6z3veo/72t7/p/8ePH48ht12Yz8iNZrJOOeUU9eEPf9j8wmef
uvfee9WoUaN0Vbi+9rWvqSeffFJ94hOfUEceeaRLW7JkiRlah+rt7dXTcfDB
B2M685nt17Px0EMP6SL33HOPmjFjhtqzZ4968MEH1aRJk9S//vUvfe9d73qX
eu9736s+9alPqT/84Q86DbNx882agmr27Nnq+9//vv6+//7747tpeqS7J9WJ
68ADD3TlMePz5s27KJyIFStWFCaipmlyxBFHeGmdejSgOVYYRvSSl7zETUJf
X59auXKlnqTnnnsun4Qef0GqZ555BstfPfHEE3oJvfKVr8xLj1A33HCDevGL
X6yz/O53v8Oq0tOaraDSHOy3337qxz/+sWvZ3guq7HFVFovj/+IUjNFTgK5f
c801unHQExfofsABB+jpwTI76qij1I9+9CN97+mnn1a33HKLevvb3+5NRU1P
xcKFC9X27duzSavPg3lm1e7du/U8ZPfDTne5TmPKRo8erZ+OrMPthgB7YRqw
AqSV0KOn4dJLL9U5fvCDH6gpU6aoXbt2qR/+8Idqzpw57VjAbd36IczaVj//
+c/V8uXLdfZvfOMbeFCDBQHyYVFkD2u+IGbpzevrX/+6LnLHHXfoUWLVYgVP
njy5tIJvvfVWdfrpp+u0DRs2qL///e96AqdNm1acCje59p5Up30qPv/5z+vv
X/ziF3XXyZowj4W+QMMtW7bo73g83ve+96kzzzxT79K4/vGPf+jtaM2aNer1
r3+9+tznPtdmKYfZ+OMf/6i+9KUv2R24zRIdW9vAwID67Gc/q975zneqmTNn
Yl3lt6fqXQ478WWXXaaWLVumt6YMFNTb3vY2dfXVV6tXv/rV6p///KemEYi/
Y8cOPcPYBdE9VO/fw8Xq/O53v6tn7jOf+Yw6++yz9V6T7frBpHT5m6YeUK1W
Uw8//PAIb+0jWektMB/7jTfeaNPUm9/8Zm/V1vx7bR/NW1prWvr2t7+tUQiP
JR5DTGmGLCNNSWwPxZawEAAAuH71q19hO3UtefdsSxvNrfXr1+vZyqpr+1p+
axP+08vdJOg6CWQ/39815GSP05VXXqmx7NRTTwVVXmgmCUQEXmFt4g+zko16
gSkF1AZNge4Zur7QzBPI/v73v1998IMf1GCabdht80yNWMVvfOMb1apVq/QS
O/fcczENc02NWFnZZqf/strbefdyIrUdYep85JFHdDcAf0BT7B/Zgzrf3H70
0Uf1wrfX73//exRZaMiDBQ4S4Zct8pOf/AQYrGvE9fKXv1zddtttdhDZo6de
9apX6VvIMjQ0hB0vv92rn9gPfehDrkGhfyPCUWARYkO216xZs7BIX2i6eeed
d+pnDFvkAlPkAx/4gIYHPIdTp05Vr3nNa/Cc2VF88pOf1DNmLzyKH/nIR+wo
Vq9e7fY+XIcccgg2Bn27HQOwO4jQs0L/0RnsT/YCCbPnb4HpP5hObNbZXtJm
F8r999/vdklDhja79M4//3z9fGIvwv4B/mPz5s2289kOp29ja/rTn/6kN/5s
+yl3XuhWWuftGgEbi70Fv/IOdugVDDgwHbf9Br6dfPLJ+n+sEeyFGc3mm1Jo
CFsNGvjCF74wv8n+grSEJJbydlZwAbrA7WdPoe06WKSPfexjYddr6stf/rI6
+uij9S+7xMAqAKYBjCgGZjdjfMvzLPTI9NvyC3gEgJ3YfbMO6ZxAD4DTz372
s5eYyn7605/qJwZZyBN900036TnGBXYJKJ/VbJfaddddp9eGv5zAZuARwXLC
deKJJ6qdO3fa5QR+BfwLLgy1q6tLPfXUU9ITLfSvMNiLL75YHXbYYXrpAu1x
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\
\>"]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["4 April 2011 Monday", "Section",
 CellChangeTimes->{{3.510916657573248*^9, 3.5109166648699417`*^9}, {
  3.5109986731897984`*^9, 3.510998673801722*^9}}],

Cell[CellGroupData[{

Cell["Implement beam search - description", "Subsection",
 CellChangeTimes->{{3.5109169160539207`*^9, 3.5109169308850327`*^9}}],

Cell["\<\
I am going to try implementing the beam search idea with the following \
limitations: # peaks is same throughout and every peak is detected every time.\
\>", "Text",
 CellChangeTimes->{{3.510916684837922*^9, 3.510916736369664*^9}}],

Cell[CellGroupData[{

Cell["Variables", "Subsubsection",
 CellChangeTimes->{{3.51091692228314*^9, 3.510916923383144*^9}}],

Cell["There will be a couple of variables:", "Text",
 CellChangeTimes->{{3.5109167492875137`*^9, 3.510916757208952*^9}}],

Cell[TextData[{
 StyleBox["initialPeakPositions",
  FontWeight->"Bold"],
 ": 2d array of the initial permutation of peaks: \
initialPeakPositions[[sample,peak]]  locations are given in ppm"
}], "Text",
 CellChangeTimes->{{3.510916971561101*^9, 3.5109170643548393`*^9}}],

Cell[TextData[{
 StyleBox["beam",
  FontWeight->"Bold"],
 ": list of candidates with their current evaluation, sorted by evaluation"
}], "Text",
 CellChangeTimes->{{3.510916761389574*^9, 3.510916781069995*^9}, {
  3.510916853373171*^9, 3.510916855989883*^9}}],

Cell[TextData[{
 StyleBox["beamSize",
  FontWeight->"Bold"],
 ": number of candidates that will be in the beam at the start of each \
iteration"
}], "Text",
 CellChangeTimes->{{3.510916805620969*^9, 3.510916842386201*^9}}],

Cell[TextData[{
 StyleBox["newCandidates",
  FontWeight->"Bold"],
 ": list of every possible candidate with one inversion different from a \
candidate in the initial beam"
}], "Text",
 CellChangeTimes->{{3.5109168271029253`*^9, 3.5109168301077547`*^9}, {
  3.5109168968693132`*^9, 3.510916906983554*^9}, {3.510916938699407*^9, 
  3.510916949349257*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Types", "Subsubsection",
 CellChangeTimes->{{3.51091707271448*^9, 3.5109170734635553`*^9}}],

Cell[TextData[{
 StyleBox["candidate",
  FontWeight->"Bold"],
 ": each candidate is a list of permutations, one permutation per sample.  \
Each candidate is a potential solution.  If it is a correct solution, when \
each permutation is applied to the appropriate sample in \
initialPeakPositions, the first entries should correspond, the second entries \
should correspond, etc."
}], "Text",
 CellChangeTimes->{{3.5109170754946747`*^9, 3.510917240902967*^9}}],

Cell[TextData[{
 StyleBox["evaluation",
  FontWeight->"Bold"],
 ": an evaluation (evaluation[numEigenvalues,percentVarianceExplained] is \
better if there are fewer eigenvalues, but if the number of eigenvalues are \
equal, it is better if there is more variance explained by those eigenvalues. \
 This should be expanded into some notion of the compactness of the \
representation."
}], "Text",
 CellChangeTimes->{{3.510923504437929*^9, 3.510923511700657*^9}, {
  3.510923548601165*^9, 3.510923615923389*^9}, {3.510933759170084*^9, 
  3.510933794098094*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subsubsection",
 CellChangeTimes->{{3.5109172744907627`*^9, 3.510917275484557*^9}}],

Cell[TextData[{
 StyleBox["evaluate[candidate, initialPositions, pctVar]",
  FontWeight->"Bold"],
 ": applies the candidate to the given positions then calculates a PCA \
choosing enough eigenvectors to account for pctVar of the variance.  The \
evaluation returned gives the number of such eigenvectors and the proportion \
of the variance explained by them"
}], "Text",
 CellChangeTimes->{{3.5109172878202753`*^9, 3.510917291289089*^9}, {
  3.510917495043461*^9, 3.51091751882613*^9}, {3.51092095895608*^9, 
  3.510920985905673*^9}, {3.5109210645410557`*^9, 3.510921113102428*^9}, {
  3.5109230911663437`*^9, 3.5109231026429977`*^9}, {3.5109231328716593`*^9, 
  3.510923133101625*^9}, {3.510923491220467*^9, 3.510923493643278*^9}, {
  3.510933807494545*^9, 3.510933846922699*^9}}],

Cell[TextData[{
 StyleBox["isBetter[evaluation1,evaluation2]",
  FontWeight->"Bold"],
 ": returns true if evaluation1 is better than evaluation 2."
}], "Text",
 CellChangeTimes->{{3.510934418284828*^9, 3.510934449121482*^9}}],

Cell[TextData[{
 StyleBox["beamCorrespondence[peakPositions, beamSize, pctVar]",
  FontWeight->"Bold"],
 ": returns a candidate that gives the best correspondence found for the \
given peak positions"
}], "Text",
 CellChangeTimes->{{3.510934486817137*^9, 3.510934531739522*^9}, {
  3.510936927382484*^9, 3.5109369486194*^9}}],

Cell[TextData[{
 StyleBox["childCandidates[candidate, sampleIndex]",
  FontWeight->"Bold"],
 ": returns a list of all candidates that can be generated by swapping \
individual peaks in the sample at sampleIndex in the given candidate"
}], "Text",
 CellChangeTimes->{{3.510934613373035*^9, 3.510934648614622*^9}, {
  3.510934728300899*^9, 3.510934745746553*^9}, {3.510934804672917*^9, 
  3.510934880724311*^9}}],

Cell[TextData[{
 StyleBox["applyCandidate[candidate, initialPositions]",
  FontWeight->"Bold"],
 ": applies the given candidate to the given list of initial positions, \
returning a permuted list of peak positions"
}], "Text",
 CellChangeTimes->{{3.510934883702364*^9, 3.5109349277406387`*^9}, {
  3.5109349610701103`*^9, 3.510934969089522*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code", "Subsection",
 CellChangeTimes->{{3.510934565942477*^9, 3.510934566278985*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"childCandidates", "[", 
   RowBox[{"candidate_List", ",", "sampleIndex_Integer"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"swaps", "=", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Union", "[", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Sort", ",", 
              RowBox[{"Tuples", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{"Length", "[", 
                  RowBox[{"candidate", "[", 
                   RowBox[{"[", "sampleIndex", "]"}], "]"}], " ", "]"}], " ", 
                 "]"}], ",", "2"}], "]"}]}], "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "\[NotEqual]", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"TODO", ":", " ", 
        RowBox[{
        "Change", " ", "swapped", " ", "and", " ", "newCandidate", " ", "to", 
         " ", "use", " ", "ReplacePart"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"swapped", "=", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"permutation", ",", "swap"}], "}"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Which", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"i", "\[Equal]", 
              RowBox[{"swap", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", 
               RowBox[{"swap", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"i", "\[Equal]", 
              RowBox[{"swap", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", 
               RowBox[{"swap", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", 
             "\[IndentingNewLine]", "True", ",", 
             RowBox[{"permutation", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], " ", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "permutation", "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"newCandidate", "=", 
        RowBox[{"Function", "[", 
         RowBox[{"swap", ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"i", "\[Equal]", "sampleIndex"}], ",", 
              RowBox[{"swapped", "[", 
               RowBox[{
                RowBox[{"candidate", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "swap"}], "]"}], ",", 
              RowBox[{"candidate", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "candidate", "]"}]}], "}"}]}], "]"}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", 
       RowBox[{"newCandidate", ",", "swaps"}], "]"}]}], "\[IndentingNewLine]",
      "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510935079164504*^9, 3.510935110953186*^9}, {
   3.510935169022759*^9, 3.5109352405448227`*^9}, {3.510935341184766*^9, 
   3.510935443347604*^9}, {3.5109355588117323`*^9, 3.510935560163118*^9}, {
   3.510936227484435*^9, 3.510936244321154*^9}, {3.510936304229713*^9, 
   3.510936731209208*^9}, 3.5109369003376083`*^9, {3.510937600786128*^9, 
   3.510937618338026*^9}, {3.51093913228163*^9, 3.5109391330314713`*^9}, {
   3.510939251571103*^9, 3.510939259421826*^9}, {3.510939304029849*^9, 
   3.510939373422658*^9}, {3.510939412079321*^9, 3.5109395139321413`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"isBetter", "[", 
   RowBox[{"ev1_evaluation", ",", " ", "ev2_evaluation"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{
   RowBox[{
    RowBox[{"ev1", "[", 
     RowBox[{"[", "1", "]"}], "]"}], " ", "<", " ", 
    RowBox[{"ev2", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], " ", "||", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"ev1", "[", 
       RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", 
      RowBox[{"ev2", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], " ", "&&", " ", 
     RowBox[{
      RowBox[{"ev1", "[", 
       RowBox[{"[", "2", "]"}], "]"}], " ", ">", " ", 
      RowBox[{"ev2", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}], ")"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109368136687593`*^9, 3.510936881790072*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"applyCandidate", "[", 
   RowBox[{"candidate_List", ",", " ", "initialPositions_List"}], "]"}], ":=", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#2", "[", 
      RowBox[{"[", "#1", "]"}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"candidate", ",", "initialPositions"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109349321645412`*^9, 3.5109349557927923`*^9}, {
   3.510935040779944*^9, 3.510935074800559*^9}, 3.510935117617354*^9, {
   3.510938246780596*^9, 3.510938248392943*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"evaluate", "[", 
    StyleBox[
     RowBox[{
     "candidate_List", ",", " ", "initialPositions_List", ",", " ", 
      "pctVar_"}],
     FontWeight->"Bold"], 
    StyleBox["]",
     FontWeight->"Bold"]}], "/;", 
   RowBox[{"NumberQ", "[", "pctVar", "]"}]}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"permuted", "=", 
      RowBox[{"applyCandidate", "[", 
       RowBox[{"candidate", ",", "initialPositions"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"varForEig", "=", 
        RowBox[{"Normalize", "[", 
         RowBox[{
          RowBox[{"Eigenvalues", "[", 
           RowBox[{"Covariance", "[", "permuted", "]"}], "]"}], ",", 
          "Total"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"cumVar", "=", 
          RowBox[{"Accumulate", "[", "varForEig", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"satisfiesPercent", "=", 
            RowBox[{"First", "[", 
             RowBox[{"First", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"cumVar", ",", 
                RowBox[{"x_", "/;", 
                 RowBox[{"x", "\[GreaterEqual]", "pctVar"}]}]}], "]"}], "]"}],
              "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"evaluation", "[", 
           RowBox[{"satisfiesPercent", ",", 
            RowBox[{"cumVar", "[", 
             RowBox[{"[", "satisfiesPercent", "]"}], "]"}]}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5109371779489098`*^9, 3.510937365725601*^9}, {
   3.5109374650909758`*^9, 3.5109374899288197`*^9}, {3.510937694676412*^9, 
   3.510937697285863*^9}, {3.510937868992094*^9, 3.510938067057177*^9}, {
   3.510938335129665*^9, 3.5109383591772614`*^9}, {3.510938397229897*^9, 
   3.510938412719974*^9}, {3.510938463432057*^9, 3.510938465472584*^9}, {
   3.510938553969694*^9, 3.510938584218618*^9}, 3.510940418013275*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"beamCorrespondence", "[", 
      RowBox[{"peakPositions_List", ",", " ", "beamSize_", ",", "pctVar_"}], 
      "]"}],
     FontWeight->"Bold"], 
    StyleBox["/;",
     FontWeight->"Bold"], 
    RowBox[{
     StyleBox["(",
      FontWeight->"Bold"], 
     RowBox[{
      StyleBox[
       RowBox[{"NumberQ", "[", "beamSize", "]"}],
       FontWeight->"Bold"], 
      StyleBox["&&",
       FontWeight->"Bold"], 
      StyleBox[
       RowBox[{"NumberQ", "[", "pctVar", "]"}],
       FontWeight->"Bold"], 
      StyleBox["&&",
       FontWeight->"Bold"], 
      RowBox[{
       StyleBox["pctVar",
        FontWeight->"Bold"], 
       StyleBox["\[GreaterEqual]",
        FontWeight->"Bold"], "0"}], "&&", 
      RowBox[{"pctVar", "\[LessEqual]", "1"}]}], ")"}]}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"idPermutation", "=", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"Dimensions", "[", "peakPositions", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"Length", "[", "peakPositions", "]"}], "}"}]}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"numSamples", "=", 
        RowBox[{"Length", "[", "peakPositions", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"numPeaks", "=", 
        RowBox[{
         RowBox[{"Dimensions", "[", "peakPositions", "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"newBeam", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"oldBeam", ",", "sampleIndexToModify"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"children", "=", 
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"childCandidates", "[", 
                    RowBox[{"#", ",", "sampleIndexToModify"}], "]"}], "&"}], 
                   ",", "oldBeam"}], "]"}], ",", "1"}], "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"evaluated", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#", ",", 
                    RowBox[{"evaluate", "[", 
                    RowBox[{"#", ",", "peakPositions", ",", "pctVar"}], 
                    "]"}]}], "}"}], "&"}], ",", "children"}], "]"}]}], "}"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"With", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"sorted", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"First", ",", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"evaluated", ",", 
                    RowBox[{
                    RowBox[{"isBetter", "[", 
                    RowBox[{
                    RowBox[{"#1", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}],
                     "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Take", "[", 
                  RowBox[{"sorted", ",", "beamSize"}], "]"}]}], 
                "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"doIteration", "=", 
           RowBox[{"Function", "[", 
            RowBox[{"beam", ",", 
             RowBox[{"Fold", "[", 
              RowBox[{"newBeam", ",", "beam", ",", 
               RowBox[{"Range", "[", "numSamples", "]"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"FixedPoint", "[", 
           RowBox[{"doIteration", ",", " ", 
            RowBox[{"{", "idPermutation", "}"}]}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJwlzU0ogwEAxvFtoQhRQ5FlY5ottRJROyCfITVhJ2xSY7UtDWXsYkRmKF9T
c1CbUb5mTFk2ymRJ0ZaE+YjLaGUHlDLv8zo8/U5Pf6ZEIeygUSiUdGIwGEgS
z3ECJVZVqwy+9+cp4fOUdRCau8PTcPRaZoAilcUI9zobTFDqqlqF8bb6dVix
1myDhZPRdpjjXH+FUZ6tb+ixjKTOE3I5p6R+2lodLHqsEUHXRowEUme8KuiR
a4chpz00AzXs+0U4y+VZ4MHEkw1+l/Hs8IKqdkC6evwIXh0bz6AuHHcOB4Jd
l1AZQfeSvdvaO3jTwn2A7s3Q2/+v7wPqe0++oLYp+Rc+SrNoC4QOFiUWmt27
CVBqWEmBy22KNBg4N5HqdrYz4JJTw4R+loQNo3yZ2ZAx5suF5ZUCPuQbxPnw
p0dTAEv5VAF8iZSS6hsPi+F+4lA1DHYJGXbCT6Oc9A+HH+T+
  "]],

Cell[CellGroupData[{

Cell["Simple bench test", "Subsubsection",
 CellChangeTimes->{{3.510938180028338*^9, 3.510938188080493*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Note", " ", "that", " ", "the", " ", "following", " ", "could", " ", "do", 
   " ", "just", " ", "one", " ", "inversion", " ", "if", " ", "it", " ", 
   "inverted", " ", "the", " ", "second", " ", "sample", " ", "first"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.51094434318824*^9, 3.510944373644581*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"beamCorrespondence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.21", ",", "1.15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.01", ",", "6.05"}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51094106058296*^9, 3.510941074660767*^9}, {
  3.510941132636059*^9, 3.510941244117814*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510941075510078*^9, 3.5109411151152773`*^9, 3.51094116613356*^9, 
   3.510941247623427*^9, 3.510943054577787*^9, 3.510943168229887*^9, 
   3.510943246974063*^9, 3.510943338654558*^9, {3.510943388841902*^9, 
   3.51094339590874*^9}, 3.510943483560804*^9, 3.51094358767413*^9, 
   3.510943633139732*^9, 3.510943736886188*^9, {3.510943805747065*^9, 
   3.510943843019068*^9}, 3.510943886271378*^9, {3.5109439168971786`*^9, 
   3.5109439351760807`*^9}, 3.510943967143024*^9, 3.510944015998839*^9, 
   3.5109440535041027`*^9, {3.510944116073001*^9, 3.5109441339027987`*^9}, 
   3.5109441835794487`*^9, 3.510944293780555*^9, 3.5109443348647833`*^9, 
   3.510944390062936*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5109435423121147`*^9, 3.5109435661233387`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5109435667860327`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"idCandidate", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Range", "[", "20", "]"}], ",", 
     RowBox[{"{", "30", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510938084880466*^9, 3.51093815136075*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"appliedIDCandidate", "=", 
   RowBox[{"applyCandidate", "[", 
    RowBox[{"idCandidate", ",", "pos"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510938155169319*^9, 3.5109381574506683`*^9}, {
   3.510938191542911*^9, 3.5109382140334873`*^9}, 3.510938258817873*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pos", "\[Equal]", "appliedIDCandidate"}]], "Input",
 CellChangeTimes->{{3.510938260261409*^9, 3.510938265519433*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5109382661818647`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"posEvaluation", "=", 
  RowBox[{"evaluate", "[", 
   RowBox[{"idCandidate", ",", "pos", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510938273746421*^9, 3.5109383103573837`*^9}, {
  3.510938615845104*^9, 3.510938618652273*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"1", ",", "0.9407089579887079`"}], "]"}]], "Output",
 CellChangeTimes->{{3.510938312343342*^9, 3.510938339767736*^9}, {
   3.510938564529332*^9, 3.5109385880722837`*^9}, 3.5109386204114103`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Note", " ", "that", " ", "this", " ", "next", " ", "one", " ", "uses", " ",
    "the", " ", "definition", " ", "of", " ", "permutedPos", " ", "from", " ",
    "the", " ", "experiment", " ", "looking", " ", "at", " ", "what", " ", 
   "happens", " ", "to", " ", "the", " ", "eigenvalues", " ", "when", " ", 
   "the", " ", "values", " ", "in", " ", "the", " ", "matrix", " ", "are", 
   " ", "swapped"}], "*)"}]], "Input",
 CellChangeTimes->{{3.5109386503049097`*^9, 3.510938689749892*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"permutedPosEvaluation", "=", 
  RowBox[{"evaluate", "[", 
   RowBox[{"idCandidate", ",", "permutedPos", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510938624247164*^9, 3.510938635837*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"2", ",", "0.9692651209991647`"}], "]"}]], "Output",
 CellChangeTimes->{3.51093863715202*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"posEvaluation", ",", "permutedPosEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938711060605*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938715729741*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"permutedPosEvaluation", ",", "posEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938736810611*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938737363707*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"isBetter", "[", 
  RowBox[{"posEvaluation", ",", "posEvaluation"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938693511155*^9, 3.510938746413776*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.5109387014573174`*^9, 3.510938746948209*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938769713203*^9, 3.5109387876425467`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5109387886105137`*^9, 3.51093918653262*^9, 
  3.5109395241331453`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"childCandidates", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.510938769713203*^9, 3.5109387876425467`*^9}, {
  3.5109395398640347`*^9, 3.510939556570874*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5109387886105137`*^9, 3.51093918653262*^9, {3.5109395241331453`*^9, 
   3.510939557069087*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Code for permuted items eigenvalue test", "Subsubsection",
 CellChangeTimes->{{3.510937013193671*^9, 3.510937031129314*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanCenterSamples", "[", "samples_List", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"means", "=", 
      RowBox[{"Mean", "[", "samples", "]"}]}], "}"}], ",", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "-", "means"}], "&"}], ",", "samples"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510927974193233*^9, 3.510928039968194*^9}, {
  3.510928184508163*^9, 3.510928187352792*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"adjustedRSquareds", "::", "usage"}], "=", 
   "\"\<adjustedRSquareds[rsquareds, sampleSize] Given a list of \
\!\(\*SuperscriptBox[\(R\), \(2\)]\) values for each potential variable in a \
PCA model and the sample size from which the model was derived, uses the \
formula for adjusted \!\(\*SuperscriptBox[\(R\), \(2\)]\) from Wikipedia to \
calculate an estimate of the variance explained for the composite model that \
accounts for the size of the model.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510929575302701*^9, 3.5109296813782997`*^9}, {
  3.510929721745829*^9, 3.5109297891280127`*^9}, {3.51093003829943*^9, 
  3.5109300685869703`*^9}, {3.5109303290717583`*^9, 3.510930335248637*^9}, {
  3.51093040006092*^9, 3.510930410090098*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"adjustedRSquareds", "[", 
   RowBox[{"rsquareds_List", ",", "sampleSize_Integer"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cumRSq", "=", 
      RowBox[{"Accumulate", "[", "rsquareds", "]"}]}], "}"}], ",", 
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rsq", ",", "p"}], "}"}], ",", 
        RowBox[{"1", "-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", "rsq"}], ")"}], 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"sampleSize", "-", "1"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"sampleSize", "-", "p", "-", "1"}], ")"}]}]}], ")"}]}]}],
        "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"cumRSq", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "rsquareds", "]"}], "]"}]}], "}"}]}], "]"}]}],
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510928960200716*^9, 3.510929151871923*^9}, {
  3.510929272232872*^9, 3.5109293010433683`*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
See what happens to eigenvalue list when items are permuted\
\>", "Subsection",
 CellChangeTimes->{{3.5109266429713573`*^9, 3.5109266630401077`*^9}, {
  3.510931564133325*^9, 3.510931576258519*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"permutedPos", "=", "pos"}], ";"}]], "Input",
 CellChangeTimes->{{3.510926495339295*^9, 3.510926505684331*^9}, 
   3.5109278030024223`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "2"}], "]"}], "]"}], ",", 
    RowBox[{"permutedPos", "[", 
     RowBox[{"[", 
      RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.510926506982745*^9, 3.5109265971626577`*^9}, {
  3.510927803596035*^9, 3.510927805145027*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.7907902733385197`", ",", "8.54243621975825`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926537496437*^9, 3.5109265986567717`*^9, 
  3.510927824509749*^9, 3.5109305303993683`*^9, 3.510931619514181*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"permutedPos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
   RowBox[{"permutedPos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.510926615736713*^9, 3.510926630915056*^9}, {
  3.5109278058219347`*^9, 3.510927806202977*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.7907902733385197`", ",", "8.54243621975825`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926631794368*^9, 3.5109278254362392`*^9, 
  3.510930531466042*^9, 3.510931620449918*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"pos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
   RowBox[{"pos", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.510926615736713*^9, 3.510926630915056*^9}, {
  3.510926681723378*^9, 3.510926686037467*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.54243621975825`", ",", "1.7907902733385197`"}], "}"}]], "Output",\

 CellChangeTimes->{3.510926631794368*^9, 3.510926686661017*^9, 
  3.510927826348722*^9, 3.510930532827058*^9, 3.510931621813336*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"meanCenterSamples", "[", "permutedPos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510928491978866*^9, 3.510928517470462*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.51092850802592*^9, 3.510928518052103*^9}, 
   3.510930534084136*^9, 3.5109316236200953`*^9}]
}, Open  ]],

Cell["p2pos is permutedPermutedPos (permute a second element)", "Text",
 CellChangeTimes->{{3.510931626387123*^9, 3.510931637858477*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"p2pos", "=", "permutedPos"}], ";"}]], "Input",
 CellChangeTimes->{{3.510928654470599*^9, 3.510928698635169*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "3"}], "]"}], "]"}], ",", 
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "5"}], "]"}], "]"}]}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "5"}], "]"}], "]"}], ",", 
     RowBox[{"p2pos", "[", 
      RowBox[{"[", 
       RowBox[{"2", ",", "3"}], "]"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.510928702582868*^9, 3.510928766323742*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510928771058998*^9, 3.510928780662106*^9}}],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.5109287813422956`*^9, 3.510930538456946*^9, 
  3.5109329866865597`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p2posRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}]}], ",", 
    "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510928821009282*^9, 3.5109288227360067`*^9}, {
  3.510928887455258*^9, 3.510928890706626*^9}, {3.510930572036954*^9, 
  3.510930606553011*^9}, {3.51093113909172*^9, 3.510931140830179*^9}, {
  3.51093300223542*^9, 3.5109330041088057`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6348545950515387`", ",", "0.31931337307762575`", ",", 
   "0.025803966062651763`", ",", "0.01422237632576937`", ",", 
   "0.005805689482414375`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510928823248139*^9, 3.510928891262927*^9, 3.5109305412514973`*^9, {
   3.510930577746539*^9, 3.510930628385954*^9}, 3.510931142405717*^9, 
   3.510933005991632*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{"Eigenvalues", "[", 
     RowBox[{"Covariance", "[", 
      RowBox[{"meanCenterSamples", "[", "p2pos", "]"}], "]"}], "]"}], ",", 
    "Total"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Verify", " ", "that", " ", "the", " ", "singular", " ", "values", " ", 
     "of", " ", "the", " ", "mean"}], "-", 
    RowBox[{
    "centered", " ", "matrix", " ", "are", " ", "indeed", " ", "the", " ", 
     "square", " ", "roots", " ", "of", " ", "the", " ", "eigenvalues"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.510933037244114*^9, 3.5109331472147617`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.634854595051539`", ",", "0.3193133730776257`", ",", 
   "0.025803966062651756`", ",", "0.014222376325769398`", ",", 
   "0.005805689482414377`", ",", 
   RowBox[{"-", "1.3798574314518096`*^-16"}], ",", "7.733082256050456`*^-17", 
   ",", 
   RowBox[{"-", "7.33127543639842`*^-17"}], ",", "6.639409733566104`*^-17", 
   ",", 
   RowBox[{"-", "4.795486087138916`*^-17"}], ",", 
   RowBox[{"-", "2.6996807276866496`*^-17"}], ",", "2.5874220252969345`*^-17",
    ",", "1.2538018857698625`*^-17", ",", 
   RowBox[{"-", "1.2316500487044384`*^-17"}], ",", 
   RowBox[{"-", "6.7671626999100186`*^-18"}], ",", "4.70851492801911`*^-18", 
   ",", 
   RowBox[{"-", "3.3918252320077987`*^-18"}], ",", 
   RowBox[{"-", "1.9765175355386508`*^-18"}], ",", "1.3488681663102422`*^-18",
    ",", "3.48220661259433`*^-19"}], "}"}]], "Output",
 CellChangeTimes->{{3.510933060241415*^9, 3.510933080805873*^9}, 
   3.5109331481071463`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "p2posRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.5109305597954483`*^9, 3.5109306133054037`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6348545950515387`", ",", "0.9541679681291645`", ",", 
   "0.9799719341918163`", ",", "0.9941943105175857`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.510930613894319*^9, 3.510930631213751*^9}, 
   3.5109330133392057`*^9, 3.510933150763541*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"adjustedRSquareds", "[", 
  RowBox[{"p2posRSquareds", ",", 
   RowBox[{"Length", "[", "p2pos", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5109306510558367`*^9, 3.5109306790131807`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6218136877319508`", ",", "0.9507730028053989`", ",", 
   "0.9776610035216412`", ",", "0.9932654002003993`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.510930680081273*^9, 3.510933024065641*^9, 
  3.510933151916459*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"permutedPosRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "permutedPos", "]"}], "]"}]}], ",", 
    "Total"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.510928834642488*^9, 3.510928848250121*^9}, {
  3.510928880503209*^9, 3.510928882616975*^9}, {3.5109293718357277`*^9, 
  3.510929374224146*^9}, {3.510930734884859*^9, 3.5109307459554462`*^9}, {
  3.510933029363133*^9, 3.51093303102489*^9}, {3.510933169142314*^9, 
  3.51093316995857*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570784`", ",", "0.3240800397420864`", ",", 
   "0.0221624226734264`", ",", "0.008572456327408889`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5109294546883583`*^9, 3.510930426232476*^9, {3.5109307413614483`*^9, 
   3.5109307469060783`*^9}, 3.5109330322305613`*^9, {3.510933153996307*^9, 
   3.510933170532323*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "permutedPosRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.5109307614610977`*^9, 3.5109307678536873`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570784`", ",", "0.9692651209991647`", ",", 
   "0.9914275436725911`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.510930768473938*^9, {3.5109331567138166`*^9, 3.5109331747280073`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"adjustedRSquareds", "[", 
  RowBox[{"permutedPosRSquareds", ",", 
   RowBox[{"Length", "[", "permutedPos", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5109293459202223`*^9, 3.5109293815975533`*^9}, {
  3.510929411799135*^9, 3.5109294345814657`*^9}, {3.5109307528078947`*^9, 
  3.5109307776028976`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6325131198734026`", ",", "0.9669884632953991`", ",", 
   "0.9904384140963516`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.510929358778144*^9, 3.510929382104748*^9}, {
   3.510929412413702*^9, 3.510929456068418*^9}, 3.510930431618189*^9, {
   3.510930757758841*^9, 3.510930778207973*^9}, 3.5109331917756577`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"Covariance", "[", "permutedPos", "]"}], "]"}], ",", "Total"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.510926809934339*^9, 3.510926846499769*^9}, {
   3.5109269605171537`*^9, 3.510926966352414*^9}, {3.510927003840249*^9, 
   3.510927004128213*^9}, {3.510927059244248*^9, 3.510927059540593*^9}, 
   3.510927105631255*^9, 3.5109278103884373`*^9, {3.510933471248542*^9, 
   3.5109334720282593`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6451850812570786`", ",", "0.3240800397420861`", ",", 
   "0.022162422673426385`", ",", "0.008572456327408875`", ",", 
   "9.5184624692742`*^-17", ",", 
   RowBox[{"-", "7.939096158479048`*^-17"}], ",", 
   RowBox[{"-", "5.5001466593731966`*^-17"}], ",", "2.7645710843295293`*^-17",
    ",", 
   RowBox[{"-", "2.7542841201318965`*^-17"}], ",", 
   RowBox[{"-", "2.1622665495191534`*^-17"}], ",", "1.8311967447826816`*^-17",
    ",", 
   RowBox[{"-", "1.4118133806782207`*^-17"}], ",", 
   RowBox[{"-", "9.350579144046067`*^-18"}], ",", "7.335245654287469`*^-18", 
   ",", 
   RowBox[{"-", "6.3314864463268395`*^-18"}], ",", "4.105110399539437`*^-18", 
   ",", 
   RowBox[{"-", "3.3441945267920624`*^-18"}], ",", "2.5376070176749462`*^-18",
    ",", "8.0131531388826795`*^-19", ",", "1.950311810761628`*^-19"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.510926817795455*^9, 3.510926847250169*^9}, 
   3.51092696767908*^9, 3.510927004852393*^9, 3.510927060012063*^9, 
   3.510927106280469*^9, 3.5109334730118103`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixRank", "[", 
  RowBox[{"Covariance", "[", "pos", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.510927343059461*^9, 3.510927383838277*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.510927349790765*^9, 3.51092738444268*^9, 
  3.510933518670453*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"posRSquareds", "=", 
  RowBox[{"Normalize", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], "/@", 
     RowBox[{"SingularValueList", "[", 
      RowBox[{"meanCenterSamples", "[", "pos", "]"}], "]"}]}], ",", "Total"}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.51093353156813*^9, 3.510933537520129*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.9407089579887079`", ",", "0.04779532758597183`", ",", 
   "0.011495714425320306`"}], "}"}]], "Output",
 CellChangeTimes->{3.5109335391541653`*^9, 3.5109335937583647`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", "posRSquareds", "]"}]], "Input",
 CellChangeTimes->{{3.510933551512521*^9, 3.510933563650041*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9407089579887079`", ",", "0.9885042855746797`", ",", "1.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.510933564176303*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["5 April 2011 Tuesday", "Section",
 CellChangeTimes->{{3.510998662434731*^9, 3.510998678006075*^9}}],

Cell[CellGroupData[{

Cell["\<\
Write code for generating a set of peaks and the permutation that would \
return it to the original\
\>", "Subsection",
 CellChangeTimes->{{3.510998689452355*^9, 3.5109987011195593`*^9}, {
  3.510998843825873*^9, 3.510998844432454*^9}, {3.510998965171154*^9, 
  3.510999001503182*^9}, {3.51099912622716*^9, 3.510999128016728*^9}}],

Cell[CellGroupData[{

Cell["Peak generation code", "Subsubsection",
 CellChangeTimes->{{3.511004043717967*^9, 3.511004050404047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutation", "::", "usage"}], "=", 
   "\"\<randomPeaksAndPermutation[numPeaks,numSamples,factorStdDev,\
noiseStdDev,peakResponseStdDev,peakRange] \n\nReturns a list of rules \
{\\\"peaks\\\"\[Rule]...,\\\"permutation\\\"\[Rule]...}.\n\n\\\"peaks\\\" \
gives a list of samples, each sample is a list of peaks sorted by their \
location.\n\n\\\"permutation\\\" gives a list of permutations that, when \
applied to the corresponding sample, will make the \
\!\(\*SuperscriptBox[\(i\), \(th\)]\) position in that sample contain the \
position of the \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak.  Thus, after \
applying all the permutations, the corresponding positions in the sample will \
contain corresponding peaks.\n\nnumPeaks and numSamples determine how many \
peaks and samples will be generated\n\nEach sample has a number of latent \
factors \!\(\*SubscriptBox[\(s\), \(j\)]\).  Each peak has the same number of \
latent response variables \!\(\*SubscriptBox[\(a\), \(i\)]\).  Each peak also \
has a base location \!\(\*SubscriptBox[\(k\), \(i\)]\).  The latent factors \
are selected from a multidimensional Gaussian with mean 0 and standard \
deviations given by factorStdDev.  Similarly the responses are selected from \
a Gaussian with mean 0 and standard deviations in peakResponseStdDev.  The \
peak means are selected independently from a uniform distribution over \
peakRange.\n\nThe \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak in the \
\!\(\*SuperscriptBox[\(j\), \(th\)]\) sample is given a location:\n\
\!\(\*SubscriptBox[\(\[Delta]\), \(ij\)]\)=\!\(\*SubscriptBox[\(k\), \
\(i\)]\)+\!\(\*SubscriptBox[\(a\), \(i\)]\)\[CenterDot]\!\(\*SubscriptBox[\(s\
\), \(j\)]\)+\!\(\*SubscriptBox[\(\[Xi]\), \(ij\)]\)\n\nWhere \
\!\(\*SubscriptBox[\(\[Xi]\), \(ij\)]\) is a normally distributed random \
variable with mean 0 and standard deviation noiseStdDev.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510999513361266*^9, 3.510999608450004*^9}, {
  3.5109997162047863`*^9, 3.510999810873349*^9}, {3.5109998652290983`*^9, 
  3.5109998664567833`*^9}, {3.510999935292083*^9, 3.5110002296275*^9}, {
  3.511000273985261*^9, 3.5110004502046003`*^9}, {3.511000528189788*^9, 
  3.511000531312159*^9}, {3.511000576653603*^9, 3.511000682343005*^9}, {
  3.511000718817196*^9, 3.511000887460273*^9}, {3.5110009347991734`*^9, 
  3.51100095250387*^9}, {3.511001009592391*^9, 3.511001010322723*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutation", "[", 
    RowBox[{
    "numPeaks_Integer", ",", "numSamples_Integer", ",", "factorStdDev_List", 
     ",", "noiseStdDev_", ",", "peakResponseStdDev_List", ",", 
     "peakRange_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "factorStdDev", "]"}], "\[Equal]", 
     RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "&&", 
    RowBox[{"NumberQ", "[", "noiseStdDev", "]"}], "&&", 
    RowBox[{"noiseStdDev", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Length", "[", "peakRange", "]"}], "\[Equal]", "2"}]}]}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"factorStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "factorStdDev", "]"}]}], "]"}]}], ",", 
         RowBox[{"{", "numSamples", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"peakResponseStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "]"}]}], 
         ",", 
         RowBox[{"{", "numPeaks", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"k", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"peakRange", ",", "numPeaks"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rawPos", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"sj", ",", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"ai", ",", "ki"}], "}"}], ",", 
                RowBox[{"ki", "+", 
                 RowBox[{"Dot", "[", 
                  RowBox[{"ai", ",", " ", "sj"}], "]"}], "+", 
                 RowBox[{"RandomReal", "[", 
                  RowBox[{"NormalDistribution", "[", 
                   RowBox[{"0", ",", "noiseStdDev"}], "]"}], "]"}]}]}], "]"}],
               ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "k"}], "}"}]}], "]"}]}], "]"}], ",", "s"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sortOrdering", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Ordering", ",", "rawPos"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"sortedPos", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Sort", ",", "rawPos"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"unsortOrdering", "=", 
            RowBox[{"Map", "[", 
             RowBox[{"Ordering", ",", "sortOrdering"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<peaks\>\"", "\[Rule]", "sortedPos"}], ",", 
            RowBox[{"\"\<permutation\>\"", "\[Rule]", "unsortOrdering"}]}], 
           "}"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510999189261509*^9, 3.510999221714493*^9}, {
  3.5109992581438093`*^9, 3.510999276538602*^9}, {3.510999307952742*^9, 
  3.510999358696295*^9}, {3.510999400722991*^9, 3.5109994721006536`*^9}, {
  3.511000237381385*^9, 3.511000263925104*^9}, {3.5110004862317333`*^9, 
  3.511000500748392*^9}, {3.511000785185664*^9, 3.511000786914557*^9}, {
  3.5110010304887857`*^9, 3.511001325865036*^9}, {3.511001359320874*^9, 
  3.511001438719915*^9}, {3.5110014754930964`*^9, 3.5110015512785463`*^9}, {
  3.5110015910832443`*^9, 3.511001656814919*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Peak plotting code", "Subsubsection",
 CellChangeTimes->{{3.511004058469493*^9, 3.5110040624807043`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"asPeakPlotTuples", "::", "usage"}], " ", "=", 
   "\"\<asPeakPlotTuples[peaks]\nReturns a list of two lists, the first is a \
list of pairs of the peak locations in each sample plotted against the first \
peak location in that sample and the second is the first point in each sample \
plotted against itself.  If fed to ListPlot, it will show the ordering \
obtained by accounting for the variation in the first peak.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5110029963834867`*^9, 3.511003052678643*^9}, {
  3.511003165389855*^9, 3.5110032788465652`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"asPeakPlotTuples", "[", "peaks_List", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"firsts", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "peaks"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pairs", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"sample", ",", "first"}], "}"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "first"}], "}"}], "&"}], ",", "sample"}], 
               "]"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"peaks", ",", "firsts"}], "}"}]}], "]"}], ",", "1"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"pairs", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", "#"}], "}"}], "&"}], ",", "firsts"}], "]"}]}], 
       "}"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511002452817254*^9, 3.511002563676488*^9}, {
  3.51100261406141*^9, 3.511002832412487*^9}, {3.511003106329968*^9, 
  3.511003121917863*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"asSortedPlotTuples", "::", "usage"}], " ", "=", 
   "\"\<asSortedPlotTuples[peaks]\nReturns a list of two lists, the first is \
a list of pairs of the peak locations in each sample plotted against the \
sample number in that sample and the second is the first point in each sample \
plotted against the sample.  The samples are sorted according to the location \
of the location of the first peak.  \n\nIf fed to ListPlot, it will show the \
ordering obtained by accounting for the variation in the first peak as would \
be obtained by sorting according to one peak's location.\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.5110029963834867`*^9, 3.511003052678643*^9}, {
  3.511003165389855*^9, 3.5110032788465652`*^9}, {3.511003681292728*^9, 
  3.5110036905161343`*^9}, {3.511003727795157*^9, 3.511003788334202*^9}, {
  3.511004707129191*^9, 3.5110047078200274`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"asSortedPlotTuples", "[", "unsortedPeaks_List", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sortedPeaks", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"unsortedPeaks", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "#1", "]"}], "<", 
          RowBox[{"First", "[", "#2", "]"}]}], "&"}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"listOfPairs", "=", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"sample", ",", "sampleNum"}], "}"}], ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#", ",", "sampleNum"}], "}"}], "&"}], ",", 
              "sample"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"sortedPeaks", ",", 
            RowBox[{"Range", "[", 
             RowBox[{"Length", "[", "sortedPeaks", "]"}], "]"}]}], "}"}]}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"listOfPairs", ",", "1"}], "]"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"First", ",", "listOfPairs"}], "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511002452817254*^9, 3.511002563676488*^9}, {
  3.51100261406141*^9, 3.511002832412487*^9}, {3.511003106329968*^9, 
  3.511003121917863*^9}, {3.51100380554959*^9, 3.51100401992444*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Peak plotting code usage examples", "Subsubsection",
 CellChangeTimes->{{3.5110040728418922`*^9, 3.511004077755241*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"20", ",", "30", ",", 
       RowBox[{"{", 
        RowBox[{"0.7", ",", "0.5", ",", "0.2"}], "}"}], ",", "0.2", ",", 
       RowBox[{"{", 
        RowBox[{"10", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"perm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"asPeakPlotTuples", "[", 
        RowBox[{"applyCandidate", "[", 
         RowBox[{"perm", ",", "pks"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Green"}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511003335392474*^9, 3.511003421861599*^9}, {
  3.5110034533635*^9, 3.511003453995929*^9}, {3.5110034843831787`*^9, 
  3.511003491616115*^9}, {3.5110035285372562`*^9, 3.511003542154455*^9}, {
  3.511003626452129*^9, 3.511003632715788*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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
WHOsn4r5QLhGsvoBtH9L/w32hmF0/v8BbuQLWA==
     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQrXCF5Wy3joQDjJ65rO/OpLeycDqvoLBRSgBBp7zq
ui9wVwpOt2a+6/qmIgGnk1V27VOdIA2nIx9N+3RqlyKcVnQvLmv7JwGnW/fo
ybUcVIDTB7Tz3zxLl4bT5tnnpFJWyMLpPZG/dbO/ScFp5qrYF3OrFOD0l4hL
4RzBMnBan/myZN0GKTh90UWGW/mjLJz2+u4g9bNSEk7vaGf93HdEAk77eZg2
rdZXgNPelcJPZI5LwWkHt7m7W6bKwmkPXZYGzTlycHojb2JgmpksnPY5sUvu
1kRpOC12/yXjRk8E/e3KSV6fHBE4vfoIV45KuiKc/nSM+8PVQlk4Pclp5ibm
7Qg6ZumvoK8d0nAaAGZXyYw=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.511003422594879*^9, 3.511003569256089*^9}, {
  3.5110036283134727`*^9, 3.511003633121194*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"20", ",", "30", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "0.1"}], "}"}], ",", "0.1", ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "0.5", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"perm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"asSortedPlotTuples", "[", 
        RowBox[{"applyCandidate", "[", 
         RowBox[{"perm", ",", "pks"}], "]"}], "]"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"Red", ",", "Green"}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511003335392474*^9, 3.511003421861599*^9}, {
  3.5110034533635*^9, 3.511003453995929*^9}, {3.5110034843831787`*^9, 
  3.511003491616115*^9}, {3.5110035285372562`*^9, 3.511003542154455*^9}, {
  3.511003626452129*^9, 3.511003632715788*^9}, {3.511004090429294*^9, 
  3.511004233572281*^9}, {3.511004730199543*^9, 3.511004778009754*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], PointBox[CompressedData["
1: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

     "]]}, 
   {RGBColor[0, 1, 0], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQA2IQzeEcvskinMGBAQw+2H+PspjGHssI5TM4xLyt+jBp
M4zP4XDjYYftSgsmKF/A4V6e6YNl72F8EQeryC+M+gosUL6Ew+GmRNMpr2F8
GYeP618eU1jJCuUrOORnhn9Z+Y4DyldysLsy09H5ESeUr+KgHnFF/I8lN5Sv
5lCelvc+cBeMr+Ewrz3j4SEZHihfy+FyxeGKblteKF/HoWRu8sv/m2B8PYcH
GT+6N5yC8Q0cyvi+yVk58UH5hg5rRM4Ur14M4xs5VPR5c+9czQ/lGztEK+XE
H/sB45s4eH3bVr1eQADKN3X47jJRRVwMxjdzOOx88MUbPRjf3KE6IvJE2TIY
38JhbWCK6KQNML6lA1NnjHqniiCUb+Xwb7JHXnonjG/tUPvNT3K6rzCUb+Og
OG/mI9l3ML6tA5ffAlOzM2JQvp0DAGupc6M=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.511004105530129*^9, 3.511004254286818*^9}, {
  3.5110047341426983`*^9, 3.511004781190228*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztXVmMHtWV/un/78W9eWncbmxivGXYQiSiIRMWaYaMwcGxwQQveAHbGJS2
DAIyUSzBgKHdhkBAiuGJhwSNMNgPiM2NbWweeIIBMhICZN4QCi9GCB7YJBb3
naq6S93l+27dars9mtH8yE33+avuvXVO1fnud865t5Zv/v3wLbdt/v3WLZvn
Lfnd5juGt275t3lX3v67TNQ8rdE4bbjRaHwyr5H/LrJf1Y/iszX/of6o8XtX
8b928f7774slS5aIBx54QGzevFk8+eSTjScj3y0vvmuJF154QVx66aXFv+ee
e65NiR955BFx5513Fodn4qWFuNs/uhgIaL3XHluH2LNnj3j22WeLo7/88kvR
09MjPv7447/Gv16u+rzrrrvE3XffLfTn6NGjYv78+WJ8fFx89tlnYmBgQHz9
9ddLyeGk9R45xEazGP+WLVvyf9lf8ucbb7yhz8/+kj/nzJkjXn311eKv/wCy
ZfnPtrzvNnVhu3fvFqtWrTJDOfvss8Vrr7221BzYAZrpdnX31Vdfiddff704
/9133xVdXV3i2LFjf41/vTwYy/bt28Xw8LAZS27BTDVLgwNJiz3u7fb5558X
xh4ZGRFr1qwRhw8fNrcb+u7qiQ4IN+fcYE3x/fffi3vuuccxjS1bEfT+2GOP
xU3TBprpl71OUV9t27bN3CTX5D+b+dN8DfsW3JsffPBBcSsfP348vJWb9uGN
NtBsnz2elpg9e3bRQv7vkksuuVqeUXoYM5Dg0OWq8b1794pzzjkn71Td9i3x
6KOPijvuuKMwwfPPP780cqjXqjLSejAObaT8wr/44ovir2uBbAZvovjZc2q+
L9x07rsbp0lBBzih/xTI+v6P9HHq+v1/U/2v6Rea6jdAdu0JyP6nuuoU2YRF
iEOHhDhyRB5Q/q3wrOnITi9kU0rZ4cPu+ZmfFLt2CfHQQ40Fdvfq/CZosx/I
9PjGx4+LQ3/bJY7810PB+NrAeTOBrB3IWkCW2t4diddwhq3qbBAHDxZuW2h1
HDyYd1lM94q/lYU0cnrHD+geSrE6vV2evnNnefiuXY35shmp/bKZNtx6Hxa3
q7EffHtnBj7yv9wccOzkembgpltYLG+QjlBbsocaHdxe60qHPGONjbndj43F
jeUeb4xVil1j7dgRGqt4UvK2yvbzBlC3Pbhbba6xt3a45kKjJ1c0AzfdwmJj
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
J7rXStK8qvxaSRun/TfCYkNS\
\>"]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Write code for determining the % error between an ideal permutation and a \
calculated one\
\>", "Subsection",
 CellChangeTimes->{{3.511004834156089*^9, 3.511004856281458*^9}}],

Cell["\<\
Since we only care about correspondence not the actual ordering in which the \
peaks were originally generated, we can sort the two correspondences based on \
their first permutation.\
\>", "Text",
 CellChangeTimes->{{3.51100485915587*^9, 3.5110049013424177`*^9}}],

Cell[CellGroupData[{

Cell["Difference code", "Subsubsection",
 CellChangeTimes->{{3.511005768002555*^9, 3.511005779498851*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"fracDifferent", "::", "usage"}], "=", 
  "\"\<fracDifferent[perm1,perm2] \nReturns the fraction of correspondences \
that are different between the two permutations\>\""}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511005712248262*^9, 3.511005756662681*^9}}],

Cell[BoxData["\<\"fracDifferent[perm1,perm2] \\nReturns the fraction of \
correspondences that are different between the two permutations\"\>"], \
"Output",
 CellChangeTimes->{3.511007240792583*^9, 3.511219268868545*^9, 
  3.511822891952002*^9, 3.511865748354185*^9, 3.511866586531703*^9, 
  3.5118668005271997`*^9, 3.511867986341322*^9, 3.512214937875362*^9, 
  3.512251370134759*^9, 3.512381584655541*^9, 3.512395190775235*^9, 
  3.512395581191772*^9, 3.512410082658227*^9, 3.512412373422942*^9, 
  3.5124670207710743`*^9, 3.512474137394105*^9, 3.512482796831456*^9, 
  3.512489135793782*^9, 3.5124920473761683`*^9, 3.512510582079132*^9, 
  3.5130109934603157`*^9, 3.513011939514167*^9, 3.513344092057598*^9, 
  3.5160485489842367`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fracDifferent", "[", 
    RowBox[{"perm1_List", ",", "perm2_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Dimensions", "[", "perm1", "]"}], "\[Equal]", 
     RowBox[{"Dimensions", "[", "perm2", "]"}]}], "&&", 
    RowBox[{
     RowBox[{"Length", "[", "perm1", "]"}], "\[GreaterEqual]", "1"}]}]}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"o1", "=", 
       RowBox[{"Ordering", "[", 
        RowBox[{"perm1", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
      RowBox[{"o2", "=", 
       RowBox[{"Ordering", "[", 
        RowBox[{"perm2", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"sortP1", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "o1", "]"}], "]"}], "&"}], ",", "perm1"}], "]"}]}], 
        ",", 
        RowBox[{"sortP2", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "o2", "]"}], "]"}], "&"}], ",", "perm2"}], 
          "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"numDiff", "=", 
          RowBox[{"MapThread", "[", 
           RowBox[{"HammingDistance", ",", 
            RowBox[{"{", 
             RowBox[{"sortP1", ",", "sortP2"}], "}"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Total", "[", "numDiff", "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"Times", "@@", 
           RowBox[{"(", 
            RowBox[{"Dimensions", "[", "perm1", "]"}], ")"}]}], ")"}]}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511004926952838*^9, 3.511005163038164*^9}, {
  3.511005272478218*^9, 3.511005433796213*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test difference code", "Subsubsection",
 CellChangeTimes->{{3.511005528425271*^9, 3.5110055397651167`*^9}}],

Cell["Each test below should be true", "Text",
 CellChangeTimes->{{3.511005542793489*^9, 3.5110055497784557`*^9}, {
  3.511005692285171*^9, 3.511005698237705*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"1", "/", "3"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"2", "/", "9"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"fracDifferent", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "2"}], "}"}]}], "}"}]}], "]"}], 
    "\[Equal]", 
    RowBox[{"4", "/", "9"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.511005442316543*^9, 3.511005516646502*^9}, {
  3.511005552850153*^9, 3.511005673177286*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.511005508744364*^9, 3.511005517083509*^9}, 
   3.511005571159214*^9, {3.511005613024694*^9, 3.511005636597497*^9}, 
   3.5110056737575903`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Test beam search algorithm accuracy using synthetic data - it fails\
\>", "Subsection",
 CellChangeTimes->{{3.5110059282191257`*^9, 3.511005949281344*^9}, {
  3.511009371251419*^9, 3.511009373258576*^9}}],

Cell[CellGroupData[{

Cell["\<\
Test one randomly chosen test sample - doesn't produce good results\
\>", "Subsubsection",
 CellChangeTimes->{{3.511008890842813*^9, 3.511008904932934*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"raw", "=", 
     RowBox[{"randomPeaksAndPermutation", "[", 
      RowBox[{"5", ",", "5", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0.1", ",", "0.01"}], "}"}], ",", "0.0001", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"peaks", "=", 
        RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
       RowBox[{"correctPerm", "=", 
        RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"beamPerm", "=", 
         RowBox[{"beamCorrespondence", "[", 
          RowBox[{"peaks", ",", "1", ",", 
           RowBox[{"90", "/", "100"}]}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"fracDifferent", "[", 
        RowBox[{"correctPerm", ",", "beamPerm"}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511007103935389*^9, 3.5110072318273573`*^9}, {
  3.511007384247465*^9, 3.511007385756609*^9}, {3.511007517492507*^9, 
  3.511007549154875*^9}, {3.511007591245886*^9, 3.5110076058569803`*^9}, {
  3.511007770387322*^9, 3.511007774735757*^9}, {3.511007821870696*^9, 
  3.511007840141357*^9}, {3.5110078856839743`*^9, 3.511007886510253*^9}, {
  3.5110093883678503`*^9, 3.511009388530448*^9}}],

Cell[BoxData[
 FractionBox["1", "5"]], "Output",
 CellChangeTimes->{
  3.51100724182764*^9, {3.511007378491118*^9, 3.511007387446106*^9}, {
   3.511007485811697*^9, 3.51100755708504*^9}, {3.511007598933837*^9, 
   3.511007620554159*^9}, 3.511007797501336*^9, 3.511007827740528*^9, 
   3.5110078731628532`*^9, {3.511008020335705*^9, 3.51100802920251*^9}, {
   3.511009389156073*^9, 3.51100941623073*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Look at raw data - the permutation found by the beam search has a better \
evaluation than the true model\
\>", "Subsubsection",
 CellChangeTimes->{{3.511009182663031*^9, 3.511009216932345*^9}, {
  3.5110092571978283`*^9, 3.511009262273303*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oneTestRun", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"raw", "=", 
      RowBox[{"randomPeaksAndPermutation", "[", 
       RowBox[{"5", ",", "5", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0.1", ",", "0.01"}], "}"}], ",", "0.0001", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"peaks", "=", 
         RowBox[{"\"\<peaks\>\"", "/.", "raw"}]}], ",", 
        RowBox[{"correctPerm", "=", 
         RowBox[{"\"\<permutation\>\"", "/.", "raw"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"beamPerm", "=", 
          RowBox[{"beamCorrespondence", "[", 
           RowBox[{"peaks", ",", "5", ",", 
            RowBox[{"9999", "/", "10000"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"oCorrect", "=", 
             RowBox[{"Ordering", "[", 
              RowBox[{"correctPerm", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
            RowBox[{"oBeam", "=", 
             RowBox[{"Ordering", "[", 
              RowBox[{"beamPerm", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<correct\>\"", "\[Rule]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "oCorrect", "]"}], "]"}], "&"}], ",", 
               "correctPerm"}], "]"}]}], ",", 
            RowBox[{"\"\<beam\>\"", "\[Rule]", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "oBeam", "]"}], "]"}], "&"}], ",", "beamPerm"}],
               "]"}]}], ",", 
            RowBox[{"\"\<peaks\>\"", "\[Rule]", "peaks"}], ",", 
            RowBox[{"\"\<error\>\"", "\[Rule]", 
             RowBox[{"fracDifferent", "[", 
              RowBox[{"correctPerm", ",", "beamPerm"}], "]"}]}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511007103935389*^9, 3.5110072318273573`*^9}, {
  3.511007384247465*^9, 3.511007385756609*^9}, {3.511007517492507*^9, 
  3.511007549154875*^9}, {3.511007591245886*^9, 3.5110076058569803`*^9}, {
  3.511007770387322*^9, 3.511007774735757*^9}, {3.511007821870696*^9, 
  3.511007840141357*^9}, {3.5110078856839743`*^9, 3.511007886510253*^9}, {
  3.511008053942896*^9, 3.51100819261339*^9}, {3.5110082768360662`*^9, 
  3.511008321791383*^9}, {3.511008368072792*^9, 3.511008372338105*^9}, {
  3.51100869373742*^9, 3.511008706868116*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"correct\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"beam\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}]}], 
     "}"}]}], ",", 
   RowBox[{"\<\"peaks\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.9823026461168887`", ",", "3.6346779849002537`", ",", 
        "5.27682052980657`", ",", "7.318364549047718`", ",", 
        "10.610960035086437`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1.096048785329963`", ",", "3.541009671540488`", ",", 
        "5.111422853987667`", ",", "7.303000681795698`", ",", 
        "10.512839922037179`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.6147940928534189`", ",", "3.969907039441116`", ",", 
        "5.755726689148052`", ",", "7.352307735530798`", ",", 
        "10.670626261665266`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2.058865755071433`", ",", "2.3406170323905853`", ",", 
        "3.6985211456049836`", ",", "7.166850075186587`", ",", 
        "10.232559519052309`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.03359040323324232`", ",", "4.722627455090603`", ",", 
        "6.622237328197323`", ",", "7.438583387904023`", ",", 
        "10.849977130885305`"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"error\"\>", "\[Rule]", 
    FractionBox["4", "25"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511008194117055*^9, 3.5110082853218803`*^9, 3.511008324313058*^9, 
   3.5110083735270863`*^9, {3.511008698378639*^9, 3.5110087079830503`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pks", "=", 
  RowBox[{"\"\<peaks\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008513491726*^9, 3.511008525345607*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.9823026461168887`", ",", "3.6346779849002537`", ",", 
     "5.27682052980657`", ",", "7.318364549047718`", ",", 
     "10.610960035086437`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.096048785329963`", ",", "3.541009671540488`", ",", 
     "5.111422853987667`", ",", "7.303000681795698`", ",", 
     "10.512839922037179`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.6147940928534189`", ",", "3.969907039441116`", ",", 
     "5.755726689148052`", ",", "7.352307735530798`", ",", 
     "10.670626261665266`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.058865755071433`", ",", "2.3406170323905853`", ",", 
     "3.6985211456049836`", ",", "7.166850075186587`", ",", 
     "10.232559519052309`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.03359040323324232`", ",", "4.722627455090603`", ",", 
     "6.622237328197323`", ",", "7.438583387904023`", ",", 
     "10.849977130885305`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511008528923657*^9, 3.511008716213334*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correct", "=", 
  RowBox[{"\"\<correct\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008537693356*^9, 3.5110085546700497`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.511008555335916*^9, 3.511008717621523*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"beam", "=", 
  RowBox[{"\"\<beam\>\"", "/.", "oneTestRun"}]}]], "Input",
 CellChangeTimes->{{3.511008557555874*^9, 3.511008564186593*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3", ",", "4", ",", "2"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.511008565183269*^9, 3.511008718827014*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluate", "[", 
  RowBox[{"correct", ",", "pks", ",", 
   RowBox[{"9999", "/", "10000"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511008593205011*^9, 3.5110086128789177`*^9}, {
  3.511008658743696*^9, 3.5110086611591043`*^9}, {3.511008723484035*^9, 
  3.511008727259886*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", "0.9999999999810076`"}], "]"}]], "Output",
 CellChangeTimes->{
  3.511008613394011*^9, 3.511008672590452*^9, {3.511008724548794*^9, 
   3.511008727916494*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluate", "[", 
  RowBox[{"beam", ",", "pks", ",", 
   RowBox[{"9999", "/", "10000"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.511008615968237*^9, 3.511008623192707*^9}, {
  3.5110086648999043`*^9, 3.511008668468174*^9}, {3.511008731828061*^9, 
  3.511008733830921*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"2", ",", "0.9999993286986165`"}], "]"}]], "Output",
 CellChangeTimes->{3.511008623681943*^9, 3.51100866922755*^9, 
  3.5110087348520603`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["7 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.511219116155064*^9, 3.511219133093357*^9}}],

Cell[CellGroupData[{

Cell["\<\
Theoretical background to cross-validation evaluation function\
\>", "Subsection",
 CellChangeTimes->{{3.511219143465796*^9, 3.5112191638533916`*^9}, {
  3.5112301127803783`*^9, 3.511230123929912*^9}, {3.5112303322740107`*^9, 
  3.5112303355828753`*^9}}],

Cell["\<\
I want to try to come up with a routine that uses cross-validation to \
evaluate model fit.  One open question is whether to use the minimum or \
average value over all folds as the evaluation.\
\>", "Text",
 CellChangeTimes->{{3.51121914865551*^9, 3.5112191764353647`*^9}, {
  3.511219936083868*^9, 3.511219957077806*^9}}],

Cell[TextData[{
 "I spent several hours calculating to discover that (if samples are in \
columns) then the shift factors (s in the paper) are the columns of the \
transformed samples and the reaction factors are the columns of the PCA \
eigenvector matrix.  If X is the mean-centered data, we have \
X=\[CapitalAlpha]S where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"A", "=", 
    RowBox[{
     SuperscriptBox["P", "T"], "=", 
     SuperscriptBox["P", 
      RowBox[{"-", "1"}]]}]}], TraditionalForm]]],
 " where P is the matrix of eigenvectors of the covariance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", 
     RowBox[{"n", "-", "1"}]], "X", " ", 
    SuperscriptBox["X", "T"]}], TraditionalForm]]],
 ".  This relationship still holds even if you grab only the most significant \
eigenvectors."
}], "Text",
 CellChangeTimes->{{3.5112297638897343`*^9, 3.511229826054237*^9}, {
  3.511229871497705*^9, 3.5112299563107643`*^9}, {3.5112299876630096`*^9, 
  3.511230023648621*^9}, {3.511230095088478*^9, 3.511230102550654*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["11-13 April 2011 Monday-Wednesday", "Section",
 CellChangeTimes->{{3.511820750724427*^9, 3.511820758155676*^9}}],

Cell["\<\
Discuss and investigate different options for version control and hosting for \
the development of the metabolomics code.\
\>", "Text",
 CellChangeTimes->{{3.511820764446878*^9, 3.511820782851989*^9}, {
  3.511821108925292*^9, 3.5118211197376823`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["14 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.511816351396853*^9, 3.511816358660035*^9}}],

Cell["Install fresh ubuntu on bio-db", "Subsection",
 CellChangeTimes->{{3.5118207247630377`*^9, 3.511820737386832*^9}}],

Cell[CellGroupData[{

Cell["Work on creating evaluation based on cross-validation", "Subsection",
 CellChangeTimes->{{3.5118163730546103`*^9, 3.511816374053586*^9}, {
  3.511820713362322*^9, 3.5118207169880133`*^9}, {3.511820789049819*^9, 
  3.5118207894091663`*^9}, {3.511821122451015*^9, 3.511821150456105*^9}}],

Cell[CellGroupData[{

Cell["\<\
First attempt is to use the expectation maximization algorithm\
\>", "Subsubsection",
 CellChangeTimes->{{3.511826577243286*^9, 3.511826591073162*^9}}],

Cell["\<\
The following is a direct translation from the paper (I didn't use the \
missing values formulation yet).  I can't get it to work\
\>", "Text",
 CellChangeTimes->{{3.5118266433248873`*^9, 3.511826687291123*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"emPCA", "[", 
   RowBox[{"y_List", ",", "numEigenvectors_Integer"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"eStep", " ", "=", " ", 
       RowBox[{"Function", "[", 
        RowBox[{"c", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ct", "=", 
             RowBox[{"Transpose", "[", "c", "]"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Inverse", "[", 
             RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}], 
          "]"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"mStep", "=", 
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"xt", "=", 
             RowBox[{"Transpose", "[", "x", "]"}]}], "}"}], ",", 
           RowBox[{"y", ".", "xt", ".", 
            RowBox[{"Inverse", "[", 
             RowBox[{"x", ".", "xt"}], "]"}]}]}], "]"}]}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"iteration", "=", 
         RowBox[{"Function", "[", 
          RowBox[{"c", ",", 
           RowBox[{"mStep", "[", 
            RowBox[{"eStep", "[", "c", "]"}], "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"initialMatrix", "=", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "1"}], "/", 
                RowBox[{"(", 
                 RowBox[{"1", "+", "numEigenvectors"}], ")"}]}], ",", 
               RowBox[{"1", "/", 
                RowBox[{"(", 
                 RowBox[{"1", "+", "numEigenvectors"}], ")"}]}]}], "}"}], ",",
              "numEigenvectors"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"Length", "[", "y", "]"}], "}"}]}], "]"}]}]}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"FixedPoint", "[", 
       RowBox[{"iteration", ",", "initialMatrix"}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51182225878246*^9, 3.511822259770529*^9}, {
  3.511822297191152*^9, 3.511822440202243*^9}, {3.51182247898211*^9, 
  3.5118227954702187`*^9}, {3.511822878737665*^9, 3.511822885244844*^9}, {
  3.511823892631011*^9, 3.5118238973028708`*^9}, {3.5118239451165133`*^9, 
  3.511823970022994*^9}, {3.511824004378869*^9, 3.511824036952547*^9}, {
  3.5118240739529753`*^9, 3.5118241106677933`*^9}, {3.51182414344217*^9, 
  3.5118241715706053`*^9}, {3.5118280536227827`*^9, 3.5118280619055367`*^9}, {
  3.5118664157756987`*^9, 3.5118664645681877`*^9}, {3.511866760553266*^9, 
  3.511866766659512*^9}, {3.511866847863205*^9, 3.511866849476807*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "testPCAValues", "]"}]], "Input",
 CellChangeTimes->{{3.511866356675618*^9, 3.511866366931859*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.5118663793106213`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["I can't get it to work because it doesn't", "Subsubsection",
 CellChangeTimes->{{3.5118280726318607`*^9, 3.511828110471066*^9}}],

Cell["\<\
Here I demonstrate symbolically that the steps given in the paper will always \
yield the same estimate for c when there are two eigenvectors for a space of \
2D points.  I, however, saw the same equations (with different letters) in \
another paper.  So, there must be something I am not understanding here.\
\>", "Text",
 CellChangeTimes->{{3.511828112365816*^9, 3.511828129038965*^9}, {
  3.511828230422995*^9, 3.5118282358501253`*^9}, {3.511828272756041*^9, 
  3.51182828578802*^9}, {3.511831714385721*^9, 3.511831745309984*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"l", ",", "m"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824743628162*^9, 3.51182476047898*^9}, {
  3.511827234371356*^9, 3.511827251534829*^9}, {3.511827289066482*^9, 
  3.511827291974543*^9}, {3.511827335632998*^9, 3.511827338272303*^9}, {
  3.5118280095942173`*^9, 3.511828012512713*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "k", ",", "e", ",", "l"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "f", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511827293070529*^9, 3.5118273389239683`*^9, 
  3.511828014230467*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"g", ",", "h"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5118242057710876`*^9, 3.511824225466058*^9}, {
  3.511827257173251*^9, 3.511827265705167*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "h"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824226611719*^9, 3.511824534133803*^9, 3.5118247651524353`*^9, 
   3.511825966034443*^9, {3.511827267414835*^9, 3.511827295049968*^9}, 
   3.511827340651195*^9, 3.511828015444652*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ct", "=", 
  RowBox[{"Transpose", "[", "c", "]"}]}]], "Input",
 CellChangeTimes->{{3.511824231039188*^9, 3.511824235937892*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "i"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"h", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824237135078*^9, 3.511824537183404*^9, 3.511824768141323*^9, 
   3.511825967765525*^9, {3.51182727023735*^9, 3.5118272962197104`*^9}, 
   3.511827341674924*^9, 3.511828016423279*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}]], "Input",
 CellChangeTimes->{{3.511824249139772*^9, 3.5118242837829247`*^9}, {
   3.511824582023341*^9, 3.511824587718305*^9}, 3.511824773195694*^9, 
   3.511825972254356*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "k"}]}], ",", 
     RowBox[{
      RowBox[{"e", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"f", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "l"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"j", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["h", "2"], "+", 
             SuperscriptBox["j", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "m"}]}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"b", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"d", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "k"}]}], ",", 
     RowBox[{
      RowBox[{"e", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}], "+", 
      RowBox[{"f", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{"h", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"g", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "l"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox[
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["g", "2"], "+", 
             SuperscriptBox["i", "2"]}], ")"}], " ", "j"}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]], "+", 
         FractionBox[
          RowBox[{"i", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "g"}], " ", "h"}], "-", 
             RowBox[{"i", " ", "j"}]}], ")"}]}], 
          RowBox[{
           RowBox[{
            SuperscriptBox["h", "2"], " ", 
            SuperscriptBox["i", "2"]}], "-", 
           RowBox[{"2", " ", "g", " ", "h", " ", "i", " ", "j"}], "+", 
           RowBox[{
            SuperscriptBox["g", "2"], " ", 
            SuperscriptBox["j", "2"]}]}]]}], ")"}], " ", "m"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5118259727397213`*^9, {3.511827272571354*^9, 3.511827298241509*^9}, 
   3.5118273470241423`*^9, 3.5118280184597178`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"xt", "=", 
   RowBox[{"Transpose", "[", "x", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.511824637378038*^9, 3.511824646094982*^9}, {
  3.5118259748194933`*^9, 3.5118259813115387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cnew", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"y", ".", "xt", ".", 
    RowBox[{"Inverse", "[", 
     RowBox[{"x", ".", "xt"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824656873125*^9, 3.511824696490347*^9}, 
   3.5118247835429077`*^9, {3.511827375302516*^9, 3.51182737840842*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"g", ",", "h"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118246751416807`*^9, 3.511824702734563*^9}, 
   3.511824785218449*^9, {3.5118273541553717`*^9, 3.511827379242393*^9}, 
   3.511828027058408*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", "cnew"}]], "Input",
 CellChangeTimes->{{3.511824707482449*^9, 3.511824709134823*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.03000510576471571`", ",", "0.04317831704160113`", ",", 
     RowBox[{"-", "0.01765818345774761`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.1493817896165539`"}], ",", "0.14485202529410213`", ",", 
     "0.2264860978978671`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.016841501264197978`"}], ",", 
     RowBox[{"-", "0.22131285820080016`"}], ",", "0.06616783233854862`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511824710952999*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"c", ",", "ct", ",", "cnew", ",", "x", ",", "xt", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511828169756722*^9, 3.511828194113166*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Here is some old code I used to test my implementation and discover that it \
didn't work\
\>", "Subsubsection",
 CellChangeTimes->{{3.511828147500149*^9, 3.5118281670148973`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPCAValues", "=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rotxy", "=", 
       RowBox[{"RotationTransform", "[", 
        RowBox[{
         RowBox[{"\[Pi]", "/", "4"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"rotxy", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "5", ",", "2"}], "}"}], " ", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"NormalDistribution", "[", 
            RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "10", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.511822913598412*^9, 3.511823004073517*^9}, {
   3.5118230460181*^9, 3.5118230637830563`*^9}, {3.511823424411964*^9, 
   3.51182358564915*^9}, 3.511823730740614*^9, {3.51182376798318*^9, 
   3.511823795175675*^9}, {3.5118259078471193`*^9, 3.5118259299211893`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], ",", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
   "testPCAValues"}], "]"}]], "Input",
 CellChangeTimes->{{3.5118230073904676`*^9, 3.511823038405684*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], 
   PointBox[{{0.18940152845302283`, 
    1.8108345229800502`}, {-0.16711705993044637`, -0.4225862210468362}, {
    4.68913098701095, -6.071686372735446}, {-1.2907148376899495`, 
    2.059342380974703}, {-1.111807659515405, 1.0889009462438664`}, {
    2.2474094241241405`, -1.3543023862311965`}, {
    4.950572262894917, -4.56128982537505}, {-5.582115718348625, 
    6.658839358540183}, {-0.17377344377904952`, 
    1.0042142401073417`}, {-0.4510127124628575, -1.2048827274712897`}}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.5118230395223703`*^9, 3.511823065602384*^9}, 
   3.511823483609436*^9, 3.511823529735321*^9, 3.511823570537191*^9, {
   3.51182377348003*^9, 3.5118237980916986`*^9}, {3.511825911565703*^9, 
   3.511825931924614*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvectors", "[", 
  RowBox[{"Covariance", "[", "testPCAValues", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51182309322336*^9, 3.511823117601553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.6450364034577876`", ",", 
     RowBox[{"-", "0.7601981946716658`"}], ",", 
     RowBox[{"-", "0.07763210052666648`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.1392118674155323`", ",", "0.017011220320279033`", ",", 
     "0.9901164953448129`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7513641555097784`", ",", "0.6494684928471548`", ",", 
     RowBox[{"-", "0.11680146665997973`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118231002692757`*^9, 3.511823118446273*^9}, 
   3.511823799355966*^9, {3.511825914367676*^9, 3.511825933114903*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emPCA", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "testPCAValues", "]"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511823128097065*^9, 3.511823135452425*^9}, {
  3.51182327405853*^9, 3.511823278497478*^9}, {3.511823330072089*^9, 
  3.511823360309957*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.1064721260971414`"}], ",", "0.2238329505071155`", ",", 
       
       RowBox[{"-", "0.15455346300164052`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1723087793945891`", ",", "0.24536488594100525`", ",", 
       "0.039545437961167496`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669771118`"}], ",", 
       RowBox[{"-", "0.07341842112114794`"}], ",", 
       RowBox[{"-", "0.1408177074356689`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609686107`"}], ",", "0.22383295050777718`", 
       ",", 
       RowBox[{"-", "0.15455346300165473`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939473288`", ",", "0.2453648859424291`", ",", 
       "0.039545437960772034`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669763813`"}], ",", 
       RowBox[{"-", "0.07341842112181407`"}], ",", 
       RowBox[{"-", "0.14081770743537803`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609674561`"}], ",", "0.22383295050893537`", 
       ",", 
       RowBox[{"-", "0.15455346300197448`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939425238`", ",", "0.24536488594146988`", ",", 
       "0.03954543796073651`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669710477`"}], ",", 
       RowBox[{"-", "0.07341842112014518`"}], ",", 
       RowBox[{"-", "0.14081770743555522`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609746326`"}], ",", "0.22383295050794771`", 
       ",", 
       RowBox[{"-", "0.15455346300218054`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939367417`", ",", "0.2453648859377182`", ",", 
       "0.03954543796161403`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669707768`"}], ",", 
       RowBox[{"-", "0.07341842111763075`"}], ",", 
       RowBox[{"-", "0.1408177074364243`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609760803`"}], ",", "0.22383295050981644`", 
       ",", 
       RowBox[{"-", "0.15455346300295858`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1723087793932363`", ",", "0.24536488593624028`", ",", 
       "0.03954543796179877`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669680324`"}], ",", 
       RowBox[{"-", "0.07341842111514119`"}], ",", 
       RowBox[{"-", "0.1408177074370931`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609712575`"}], ",", "0.22383295050973118`", 
       ",", 
       RowBox[{"-", "0.15455346300255002`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939296896`", ",", "0.24536488593667372`", ",", 
       "0.03954543796143284`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669626522`"}], ",", 
       RowBox[{"-", "0.07341842111553198`"}], ",", 
       RowBox[{"-", "0.1408177074365362`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609720924`"}], ",", "0.22383295051051988`", 
       ",", 
       RowBox[{"-", "0.15455346300289463`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939294587`", ",", "0.24536488593648187`", ",", 
       "0.03954543796148613`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669629653`"}], ",", 
       RowBox[{"-", "0.07341842111471752`"}], ",", 
       RowBox[{"-", "0.14081770743684885`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.1064721260974899`"}], ",", "0.22383295051226781`", ",", 
       RowBox[{"-", "0.15455346300373307`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939305334`", ",", "0.24536488593644634`", ",", 
       "0.039545437961585606`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669659052`"}], ",", 
       RowBox[{"-", "0.07341842111353802`"}], ",", 
       RowBox[{"-", "0.14081770743749544`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609785406`"}], ",", "0.2238329505147547`", ",", 
       RowBox[{"-", "0.15455346300489126`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939324607`", ",", "0.24536488593643213`", ",", 
       "0.03954543796173482`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2126891166969782`"}], ",", 
       RowBox[{"-", "0.0734184211118949`"}], ",", 
       RowBox[{"-", "0.14081770743837918`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609751744`"}], ",", "0.2238329505120049`", ",", 
       RowBox[{"-", "0.1545534630036549`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939336864`", ",", "0.24536488593708583`", ",", 
       "0.039545437961596264`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669680812`"}], ",", 
       RowBox[{"-", "0.07341842111416508`"}], ",", 
       RowBox[{"-", "0.14081770743744393`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.10647212609745704`"}], ",", "0.22383295051419339`", 
       ",", 
       RowBox[{"-", "0.15455346300438677`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.17230877939356137`", ",", "0.24536488593818717`", ",", 
       "0.039545437961361785`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.21268911669695045`"}], ",", 
       RowBox[{"-", "0.07341842111372632`"}], ",", 
       RowBox[{"-", "0.1408177074377086`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.511823235891837*^9, 3.511823279263089*^9, {3.511823348970051*^9, 
   3.511823360851534*^9}, 3.511823856773307*^9, 3.511823905201662*^9, {
   3.51182403357724*^9, 3.5118240478254757`*^9}, 3.511824117435596*^9, 
   3.511824178892668*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["15 April 2011 Friday", "Section",
 CellChangeTimes->{{3.5118656355005083`*^9, 3.511865640703101*^9}}],

Cell[CellGroupData[{

Cell["Try a different approach to see if EM method works", "Subsection",
 CellChangeTimes->{{3.5118280726318607`*^9, 3.511828110471066*^9}, {
   3.5118656598541594`*^9, 3.5118657141949377`*^9}, 3.511867387745481*^9}],

Cell["\<\
Maybe it didn't work because my eigenvector matrix had all included.  It \
doesn't give the same result.  Whether it converges to something or not, I'll \
have to check in the sequel.\
\>", "Text",
 CellChangeTimes->{
  3.511865723557836*^9, {3.511866247227812*^9, 3.511866266209203*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "d"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"e", ",", "f"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"l", ",", "m"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824743628162*^9, 3.51182476047898*^9}, {
  3.511827234371356*^9, 3.511827251534829*^9}, {3.511827289066482*^9, 
  3.511827291974543*^9}, {3.511827335632998*^9, 3.511827338272303*^9}, {
  3.5118280095942173`*^9, 3.511828012512713*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "k", ",", "e", ",", "l"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "d", ",", "f", ",", "m"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511827293070529*^9, 3.5118273389239683`*^9, 
  3.511828014230467*^9, 3.5118657509938583`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "g", "}"}], ",", 
    RowBox[{"{", "h", "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5118242057710876`*^9, 3.511824225466058*^9}, {
  3.511827257173251*^9, 3.511827265705167*^9}, {3.511865741216736*^9, 
  3.511865742786963*^9}, {3.511866006493957*^9, 3.511866008301683*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "g", "}"}], ",", 
   RowBox[{"{", "h", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824226611719*^9, 3.511824534133803*^9, 3.5118247651524353`*^9, 
   3.511825966034443*^9, {3.511827267414835*^9, 3.511827295049968*^9}, 
   3.511827340651195*^9, 3.511828015444652*^9, {3.511865748808923*^9, 
   3.5118657524467297`*^9}, 3.5118660089854593`*^9, 3.511866228771812*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ct", "=", 
  RowBox[{"Transpose", "[", "c", "]"}]}]], "Input",
 CellChangeTimes->{{3.511824231039188*^9, 3.511824235937892*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"g", ",", "h"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.511824237135078*^9, 3.511824537183404*^9, 3.511824768141323*^9, 
   3.511825967765525*^9, {3.51182727023735*^9, 3.5118272962197104`*^9}, 
   3.511827341674924*^9, 3.511828016423279*^9, 3.5118657538789454`*^9, {
   3.511866010422905*^9, 3.511866031779213*^9}, 3.511866090722723*^9, 
   3.511866230397913*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", 
  RowBox[{
   RowBox[{"Inverse", "[", 
    RowBox[{"ct", ".", "c"}], "]"}], ".", "ct", ".", "y"}]}]], "Input",
 CellChangeTimes->{{3.511824249139772*^9, 3.5118242837829247`*^9}, {
   3.511824582023341*^9, 3.511824587718305*^9}, 3.511824773195694*^9, 
   3.511825972254356*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "g"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"b", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"d", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"g", " ", "k"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"e", " ", "g"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"f", " ", "h"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}], ",", 
    RowBox[{
     FractionBox[
      RowBox[{"g", " ", "l"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]], "+", 
     FractionBox[
      RowBox[{"h", " ", "m"}], 
      RowBox[{
       SuperscriptBox["g", "2"], "+", 
       SuperscriptBox["h", "2"]}]]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5118259727397213`*^9, {3.511827272571354*^9, 3.511827298241509*^9}, 
   3.5118273470241423`*^9, 3.5118280184597178`*^9, 3.511865757725314*^9, {
   3.511866011848209*^9, 3.511866037613937*^9}, 3.5118660944800577`*^9, 
   3.511866232108172*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"xt", "=", 
   RowBox[{"Transpose", "[", "x", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.511824637378038*^9, 3.511824646094982*^9}, {
  3.5118259748194933`*^9, 3.5118259813115387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cnew", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"y", ".", "xt", ".", 
    RowBox[{"Inverse", "[", 
     RowBox[{"x", ".", "xt"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.511824656873125*^9, 3.511824696490347*^9}, 
   3.5118247835429077`*^9, {3.511827375302516*^9, 3.51182737840842*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["a", "2"], " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["e", "2"], " ", "g"}], "+", 
        RowBox[{"a", " ", "b", " ", "h"}], "+", 
        RowBox[{"e", " ", "f", " ", "h"}], "+", 
        RowBox[{"d", " ", "h", " ", "k"}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["k", "2"]}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["l", "2"]}], "+", 
        RowBox[{"h", " ", "l", " ", "m"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}], ",", 
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"a", " ", "b", " ", "g"}], "+", 
        RowBox[{"e", " ", "f", " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["b", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["d", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["f", "2"], " ", "h"}], "+", 
        RowBox[{"d", " ", "g", " ", "k"}], "+", 
        RowBox[{"g", " ", "l", " ", "m"}], "+", 
        RowBox[{"h", " ", 
         SuperscriptBox["m", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118246751416807`*^9, 3.511824702734563*^9}, 
   3.511824785218449*^9, {3.5118273541553717`*^9, 3.511827379242393*^9}, 
   3.511828027058408*^9, 3.5118660182275343`*^9, 3.5118660559544888`*^9, {
   3.5118662222947702`*^9, 3.511866234907547*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", "cnew"}]], "Input",
 CellChangeTimes->{{3.511824707482449*^9, 3.511824709134823*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["a", "2"], " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["e", "2"], " ", "g"}], "+", 
        RowBox[{"a", " ", "b", " ", "h"}], "+", 
        RowBox[{"e", " ", "f", " ", "h"}], "+", 
        RowBox[{"d", " ", "h", " ", "k"}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["k", "2"]}], "+", 
        RowBox[{"g", " ", 
         SuperscriptBox["l", "2"]}], "+", 
        RowBox[{"h", " ", "l", " ", "m"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}], ",", 
   RowBox[{"{", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["g", "2"], "+", 
        SuperscriptBox["h", "2"]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"a", " ", "b", " ", "g"}], "+", 
        RowBox[{"e", " ", "f", " ", "g"}], "+", 
        RowBox[{
         SuperscriptBox["b", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["d", "2"], " ", "h"}], "+", 
        RowBox[{
         SuperscriptBox["f", "2"], " ", "h"}], "+", 
        RowBox[{"d", " ", "g", " ", "k"}], "+", 
        RowBox[{"g", " ", "l", " ", "m"}], "+", 
        RowBox[{"h", " ", 
         SuperscriptBox["m", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["a", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["e", "2"], " ", 
       SuperscriptBox["g", "2"]}], "+", 
      RowBox[{"2", " ", "a", " ", "b", " ", "g", " ", "h"}], "+", 
      RowBox[{"2", " ", "e", " ", "f", " ", "g", " ", "h"}], "+", 
      RowBox[{
       SuperscriptBox["b", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["d", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["f", "2"], " ", 
       SuperscriptBox["h", "2"]}], "+", 
      RowBox[{"2", " ", "d", " ", "g", " ", "h", " ", "k"}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["k", "2"]}], "+", 
      RowBox[{
       SuperscriptBox["g", "2"], " ", 
       SuperscriptBox["l", "2"]}], "+", 
      RowBox[{"2", " ", "g", " ", "h", " ", "l", " ", "m"}], "+", 
      RowBox[{
       SuperscriptBox["h", "2"], " ", 
       SuperscriptBox["m", "2"]}]}]], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.511824710952999*^9, 3.51186602753262*^9, 
  3.511866080730216*^9, 3.511866238298141*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"c", ",", "ct", ",", "cnew", ",", "x", ",", "xt", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511828169756722*^9, 3.511828194113166*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
I tried testing the EM method with fewer eigenvectors \[LongDash] it still \
doesn't work\
\>", "Subsection",
 CellChangeTimes->{{3.511828147500149*^9, 3.5118281670148973`*^9}, {
  3.5118670805656233`*^9, 3.5118670866150703`*^9}, {3.51186727406637*^9, 
  3.5118672956229677`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPCAValues", "=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rotxy", "=", 
       RowBox[{"RotationTransform", "[", 
        RowBox[{
         RowBox[{"\[Pi]", "/", "4"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"rotxy", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "5", ",", "2"}], "}"}], " ", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"NormalDistribution", "[", 
            RowBox[{"0", ",", "1"}], "]"}], ",", "3"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", "20", "}"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.511822913598412*^9, 3.511823004073517*^9}, {
   3.5118230460181*^9, 3.5118230637830563`*^9}, {3.511823424411964*^9, 
   3.51182358564915*^9}, 3.511823730740614*^9, {3.51182376798318*^9, 
   3.511823795175675*^9}, {3.5118259078471193`*^9, 3.5118259299211893`*^9}, 
   3.51186658086516*^9, {3.511866714431807*^9, 3.511866724405883*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], ",", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
   "testPCAValues"}], "]"}]], "Input",
 CellChangeTimes->{{3.5118230073904676`*^9, 3.511823038405684*^9}}],

Cell[BoxData[
 GraphicsBox[
  {Hue[0.67, 0.6, 0.6], PointBox[CompressedData["
1:eJwBUQGu/iFib1JlAgAAABQAAAACAAAAipUEWCJmC0CEvdZ1WtQQwKBto359
0iDApi8D+F4VI0A6GPC7E3oAQIXVO7SiefG/0xxJ0gWEEUBxvip1qP4LwHQ0
TahfLxvAoL27itRPCkB+izdIyxoQwGgnALSTvQFA4JfGODT5D8BUzKE9Y9YP
QAS3KaKN1Pq/7uFFW7Z9CUA0fB84qdL/Pyyhe4L06fe/dxYyvd8567/mp9dw
+jXxPyslcWagz/y/ltUNo2OxAUCHQigFKschwA7J66po+x9AfEkGgvqw4L9+
1FmSE5n4P2hnAGCqiAzA9Dc/AfeDBEAGpc767C34P6xg+5k27Oa/UuEGhtZO
0L/MKvzep2j2P/SIGnJcUwVAWJoPkkfy+b/bLoXqoScSwNNbvLobTBVA+nN7
8Wp3+b96TY545d/RPxvf5oKA+AxAw70rwxpACMCTC6EC
    "]]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  PlotRange->Automatic,
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{{3.5118230395223703`*^9, 3.511823065602384*^9}, 
   3.511823483609436*^9, 3.511823529735321*^9, 3.511823570537191*^9, {
   3.51182377348003*^9, 3.5118237980916986`*^9}, {3.511825911565703*^9, 
   3.511825931924614*^9}, 3.51186630487007*^9, 3.511866593215919*^9, {
   3.5118667157595387`*^9, 3.511866725867012*^9}, 3.511866809489738*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvectors", "[", 
  RowBox[{"Covariance", "[", "testPCAValues", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51182309322336*^9, 3.511823117601553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7404896823905587`"}], ",", "0.672053884915989`", ",", 
     RowBox[{"-", "0.004313472204141603`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.023620370280576626`", ",", "0.032438825228843365`", ",", 
     "0.9991945760088878`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6716525205647171`"}], ",", 
     RowBox[{"-", "0.7397913884245338`"}], ",", "0.039894777001044754`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5118231002692757`*^9, 3.511823118446273*^9}, 
   3.511823799355966*^9, {3.511825914367676*^9, 3.511825933114903*^9}, 
   3.511866307615197*^9, 3.51186659047123*^9, {3.511866717289679*^9, 
   3.511866727208481*^9}, 3.511866813049716*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emPCA", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "testPCAValues", "]"}], ",", "1"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.511823128097065*^9, 3.511823135452425*^9}, {
  3.51182327405853*^9, 3.511823278497478*^9}, {3.511823330072089*^9, 
  3.511823360309957*^9}, {3.511866309884387*^9, 3.511866310223401*^9}, {
  3.511866837203855*^9, 3.511866841561882*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{
  3.511823235891837*^9, 3.511823279263089*^9, {3.511823348970051*^9, 
   3.511823360851534*^9}, 3.511823856773307*^9, 3.511823905201662*^9, {
   3.51182403357724*^9, 3.5118240478254757`*^9}, 3.511824117435596*^9, 
   3.511824178892668*^9, 3.5118663782688*^9, 3.511866471743322*^9, 
   3.51186660242815*^9, {3.5118667095616903`*^9, 3.511866718943942*^9}, 
   3.511866778125751*^9, {3.511866818532917*^9, 3.511866868925498*^9}, 
   3.511867049731161*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tried writing cross-validation without using missing values", \
"Subsection",
 CellChangeTimes->{{3.5118674205047913`*^9, 3.511867441497856*^9}}],

Cell[TextData[{
 "This section also includes work I did on 19 April.  It relies on the \
description of PCA and SVD given in",
 StyleBox[" Practical approaches to principal component analysis in the \
presence of missing values",
  FontSlant->"Italic"],
 " by Ilin and Raiko.  That description is available in many places, but I \
wanted to note where I got it."
}], "Text",
 CellChangeTimes->{{3.512213113017078*^9, 3.5122131206921*^9}, {
  3.512213272681509*^9, 3.512213341200807*^9}, {3.5122133762170963`*^9, 
  3.5122133877471867`*^9}}],

Cell["\<\
This section also includes bug fixes from 21 April and 22 April\
\>", "Text",
 CellChangeTimes->{{3.512383318443296*^9, 3.512383333064789*^9}, {
   3.5124727816296253`*^9, 3.512472784129084*^9}, 3.512472966331161*^9, {
   3.512475627675312*^9, 3.5124756308990583`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wxDecompose", "::", "usage"}], "=", 
   "\"\<wxDecompose[matrix,fracVar,minComponents]\nGiven a matrix whose \
columns have data and whose rows have zero mean, decomposes it into W and X \
so that W.X\[TildeTilde]the original matrix and they have at least \
minComponents dimensions and sufficient dimensions to capture fracVar \
fraction of the variance \n\nSee 19 April 2011 for how wx decomposition \
relates to sample and peak parameter sets\n\nReturns {W,X}\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.51187433405383*^9, 3.511874428767314*^9}, {
  3.512214411033833*^9, 3.512214429702531*^9}, {3.5124863836306047`*^9, 
  3.5124864248269*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"wxDecompose", "[", 
    RowBox[{"matrix_List", ",", "fracVar_", ",", 
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{"Dimensions", "[", "matrix", "]"}], "]"}], "\[Equal]", "2"}], "&&", 
    RowBox[{"NumberQ", "[", "fracVar", "]"}]}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"svd", "=", 
      RowBox[{"SingularValueDecomposition", "[", "matrix", "]"}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"u", "=", 
         RowBox[{"svd", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"\[CapitalSigma]", "=", 
         RowBox[{"svd", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
        RowBox[{"vt", "=", 
         RowBox[{"ConjugateTranspose", "[", 
          RowBox[{"svd", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"numSing", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"svd", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"singularValues", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[CapitalSigma]", "[", 
              RowBox[{"[", 
               RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
            RowBox[{"Range", "[", "numSing", "]"}]}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"fracVariances", "=", 
            RowBox[{"Normalize", "[", 
             RowBox[{
              RowBox[{"singularValues", " ", "singularValues"}], ",", 
              "Total"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"cumulativeVars", "=", 
              RowBox[{"Accumulate", "[", "fracVariances", "]"}]}], "}"}], ",",
             "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"componentsForFracvar", "=", 
                RowBox[{"First", "[", 
                 RowBox[{"First", "[", 
                  RowBox[{"Position", "[", 
                   RowBox[{"cumulativeVars", ",", 
                    RowBox[{"x_", "/;", 
                    RowBox[{"x", "\[GreaterEqual]", "fracVar"}]}], ",", "1"}],
                    "]"}], "]"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
              
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"componentsRequired", "=", 
                  RowBox[{"Max", "[", 
                   RowBox[{"minComponents", ",", "componentsForFracvar"}], 
                   "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{"With", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"w", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "u", "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "componentsRequired", "]"}], "]"}], 
                    "]"}], "]"}]}], ",", 
                    RowBox[{"x", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[CapitalSigma]", ".", "vt"}], ")"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"Range", "[", "componentsRequired", "]"}], "]"}], 
                    "]"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"{", 
                   RowBox[{"w", ",", "x"}], "}"}]}], "\[IndentingNewLine]", 
                 "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511872836935199*^9, 3.511873052256298*^9}, {
   3.51187309571113*^9, 3.5118731428736677`*^9}, {3.511873179462064*^9, 
   3.511873200107635*^9}, 3.511873252743943*^9, {3.511873293406554*^9, 
   3.5118732954100113`*^9}, {3.511873430917823*^9, 3.511873445028585*^9}, {
   3.511874006348283*^9, 3.5118740079462*^9}, {3.511874214256291*^9, 
   3.511874311517632*^9}, {3.512235641071343*^9, 3.512235651803873*^9}, {
   3.5122357827226954`*^9, 3.512235794154726*^9}, {3.512239855815856*^9, 
   3.512239896719326*^9}, {3.512383345381628*^9, 3.512383345865201*^9}, {
   3.512486284508099*^9, 3.5124862950222387`*^9}, {3.512486435668827*^9, 
   3.5124864419915037`*^9}, {3.512486505120953*^9, 3.5124865543374767`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reactionParameters", "::", "usage"}], "=", 
   "\"\<reactionParameters[positions,excludedSamples,fracVar,minComponents]\n\
Calculates the reaction parameters for each peak using SVD based PCA given a \
set of corresponding peak positions.  Samples at indices given by \
excludedSamples are not used to create the estimatereactionParameters\n\n\
positions is an array of dimensions samples\[Cross]peaks\n\nReturns \
{means,reactionCoefficients} where means is a 1\[Cross]peaks array and \
reactionCoefficients is a peaks\[Cross]d array where d is the number of \
components needed to get fracVar fraction of the variance or minComponents, \
whichever is larger\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867862249156*^9, 3.5118679750181847`*^9}, {
   3.511868047044405*^9, 3.5118682344055157`*^9}, {3.511868289001177*^9, 
   3.511868373435944*^9}, 3.511868666853695*^9, {3.511869029087685*^9, 
   3.511869035118875*^9}, {3.511869079639963*^9, 3.511869085392963*^9}, 
   3.511869150053361*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"reactionParameters", "[", 
    RowBox[{
    "positions_List", ",", " ", "excludedSamples_List", ",", "fracVar_", ",", 
     
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"includedSamples", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "positions", "]"}], "]"}], ",", 
        "excludedSamples"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"editedPositions", "=", 
        RowBox[{"positions", "[", 
         RowBox[{"[", "includedSamples", "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"means", "=", 
          RowBox[{"Mean", "[", "editedPositions", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"meanCenteredPos", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "-", "means"}], "&"}], ",", "editedPositions"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"wxd", "=", 
              RowBox[{"wxDecompose", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "meanCenteredPos", "]"}], ",", 
                "fracVar", ",", "minComponents"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"w", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                RowBox[{"x", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{"means", ",", " ", "w"}], "}"}]}], 
             "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867634809342*^9, 3.5118676887450666`*^9}, {
   3.511867783773283*^9, 3.511867848347035*^9}, {3.511867981102407*^9, 
   3.5118679951572323`*^9}, {3.511868335114819*^9, 3.511868365203348*^9}, {
   3.51186882804211*^9, 3.511868853335334*^9}, {3.511868976255762*^9, 
   3.51186900669958*^9}, {3.511869038982575*^9, 3.5118690420521603`*^9}, {
   3.511872130454726*^9, 3.5118721425715523`*^9}, {3.511872173450019*^9, 
   3.511872343378471*^9}, {3.511872431097919*^9, 3.511872527906323*^9}, {
   3.511872574295742*^9, 3.5118726769177227`*^9}, {3.511872707033804*^9, 
   3.5118727622113543`*^9}, 3.511872884925878*^9, {3.5118744614287157`*^9, 
   3.511874511103971*^9}, {3.5122343213505163`*^9, 3.51223434875383*^9}, {
   3.51247280172294*^9, 3.512472843515829*^9}, {3.512475489937388*^9, 
   3.512475526571883*^9}, {3.5124755737702017`*^9, 3.512475641317971*^9}, {
   3.5124829159321337`*^9, 3.5124829175480843`*^9}, {3.512485939569365*^9, 
   3.512485950945801*^9}, {3.512486120135434*^9, 3.512486129623007*^9}, 
   3.5124861774897423`*^9, {3.512486209715159*^9, 3.512486263822072*^9}, {
   3.512486363330021*^9, 3.5124863670031843`*^9}, {3.51248647415965*^9, 
   3.512486484374013*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleParameters", "::", "usage"}], "=", 
   "\"\<sampleParameters[positions,excludedPeaks,fracVar,minComponents]\n\
Calculates the reaction parameters for each peak using SVD based PCA given a \
set of corresponding peak positions.  peaks at indices given by excludedPeaks \
are not used to create the estimate\n\npositions is an array of dimensions \
samples\[Cross]peaks\n\nReturns sampleCoefficients, a d\[Cross]samples array \
where d is the number of components needed to get fracVar fraction of the \
variance or minComponents, whichever is larger\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867862249156*^9, 3.5118679750181847`*^9}, {
   3.511868047044405*^9, 3.5118682344055157`*^9}, {3.511868289001177*^9, 
   3.511868373435944*^9}, {3.511868481125922*^9, 3.51186851183703*^9}, {
   3.511868584589797*^9, 3.5118686159195633`*^9}, 3.511868663802155*^9, {
   3.51186901800113*^9, 3.511869025606139*^9}, {3.511869069288373*^9, 
   3.5118690765660667`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleParameters", "[", 
    RowBox[{
    "positions_List", ",", " ", "excludedPeaks_List", ",", "fracVar_", ",", 
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"includedPeaks", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{
          RowBox[{"Dimensions", "[", "positions", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "excludedPeaks"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"editedPositions", "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", "positions", "]"}], "[", 
          RowBox[{"[", "includedPeaks", "]"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"means", "=", 
          RowBox[{"Mean", "[", "editedPositions", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"meanCenteredPos", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "-", "means"}], "&"}], ",", "editedPositions"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"wxd", "=", 
              RowBox[{"wxDecompose", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "meanCenteredPos", "]"}], ",", 
                "fracVar", ",", "minComponents"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"w", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                RowBox[{"x", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
              "\[IndentingNewLine]", "x"}], "\[IndentingNewLine]", "]"}]}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867634809342*^9, 3.5118676887450666`*^9}, {
  3.511867783773283*^9, 3.511867848347035*^9}, {3.511867981102407*^9, 
  3.5118679951572323`*^9}, {3.511868335114819*^9, 3.511868365203348*^9}, {
  3.511868642985024*^9, 3.51186865547156*^9}, {3.511868859403586*^9, 
  3.511868866086565*^9}, {3.511869055920473*^9, 3.511869063159749*^9}, {
  3.512234364908141*^9, 3.512234427291312*^9}, {3.512234459916006*^9, 
  3.5122344734711*^9}, {3.512475644526998*^9, 3.5124756915370827`*^9}, {
  3.5124828478110228`*^9, 3.512482897106379*^9}, {3.512486579955283*^9, 
  3.512486584439505*^9}, {3.512487653476987*^9, 3.512487654842448*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"evaluationExcludingData", "::", "usage"}], "=", 
   "\"\<estimationError[positions,testSamples,testPeaks,fracVar]\nReturns an \
evaluation object from estimating the testPeaks peaks in the testSamples \
samples using the data from the rest of the corresponding peak positions and \
the hough-transform linear model - in this case, gives negative root sum of \
squared error (rather than variance accounted for) and the number of \
dimensions required to get it\n\nLIMITATION: does not handle the case where \
the number of principal components in one direction is greater than the \
number of training variables in the other direction (and thus greater than \
the maximum number of variables the other can supply) -- TODO: need to fix \
this\n\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.51186915593705*^9, 3.511869175936789*^9}, {
  3.511869300368232*^9, 3.5118694043359623`*^9}, {3.511869587703101*^9, 
  3.511869723905116*^9}, {3.511871437814871*^9, 3.51187146317939*^9}, {
  3.511871734224078*^9, 3.511871743947302*^9}, {3.511872022219335*^9, 
  3.511872080667845*^9}, {3.5124924374460363`*^9, 3.512492506543954*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"evaluationExcludingData", "[", 
     RowBox[{
     "positions_List", ",", " ", "testSamples_List", ",", " ", 
      "testPeaks_List", ",", " ", "fracVar_"}], "]"}], "/;", 
    RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sampCoeff", "=", 
        RowBox[{"sampleParameters", "[", 
         RowBox[{"positions", ",", "testPeaks", ",", "fracVar"}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"reactCoeff", "=", 
        RowBox[{"reactionParameters", "[", 
         RowBox[{"positions", ",", "testSamples", ",", "fracVar"}], "]"}]}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reactCompNeeded", "=", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"reactCoeff", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"sampCompNeeded", "=", 
          RowBox[{"Length", "[", "sampCoeff", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"reactCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reactCompNeeded", "<", "sampCompNeeded"}], ",", 
           RowBox[{"reactionParameters", "[", 
            RowBox[{
            "positions", ",", "testSamples", ",", "fracVar", ",", 
             "sampCompNeeded"}], "]"}], ",", "reactCoeff"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sampCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"sampCompNeeded", "<", "reactCompNeeded"}], ",", 
           RowBox[{"sampleParameters", "[", 
            RowBox[{
            "positions", ",", "testPeaks", ",", "fracVar", ",", 
             "reactCompNeeded"}], "]"}], ",", "sampCoeff"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"estimatedPositions", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "+", 
                RowBox[{"First", "[", "reactCoeff", "]"}]}], "&"}], ",", 
              RowBox[{"Transpose", "[", 
               RowBox[{
                RowBox[{"reactCoeff", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ".", "sampCoeff"}], "]"}]}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"errors", "=", 
               RowBox[{"positions", "-", "estimatedPositions"}]}], ",", 
              RowBox[{"prinCompNeeded", "=", 
               RowBox[{"Max", "[", 
                RowBox[{"reactCompNeeded", ",", "sampCompNeeded"}], "]"}]}]}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"testErrors", "=", 
                RowBox[{"Transpose", "[", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"errors", "[", 
                    RowBox[{"[", "testSamples", "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "testPeaks", "]"}], "]"}], "]"}]}], "}"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"evaluation", "[", 
               RowBox[{"prinCompNeeded", ",", 
                RowBox[{"-", 
                 RowBox[{"Norm", "[", 
                  RowBox[{"testErrors", ",", "\"\<Frobenius\>\""}], "]"}]}]}],
                "]"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511868706674631*^9, 3.511868734809435*^9}, {
   3.5118688724096203`*^9, 3.51186888396852*^9}, {3.511869049305642*^9, 
   3.511869049961523*^9}, {3.511869675792551*^9, 3.511869679776599*^9}, {
   3.5118697581441393`*^9, 3.511869902015358*^9}, {3.511869965518659*^9, 
   3.51186998577255*^9}, {3.511870016154146*^9, 3.5118700204960833`*^9}, {
   3.5118701056745768`*^9, 3.5118701270589657`*^9}, {3.5118701683964043`*^9, 
   3.511870393826042*^9}, {3.5118704728662777`*^9, 3.511870492173098*^9}, {
   3.511870718629366*^9, 3.511870857068286*^9}, {3.511870887436969*^9, 
   3.511870970278597*^9}, 3.511871004055237*^9, {3.511871328529257*^9, 
   3.511871351767191*^9}, {3.5118714429595127`*^9, 3.511871593325675*^9}, {
   3.511871678173822*^9, 3.511871703938517*^9}, 3.511872048104251*^9, {
   3.511872090190297*^9, 3.5118721016799803`*^9}, 3.512494935451405*^9, {
   3.5124960778811417`*^9, 3.512496082752798*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["18 April 2011 Monday", "Section",
 CellChangeTimes->{{3.51220762555131*^9, 3.512207629961317*^9}}],

Cell[CellGroupData[{

Cell["\<\
Investigate using techniques from compressed sampling for peak matching\
\>", "Subsection",
 CellChangeTimes->{{3.512207634529702*^9, 3.5122076371298923`*^9}, {
  3.5122077053709173`*^9, 3.5122077077630463`*^9}, {3.512207738953519*^9, 
  3.51220775512346*^9}}],

Cell[CellGroupData[{

Cell["The technique", "Subsubsection",
 CellChangeTimes->{{3.5122098023327513`*^9, 3.512209804186956*^9}}],

Cell["\<\
Compressed sampling reconstructs a sparse coefficient matrix from a random \
sample of a signal.  Let f be a big vector containing the signal.  We assume \
that there is a basis in which f  is sparse, that is, if \[Beta] is a matrix \
of basis vectors and c is a sparse matrix of coefficients.\
\>", "Text",
 CellChangeTimes->{{3.5122078737934313`*^9, 3.512207886173491*^9}, {
  3.5122079190913143`*^9, 3.512207932001313*^9}, {3.512208457862558*^9, 
  3.512208460573002*^9}, {3.512208515561674*^9, 3.512208591030822*^9}}],

Cell["f=\[Beta] c", "Text",
 CellChangeTimes->{{3.5122085979642887`*^9, 3.5122086016033573`*^9}}],

Cell["\<\
Further, if \[Phi] is a sampling operator matrix (could be a subset of the \
identity matrix, for a random sample, or could be another matrix involving \
sampling averages of several function values) we can construct b, a sample of \
f, by writing\
\>", "Text",
 CellChangeTimes->{{3.512208606372451*^9, 3.51220866005823*^9}, {
  3.512208818657545*^9, 3.512208889443869*^9}}],

Cell["b=\[Phi] f", "Text",
 CellChangeTimes->{
  3.5122088083053637`*^9, {3.512208891448607*^9, 3.512208897664283*^9}}],

Cell["\<\
Note that \[Phi] has to carry a significant amount of information.  For \
example, if all the entries in \[Phi] are the same, then each sample adds no \
new information, and the problem cannot be solved.  If the samples all come \
from the beginning of the signal, then certain components may not be able to \
be reconstructed (this will depend on how the information about the signal is \
spread over the sparse basis vectors).\
\>", "Text",
 CellChangeTimes->{{3.5122089010727873`*^9, 3.5122089294666977`*^9}, {
  3.512208965303339*^9, 3.512208965607153*^9}, {3.512209087134952*^9, 
  3.5122091146867228`*^9}, {3.512209219031986*^9, 3.5122092389097767`*^9}, {
  3.5122092757540216`*^9, 3.512209334776148*^9}, {3.512209416957448*^9, 
  3.512209452962159*^9}}],

Cell["The reconstruction takes place by solving for", "Text",
 CellChangeTimes->{{3.512209472508246*^9, 3.512209486536283*^9}}],

Cell["\<\
A x = b where A = \[Phi] \[Beta], that is, where A is a sample of the basis \
vectors.  \
\>", "Text",
 CellChangeTimes->{{3.512209489801694*^9, 3.512209613336532*^9}, 
   3.5122096658299303`*^9}],

Cell["\<\
Then we approximate f by f \[TildeTilde] \[Beta] x.\
\>", "Text",
 CellChangeTimes->{{3.512209615162644*^9, 3.512209651815868*^9}}],

Cell[TextData[{
 "Since the sampling matrix takes a very small subset of the original \
vectors, the system of equations, A x = b is underdetermined.  The magic of \
the compressed reconstruction is to assume that c is sparse.  Then it turns \
out that (1) maximizing sparsity usually gives a unique solution (2) that \
solution is highly likely to be the correct one (3) you can maximize sparsity \
by minimizing the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " norm of x with the linear constraints given by A and b."
}], "Text",
 CellChangeTimes->{{3.5122096560411*^9, 3.512209794663268*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why I was interested", "Subsubsection",
 CellChangeTimes->{{3.512209808556814*^9, 3.512209811455234*^9}}],

Cell["\<\
I saw a linear combination involving a sparse matrix and thought such a \
linear combination resembles what we are doing.  In particular a permutation \
matrix is a sparse matrix and the \[Beta] matrix bears a resemblance to the \
linear model\
\>", "Text",
 CellChangeTimes->{{3.512209812982006*^9, 3.51220984002022*^9}, {
  3.512209909116531*^9, 3.512209934758561*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why I don't think it will work now", "Subsubsection",
 CellChangeTimes->{{3.512209952194242*^9, 3.512209958523588*^9}}],

Cell["\<\
The technique requires knowing a sampling matrix and the matrix of basis \
vectors, or, at least their product.  This doesn't seem to translate well to \
our problem where we'd have to a priori know the linear model (peak responses \
and sample parameters) which would take the place of the basis vectors.\
\>", "Text",
 CellChangeTimes->{{3.512210048978149*^9, 3.512210154429014*^9}, {
  3.512210224612221*^9, 3.5122102460044947`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Potential profit", "Subsubsection",
 CellChangeTimes->{{3.5122102587837877`*^9, 3.512210261192203*^9}}],

Cell[TextData[{
 "The idea of being able to solve for the permutation by minimizing the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " norm of a particular matrix with constraints determined by the peak \
samples is still intriguing to me.  I have a feeling I might be able to make \
something out of this."
}], "Text",
 CellChangeTimes->{{3.512210264968317*^9, 3.5122102976150217`*^9}, {
  3.512210329183045*^9, 3.51221035805725*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Meet with Dan and Paul", "Subsection",
 CellChangeTimes->{{3.512207757783503*^9, 3.512207765851366*^9}}],

Cell["\<\
We discussed moving from sending matlab scripts around to sending \
platform-dependent executables.\
\>", "Text",
 CellChangeTimes->{{3.512210380453668*^9, 3.5122104113530807`*^9}}],

Cell["\<\
The scientists have trouble finding which thing they should click on to \
accomplish their tasks amid the myriad of .m files.\
\>", "Text",
 CellChangeTimes->{{3.512210413019143*^9, 3.512210442356997*^9}}],

Cell["\<\
In order to do the deployment, we'll have VMs of Linux, Windows, and OS X \
running.  We run the Matlab deployment in each of these.\
\>", "Text",
 CellChangeTimes->{{3.512210445769054*^9, 3.5122104599469852`*^9}, {
  3.512211148321204*^9, 3.512211172437559*^9}}],

Cell["\<\
Further, for our development of the website code, we'll distribute a VM \
containing an ubuntu system on which rails etc has been already configured.  \
Then the current code can be downloaded into this VM and developers can run \
it within the VM, all having the same setup as the final deployment platform. \
 We may just run the final deployment as another instance of this VM.  But \
not sure if it would be too slow.  The benefits of VMWare and VirtualBox were \
discussed and it seems (from a cursory inspection of benchmarks) that they \
are the same.  Dan, however, has a bad experience running a game-server on \
VirtualBox, but it worked better under VMWare.\
\>", "Text",
 CellChangeTimes->{{3.512211175457575*^9, 3.512211234631885*^9}, {
  3.512211347097892*^9, 3.512211449292729*^9}}],

Cell["\<\
In order to run the deployment virtual machines on the development server, we \
decided to install ubuntu desktop (since virtualbox apparently can't run \
without an x server).  I'm not sure about that, but I don't do system \
administration.\
\>", "Text",
 CellChangeTimes->{{3.512212733028454*^9, 3.512212749242679*^9}, {
  3.512212795162965*^9, 3.512212867755122*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["19 April 2011 Tuesday", "Section",
 CellChangeTimes->{{3.512212881224852*^9, 3.5122128857140427`*^9}}],

Cell[CellGroupData[{

Cell["Cross-validation evaluation fit", "Subsection",
 CellChangeTimes->{{3.5122129008283863`*^9, 3.512212904876568*^9}, {
  3.512213027789164*^9, 3.512213064449731*^9}, {3.512234952090103*^9, 
  3.512234970901031*^9}}],

Cell[CellGroupData[{

Cell["Completed existing code", "Subsubsection",
 CellChangeTimes->{{3.512234928835568*^9, 3.5122349417455387`*^9}}],

Cell[TextData[{
 "I modified the code for cross validation under April ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["15", "th"], TraditionalForm]]],
 ".  Made it functional"
}], "Text",
 CellChangeTimes->{{3.512213067957254*^9, 3.512213102575041*^9}, {
  3.512234898686433*^9, 3.5122349057912493`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bench Tested", "Subsubsection",
 CellChangeTimes->{{3.512234936397044*^9, 3.51223494648011*^9}}],

Cell[CellGroupData[{

Cell["wxDecompose", "Subsubsubsection",
 CellChangeTimes->{{3.512235400666326*^9, 3.512235425095306*^9}}],

Cell[CellGroupData[{

Cell["Combining gives back initial matrix", "Subsubsubsubsection",
 CellChangeTimes->{{3.51237994415739*^9, 3.512379949597342*^9}}],

Cell["\<\
Check that combining the decomposition gives us back our initial matrix\
\>", "Text",
 CellChangeTimes->{{3.512236690815798*^9, 3.5122367096767797`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], " ", "=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
         RowBox[{"3", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
         RowBox[{"2", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", "=", 
        RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mc", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"wxDecompose", "[", 
         RowBox[{"mc", ",", "1"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512235067742722*^9, 3.512235142996434*^9}, {
  3.512235206130992*^9, 3.512235320401341*^9}, {3.512235432615212*^9, 
  3.512235539998122*^9}, {3.512236573654295*^9, 3.512236574094975*^9}, {
  3.512236660879538*^9, 3.512236662878117*^9}, {3.512239641118102*^9, 
  3.51223964174113*^9}, {3.512239680156008*^9, 3.51223968111383*^9}, {
  3.5122397269837837`*^9, 3.512239733342594*^9}, {3.5122400921856127`*^9, 
  3.512240101895694*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox["3", 
        RowBox[{"2", " ", 
         SqrtBox["5"]}]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox["1", 
        RowBox[{"2", " ", 
         SqrtBox["5"]}]]}], "}"}], ",", 
     RowBox[{"{", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]], "}"}], ",", 
     RowBox[{"{", 
      FractionBox["3", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      SqrtBox["5"], ",", 
      RowBox[{"3", " ", 
       SqrtBox["5"]}], ",", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512235489000155*^9, 3.5122355108879833`*^9}, 
   3.512235541377232*^9, 3.512235663978362*^9, 3.512235697359226*^9, 
   3.51223580375412*^9, 3.512236665394104*^9, 3.512239642228258*^9, 
   3.5122396818805304`*^9, 3.5122397341740513`*^9, 3.512239772653172*^9, 
   3.512239817886245*^9, 3.512239870610386*^9, 3.512239919927115*^9, 
   3.5122399566348467`*^9, 3.512240102503952*^9}]
}, Open  ]],

Cell["Here is the original matrix", "Text",
 CellChangeTimes->{{3.512240012077417*^9, 3.512240015298099*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "mc"}], "\[IndentingNewLine]", "]"}]}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.512240002014921*^9, 3.512240003728387*^9}, {
  3.51224014279405*^9, 3.512240143377778*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["9", "2"]}], ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["9", "2"], ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5122400054129972`*^9}]
}, Open  ]],

Cell["Here is w.x", "Text",
 CellChangeTimes->{{3.512240021687048*^9, 3.5122400235244217`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"w", ".", "x"}]], "Input",
 CellChangeTimes->{{3.5122358427751293`*^9, 3.5122358437791367`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["9", "2"]}], ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "2"]}], ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", 
     FractionBox["3", "2"], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["3", "2"], ",", 
     FractionBox["9", "2"], ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512235844298132*^9, 3.5122366338708878`*^9, 
  3.512239686323502*^9, 3.512239807374701*^9, 3.512239963241531*^9}]
}, Open  ]],

Cell["\<\
It is the eigenvectors of mc (the mean centered matrix) times its transpose.\
\>", "Text",
 CellChangeTimes->{{3.512251252255515*^9, 3.51225127945712*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Normalize", "/@", 
        RowBox[{"Eigenvectors", "[", 
         RowBox[{"mc", ".", 
          RowBox[{"Transpose", "[", "mc", "]"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["3", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]]}], ",", 
     RowBox[{"-", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["5"]}]]}], ",", 
     FractionBox["1", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]], ",", 
     FractionBox["3", 
      RowBox[{"2", " ", 
       SqrtBox["5"]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["2"]], ",", "0", ",", "0", ",", 
     FractionBox["1", 
      SqrtBox["2"]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", 
      SqrtBox["10"]], ",", "0", ",", 
     FractionBox["3", 
      SqrtBox["10"]], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", 
       SqrtBox["10"]]}], ",", 
     FractionBox["3", 
      SqrtBox["10"]], ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512240155625193*^9, 3.5122401871527853`*^9}, {
  3.512240218840249*^9, 3.5122402290425577`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"3", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
       RowBox[{"2", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Covariance", "[", "p", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512238409921771*^9, 3.5122384310141983`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8", ",", "12", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512238413011178*^9, 3.5122384315870657`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"3", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
       RowBox[{"2", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"Covariance", "[", 
    RowBox[{"Transpose", "[", "p", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512238409921771*^9, 3.5122384310141983`*^9}, {
  3.512240610650231*^9, 3.512240613248901*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["5", "3"], ",", "5", ",", 
     FractionBox["10", "3"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "15", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["10", "3"], ",", "10", ",", 
     FractionBox["20", "3"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512238413011178*^9, 3.5122384315870657`*^9}, 
   3.512240614145204*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
         RowBox[{"3", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
         RowBox[{"2", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", "=", 
        RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"mc", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"mc", ".", 
         RowBox[{"Transpose", "[", "mc", "]"}]}]}], "\[IndentingNewLine]", 
       "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}, {
  3.5122406446482277`*^9, 3.512240645374517*^9}, {3.512240744645268*^9, 
  3.5122408180691643`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["63", "2"], ",", 
     FractionBox["21", "2"], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["63", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["21", "2"], ",", 
     FractionBox["7", "2"], ",", 
     RowBox[{"-", 
      FractionBox["7", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["7", "2"]}], ",", 
     FractionBox["7", "2"], ",", 
     FractionBox["21", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["63", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["21", "2"]}], ",", 
     FractionBox["21", "2"], ",", 
     FractionBox["63", "2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512240645946641*^9, {3.5122407455373583`*^9, 3.5122408186552258`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"3", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], ",", 
        RowBox[{"2", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], "}"}], 
      "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", "=", 
       RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mc", "=", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Transpose", "[", "mc", "]"}], ".", "mc"}]}], 
      "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5122382683615217`*^9, 3.512238276672599*^9}, {
  3.512238310454486*^9, 3.512238311107246*^9}, {3.512238425607732*^9, 
  3.512238425992701*^9}, {3.512238498416185*^9, 3.5122385484586163`*^9}, {
  3.512238614387288*^9, 3.512238620058106*^9}, {3.512239749199916*^9, 
  3.512239750041781*^9}, {3.512240118888134*^9, 3.512240228402319*^9}, {
  3.5122406446482277`*^9, 3.512240645374517*^9}, {3.512240690192177*^9, 
  3.5122406979503193`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "15", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", "45", ",", "30"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "30", ",", "20"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512240698964127*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Try to recover w and x from w.x", "Subsubsubsubsection",
 CellChangeTimes->{{3.51238055045829*^9, 3.5123805647255707`*^9}}],

Cell["\<\
Looking at it later, this is a fool's errand - you need to make sure that the \
maximum variance is along the axes before you can recover the matrices\
\>", "Text",
 CellChangeTimes->{{3.5123805700712643`*^9, 3.512380606419672*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", " ", "0", ",", " ", "2", ",", " ", 
    RowBox[{"-", "1"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.512251722231174*^9, 3.512251843353711*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["2", "3"], ",", "0", ",", 
   FractionBox["2", "3"], ",", 
   RowBox[{"-", 
    FractionBox["1", "3"]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512251725710904*^9, 3.5122518437953873`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"x", "=."}]], "Input",
 CellChangeTimes->{{3.5122525124244013`*^9, 3.512252513800366*^9}}],

Cell["Find some nice unit vectors", "Text",
 CellChangeTimes->{{3.512253665806835*^9, 3.5122536850752373`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rational4DUnitVectorsFromRange", "[", "maxElt_Integer", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"r", "=", "maxElt"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Normalize", "/@", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"range", "=", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"2", " ", "r"}], "+", "1"}], "]"}], "-", "r", "-", 
          "1"}]}], "}"}], ",", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{"{", 
           RowBox[{"range", ",", "range", ",", "range", ",", "range"}], "}"}],
           "]"}], ",", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", "l", "}"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"len", "=", 
               RowBox[{"Norm", "[", "l", "]"}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"len", " ", "\[NotEqual]", " ", "0"}], "&&", 
              RowBox[{"And", "@@", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Element", "[", 
                   RowBox[{
                    RowBox[{"#", "/", "len"}], ",", "Rationals"}], "]"}], 
                  "&"}], ",", "l"}], "]"}]}]}]}], "]"}]}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512252505825358*^9, 3.512252693399481*^9}, {
  3.512252725805727*^9, 3.512252791835145*^9}, {3.5122528336712847`*^9, 
  3.512252936730659*^9}, {3.512252972581173*^9, 3.51225321029818*^9}, {
  3.512253242185171*^9, 3.512253378537113*^9}, {3.5122534431744623`*^9, 
  3.512253467629076*^9}, {3.5122535097810583`*^9, 3.512253615818131*^9}, {
  3.512253695036701*^9, 3.512253709072158*^9}, {3.512254856725918*^9, 
  3.512254981091508*^9}, {3.512255637043603*^9, 3.5122556380841513`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{
     RowBox[{"rational4DUnitVectorsFromRange", "[", "7", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Sort", "[", 
        RowBox[{"Abs", "[", "#1", "]"}], "]"}], "\[Equal]", 
       RowBox[{"Sort", "[", 
        RowBox[{"Abs", "[", "#2", "]"}], "]"}]}], "&"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Max", "[", 
      RowBox[{"Denominator", "/@", "#1"}], "]"}], "<", 
     RowBox[{"Max", "[", 
      RowBox[{"Denominator", "/@", "#2"}], "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512254988493742*^9, 3.51225500186796*^9}, {
  3.512255145766921*^9, 3.512255150143222*^9}, {3.512255285878312*^9, 
  3.512255320789267*^9}, {3.51225551664668*^9, 3.512255528479906*^9}, {
  3.512255568534391*^9, 3.512255644171842*^9}, {3.512255694638942*^9, 
  3.512255694899534*^9}, {3.5122557414848127`*^9, 3.512255790950781*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "3"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "5"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "5"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "5"]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "7"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["6", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["3", "7"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "7"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["2", "3"]}], ",", 
     RowBox[{"-", 
      FractionBox["5", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["2", "9"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", 
     RowBox[{"-", 
      FractionBox["4", "9"]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["7", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "10"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["7", "11"]}], ",", 
     RowBox[{"-", 
      FractionBox["6", "11"]}], ",", 
     RowBox[{"-", 
      FractionBox["6", "11"]}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512255151119609*^9, 3.512255289548423*^9, 3.512255322533062*^9, 
   3.512255531824832*^9, {3.512255571363162*^9, 3.512255646636766*^9}, 
   3.512255702268757*^9, {3.512255784044478*^9, 3.512255798806127*^9}}]
}, Open  ]],

Cell["\<\
It looks like any orthogonal basis w with only two basis vectors that will \
produce a zero mean requires that the two rows of the x vector be linearly \
dependent.  (Though I only tried two different w1 vectors)\
\>", "Text",
 CellChangeTimes->{{3.512258126374015*^9, 3.512258246754367*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"ea", ",", "eb", ",", "ec", ",", "ed"}], "}"}]}]}], "}"}], 
    ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}]}], "]"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "ea"}], "+", 
    RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ad"}], "\[Equal]", 
   RowBox[{"6", " ", "bd", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ac"}], "\[Equal]", 
   RowBox[{"6", " ", "bc", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "ab"}], "\[Equal]", 
   RowBox[{"6", " ", "bb", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}], "&&", 
  RowBox[{
   RowBox[{"25", " ", "aa"}], "\[Equal]", 
   RowBox[{"6", " ", "ba", " ", 
    RowBox[{"(", 
     RowBox[{"eb", "+", 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"ec", "+", "ed"}], ")"}]}]}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{{3.512257714921525*^9, 3.5122577467359247`*^9}, {
   3.5122577808109303`*^9, 3.512257804867828*^9}, 3.512257874883718*^9, {
   3.512257938173696*^9, 3.51225794767994*^9}, 3.512258088169729*^9}]
}, Open  ]],

Cell["So, I need to try a 3D basis", "Text",
 CellChangeTimes->{{3.5122582327535152`*^9, 3.512258255975925*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"ea", ",", "eb", ",", "ec", ",", "ed"}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{"fa", ",", "fb", ",", "fc", ",", "fd"}], "}"}]}]}], "}"}], 
    ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w3", "]"}], "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w2", "]"}], "\[NotEqual]", "0"}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"eb", "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"eb", "+", 
        RowBox[{"9", " ", "ec"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"eb", "+", 
        RowBox[{"9", " ", "ed"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{"fb", "\[Equal]", "0"}], "&&", 
      RowBox[{
       SqrtBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "eb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ec", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ed", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "]"}], "2"]}],
           ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fc", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fd", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{"fc", "+", "fd"}], "]"}], "2"]}], ")"}]}]], 
       "\[NotEqual]", "0"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "eb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ec", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "ed", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "]"}], "2"]}],
           ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fb", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fc", "]"}], "2"]}], "+", 
           RowBox[{"25", " ", 
            SuperscriptBox[
             RowBox[{"Abs", "[", "fd", "]"}], "2"]}], "+", 
           SuperscriptBox[
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"3", " ", "fb"}], "+", "fc", "+", "fd"}], "]"}], "2"]}],
           ")"}]}]], "\[NotEqual]", "0"}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
            RowBox[{"26", " ", "ed"}]}], "\[Equal]", "0"}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"35", " ", "eb"}], "+", 
                RowBox[{"3", " ", "ec"}]}], ")"}], " ", "fb"}], 
             RowBox[{"3", " ", 
              RowBox[{"(", 
               RowBox[{"eb", "+", 
                RowBox[{"9", " ", "ec"}]}], ")"}]}]], "+", "fc"}], "\[Equal]",
            "0"}], "&&", 
          RowBox[{
           RowBox[{"eb", "+", 
            RowBox[{"9", " ", "ec"}]}], "\[NotEqual]", "0"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{
              RowBox[{"34", " ", "eb", " ", "fb"}], "+", 
              RowBox[{"3", " ", "ec", " ", "fb"}], "+", 
              RowBox[{"3", " ", "ed", " ", "fb"}], "+", 
              RowBox[{"3", " ", "eb", " ", "fc"}], "+", 
              RowBox[{"26", " ", "ec", " ", "fc"}], "+", 
              RowBox[{"ed", " ", "fc"}]}], 
             RowBox[{
              RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
              RowBox[{"26", " ", "ed"}]}]], "+", "fd"}], "\[Equal]", "0"}], "&&", 
          RowBox[{
           RowBox[{
            RowBox[{"3", " ", "eb"}], "+", "ec", "+", 
            RowBox[{"26", " ", "ed"}]}], "\[NotEqual]", "0"}]}], ")"}]}], 
       ")"}]}], ")"}]}], ")"}], "&&", 
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "fa"}], "+", 
    RowBox[{"3", " ", "fb"}], "+", "fc", "+", "fd"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{
    RowBox[{"5", " ", "ea"}], "+", 
    RowBox[{"3", " ", "eb"}], "+", "ec", "+", "ed"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"5", " ", "ad"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bd", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cd", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "ac"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bc", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cc", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "ab"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bb", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"cb", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], ")"}]}]}],
   "&&", 
  RowBox[{
   RowBox[{"5", " ", "aa"}], "\[Equal]", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ba", " ", 
       RowBox[{"(", 
        RowBox[{"ea", "+", "eb", "+", "ec", "+", "ed"}], ")"}]}], "+", 
      RowBox[{"ca", " ", 
       RowBox[{"(", 
        RowBox[{"fa", "+", "fb", "+", "fc", "+", "fd"}], ")"}]}]}], 
     ")"}]}]}]}]], "Output",
 CellChangeTimes->{
  3.5122583779385633`*^9, {3.512258458060216*^9, 3.512258485543825*^9}, {
   3.5122611647254343`*^9, 3.512261177782691*^9}}]
}, Open  ]],

Cell["\<\
That looks more promising.  Substitue numbers and see how things simplify \
then substitute again until we get a tautology.\
\>", "Text",
 CellChangeTimes->{{3.5122587677032633`*^9, 3.5122587859289923`*^9}, {
  3.512259061662291*^9, 3.512259066702692*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "10"}], "/", "13"}], ",", "1", ",", "1", ",", 
         RowBox[{
          RowBox[{"-", "2"}], "/", "13"}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "5"}], ",", 
         RowBox[{
          RowBox[{"-", "15"}], "/", "13"}], ",", 
         RowBox[{"19", "/", "13"}], ",", "1"}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"42", "/", "325"}], 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ba", "+", "ca"}], ",", 
              RowBox[{"bb", "+", "cb"}], ",", 
              RowBox[{"bc", "+", "cc"}], ",", 
              RowBox[{"bd", "+", "cd"}]}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"1", "/", "5"}], 
            RowBox[{"{", 
             RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}], ",", 
           RowBox[{
            RowBox[{"1", "/", "7"}], 
            RowBox[{"{", 
             RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}]}], 
          "}"}]}], "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w3", "]"}], "\[NotEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{"Norm", "[", "w2", "]"}], "\[NotEqual]", "0"}]}], "]"}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512258586492375*^9, 3.512258587392478*^9}, {
   3.512258620837556*^9, 3.5122586211388607`*^9}, {3.512258720669063*^9, 
   3.512258723018224*^9}, {3.512258802370916*^9, 3.512258814035931*^9}, {
   3.512258854281949*^9, 3.512258874369522*^9}, {3.512258906858073*^9, 
   3.512258910545706*^9}, {3.512258943363241*^9, 3.512259038944717*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.512258600283174*^9, 3.5122586327328997`*^9, 3.512258725540051*^9, 
   3.51225882021484*^9, {3.5122588554724607`*^9, 3.512258875531135*^9}, 
   3.5122589119927883`*^9, {3.51225894457412*^9, 3.512259009946144*^9}, 
   3.5122590421376743`*^9}]
}, Open  ]],

Cell["\<\
But when we make the vectors unit - there is a problem - b becomes a multiple \
of c, continuing anyway for now\
\>", "Text",
 CellChangeTimes->{{3.512261187808515*^9, 3.512261255789425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "5"}], " ", 
          SqrtBox[
           FractionBox["2", "221"]]}], ",", 
         SqrtBox[
          FractionBox["13", "34"]], ",", 
         SqrtBox[
          FractionBox["13", "34"]], ",", 
         RowBox[{"-", 
          SqrtBox[
           FractionBox["2", "221"]]}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["13", "138"], ",", 
         RowBox[{"-", 
          FractionBox["25", "46"]}], ",", 
         FractionBox["95", "138"], ",", 
         FractionBox["65", "138"]}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x2", "=", 
         RowBox[{
          RowBox[{"1", "/", "5"}], 
          RowBox[{"{", 
           RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}]}]}], ",", 
        RowBox[{"x3", "=", 
         RowBox[{
          RowBox[{"1", "/", "7"}], 
          RowBox[{"{", 
           RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}]}]}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x1", "=", 
          RowBox[{
           RowBox[{"42", "/", "325"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"5", "x2"}], "+", 
             RowBox[{"7", "x3"}]}], ")"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Reduce", "[", 
         RowBox[{
          RowBox[{"Mean", "[", 
           RowBox[{
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
            RowBox[{"{", 
             RowBox[{"x1", ",", "x2", ",", "x3"}], "}"}]}], "]"}], "\[Equal]", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5122591926954327`*^9, 3.512259328680694*^9}, {
  3.512259584909047*^9, 3.512259594447154*^9}, {3.5122597853389273`*^9, 
  3.512259793284792*^9}, {3.512260659753489*^9, 3.5122606837358007`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"bd", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cd"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"bc", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cc"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"bb", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "cb"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}], "&&", 
  RowBox[{"ba", "\[Equal]", 
   FractionBox[
    RowBox[{"1241", " ", "ca"}], 
    RowBox[{"69", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "34"}], "+", 
       SqrtBox["442"]}], ")"}]}]]}]}]], "Output",
 CellChangeTimes->{3.512259939843884*^9, 3.51226068515448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "10"}], "/", "13"}], ",", "1", ",", "1", ",", 
         RowBox[{
          RowBox[{"-", "2"}], "/", "13"}]}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "5"}], ",", 
         RowBox[{
          RowBox[{"-", "15"}], "/", "13"}], ",", 
         RowBox[{"19", "/", "13"}], ",", "1"}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x2", "=", 
         RowBox[{
          RowBox[{"1", "/", "5"}], 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}]}], ",", 
        RowBox[{"x3", "=", 
         RowBox[{
          RowBox[{"1", "/", "7"}], 
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}]}]}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x1", "=", 
          RowBox[{
           RowBox[{"42", "/", "325"}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"5", "x2"}], "+", 
             RowBox[{"7", "x3"}]}], ")"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Evaluate", "[", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], "]"}], ",", 
          RowBox[{"Evaluate", "[", 
           RowBox[{"{", 
            RowBox[{"x1", ",", "x2", ",", "x3"}], "}"}], "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5122591926954327`*^9, 3.512259328680694*^9}, {
  3.512259584909047*^9, 3.512259594447154*^9}, {3.5122597853389273`*^9, 
  3.512259793284792*^9}, {3.512259945557584*^9, 3.5122600311558447`*^9}, {
  3.512260385824963*^9, 3.5122603948148603`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512259963683838*^9, 3.5122600322070303`*^9, 
  3.5122603959798183`*^9}]
}, Open  ]],

Cell["\<\
Now, I can substitue my favorite numbers in for the b and c vectors and get \
my test data.\
\>", "Text",
 CellChangeTimes->{{3.512259080958535*^9, 3.512259115568174*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}, {3.512260458782188*^9, 
   3.512260470736064*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512260472811849*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"Transpose", "[", "testResultPw", "]"}]}], "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512260547296463*^9, 3.5122605524233513`*^9}, {
  3.51226127423415*^9, 3.512261290420186*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512260553057485*^9, 3.5122612918721533`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Normalize", "/@", "testResultPx"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512261339549748*^9, 3.512261354473412*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.21081851067789195`", ",", "0.5270462766947299`", ",", 
     "0.6324555320336759`", ",", "0.5270462766947299`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.18257418583505536`", ",", "0.3651483716701107`", ",", 
     "0.5477225575051661`", ",", "0.7302967433402214`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.22360679774997896`", ",", "0.6708203932499369`", ",", 
     "0.6708203932499369`", ",", "0.22360679774997896`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512261351211918*^9, 3.512261355017931*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", " ", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{
    RowBox[{"testResultMc", "//", "N"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512260510677772*^9, 3.512260527754318*^9}, {
  3.512260561887888*^9, 3.512260586552517*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.6998904091577189`", ",", 
       RowBox[{"-", "0.30243002524324164`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.09350890384581023`", ",", "0.8490274000055038`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.7022060108819639`"}], ",", 
       RowBox[{"-", "0.13490755901162998`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.09119330212156479`"}], ",", 
       RowBox[{"-", "0.4116898157506324`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.5103203173657647`"}], ",", 
       RowBox[{"-", "1.2400257043918246`"}], ",", 
       RowBox[{"-", "1.5309609520972949`"}], ",", 
       RowBox[{"-", "1.3831260604821751`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.054587685366237794`"}], ",", 
       RowBox[{"-", "0.35526412130180257`"}], ",", 
       RowBox[{"-", "0.1637630560987137`"}], ",", "0.5199155102430291`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512260506440216*^9, 3.512260532876094*^9}, 
   3.5122605871220617`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Maybe I have to have w=orthogonal unit vectors to get it back from the \
decomposition\
\>", "Subsubsubsubsection",
 CellChangeTimes->{{3.51226139933591*^9, 3.512261417428155*^9}, 
   3.5123798377622766`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rotated4DUnit", "[", 
   RowBox[{"\[Theta]1_", ",", "\[Theta]2_", ",", "\[Theta]3_"}], "]"}], ":=", 
  
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"u1", "=", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u2", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u3", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
      RowBox[{"u4", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"RotationTransform", "[", 
      RowBox[{"\[Theta]1", ",", 
       RowBox[{"{", 
        RowBox[{"u2", ",", "u1"}], "}"}]}], "]"}], "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"RotationTransform", "[", 
       RowBox[{"\[Theta]2", ",", 
        RowBox[{"{", 
         RowBox[{"u3", ",", "u2"}], "}"}]}], "]"}], "[", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"RotationTransform", "[", 
        RowBox[{"\[Theta]3", ",", 
         RowBox[{"{", 
          RowBox[{"u4", ",", "u3"}], "}"}]}], "]"}], "[", "u4", 
       "\[IndentingNewLine]", "]"}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512261964656996*^9, 3.5122620543035192`*^9}, {
  3.512262108947351*^9, 3.512262191440878*^9}, {3.512262242333143*^9, 
  3.512262274624807*^9}, {3.5122624098779583`*^9, 3.512262425710971*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["5", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "2"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}], ",", 
         RowBox[{"-", 
          FractionBox["1", "6"]}]}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"rotated4DUnit", "[", 
        RowBox[{"e1", ",", "e2", ",", "e3"}], "]"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"rotated4DUnit", "[", 
        RowBox[{"f1", ",", "f2", ",", "f3"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}, {3.512261452689002*^9, 
   3.512261459731244*^9}, {3.51226176184903*^9, 3.512261826020124*^9}, {
   3.512262532921968*^9, 3.512262591995434*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.512262768723279*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w1", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
      RowBox[{"w2", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
      RowBox[{"w3", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Reduce", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Mean", "[", 
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}], ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"aa", ",", "ab", ",", "ac", ",", "ad"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ba", ",", "bb", ",", "bc", ",", "bd"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"ca", ",", "cb", ",", "cc", ",", "cd"}], "}"}]}], "}"}]}],
         "]"}], "\[Equal]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w2"}], "==", "0"}], "&&", 
      RowBox[{
       RowBox[{"w1", ".", "w3"}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{"w2", ".", "w3"}], "\[Equal]", "0"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.512257027614476*^9, 3.512257081685697*^9}, {
   3.5122571626394053`*^9, 3.512257218719451*^9}, {3.5122573911636353`*^9, 
   3.512257549119269*^9}, 3.5122576289633093`*^9, {3.51225771091641*^9, 
   3.512257745974873*^9}, {3.51225777759262*^9, 3.5122578041034184`*^9}, {
   3.512257870543151*^9, 3.512257874117319*^9}, {3.512257933362885*^9, 
   3.512257947058475*^9}, {3.512258067849751*^9, 3.51225808763101*^9}, {
   3.51225827336199*^9, 3.512258318588406*^9}, 3.5122583763054943`*^9, {
   3.512258428091316*^9, 3.512258442689911*^9}, {3.5122584728652573`*^9, 
   3.512258473336197*^9}, {3.512260727662156*^9, 3.512260732320478*^9}, {
   3.5122611710142393`*^9, 3.5122611769358892`*^9}, {3.512261452689002*^9, 
   3.512261459731244*^9}, {3.51226176184903*^9, 3.512261826020124*^9}, {
   3.512262532921968*^9, 3.512262591995434*^9}, {3.512262784896785*^9, 
   3.512262805723563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ad", "+", "bd", "+", "cd"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"ac", "+", "bc", "+", "cc"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"ab", "+", "bb", "+", "cb"}], "\[Equal]", "0"}], "&&", 
  RowBox[{
   RowBox[{"aa", "+", "ba", "+", "ca"}], "\[Equal]", "0"}]}]], "Output",
 CellChangeTimes->{3.5122628065565643`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"w1", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
     RowBox[{"w2", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
     RowBox[{"w3", "=", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}]}], "}"}], ",", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.5122628888916063`*^9, 3.512262895293326*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512262896863924*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "2"}], ",", 
            RowBox[{"-", "2"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "1"}], ",", 
            RowBox[{"-", "2"}]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}, {3.512262911778878*^9, 
   3.5122629997137537`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}], ",", 
       RowBox[{"-", "2"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "2"}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512263000890814*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", 
  RowBox[{"Simplify", "[", " ", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512263042723549*^9, 3.512263059580419*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0", "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "5125"}], "-", 
        RowBox[{"920", " ", 
         SqrtBox["31"]}]}], 
       SqrtBox[
        RowBox[{"424124764", "+", 
         RowBox[{"76175054", " ", 
          SqrtBox["31"]}]}]]], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"3", " ", 
         RowBox[{"(", 
          RowBox[{"2243", "+", 
           RowBox[{"403", " ", 
            SqrtBox["31"]}]}], ")"}]}], 
        SqrtBox[
         RowBox[{"424124764", "+", 
          RowBox[{"76175054", " ", 
           SqrtBox["31"]}]}]]]}], "}"}], ",", 
     RowBox[{"{", 
      FractionBox[
       RowBox[{"11854", "+", 
        RowBox[{"2129", " ", 
         SqrtBox["31"]}]}], 
       SqrtBox[
        RowBox[{"424124764", "+", 
         RowBox[{"76175054", " ", 
          SqrtBox["31"]}]}]]], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       FractionBox["1", "165"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"409", "+", 
         RowBox[{"74", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "55"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"262", "+", 
         RowBox[{"47", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "33"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["1669", "3"], "-", 
         FractionBox["18583", 
          RowBox[{"6", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"239", "+", 
         RowBox[{"43", " ", 
          SqrtBox["31"]}]}], ")"}]}], ",", 
      RowBox[{
       FractionBox["1", "55"], " ", 
       SqrtBox[
        RowBox[{
         FractionBox["6676", "3"], "-", 
         FractionBox["37166", 
          RowBox[{"3", " ", 
           SqrtBox["31"]}]]}]], " ", 
       RowBox[{"(", 
        RowBox[{"262", "+", 
         RowBox[{"47", " ", 
          SqrtBox["31"]}]}], ")"}]}]}], "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512263043733841*^9, 3.5122630604102592`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"w", ".", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5122630817485733`*^9, 3.512263098547103*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["2", 
       SqrtBox["31"]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["9", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["4", 
       SqrtBox["31"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["1", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], "-", 
      FractionBox["7", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["4", 
       SqrtBox["31"]]}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      FractionBox["7", 
       SqrtBox["31"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], "+", 
      FractionBox["3", 
       SqrtBox["31"]]}], ",", 
     RowBox[{"1", "+", 
      FractionBox["11", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{
      FractionBox["3", "2"], "+", 
      FractionBox["17", 
       RowBox[{"2", " ", 
        SqrtBox["31"]}]]}], ",", 
     RowBox[{"2", "+", 
      FractionBox["11", 
       SqrtBox["31"]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512263082951777*^9, 3.512263101011434*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigensystem", "[", 
  RowBox[{"testResultMc", ".", 
   RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512263225830699*^9, 3.512263251419894*^9}, {
  3.51226329676893*^9, 3.512263298088932*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"23", "+", 
      RowBox[{"4", " ", 
       SqrtBox["31"]}]}], ",", 
     RowBox[{"23", "-", 
      RowBox[{"4", " ", 
       SqrtBox["31"]}]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["47", "4"]}], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{"23", "+", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", 
       RowBox[{
        FractionBox["43", "4"], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "23"}], "-", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["47", "4"]}], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{"23", "-", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", 
       RowBox[{
        FractionBox["43", "4"], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "23"}], "+", 
           RowBox[{"4", " ", 
            SqrtBox["31"]}]}], ")"}]}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512263252176783*^9, 3.51226329887564*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Earlier attempts at generating test data", "Subsubsection",
 CellChangeTimes->{{3.512259148954152*^9, 3.512259154199258*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            FractionBox["2", 
             SqrtBox["21"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["2", "3"], ",", 
            SqrtBox[
             FractionBox["3", "7"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["2", "3"]}], ",", 
            FractionBox["2", 
             SqrtBox["21"]]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "3"], ",", 
            RowBox[{"-", 
             FractionBox["2", 
              SqrtBox["21"]]}]}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["4", "5"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "5"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "5"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["4", "7"], ",", 
            FractionBox["4", "7"], ",", 
            RowBox[{"-", 
             FractionBox["4", "7"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "7"]}]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512251347514181*^9, 3.5122514246234694`*^9}, {
   3.512251560623076*^9, 3.512251591055235*^9}, {3.5122516397084827`*^9, 
   3.512251639813486*^9}, {3.512251689052107*^9, 3.5122517479562273`*^9}, {
   3.5122517824556026`*^9, 3.5122519006770697`*^9}, {3.512253771694334*^9, 
   3.512253785051715*^9}, 3.5122538434201202`*^9, {3.5122541593336697`*^9, 
   3.512254177061098*^9}, {3.512254213649585*^9, 3.51225425206257*^9}, {
   3.512255332437203*^9, 3.512255345559052*^9}, 3.512256126593657*^9, {
   3.512256294292693*^9, 3.5122564112126093`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["1", "15"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["1", "30"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["1", "30"], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "60"]}], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "28"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "15"]}], "+", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "30"]}], "+", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["7", "30"]}], "-", 
        FractionBox["1", 
         SqrtBox["21"]]}], ",", 
       RowBox[{
        FractionBox["7", "60"], "-", 
        FractionBox["1", 
         RowBox[{"4", " ", 
          SqrtBox["21"]}]]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["3", "5"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["3", "10"], "+", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        FractionBox["3", "10"], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "7"]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["3", "20"]}], "-", 
        FractionBox[
         SqrtBox[
          FractionBox["3", "7"]], "28"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "5"]}], "-", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "10"]}], "-", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "10"]}], "+", 
        FractionBox["13", 
         RowBox[{"7", " ", 
          SqrtBox["21"]}]]}], ",", 
       RowBox[{
        FractionBox["1", "20"], "+", 
        FractionBox["13", 
         RowBox[{"28", " ", 
          SqrtBox["21"]}]]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "15"]}], "+", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "30"]}], "+", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "30"]}], "-", 
      FractionBox["5", 
       RowBox[{"7", " ", 
        SqrtBox["21"]}]]}], ",", 
     RowBox[{
      FractionBox["1", "60"], "-", 
      FractionBox["5", 
       RowBox[{"28", " ", 
        SqrtBox["21"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       FractionBox["2", 
        SqrtBox["21"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["2", "3"], ",", 
       SqrtBox[
        FractionBox["3", "7"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["2", "3"]}], ",", 
       FractionBox["2", 
        SqrtBox["21"]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "3"], ",", 
       RowBox[{"-", 
        FractionBox["2", 
         SqrtBox["21"]]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["4", "5"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "5"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "5"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["4", "7"], ",", 
       FractionBox["4", "7"], ",", 
       RowBox[{"-", 
        FractionBox["4", "7"]}], ",", 
       RowBox[{"-", 
        FractionBox["1", "7"]}]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512251883613925*^9, 3.512251901467946*^9}, 
   3.512253894113966*^9, 3.512254177943125*^9, {3.512254225286641*^9, 
   3.512254252996396*^9}, 3.512254806820397*^9, 3.512255348968403*^9, 
   3.512256128474188*^9, {3.512256364353035*^9, 3.512256373855639*^9}, 
   3.51225641376763*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPw", "//", "N"}]], "Input",
 CellChangeTimes->{{3.5122564206112556`*^9, 3.512256430946691*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.4364357804719848`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6666666666666666`", ",", "0.6546536707079771`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6666666666666666`"}], ",", "0.4364357804719848`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.3333333333333333`", ",", 
     RowBox[{"-", "0.4364357804719848`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512256424321066*^9, 3.51225643176593*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultMc", "//", "N"}]], "Input",
 CellChangeTimes->{{3.512253957655257*^9, 3.5122539610998163`*^9}, {
  3.512254206506547*^9, 3.5122542586925793`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.1601886196249491`", ",", "0.12685528629161577`", ",", 
     RowBox[{"-", "0.0601886196249491`"}], ",", 
     RowBox[{"-", "0.040047154906237274`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.24844877643067428`"}], ",", 
     RowBox[{"-", "0.015115443097340947`"}], ",", 
     RowBox[{"-", "0.45155122356932575`"}], ",", "0.06211219410766857`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.6935219529582825`", ",", "0.3935219529582824`", ",", 
     "0.20647804704171757`", ",", 
     RowBox[{"-", "0.1733804882395706`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6052617961525573`"}], ",", 
     RowBox[{"-", "0.5052617961525573`"}], ",", "0.30526179615255733`", ",", 
     "0.15131544903813932`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512253961627091*^9, 3.5122542612668047`*^9, 
  3.512255351097127*^9, 3.512256131319497*^9, 3.5122564364852867`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "=", " ", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{
    RowBox[{"testResultMc", "//", "N"}], ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512251437781951*^9, 3.512251478264104*^9}, {
  3.512251525565535*^9, 3.512251532066971*^9}, {3.512251596235393*^9, 
  3.512251618994896*^9}, {3.512251650026148*^9, 3.512251661360869*^9}, {
  3.5122519116428957`*^9, 3.5122519122193747`*^9}, {3.512252028262917*^9, 
  3.5122520438852663`*^9}, {3.512253942419812*^9, 3.512253998142556*^9}, {
  3.512254266007453*^9, 3.5122542688611794`*^9}, {3.51225614267599*^9, 
  3.512256276841227*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.17515390017686427`"}], ",", 
       RowBox[{"-", "0.10713530696241576`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.1942709308772682`", ",", 
       RowBox[{"-", "0.7660082305939329`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6919796412825371`"}], ",", "0.3351725624789807`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.6728626105821331`", ",", "0.5379709750773685`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9634851410382419`"}], ",", 
       RowBox[{"-", "0.6374366403846755`"}], ",", 
       RowBox[{"-", "0.014660360922456485`"}], ",", "0.24087128525956036`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.07998820214666803`", ",", 
       RowBox[{"-", "0.1419305459957935`"}], ",", "0.5857680422807161`", ",", 
       
       RowBox[{"-", "0.019997050536667012`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512256277541814*^9, 3.51225643767778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"w", ",", "x"}], "}"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512254001233542*^9, 3.512254005950938*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.17515390017686436`"}], "}"}], ",", 
     RowBox[{"{", "0.19427093087726854`", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.6919796412825374`"}], "}"}], ",", 
     RowBox[{"{", "0.6728626105821333`", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.9634851410382413`"}], ",", 
      RowBox[{"-", "0.637436640384675`"}], ",", 
      RowBox[{"-", "0.014660360922456801`"}], ",", "0.24087128525956025`"}], 
     "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512254006706592*^9, 3.5122542810470047`*^9, 
  3.512254822887538*^9, 3.512255354849365*^9, 3.512256137586864*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"w", ".", "x"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512251535164116*^9, 3.512251535596217*^9}, {
  3.5122540194333897`*^9, 3.512254022555026*^9}, {3.512255375166731*^9, 
  3.512255376884604*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.2271050316505327`", ",", "0.15421985127863877`", ",", 
     RowBox[{"-", "0.00844949053485097`"}], ",", 
     RowBox[{"-", "0.056776257912633174`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.2567122902438908`"}], ",", 
     RowBox[{"-", "0.17432520510480165`"}], ",", "0.0095510348266235`", ",", 
     "0.0641780725609727`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7109223535449561`", ",", "0.4827649076620792`", ",", 
     RowBox[{"-", "0.026450015896325438`"}], ",", 
     RowBox[{"-", "0.17773058838623904`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6813150949515981`"}], ",", 
     RowBox[{"-", "0.4626595538359163`"}], ",", "0.02534847160455291`", ",", 
     "0.17032877373789954`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512251538317966*^9, 3.5122515987021103`*^9, {3.5122540088614473`*^9, 
   3.512254023592952*^9}, {3.512255366159531*^9, 3.512255377668187*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Explanation between PCA (or equiv. WX decomposition) and sample and peak \
parameter sets\
\>", "Subsection",
 CellChangeTimes->{{3.512214440977141*^9, 3.512214460702648*^9}}],

Cell["PCA finds Y = W X + M where", "Text",
 CellChangeTimes->{{3.512214463909453*^9, 3.5122144755766487`*^9}}],

Cell[CellGroupData[{

Cell["Y is d \[Cross] n", "Item",
 CellChangeTimes->{{3.5122144779904823`*^9, 3.512214483195887*^9}, {
  3.512233318910033*^9, 3.5122333242249603`*^9}}],

Cell["Data is in columns of Y", "Subitem",
 CellChangeTimes->{{3.512233415077718*^9, 3.512233418856593*^9}}],

Cell["X is c \[Cross] n", "Item",
 CellChangeTimes->{{3.512214513734543*^9, 3.512214518626689*^9}, {
  3.512233326131793*^9, 3.5122333266483727`*^9}}],

Cell[TextData[{
 "Weights for each eigenvector in the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " sample are in the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " row of x"
}], "Subitem",
 CellChangeTimes->{{3.512233438744173*^9, 3.512233478275079*^9}}],

Cell["W is d \[Cross] c", "Item",
 CellChangeTimes->{{3.5122332878566437`*^9, 3.512233291141612*^9}, {
  3.512233328351462*^9, 3.5122333285940237`*^9}}],

Cell["\<\
Basis vectors for projected subspace (eigenvectors) are columns of W\
\>", "Subitem",
 CellChangeTimes->{{3.512233509171575*^9, 3.512233532437648*^9}}],

Cell["\<\
M is d \[Cross] n (n copies of bias vector)\
\>", "Item",
 CellChangeTimes->{{3.51223330838208*^9, 3.512233339997197*^9}}],

Cell["d = number of dimensions per data point", "Item",
 CellChangeTimes->{{3.512233349354783*^9, 3.512233359039206*^9}}],

Cell["n = number of data points", "Item",
 CellChangeTimes->{{3.5122333679499197`*^9, 3.512233372945415*^9}}],

Cell["c = number of principal components", "Item",
 CellChangeTimes->{{3.512233382418679*^9, 3.512233390216816*^9}}]
}, Open  ]],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Y", "=", 
    SuperscriptBox["P", "T"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "where P is the peak position matrix, P is samples \[Cross] peaks and Y is \
samples \[Cross] peaks"
}], "Text",
 CellChangeTimes->{{3.512233544987081*^9, 3.5122336123966312`*^9}}],

Cell["Thus, d= peaks and n=samples", "Text",
 CellChangeTimes->{{3.5122336194593554`*^9, 3.512233625591215*^9}}],

Cell["\<\
X = c \[Cross] samples and W is peaks \[Cross] c.\
\>", "Text",
 CellChangeTimes->{{3.512233630990807*^9, 3.512233633706522*^9}, {
  3.51223366474547*^9, 3.5122336814768763`*^9}}],

Cell[CellGroupData[{

Cell["Crucial point", "Subsubsection",
 CellChangeTimes->{{3.512233683260457*^9, 3.5122336973018293`*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"Y", "=", 
   RowBox[{
    SuperscriptBox["P", "T"], "=", 
    RowBox[{
     RowBox[{"W", " ", "X"}], "+", "M"}]}]}], TraditionalForm]],
 FormatType->"TraditionalForm"]], "Text",
 CellChangeTimes->{{3.512233699892136*^9, 3.5122337522367067`*^9}, {
  3.512233854255949*^9, 3.512233872408031*^9}}],

Cell["each column of X is a list of sample parameters", "Text",
 CellChangeTimes->{{3.512233874273602*^9, 3.512233877055335*^9}}],

Cell["each row of W is a list of peak parameters", "Text",
 CellChangeTimes->{{3.512233878902811*^9, 3.512233891982082*^9}}],

Cell["\<\
each row column of M is the same list of peak biases (potentially means)\
\>", "Text",
 CellChangeTimes->{{3.512233894474066*^9, 3.51223401070079*^9}, {
  3.5122342098333807`*^9, 3.512234218950671*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Relation with SVD (added 2 June 2011)", "Subsubsection",
 CellChangeTimes->{{3.516007893219092*^9, 3.5160079193622103`*^9}}],

Cell[TextData[{
 "SVD(Y-M) = ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U\[CapitalSigma]V", "T"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.516007956090173*^9, 3.516007959895026*^9}, {
  3.516008123219496*^9, 3.5160081742170773`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"W", "=", "U"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "=", 
    RowBox[{"\[CapitalSigma]", " ", 
     SuperscriptBox["V", "T"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "  (One can as easily define ",
 Cell[BoxData[
  FormBox[
   RowBox[{"W", "=", 
    RowBox[{"U", " ", "\[CapitalSigma]"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", "=", 
    SuperscriptBox["V", "T"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")"
}], "Text",
 CellChangeTimes->{{3.516008198487605*^9, 3.516008246366953*^9}, {
  3.5160108791752787`*^9, 3.516010940267199*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mean-centering makes distributional assumptions", "Subsection",
 CellChangeTimes->{{3.5122340166881523`*^9, 3.5122340326278048`*^9}, {
  3.512234161789192*^9, 3.512234171368363*^9}}],

Cell["\<\
By subtracting the mean, from the peaks we implicitly look for the axis of \
most variation with respect to the mean.  Is that a good assumption?  Does it \
mean that the things driving the peak movements are varying around a known \
center?  This needs more thought.\
\>", "Text",
 CellChangeTimes->{{3.51223404311935*^9, 3.5122340526745787`*^9}, {
  3.512234085860079*^9, 3.512234121546838*^9}, {3.512234181392221*^9, 
  3.512234207351366*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["21 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.512380005404171*^9, 3.5123800145755253`*^9}}],

Cell[CellGroupData[{

Cell["Bench tested wxDecompose", "Subsection",
 CellChangeTimes->{{3.5123804250524063`*^9, 3.5123804328480883`*^9}}],

Cell[CellGroupData[{

Cell["\<\
First, try to combine and get back the initial matrix using my fools-errand \
created initial vectors -- it didn't work\
\>", "Subsubsection",
 CellChangeTimes->{{3.5123807779009533`*^9, 3.512380789963516*^9}, {
  3.512381540092507*^9, 3.512381570879325*^9}, {3.512382422502974*^9, 
  3.512382426145192*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381585479815*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";", " ", 
  RowBox[{"N", "[", 
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512381591560526*^9, 3.5123816659132357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.6998904091577187`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.09350890384581013`"}], "}"}], ",", 
     RowBox[{"{", "0.7022060108819641`", "}"}], ",", 
     RowBox[{"{", "0.09119330212156483`", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "0.5103203173657649`", ",", "1.2400257043918248`", ",", 
      "1.5309609520972949`", ",", "1.3831260604821751`"}], "}"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512381643181397*^9, 3.512381667125225*^9}}]
}, Open  ]],

Cell["It doesn't work", "Text",
 CellChangeTimes->{{3.5123818114008102`*^9, 3.512381813686006*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultW", ".", "testResultX"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.51238167564336*^9, 3.512381701555533*^9}, {
  3.512381767952585*^9, 3.512381773680173*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.35716829572262204`"}], ",", 
     RowBox[{"-", "0.8678820976128825`"}], ",", 
     RowBox[{"-", "1.071504887167866`"}], ",", 
     RowBox[{"-", "0.968036664387573`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.04771949348711862`"}], ",", 
     RowBox[{"-", "0.11595344435830812`"}], ",", 
     RowBox[{"-", "0.14315848046135587`"}], ",", 
     RowBox[{"-", "0.12933460179626188`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3583499943294316`", ",", "0.8707535032720808`", ",", 
     "1.075049982988295`", ",", "0.9712394334780743`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.04653779488030904`", ",", "0.1130820386991099`", ",", 
     "0.13961338464092712`", ",", "0.12613183270576073`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512381684209599*^9, 3.5123817090052853`*^9}, 
   3.512381775111574*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultMc", "//", "N"}]], "Input",
 CellChangeTimes->{{3.51238177738032*^9, 3.512381784314239*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.34065934065934067`"}], ",", 
     RowBox[{"-", "0.7604395604395604`"}], ",", 
     RowBox[{"-", "1.021978021978022`"}], ",", 
     RowBox[{"-", "1.1252747252747253`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.09406593406593407`"}], ",", 
     RowBox[{"-", "0.4175824175824176`"}], ",", 
     RowBox[{"-", "0.2821978021978022`"}], ",", "0.3120879120879121`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3657142857142857`", ",", "0.9186813186813186`", ",", 
     "1.0971428571428572`", ",", "0.9010989010989011`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.06901098901098901`", ",", "0.25934065934065936`", ",", 
     "0.20703296703296703`", ",", 
     RowBox[{"-", "0.08791208791208792`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381784855551*^9}]
}, Open  ]],

Cell["The SVD does work.", "Text",
 CellChangeTimes->{{3.512382255908396*^9, 3.512382263258245*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultU", ",", "testResult\[CapitalSigma]", ",", "testResultV"}], 
    "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "testResultMc", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512381850904155*^9, 3.512381930105798*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"testResultU", ".", "testResult\[CapitalSigma]", ".", 
   RowBox[{"Transpose", "[", "testResultV", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5123819399977283`*^9, 3.5123819715604467`*^9}, {
  3.512382009041636*^9, 3.5123820141577873`*^9}, {3.5123820943222103`*^9, 
  3.5123820978530903`*^9}, {3.512382219765387*^9, 3.512382221763235*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["31", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["346", "455"]}], ",", 
     RowBox[{"-", 
      FractionBox["93", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["512", "455"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["214", "2275"]}], ",", 
     RowBox[{"-", 
      FractionBox["38", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["642", "2275"]}], ",", 
     FractionBox["142", "455"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["64", "175"], ",", 
     FractionBox["418", "455"], ",", 
     FractionBox["192", "175"], ",", 
     FractionBox["82", "91"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["157", "2275"], ",", 
     FractionBox["118", "455"], ",", 
     FractionBox["471", "2275"], ",", 
     RowBox[{"-", 
      FractionBox["8", "91"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5123819630755653`*^9, 3.51238197223481*^9}, 
   3.512382060705611*^9, 3.5123822408389673`*^9}]
}, Open  ]],

Cell["\<\
The problem is that I am only getting one component when I should get two \
(there are two non-zero singular values, so to get 100%(=1 as a fraction), I \
should be getting two components).\
\>", "Text",
 CellChangeTimes->{{3.512382273372962*^9, 3.512382350878837*^9}}],

Cell[CellGroupData[{

Cell[BoxData["testResult\[CapitalSigma]"], "Input",
 CellChangeTimes->{{3.512381978081627*^9, 3.5123819809451933`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "455"], " ", 
      SqrtBox[
       RowBox[{
        FractionBox["6", "5"], " ", 
        RowBox[{"(", 
         RowBox[{"559079", "+", 
          SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      FractionBox["1", "455"], " ", 
      SqrtBox[
       RowBox[{
        FractionBox["6", "5"], " ", 
        RowBox[{"(", 
         RowBox[{"559079", "-", 
          SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381981841825*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Fix bug from last test", "Subsubsection",
 CellChangeTimes->{{3.512382435560967*^9, 3.512382440978187*^9}}],

Cell[CellGroupData[{

Cell["\<\
Hand execute wxDecompose on the results to find out where it is getting only \
one\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.5123825361083384`*^9, 3.512382574369339*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512382405447802*^9, 3.51238240726154*^9}, {
  3.512382452413643*^9, 3.512382489254044*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.5123824705314817`*^9, 3.512382490031045*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultSingularValues", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testResult\[CapitalSigma]", "[", 
      RowBox[{"[", 
       RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", "4", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51238259366298*^9, 3.5123826222748137`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "455"], " ", 
    SqrtBox[
     RowBox[{
      FractionBox["6", "5"], " ", 
      RowBox[{"(", 
       RowBox[{"559079", "+", 
        SqrtBox["235738817841"]}], ")"}]}]]}], ",", 
   RowBox[{
    FractionBox["1", "455"], " ", 
    SqrtBox[
     RowBox[{
      FractionBox["6", "5"], " ", 
      RowBox[{"(", 
       RowBox[{"559079", "-", 
        SqrtBox["235738817841"]}], ")"}]}]]}], ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5123826063636627`*^9, 3.51238262310817*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultFracVariances", "=", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"testResultSingularValues", " ", "testResultSingularValues"}], 
     ",", "Total"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512382643825823*^9, 3.512382690835347*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], "+", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", 
   RowBox[{
    FractionBox["1", "2"], "-", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", "0", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512382676828966*^9, 3.5123826925206013`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultCumulativeVars", "=", 
  RowBox[{"Accumulate", "[", "testResultFracVariances", "]"}]}]], "Input",
 CellChangeTimes->{{3.512382972360444*^9, 3.512382981434856*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], "+", 
    FractionBox[
     SqrtBox["235738817841"], "1118158"]}], ",", "1", ",", "1", ",", "1"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5123829838415728`*^9}]
}, Open  ]],

Cell["\<\
The bug is that the first element in the list of fractional variances is not \
an integer or a real but an expression, thus values of one or more are found \
in many different places within it -- need to restrict to the top level\
\>", "Text",
 CellChangeTimes->{{3.512383165302959*^9, 3.512383269928924*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultComponentsRequired", "=", 
  RowBox[{"Position", "[", 
   RowBox[{"testResultCumulativeVars", ",", 
    RowBox[{"x_", "/;", 
     RowBox[{"x", "\[GreaterEqual]", "1"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5123829994091873`*^9, 3.5123830593103943`*^9}, {
  3.512383122470324*^9, 3.512383130562351*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "4", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512383038448328*^9, 3.512383059953404*^9}, {
  3.512383123666121*^9, 3.5123831313164673`*^9}}]
}, Open  ]],

Cell["Restricted to the top level, produces the correct result", "Text",
 CellChangeTimes->{{3.5123832748098917`*^9, 3.512383282133334*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultComponentsRequired", "=", 
  RowBox[{"First", "[", 
   RowBox[{"First", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"testResultCumulativeVars", ",", 
      RowBox[{"x_", "/;", 
       RowBox[{"x", "\[GreaterEqual]", "1"}]}], ",", "1"}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5123829994091873`*^9, 3.5123830593103943`*^9}, {
  3.512383122470324*^9, 3.512383155776731*^9}}],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{{3.512383038448328*^9, 3.512383059953404*^9}, {
  3.512383123666121*^9, 3.512383156727376*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Now repeat the first test on the fixed code", "Subsubsection",
 CellChangeTimes->{{3.5123807779009533`*^9, 3.512380789963516*^9}, {
  3.512381540092507*^9, 3.512381570879325*^9}, {3.512382422502974*^9, 
  3.512382426145192*^9}, {3.512383416763343*^9, 3.5123834314541283`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
    "testResultPx"}], "}"}], "=", 
  RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"pw", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", 
            FractionBox["1", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", "1", ",", 
            FractionBox["19", "13"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"px", "=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            FractionBox["84", "325"], ",", 
            FractionBox["42", "65"], ",", 
            FractionBox["252", "325"], ",", 
            FractionBox["42", "65"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            FractionBox["2", "5"], ",", 
            FractionBox["3", "5"], ",", 
            FractionBox["4", "5"]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["3", "7"], ",", 
            FractionBox["1", "7"]}], "}"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", "=", 
         RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "=", 
           RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"mc", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["31", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["346", "455"]}], ",", 
       RowBox[{"-", 
        FractionBox["93", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["512", "455"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["214", "2275"]}], ",", 
       RowBox[{"-", 
        FractionBox["38", "91"]}], ",", 
       RowBox[{"-", 
        FractionBox["642", "2275"]}], ",", 
       FractionBox["142", "455"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["64", "175"], ",", 
       FractionBox["418", "455"], ",", 
       FractionBox["192", "175"], ",", 
       FractionBox["82", "91"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["157", "2275"], ",", 
       FractionBox["118", "455"], ",", 
       FractionBox["471", "2275"], ",", 
       RowBox[{"-", 
        FractionBox["8", "91"]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["5", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["10", "13"]}], ",", 
       FractionBox["1", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox["15", "13"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", "1", ",", 
       FractionBox["19", "13"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "6"]}], ",", 
       RowBox[{"-", 
        FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       FractionBox["84", "325"], ",", 
       FractionBox["42", "65"], ",", 
       FractionBox["252", "325"], ",", 
       FractionBox["42", "65"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "5"], ",", 
       FractionBox["2", "5"], ",", 
       FractionBox["3", "5"], ",", 
       FractionBox["4", "5"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox["1", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["3", "7"], ",", 
       FractionBox["1", "7"]}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512381585479815*^9, 3.512383436982881*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
   RowBox[{"wxDecompose", "[", 
    RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";", " ", 
  RowBox[{"N", "[", 
   RowBox[{"{", 
    RowBox[{"testResultW", ",", "testResultX"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512381591560526*^9, 3.5123816659132357`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6998904091577187`"}], ",", 
       RowBox[{"-", "0.3024300252432852`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.09350890384581013`"}], ",", "0.8490274000054981`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.7022060108819641`", ",", 
       RowBox[{"-", "0.13490755901158638`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.09119330212156483`", ",", 
       RowBox[{"-", "0.41168981575062674`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.5103203173657649`", ",", "1.2400257043918248`", ",", 
       "1.5309609520972949`", ",", "1.3831260604821751`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.05458768536623642`"}], ",", 
       RowBox[{"-", "0.35526412130179474`"}], ",", 
       RowBox[{"-", "0.16376305609870925`"}], ",", "0.5199155102430358`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512381643181397*^9, 3.512381667125225*^9}, 
   3.512383441363161*^9}]
}, Open  ]],

Cell["It works", "Text",
 CellChangeTimes->{{3.5123818114008102`*^9, 3.512381813686006*^9}, {
  3.5123835384797792`*^9, 3.51238353945226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"testResultW", ".", "testResultX"}], "]"}]], "Input",
 CellChangeTimes->{{3.51238167564336*^9, 3.512381701555533*^9}, {
  3.512381767952585*^9, 3.512381773680173*^9}, {3.512383470969119*^9, 
  3.512383475243671*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["31", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["346", "455"]}], ",", 
     RowBox[{"-", 
      FractionBox["93", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["512", "455"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["214", "2275"]}], ",", 
     RowBox[{"-", 
      FractionBox["38", "91"]}], ",", 
     RowBox[{"-", 
      FractionBox["642", "2275"]}], ",", 
     FractionBox["142", "455"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["64", "175"], ",", 
     FractionBox["418", "455"], ",", 
     FractionBox["192", "175"], ",", 
     FractionBox["82", "91"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["157", "2275"], ",", 
     FractionBox["118", "455"], ",", 
     FractionBox["471", "2275"], ",", 
     RowBox[{"-", 
      FractionBox["8", "91"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512381684209599*^9, 3.5123817090052853`*^9}, 
   3.512381775111574*^9, {3.512383467154832*^9, 3.5123834888144417`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Test with eigenvector-transformed 4-Gaussian", "Subsubsection",
 CellChangeTimes->{{3.5123837615701847`*^9, 3.512383791215588*^9}}],

Cell["\<\
I will generate a large dataset of zero-mean 4-d Gaussian points with maximum \
variance on the axes and multiply them by an orthogonal matrix and see if the \
orthogonal matrix is recovered\
\>", "Text",
 CellChangeTimes->{{3.5123837946489964`*^9, 3.512383881022747*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomReal", "[", 
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", "1000", "}"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Precision", "[", 
  RowBox[{"testResultGaussianPoints", "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123930679183073`*^9, 3.512393093449354*^9}, {
  3.512393137852747*^9, 3.512393245861327*^9}}],

Cell[BoxData["MachinePrecision"], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.5123932066490383`*^9, 3.51239324673228*^9}, 
   3.5123933008294992`*^9, {3.5123934524090137`*^9, 3.512393469142762*^9}, 
   3.512395194974617*^9, 3.5123955860885963`*^9, 3.5124150198448963`*^9}]
}, Open  ]],

Cell["\<\
To transform these, I will need a 4-d basis - so I need to choose a vector \
orthogonal to the ones I already have.  And make it a unit basis\
\>", "Text",
 CellChangeTimes->{{3.512384880927423*^9, 3.5123849045261993`*^9}, {
  3.512385073004408*^9, 3.5123850772408457`*^9}, {3.512385847864894*^9, 
  3.51238584858178*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["5", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["10", "13"]}], ",", 
      FractionBox["1", "5"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], ",", "1", ",", 
      RowBox[{"-", 
       FractionBox["15", "13"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", "1", ",", 
      FractionBox["19", "13"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["2", "13"]}], ",", "1"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.512384180133891*^9, 3.512384184459736*^9}, {
  3.512384524751484*^9, 3.51238453291866*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["2", "13"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "5"], ",", 
     RowBox[{"-", 
      FractionBox["15", "13"]}], ",", 
     FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5123845335933657`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["5", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "2"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "6"]}], ",", 
      RowBox[{"-", 
       FractionBox["1", "6"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
      RowBox[{"-", 
       FractionBox["2", "13"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      FractionBox["1", "5"], ",", 
      RowBox[{"-", 
       FractionBox["15", "13"]}], ",", 
      FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5123850902778883`*^9, 3.512385120599719*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385104942881*^9, 3.512385121689966*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{"aa", ",", "ab", ",", "ac", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"And", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"v", ".", "#"}], "\[Equal]", "0"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["5", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "2"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "6"]}], ",", 
            RowBox[{"-", 
             FractionBox["1", "6"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
            RowBox[{"-", 
             FractionBox["2", "13"]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox["1", "5"], ",", 
            RowBox[{"-", 
             FractionBox["15", "13"]}], ",", 
            FractionBox["19", "13"], ",", "1"}], "}"}]}], "}"}]}], "]"}]}]}], 
    "]"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.512384554176525*^9, 3.512384648392416*^9}, {
  3.512384924964652*^9, 3.512385021748955*^9}, {3.512385164754942*^9, 
  3.51238523831398*^9}, {3.512385855617836*^9, 3.5123858839746027`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ac", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["494", "1249"]}]}], "&&", 
  RowBox[{"ab", "\[Equal]", 
   FractionBox["390", "1249"]}], "&&", 
  RowBox[{"aa", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["385", "1249"]}]}]}]], "Output",
 CellChangeTimes->{{3.5123849451319523`*^9, 3.512385023000844*^9}, {
  3.5123852037017097`*^9, 3.5123852403725853`*^9}, {3.512385859923664*^9, 
  3.512385886384185*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385383497527*^9, 3.512385429046273*^9}, 
   3.5123856793668118`*^9, 3.5123859213933907`*^9, 3.512395209939125*^9, 
   3.512395595938345*^9, 3.51241008837963*^9, 3.512412379577099*^9}]
}, Open  ]],

Cell["Verify that I do indeed have a unit, orthogonal basis", "Text",
 CellChangeTimes->{{3.512386000291481*^9, 3.512386014067955*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", ".", 
  RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}]], "Input",
 CellChangeTimes->{{3.512385957445182*^9, 3.512385998651586*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512385981465995*^9, 3.512385993178735*^9}, 
   3.512395214024688*^9}]
}, Open  ]],

Cell["Now perform the test", "Text",
 CellChangeTimes->{{3.51238544099096*^9, 3.512385449381736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
      "testResultPx"}], "}"}], "=", 
    RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pw", "=", 
          RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
         RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"p", "=", 
           RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m", "=", 
             RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"mc", "=", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"{", 
              RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
            "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
   ";", 
   RowBox[{"testResultPw", "//", "N"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.040000000000190994`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.8333333333333334`"}], ",", 
       RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", 
       ",", 
       RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
       RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",",
        "0.6884057971014492`", ",", 
       RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.16666666666666666`"}], ",", 
       RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", 
       ",", "0.8609981394187871`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512384104114069*^9, 3.512384123534058*^9}, 
   3.5123855104739943`*^9, 3.512385553103589*^9, {3.512385695189035*^9, 
   3.512385738011581*^9}, 3.512385774969882*^9, {3.51238617503297*^9, 
   3.5123862206006393`*^9}, 3.5123862551259727`*^9, 3.512386310754005*^9, 
   3.512393263093844*^9, 3.512393311626803*^9, 3.512393568805049*^9, 
   3.512395223308667*^9, 3.5123956025602837`*^9, 3.512410092396832*^9, {
   3.512412033301639*^9, 3.512412059676825*^9}, 3.512412097767974*^9, {
   3.512412285573913*^9, 3.512412339440832*^9}, 3.512412392511932*^9, 
   3.512415040068426*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"testResultW", ",", "testResultX"}], "}"}], "=", 
    RowBox[{"wxDecompose", "[", 
     RowBox[{"testResultMc", ",", "1"}], "]"}]}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123860251205*^9, 3.5123860537145977`*^9}, {
  3.512410174327344*^9, 3.512410189320537*^9}, {3.512410220808455*^9, 
  3.512410257167083*^9}, {3.512410296516162*^9, 3.512410327670237*^9}, {
  3.51241036839038*^9, 3.512410371249632*^9}, {3.5124119424235992`*^9, 
  3.512411943828287*^9}, {3.512412398695326*^9, 3.51241240111547*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.24999999999977263`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.512413300935359*^9, 3.512415046129693*^9}]
}, Open  ]],

Cell["\<\
Surprisingly, I get only 3 components - due to rounding error?  (This happens \
even at precisions up to 512 bits)  I tried with exact numbers but even 20 \
Gaussian samples took more than 3 hours (at which point I gave up).  I gave \
up after half an hour for 5 samples with exact numbers.  I also tried 20 \
samples at a precision of 1048560 (that is about 3.5 million bits) and still \
came up with 3 components.\
\>", "Text",
 CellChangeTimes->{{3.512386342362707*^9, 3.51238636036588*^9}, {
  3.512386749622781*^9, 3.5123867508470373`*^9}, {3.5123933799481163`*^9, 
  3.5123933923985977`*^9}, {3.512410097839855*^9, 3.512410124570704*^9}, {
  3.512411912689452*^9, 3.5124119324005938`*^9}, {3.512414748946766*^9, 
  3.512414785963414*^9}, {3.512414838619248*^9, 3.512414840359902*^9}, {
  3.512414913793494*^9, 3.5124149792098618`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "/@", 
  RowBox[{"{", 
   RowBox[{"testResultW", ",", "testResultX"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512385746225093*^9, 3.5123857610501957`*^9}, {
  3.512386064233514*^9, 3.512386083389132*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1000"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512386084142371*^9, {3.512386178866839*^9, 3.512386223956114*^9}, 
   3.512386280337523*^9, 3.512386315436316*^9, 3.5123932864288197`*^9, 
   3.512393366125641*^9, 3.512412078175353*^9, 3.5124121332093897`*^9, 
   3.5124147418597603`*^9, 3.512415049405097*^9}]
}, Open  ]],

Cell["The reconstruction is still very close to the original", "Text",
 CellChangeTimes->{{3.512386384243618*^9, 3.512386408696678*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Norm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"testResultW", ".", "testResultX"}], "-", "testResultMc"}], ",", 
   "\"\<Frobenius\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.512386105364884*^9, 3.512386133673686*^9}}],

Cell[BoxData["4.717739642996267`*^-13"], "Output",
 CellChangeTimes->{3.5123861355917683`*^9, 3.512386200865828*^9, 
  3.512386235282693*^9, 3.5123862832732487`*^9, 3.512386318544692*^9, 
  3.512415053650732*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Find out what is happening with only getting 3 components", \
"Subsubsection",
 CellChangeTimes->{{3.512386772707881*^9, 3.512386786273829*^9}}],

Cell["\<\
If I leave out the matrix multiplication, I get 4 components -- ergo, the \
multiplication is doing something and my algorithm is working correctly.\
\>", "Text",
 CellChangeTimes->{{3.512432863069661*^9, 3.512432887763151*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultU", ",", "testResult\[CapitalSigma]", ",", "testResultV"}], 
    "}"}], "=", 
   RowBox[{
   "SingularValueDecomposition", "[", "testResultGaussianPoints", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512381850904155*^9, 3.512381930105798*^9}, {
  3.51238711519282*^9, 3.512387140921042*^9}, {3.512387294809482*^9, 
  3.5123872979039717`*^9}, {3.5124151819336987`*^9, 3.51241518769203*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}]], "Input",
 CellChangeTimes->{{3.5123870559468527`*^9, 3.512387063466419*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "1000"}], "}"}]], "Output",
 CellChangeTimes->{3.5123870641706247`*^9, 3.512387299665325*^9, 
  3.512415082236719*^9, 3.512415191749187*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"testResult\[CapitalSigma]", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "4"}], "]"}], "]"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "5"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5123869758981457`*^9, 3.512387028267605*^9}, {
   3.5123870732530737`*^9, 3.512387093458503*^9}, 3.512415100814711*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"328.70565346024944`", ",", "0.`", ",", "0.`", ",", "0.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "319.0264887804246`", ",", "0.`", ",", "0.`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "314.48910567953374`", ",", "0.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "305.55862339840763`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5123869968125343`*^9, 3.512387032816375*^9, {3.512387078284433*^9, 
   3.512387094131385*^9}, 3.512387148278658*^9, {3.512415093046549*^9, 
   3.5124151017432833`*^9}, 3.512415193007668*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Min", "[", 
  RowBox[{"Dimensions", "[", "testResult\[CapitalSigma]", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.512382405447802*^9, 3.51238240726154*^9}, {
  3.512382452413643*^9, 3.512382489254044*^9}}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{{3.5123824705314817`*^9, 3.512382490031045*^9}, 
   3.512386903947085*^9, 3.51241510547127*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultSingularValues", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"testResult\[CapitalSigma]", "[", 
      RowBox[{"[", 
       RowBox[{"#", ",", "#"}], "]"}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", "4", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.51238259366298*^9, 3.5123826222748137`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "328.5856437480018`", ",", "315.8954516546304`", ",", "307.37748942324777`",
    ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.5123826063636627`*^9, 3.51238262310817*^9}, 
   3.512386906942441*^9, 3.5123871520135813`*^9, 3.5123873139868097`*^9, 
   3.512415110618719*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["22 April 2011 Friday", "Section",
 CellChangeTimes->{{3.512466907493278*^9, 3.512466912927067*^9}}],

Cell[CellGroupData[{

Cell["Bench test wxDecompose", "Subsection",
 CellChangeTimes->{{3.512473992579303*^9, 3.5124739966840982`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Smaller point list and calculating exact eigenvalues a different way confirms \
that only 3 non-zero eigenvalues\
\>", "Subsubsection",
 CellChangeTimes->{{3.5124669151871033`*^9, 3.512466936507618*^9}, {
  3.512468339972925*^9, 3.5124683914162292`*^9}, {3.512470247357069*^9, 
  3.512470252098098*^9}}],

Cell["\<\
Before giving up on figuring out what was going on yesterday, I decided to \
try one more time, but this time, use 16 exact integers and calculate the \
eigenvalues of the covariance matrix only (rather than calculating the full \
svd).  This confirmed that there are only 3 non-zero eigenvalues.  However, \
reconstruction works just fine and I get the original matrix back.  \
\>", "Text",
 CellChangeTimes->{{3.512470541576614*^9, 3.512470600222539*^9}, {
   3.512470635095899*^9, 3.512470697034683*^9}, {3.512470784212852*^9, 
   3.5124707896442537`*^9}, 3.51247082096764*^9}],

Cell["\<\
Maybe it has something to do with subtracting the mean before calculating the \
covariance?  I sent an email to Raymer.  If he doesn't know, I'll try \
math.stackexchange.com.\
\>", "Text",
 CellChangeTimes->{
  3.51247082502785*^9, {3.5124710058432903`*^9, 3.512471006235547*^9}, {
   3.5124710557794456`*^9, 3.5124710777255373`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512467021394806*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.512470935696005*^9, 3.512470945520816*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", 
       FractionBox["5", "6"]}], 
      RowBox[{"-", 
       FractionBox["1", "2"]}], 
      RowBox[{"-", 
       FractionBox["1", "6"]}], 
      RowBox[{"-", 
       FractionBox["1", "6"]}]},
     {
      RowBox[{
       RowBox[{"-", "5"}], " ", 
       SqrtBox[
        FractionBox["2", "221"]]}], 
      SqrtBox[
       FractionBox["13", "34"]], 
      SqrtBox[
       FractionBox["13", "34"]], 
      RowBox[{"-", 
       SqrtBox[
        FractionBox["2", "221"]]}]},
     {
      FractionBox["13", "138"], 
      RowBox[{"-", 
       FractionBox["25", "46"]}], 
      FractionBox["95", "138"], 
      FractionBox["65", "138"]},
     {
      RowBox[{"-", 
       FractionBox["385", 
        RowBox[{"69", " ", 
         SqrtBox["442"]}]]}], 
      FractionBox[
       RowBox[{"5", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "23"], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"19", " ", 
         SqrtBox[
          FractionBox["26", "17"]]}], "69"]}], 
      FractionBox["1249", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.512470946130034*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"testResultPwTransp", ",", "17"}], "]"}]], "Input",
 CellChangeTimes->{{3.512469335659975*^9, 3.512469346286833*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.83333333333333333333333333333333333333`17."}], ",", 
     RowBox[{"-", "0.5`17."}], ",", 
     RowBox[{"-", "0.16666666666666666666666666666666666667`17."}], ",", 
     RowBox[{"-", "0.16666666666666666666666666666666666667`17."}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.47565149415449407892352617777139836964`17."}], ",", 
     "0.61834694240084230260058403110281788054`17.", ",", 
     "0.61834694240084230260058403110281788054`17.", ",", 
     RowBox[{"-", "0.09513029883089881578470523555427967393`17."}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.09420289855072463768115942028985507246`17.", ",", 
     RowBox[{"-", "0.54347826086956521739130434782608695652`17."}], ",", 
     "0.68840579710144927536231884057971014493`17.", ",", 
     "0.47101449275362318840579710144927536232`17."}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.26539974673837713099356170788693967002`17."}], ",", 
     "0.26884649669601839243503653526209473067`17.", ",", 
     RowBox[{"-", "0.34053889581495663041771294466531999218`17."}], ",", 
     "0.86099813941878710808041187831373415027`17."}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512469340804078*^9, 3.5124693468638687`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NullSpace", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512467144827536*^9, 3.512467174553526*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.5124671752256002`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SetPrecision", "[", 
       RowBox[{"#", ",", "Infinity"}], "]"}], "&"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"{", "16", "}"}]}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}, {3.512467771744691*^9, 3.51246779559381*^9}, {
   3.512467846797667*^9, 3.5124678477764683`*^9}, {3.512468142789845*^9, 
   3.512468143811792*^9}, {3.51246817519199*^9, 3.5124681787457447`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
     "testResultPx"}], "}"}], "=", 
   RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"pw", "=", 
         RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
        RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"p", "=", 
          RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", "=", 
            RowBox[{"Mean", "[", "p", "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"mc", "=", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "-", "m"}], "&"}], ",", "p"}], "]"}]}], "}"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
  ";", 
  RowBox[{"testResultPw", "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}, {3.512467655033833*^9, 
  3.512467659353112*^9}, {3.512471574867228*^9, 3.512471596610546*^9}, {
  3.512472311341092*^9, 3.512472329462494*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", ",", 
     
     RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`", ",", 
     RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", ",", 
     "0.8609981394187871`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512467646391835*^9, 3.512467659962002*^9}, 
   3.5124677984380817`*^9, 3.512467849856251*^9, {3.5124681709401073`*^9, 
   3.5124681814410057`*^9}, 3.512471599584174*^9, 3.512472334086504*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", 
  RowBox[{"testResultMc", ".", 
   RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512467706296453*^9, 3.512467741750884*^9}, {
  3.51246819292692*^9, 3.512468202631871*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "5"}], "]"}], ",", 
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "4"}], "]"}], ",", 
   RowBox[{"Root", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "41037514457291968866140186856409264662300759677891743222792407424601250\
032962528435967805148398318569869097518448247028852756127671202517369611991773\
85334338187002977769132512776997836194369012565050154288364432703271257", "-", 
       RowBox[{
       "1720593923549082445649688600344566256374746215672052964419980578734251\
583895789511232435267799577550578711042829870561644309052500536354417344300014\
9016311575481616689562872574735731372692023274354566049745693759766528", " ", 
        "#1"}], "+", 
       RowBox[{
       "2919940828244754953666740473951409385446999102403921908025445068653753\
935326438253407298783879321764334815166403508541412677885707023865565955228363\
2371346370427855630199755046541495714984825574054751939567227502592", " ", 
        SuperscriptBox["#1", "2"]}], "-", 
       RowBox[{
       "2565260079560785725723591956248718391891512824347539427486849220841450\
989963303168134874599823908907978533661622173020449859003661163333283660466050\
9128282952195891063630459226337701677278749302289658412242305024", " ", 
        SuperscriptBox["#1", "3"]}], "+", 
       RowBox[{
       "1230658770322556259923990023441435028226513372458437827718472789064101\
445225277222308362210990930222012851221758533822493806624627317178265879704624\
5767254801354782076153716335804603381398336183983952598401024", " ", 
        SuperscriptBox["#1", "4"]}], "-", 
       RowBox[{
       "3059236660303027234289880936161573095214406546367119959122707604859610\
431425256627139487338203338593558110128736432904930644063879275540039984780919\
550515453900810024369095208699956141886070414315286953984", " ", 
        SuperscriptBox["#1", "5"]}], "+", 
       RowBox[{
       "3082891185083518289821618984468949824533319577371895642681145906033668\
198922694658591405223997098959860215019776206654910561826105178559076659658279\
68244184503828211244913864842071996472321467171733504", " ", 
        SuperscriptBox["#1", "6"]}]}], "&"}], ",", "1"}], "]"}], ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.512467722392185*^9, 3.512467743062554*^9}, 
   3.512467802597672*^9, 3.5124678510173397`*^9, {3.512468184647748*^9, 
   3.512468203552166*^9}, 3.5124716060088177`*^9, 3.51247237874249*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"testResultMc", ".", 
     RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], ",", "100"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5124694941079903`*^9, 3.5124695019367647`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2370.2805652289513907493154830496322040884539346475628752391018868017022074\
89469341453033925464197686540267818049633926535172342259409914914`100.", ",", 
   "1735.473916677741756717975620817037229778137489027422623606832598629511971\
57498909968427527392099850063696787147170272405476089865183031926`100.", ",", 
   "937.4925337888882496139626700060102624858129730603548470778265454639538604\
09740225013225840222423292495536426034791235676244645276708977066`100.", ",", 
   "0"}], "}"}]], "Output",
 CellChangeTimes->{3.512469502732276*^9, 3.512471620742478*^9, 
  3.512472384574901*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Log", "[", 
   RowBox[{"2", ",", 
    RowBox[{"10", "^", "256"}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.512467820975621*^9, 3.5124678408919163`*^9}}],

Cell[BoxData["850.4135922911648`"], "Output",
 CellChangeTimes->{{3.51246783097488*^9, 3.512467842282774*^9}, 
   3.512472387190893*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigenvalues", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512467868527203*^9, 3.512467927604157*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", "2210"}], "+", 
     RowBox[{"1073", " ", 
      SqrtBox["442"]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox[
       RowBox[{"37", " ", 
        RowBox[{"(", 
         RowBox[{"11252878", "+", 
          RowBox[{"128180", " ", 
           SqrtBox["442"]}]}], ")"}]}]]}]}], "30498"], ",", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "2210"}], "+", 
     RowBox[{"1073", " ", 
      SqrtBox["442"]}], "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox[
       RowBox[{"37", " ", 
        RowBox[{"(", 
         RowBox[{"11252878", "+", 
          RowBox[{"128180", " ", 
           SqrtBox["442"]}]}], ")"}]}]]}]}], "30498"], ",", 
   RowBox[{"-", "1"}], ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.512467880584723*^9, 3.512467928369904*^9}, 
   3.512472388659775*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvectors", "[", "testResultPwTransp", "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512468881795991*^9, 3.512468890731176*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.2532911819650452`", "\[InvisibleSpace]", "-", 
      RowBox[{"0.1836641837335375`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.1803604071474738`"}], "+", 
      RowBox[{"0.6770729830351344`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.5601997644451698`"}], "-", 
      RowBox[{"1.509659078389694`", " ", "\[ImaginaryI]"}]}], ",", "1.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0.2532911819650452`", "\[InvisibleSpace]", "+", 
      RowBox[{"0.1836641837335375`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "1.1803604071474738`"}], "-", 
      RowBox[{"0.6770729830351344`", " ", "\[ImaginaryI]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "0.5601997644451698`"}], "+", 
      RowBox[{"1.509659078389694`", " ", "\[ImaginaryI]"}]}], ",", "1.`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.813690563785489`", ",", "2.902025683063605`", ",", 
     "0.10761351459467387`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.29253681895689265`"}], ",", "0.6328313706120337`", ",", 
     "0.31941089668971817`", ",", "1.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512468891961443*^9, 3.512472390764616*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Inverse", "[", "testResultPwTransp", "]"}]], "Input",
 CellChangeTimes->{{3.512468086015419*^9, 3.512468093553405*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     FractionBox["95", "138"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     FractionBox["65", "138"], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512468094225542*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultReconstructed", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Inverse", "[", 
      RowBox[{"Transpose", "[", "testResultPwTransp", "]"}], "]"}], ".", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "+", "testResultM"}], "&"}], ",", "testResultMc"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5124696038695393`*^9, 3.512469703100696*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Eigenvalues", "[", 
    RowBox[{"testResultGaussianPoints", ".", 
     RowBox[{"Transpose", "[", "testResultGaussianPoints", "]"}]}], "]"}], 
   ",", "100"}], "]"}]], "Input",
 CellChangeTimes->{{3.512469809633794*^9, 3.51246984694594*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2511.9761462476004551612255952522176823562220665800816739529569097363264930\
99657919683498976764417304847271842918789223067567853519294587225`100.", ",", 
   "2204.223171098558594386953576796031022571202603371118787787323471292401224\
520021093940801292330873335722827711378450106325075183071395425055`100.", ",",
    "1401.62380581138995213418044502842632369241685711741133631759942568081470\
9171453100714656623572608269178233755089004890013956507792448931368`100.", 
   ",", "852.\
421976006572602057826504909809889623648800566018929787814848225665724234217706\
545045945615878327190143253113755780593400455616863996492`100."}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124698382037907`*^9, 3.512469847728092*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Found the problem: I was mean centering incorrectly in my test harness\
\>", "Subsubsection",
 CellChangeTimes->{{3.5124669151871033`*^9, 3.512466936507618*^9}, {
  3.512468339972925*^9, 3.5124683914162292`*^9}, {3.512470247357069*^9, 
  3.512470252098098*^9}, {3.5124724026398478`*^9, 3.512472421906876*^9}, {
  3.512473284222896*^9, 3.5124732891841383`*^9}}],

Cell["\<\
I was mean-centering incorrectly, subtracting the mean of each point from \
that point rather than the mean of each dimension from that dimension.  This \
is merely a bug in my test-code (my real code does things correctly).\
\>", "Text",
 CellChangeTimes->{
  3.51247082502785*^9, {3.5124710058432903`*^9, 3.512471006235547*^9}, {
   3.5124710557794456`*^9, 3.5124710777255373`*^9}, {3.5124724459194613`*^9, 
   3.512472470890758*^9}, {3.512472977308967*^9, 3.5124729917398977`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultPwTransp", "=", 
  RowBox[{"Simplify", "[", 
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["5", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}], ",", 
        RowBox[{"-", 
         FractionBox["1", "6"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["10", "13"]}], ",", "1", ",", "1", ",", 
        RowBox[{"-", 
         FractionBox["2", "13"]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "5"], ",", 
        RowBox[{"-", 
         FractionBox["15", "13"]}], ",", 
        FractionBox["19", "13"], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["385", "1249"]}], ",", 
        FractionBox["390", "1249"], ",", 
        RowBox[{"-", 
         FractionBox["494", "1249"]}], ",", "1"}], "}"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.512384748873872*^9, 3.512384789557699*^9}, {
   3.51238526486902*^9, 3.51238542320979*^9}, 3.5123856775989227`*^9, {
   3.512385894332727*^9, 3.512385920449692*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["5", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}], ",", 
     RowBox[{"-", 
      FractionBox["1", "6"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "5"}], " ", 
      SqrtBox[
       FractionBox["2", "221"]]}], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     SqrtBox[
      FractionBox["13", "34"]], ",", 
     RowBox[{"-", 
      SqrtBox[
       FractionBox["2", "221"]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["13", "138"], ",", 
     RowBox[{"-", 
      FractionBox["25", "46"]}], ",", 
     FractionBox["95", "138"], ",", 
     FractionBox["65", "138"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["385", 
       RowBox[{"69", " ", 
        SqrtBox["442"]}]]}], ",", 
     FractionBox[
      RowBox[{"5", " ", 
       SqrtBox[
        FractionBox["26", "17"]]}], "23"], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"19", " ", 
        SqrtBox[
         FractionBox["26", "17"]]}], "69"]}], ",", 
     FractionBox["1249", 
      RowBox[{"69", " ", 
       SqrtBox["442"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512467021394806*^9, 3.512472581544812*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultGaussianPoints", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SetPrecision", "[", 
       RowBox[{"#", ",", "Infinity"}], "]"}], "&"}], ",", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RandomReal", "[", 
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "#"}], "]"}], "]"}], "&"}], ",", 
          RowBox[{"{", 
           RowBox[{"10", ",", "10", ",", "10", ",", "10"}], "}"}]}], "]"}], 
        ",", 
        RowBox[{"{", "16", "}"}]}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5123838858283043`*^9, 3.512384009771003*^9}, {
   3.512384110431726*^9, 3.512384113803303*^9}, {3.5123861658569098`*^9, 
   3.512386214154297*^9}, {3.512386248446755*^9, 3.5123862491501713`*^9}, {
   3.512386295030249*^9, 3.512386297172298*^9}, {3.512393007649829*^9, 
   3.512393061597164*^9}, {3.512393099617065*^9, 3.51239312171585*^9}, {
   3.5123932967375402`*^9, 3.512393297189724*^9}, {3.5123934099553337`*^9, 
   3.512393466975322*^9}, 3.512395185565791*^9, {3.512395568205669*^9, 
   3.5123955742262173`*^9}, 3.512410074546789*^9, {3.5124119582765923`*^9, 
   3.512411969022769*^9}, 3.512412050580353*^9, {3.51241209050105*^9, 
   3.512412090862186*^9}, {3.512412148377578*^9, 3.5124121497125463`*^9}, {
   3.512412291432585*^9, 3.5124123240018587`*^9}, {3.512415011627163*^9, 
   3.5124150332452602`*^9}, {3.512467771744691*^9, 3.51246779559381*^9}, {
   3.512467846797667*^9, 3.5124678477764683`*^9}, {3.512468142789845*^9, 
   3.512468143811792*^9}, {3.51246817519199*^9, 3.5124681787457447`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "testResultMc", ",", "testResultM", ",", "testResultPw", ",", 
     "testResultPx"}], "}"}], "=", 
   RowBox[{"Simplify", "[", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"pw", "=", 
         RowBox[{"Transpose", "[", "testResultPwTransp", "]"}]}], ",", 
        RowBox[{"px", "=", "testResultGaussianPoints"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"p", "=", 
          RowBox[{"pw", ".", "px"}]}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", "=", 
            RowBox[{"Mean", "[", 
             RowBox[{"Transpose", "[", "p", "]"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"mc", "=", 
              RowBox[{"Transpose", "[", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "-", "m"}], "&"}], ",", 
                 RowBox[{"Transpose", "[", "p", "]"}]}], "]"}], "]"}]}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"mc", ",", "m", ",", "pw", ",", "px"}], "}"}]}], 
           "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}], "]"}]}], 
  ";", 
  RowBox[{"testResultPw", "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.512384059158592*^9, 3.512384091426405*^9}, {
  3.512384197846324*^9, 3.512384210343701*^9}, {3.5123854655974903`*^9, 
  3.5123854795554533`*^9}, {3.51238553350252*^9, 3.5123855380560703`*^9}, {
  3.512385574691745*^9, 3.512385576759128*^9}, {3.512385719535974*^9, 
  3.5123857372695436`*^9}, {3.5123857737986526`*^9, 3.5123857742639723`*^9}, {
  3.512412305209331*^9, 3.512412309730206*^9}, {3.512467655033833*^9, 
  3.512467659353112*^9}, {3.512471574867228*^9, 3.512471596610546*^9}, {
  3.512472311341092*^9, 3.512472329462494*^9}, {3.512472536766765*^9, 
  3.512472561645844*^9}, {3.512472601892325*^9, 3.512472604890677*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8333333333333334`"}], ",", 
     RowBox[{"-", "0.47565149415449415`"}], ",", "0.09420289855072464`", ",", 
     
     RowBox[{"-", "0.26539974673837713`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5`"}], ",", "0.6183469424008423`", ",", 
     RowBox[{"-", "0.5434782608695652`"}], ",", "0.2688464966960184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", "0.6183469424008423`", ",", 
     "0.6884057971014492`", ",", 
     RowBox[{"-", "0.34053889581495667`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.16666666666666666`"}], ",", 
     RowBox[{"-", "0.09513029883089882`"}], ",", "0.47101449275362317`", ",", 
     "0.8609981394187871`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512467646391835*^9, 3.512467659962002*^9}, 
   3.5124677984380817`*^9, 3.512467849856251*^9, {3.5124681709401073`*^9, 
   3.5124681814410057`*^9}, 3.512471599584174*^9, 3.512472334086504*^9, {
   3.5124725659066887`*^9, 3.5124726065585117`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvalues", "[", 
   RowBox[{"testResultMc", ".", 
    RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512467706296453*^9, 3.512467741750884*^9}, {
  3.51246819292692*^9, 3.512468202631871*^9}, {3.512472621803874*^9, 
  3.5124726228006887`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2661.6150827923625`", ",", "1465.2593735115895`", ",", 
   "877.2834436694743`", ",", "633.6754846908572`"}], "}"}]], "Output",
 CellChangeTimes->{{3.512467722392185*^9, 3.512467743062554*^9}, 
   3.512467802597672*^9, 3.5124678510173397`*^9, {3.512468184647748*^9, 
   3.512468203552166*^9}, 3.5124716060088177`*^9, {3.512472617275248*^9, 
   3.5124726237843*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Eigenvectors", "[", "testResultPwTransp", "]"}], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.512468881795991*^9, 3.512468890731176*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testResultReconstructed", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{
     RowBox[{"Inverse", "[", 
      RowBox[{"Transpose", "[", "testResultPwTransp", "]"}], "]"}], ".", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "+", "testResultM"}], "&"}], ",", 
        RowBox[{"Transpose", "[", "testResultMc", "]"}]}], "]"}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5124696038695393`*^9, 3.512469703100696*^9}, {
  3.512472691657089*^9, 3.512472709903233*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testResultReconstructed", "\[Equal]", 
  "testResultGaussianPoints"}]], "Input",
 CellChangeTimes->{{3.51247271358808*^9, 3.512472723186618*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5124727241094103`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test reactionParameters", "Subsection",
 CellChangeTimes->{{3.512474000579908*^9, 3.512474005830237*^9}}],

Cell[CellGroupData[{

Cell["\<\
Does reactionParameters result match wxDecompose on a hand-edited matrix\
\>", "Subsubsection",
 CellChangeTimes->{{3.512474010834817*^9, 3.512474047152914*^9}}],

Cell["\<\
Make a matrix of 16 samples containing 4 peaks, each peak position a Gaussian \
with a given mean and standard deviation.\
\>", "Text",
 CellChangeTimes->{{3.512474310917018*^9, 3.5124743439655437`*^9}, {
  3.5124744394459667`*^9, 3.5124744460669003`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaks", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"NormalDistribution", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "16", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474060635439*^9, 3.512474078552411*^9}, {
  3.512474122878778*^9, 3.512474153216523*^9}, {3.5124742027408524`*^9, 
  3.5124742196184587`*^9}, {3.5124743728080053`*^9, 3.5124744345366917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPeaksBySamp", "=", 
   RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474160790123*^9, 3.51247416545975*^9}, {
  3.5124742248440323`*^9, 3.512474239512686*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "reactionParameters"}]], "Input",
 CellChangeTimes->{{3.5124742844275827`*^9, 3.512474288906386*^9}}],

Cell[BoxData[
 StyleBox["\<\"reactionParameters[positions,excludedSamples,fracVar,\
minComponents]\\nCalculates the reaction parameters for each peak using SVD \
based PCA given a set of corresponding peak positions.  Samples at indices \
given by excludedSamples are not used to create the \
estimatereactionParameters\\n\\npositions is an array of dimensions samples\
\[Cross]peaks\\n\\nReturns {means,reactionCoefficients} where means is a 1\
\[Cross]peaks array and reactionCoefficients is a peaks\[Cross]d array where \
d is the number of components needed to get fracVar fraction of the variance \
or minComponents, whichever is larger\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.51247428969228*^9},
 CellTags->"Info3512459889-7380264"]
}, Open  ]],

Cell["Remove odd numbered samples", "Text",
 CellChangeTimes->{{3.5124745194732237`*^9, 3.512474544694936*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaksHandEdited", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"testSampByPeaks", "[", 
       RowBox[{"[", 
        RowBox[{"2", " ", "#"}], "]"}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"Length", "[", "testSampByPeaks", "]"}], "/", "2"}], "]"}], 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474506442319*^9, 3.512474514263143*^9}, {
  3.512474554444693*^9, 3.512474635447776*^9}}],

Cell["Calculate means of remaining samples", "Text",
 CellChangeTimes->{{3.512474719135758*^9, 3.512474728495425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testMeansHandEdited", "=", 
  RowBox[{"Mean", "[", "testSampByPeaksHandEdited", "]"}]}]], "Input",
 CellChangeTimes->{{3.512474683715517*^9, 3.5124747077601213`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
   "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}]], "Output",
 CellChangeTimes->{3.512474712256209*^9, 3.5124828049746437`*^9}]
}, Open  ]],

Cell["Create a mean-centered transpose", "Text",
 CellChangeTimes->{{3.512474895309862*^9, 3.512474900844461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testPeaksBySampCenteredHandEdited", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "-", "testMeansHandEdited"}], "&"}], ",", 
     "testSampByPeaksHandEdited"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124747353542957`*^9, 3.512474828943585*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "2.4541768541260485`", ",", "1.2881624157471678`", ",", 
     "1.7780499346432694`", ",", 
     RowBox[{"-", "0.9563242015722224`"}], ",", 
     RowBox[{"-", "0.7359217283428011`"}], ",", 
     RowBox[{"-", "2.9752249289242467`"}], ",", "0.5909480859469534`", ",", 
     RowBox[{"-", "1.44386643162417`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.1591298261131175`"}], ",", "2.989479411073013`", ",", 
     "0.9158170929888783`", ",", 
     RowBox[{"-", "1.6844041953579967`"}], ",", 
     RowBox[{"-", "1.3531307783257973`"}], ",", "1.365232950953581`", ",", 
     "0.10560510481198815`", ",", 
     RowBox[{"-", "1.1794697600305493`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "8.108115647812166`"}], ",", "0.17751565381887424`", ",", 
     "4.299172203746764`", ",", "6.890808217191932`", ",", 
     RowBox[{"-", "7.953227371662206`"}], ",", 
     RowBox[{"-", "4.409022573909608`"}], ",", "1.6118274156709749`", ",", 
     "7.49104210295544`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.2549412536679374`"}], ",", "1.354535601427843`", ",", 
     "1.0501224105333629`", ",", 
     RowBox[{"-", "0.7791004151762317`"}], ",", 
     RowBox[{"-", "3.7480666936521008`"}], ",", "0.7111637490248892`", ",", 
     "0.4954293659218032`", ",", "2.17085723558837`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124747868932753`*^9, 3.51247482969271*^9}, 
   3.512482807577585*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Mean", ",", "testPeaksBySampCenteredHandEdited"}], "]"}]], "Input",\

 CellChangeTimes->{{3.512474805342667*^9, 3.5124748480871477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.1102230246251565`*^-16"}], ",", 
   RowBox[{"-", "2.7755575615628914`*^-17"}], ",", "4.440892098500626`*^-16", 
   ",", 
   RowBox[{"-", "2.220446049250313`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512474883145926*^9, 3.5124828109015417`*^9}]
}, Open  ]],

Cell["Calculate the decomposition", "Text",
 CellChangeTimes->{{3.512474907962441*^9, 3.512474911564301*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}], "=", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
  3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
  3.512486674249909*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", " ", "/@", 
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512487506412157*^9, 3.512487515932146*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5124875175051193`*^9}]
}, Open  ]],

Cell["So, our expected result is {means, w}", "Text",
 CellChangeTimes->{{3.5124751336574163`*^9, 3.512475152116227*^9}, {
  3.512487529593944*^9, 3.512487529594048*^9}, {3.512487568047202*^9, 
  3.5124875797921333`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "=", 
  RowBox[{"{", 
   RowBox[{"testMeansHandEdited", ",", "testWHandEdited"}], "}"}]}]], "Input",\

 CellChangeTimes->{{3.51247515939333*^9, 3.512475198981567*^9}, {
  3.5124875423881283`*^9, 3.512487544598*^9}, {3.5124875835333033`*^9, 
  3.5124875867553453`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
     "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5124752012094307`*^9, 3.512482817360544*^9, 3.5124866593986*^9, {
   3.512487539438904*^9, 3.512487547481099*^9}, 3.512487588875031*^9}]
}, Open  ]],

Cell["Actual: it works (after fixing a bug)", "Text",
 CellChangeTimes->{{3.51247520737986*^9, 3.512475208964757*^9}, {
  3.512487217819169*^9, 3.5124872205892467`*^9}, {3.5124875970911217`*^9, 
  3.5124876020754633`*^9}, {3.51248844830683*^9, 3.5124884486972437`*^9}, {
  3.512488552135634*^9, 3.512488555006483*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reactionParameters", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"9", "/", "10"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.512475210915781*^9, 3.512475255632621*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.6674208477169545`", ",", "1.0276453616268721`", ",", 
     "12.316015851217564`", ",", "3.3970939218006713`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512475257253497*^9, 3.5124755488742228`*^9, 
  3.5124757428633537`*^9, 3.512482828162709*^9, 3.512486601782569*^9, 
  3.512486636554912*^9, 3.512487603430482*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Check that wxDecompose works with my new additions", "Subsubsection",
 CellChangeTimes->{{3.512486704434765*^9, 3.512486720211022*^9}}],

Cell["\<\
To fix a bug in reactionParameters and sampleParameters, I had to add a \
minComponents argument to wxDecompose - see if it works (use the data from \
the previous code)\
\>", "Text",
 CellChangeTimes->{{3.512486723114324*^9, 3.512486793735099*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wxDecompose", "[", 
  RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
   3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
   3.512486674249909*^9}, 3.512486802814889*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9, {3.512486797828886*^9, 3.512486803479192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wxDecompose", "[", 
  RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
   RowBox[{"9", "/", "10"}], ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.512486684061603*^9, 3.512486685804553*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03637031836140005`", ",", "0.42882382930440405`", ",", 
       RowBox[{"-", "0.9008373678409747`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.0020295949702293647`"}], ",", "0.7191685310117619`", 
       ",", "0.3024978708530984`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.9789085027075566`"}], ",", 
       RowBox[{"-", "0.09608446810627569`"}], ",", 
       RowBox[{"-", "0.09500221481918919`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.2010254312603178`"}], ",", "0.5382141975197479`", ",", 
       "0.29658330028869645`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.280990212869145`", ",", 
       RowBox[{"-", "0.4052842415358753`"}], ",", 
       RowBox[{"-", "4.3567880308854186`"}], ",", 
       RowBox[{"-", "6.620214914765543`"}], ",", "8.514919221443302`", ",", 
       "4.062086939093036`", ",", 
       RowBox[{"-", "1.656146829609526`"}], ",", 
       RowBox[{"-", "7.81956235660912`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.3224366016657657`", ",", "3.4143080509946886`", ",", 
       "1.5732041310968705`", ",", 
       RowBox[{"-", "2.702887644092954`"}], ",", 
       RowBox[{"-", "2.541790933771665`"}], ",", "0.512382244132153`", ",", 
       "0.4411360279243238`", ",", 
       RowBox[{"-", "1.0187884779491845`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2.1633541960576848`"}], ",", "0.12875457560754403`", ",", 
       RowBox[{"-", "1.4216832133157806`"}], ",", 
       RowBox[{"-", "0.5337463211216376`"}], ",", 
       RowBox[{"-", "0.10241316116901499`"}], ",", "3.722960056029618`", ",", 
       
       RowBox[{"-", "0.5065938969082785`"}], ",", "0.8760761569352357`"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512486686716223*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test sampleParameters", "Subsection",
 CellChangeTimes->{{3.512474000579908*^9, 3.512474005830237*^9}, {
  3.5124890614821243`*^9, 3.512489062274596*^9}}],

Cell[CellGroupData[{

Cell["\<\
Does sampleParameters result match wxDecompose on a hand-edited matrix\
\>", "Subsubsection",
 CellChangeTimes->{{3.512474010834817*^9, 3.512474047152914*^9}, {
  3.51248907159542*^9, 3.512489072281455*^9}}],

Cell["\<\
Make a matrix of 16 samples containing 4 peaks, each peak position a Gaussian \
with a given mean and standard deviation.\
\>", "Text",
 CellChangeTimes->{{3.512474310917018*^9, 3.5124743439655437`*^9}, {
  3.5124744394459667`*^9, 3.5124744460669003`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaks", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"NormalDistribution", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "16", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474060635439*^9, 3.512474078552411*^9}, {
  3.512474122878778*^9, 3.512474153216523*^9}, {3.5124742027408524`*^9, 
  3.5124742196184587`*^9}, {3.5124743728080053`*^9, 3.5124744345366917`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testPeaksBySamp", "=", 
   RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474160790123*^9, 3.51247416545975*^9}, {
  3.5124742248440323`*^9, 3.512474239512686*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sampleParameters"}]], "Input",
 CellChangeTimes->{{3.5124742844275827`*^9, 3.512474288906386*^9}, {
  3.512489150494426*^9, 3.51248915117518*^9}}],

Cell[BoxData[
 StyleBox["\<\"sampleParameters[positions,excludedPeaks,fracVar,minComponents]\
\\nCalculates the reaction parameters for each peak using SVD based PCA given \
a set of corresponding peak positions.  peaks at indices given by \
excludedPeaks are not used to create the estimate\\n\\npositions is an array \
of dimensions samples\[Cross]peaks\\n\\nReturns sampleCoefficients, a d\
\[Cross]samples array where d is the number of components needed to get \
fracVar fraction of the variance or minComponents, whichever is larger\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512489152721878*^9},
 CellTags->"Info3512474752-6925473"]
}, Open  ]],

Cell["Remove odd numbered peaks", "Text",
 CellChangeTimes->{{3.5124745194732237`*^9, 3.512474544694936*^9}, {
  3.5124892902955217`*^9, 3.512489290739788*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaksHandEdited", "=", 
   RowBox[{"Transpose", "[", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tsp", "=", 
        RowBox[{"Transpose", "[", "testSampByPeaks", "]"}]}], "}"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"tsp", "[", 
          RowBox[{"[", 
           RowBox[{"2", " ", "#"}], "]"}], "]"}], "&"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"Length", "[", "tsp", "]"}], "/", "2"}], "]"}], "]"}]}], 
       "]"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512474506442319*^9, 3.512474514263143*^9}, {
  3.512474554444693*^9, 3.512474635447776*^9}, {3.5124891923801107`*^9, 
  3.5124892479984303`*^9}, {3.512489560583335*^9, 3.512489563386348*^9}}],

Cell["Calculate means of remaining samples", "Text",
 CellChangeTimes->{{3.512474719135758*^9, 3.512474728495425*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testMeansHandEdited", "=", 
  RowBox[{"Mean", "[", "testSampByPeaksHandEdited", "]"}]}]], "Input",
 CellChangeTimes->{{3.512474683715517*^9, 3.5124747077601213`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.8554888482528616`", ",", "3.8860196195973677`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.512474712256209*^9, 3.5124828049746437`*^9, 3.512489301221422*^9, {
   3.5124895655335903`*^9, 3.51248958012827*^9}}]
}, Open  ]],

Cell["Create a mean-centered transpose", "Text",
 CellChangeTimes->{{3.512474895309862*^9, 3.512474900844461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testPeaksBySampCenteredHandEdited", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "-", "testMeansHandEdited"}], "&"}], ",", 
     "testSampByPeaksHandEdited"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124747353542957`*^9, 3.512474828943585*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.4784127729727206`"}], ",", 
     RowBox[{"-", "0.36162209167986237`"}], ",", "0.6928911978812823`", ",", 
     "0.4410656266014429`", ",", "0.7006030956874408`", ",", 
     RowBox[{"-", "1.798977347412468`"}], ",", "0.0286434976522979`", ",", 
     RowBox[{"-", "0.35529492161758014`"}], ",", 
     RowBox[{"-", "0.20782429334561126`"}], ",", 
     RowBox[{"-", "1.580213297652115`"}], ",", 
     RowBox[{"-", "1.4214221169834231`"}], ",", 
     RowBox[{"-", "0.5401447710053547`"}], ",", "1.5416338658927482`", ",", 
     "4.918748728684656`", ",", "0.18139774824156996`", ",", 
     "0.23892785202769795`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6560246873536397`"}], ",", 
     RowBox[{"-", "2.2368820539174887`"}], ",", "1.6997193293769377`", ",", 
     RowBox[{"-", "2.113599905298442`"}], ",", 
     RowBox[{"-", "1.4646091268238064`"}], ",", 
     RowBox[{"-", "1.1204003997748213`"}], ",", "3.969116802805717`", ",", 
     RowBox[{"-", "1.714449857163801`"}], ",", "0.10376353753950562`", ",", 
     "4.690842616965062`", ",", "0.5706543948761387`", ",", 
     "1.275661898279298`", ",", 
     RowBox[{"-", "1.1973870540320304`"}], ",", 
     RowBox[{"-", "0.17186173157720974`"}], ",", 
     RowBox[{"-", "0.6024806989238956`"}], ",", 
     RowBox[{"-", "1.0320630649775295`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5124747868932753`*^9, 3.51247482969271*^9}, 
   3.512482807577585*^9, 3.512489543535573*^9, 3.512489587769743*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Mean", ",", "testPeaksBySampCenteredHandEdited"}], "]"}]], "Input",\

 CellChangeTimes->{{3.512474805342667*^9, 3.5124748480871477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"-", "3.608224830031759`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512474883145926*^9, 3.5124828109015417`*^9, 
  3.512489604493498*^9}]
}, Open  ]],

Cell["Calculate the decomposition", "Text",
 CellChangeTimes->{{3.512474907962441*^9, 3.512474911564301*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}], "=", 
  RowBox[{"wxDecompose", "[", 
   RowBox[{"testPeaksBySampCenteredHandEdited", ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512474914462181*^9, 3.512474976190567*^9}, {
  3.512475018863454*^9, 3.512475040988624*^9}, {3.512486673531637*^9, 
  3.512486674249909*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.32555410171311205`"}], ",", 
       RowBox[{"-", "0.9455234142303239`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.9455234142303239`", ",", 
       RowBox[{"-", "0.32555410171311205`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.18657074177344288`", ",", 
       RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
       RowBox[{"-", "2.1420489226394355`"}], ",", 
       RowBox[{"-", "1.6129064335812886`"}], ",", 
       RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
       RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",",
        "4.949746447442161`", ",", "1.0023168922385142`", ",", 
       "1.3820145391842602`", ",", 
       RowBox[{"-", "1.63404272386478`"}], ",", 
       RowBox[{"-", "1.7638181151358632`"}], ",", 
       RowBox[{"-", "0.6287143884359588`"}], ",", 
       RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
       RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
       
       RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
       
       RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
       "0.16272209014989816`", ",", 
       RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
       "0.09542256467567925`", ",", 
       RowBox[{"-", "1.0678366495936973`"}], ",", 
       RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",",
        "0.11008048562609432`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5124749707895107`*^9, 3.512474976773559*^9}, {
   3.512475020785651*^9, 3.512475041548891*^9}, 3.512482814504505*^9, 
   3.512486674883245*^9, 3.5124896140667963`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", " ", "/@", 
  RowBox[{"{", 
   RowBox[{"testWHandEdited", ",", "testXHandEdited"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.512487506412157*^9, 3.512487515932146*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5124875175051193`*^9, 3.51248962124321*^9}]
}, Open  ]],

Cell["So, our expected result is x", "Text",
 CellChangeTimes->{{3.5124751336574163`*^9, 3.512475152116227*^9}, {
   3.512487529593944*^9, 3.512487529594048*^9}, {3.512487568047202*^9, 
   3.5124875797921333`*^9}, 3.512489632520133*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "=", "testXHandEdited"}]], "Input",
 CellChangeTimes->{{3.51247515939333*^9, 3.512475198981567*^9}, {
  3.5124875423881283`*^9, 3.512487544598*^9}, {3.5124875835333033`*^9, 
  3.5124875867553453`*^9}, {3.512489639934833*^9, 3.512489642433758*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.18657074177344288`", ",", 
     RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
     RowBox[{"-", "2.1420489226394355`"}], ",", 
     RowBox[{"-", "1.6129064335812886`"}], ",", 
     RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
     RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",", 
     "4.949746447442161`", ",", "1.0023168922385142`", ",", 
     "1.3820145391842602`", ",", 
     RowBox[{"-", "1.63404272386478`"}], ",", 
     RowBox[{"-", "1.7638181151358632`"}], ",", 
     RowBox[{"-", "0.6287143884359588`"}], ",", 
     RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
     RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
     RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
     RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
     "0.16272209014989816`", ",", 
     RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
     "0.09542256467567925`", ",", 
     RowBox[{"-", "1.0678366495936973`"}], ",", 
     RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",", 
     "0.11008048562609432`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5124752012094307`*^9, 3.512482817360544*^9, 3.5124866593986*^9, {
   3.512487539438904*^9, 3.512487547481099*^9}, 3.512487588875031*^9, 
   3.512489645183146*^9}]
}, Open  ]],

Cell["Actual: it works", "Text",
 CellChangeTimes->{{3.51247520737986*^9, 3.512475208964757*^9}, {
   3.512487217819169*^9, 3.5124872205892467`*^9}, {3.5124875970911217`*^9, 
   3.5124876020754633`*^9}, {3.51248844830683*^9, 3.5124884486972437`*^9}, {
   3.512488552135634*^9, 3.512488555006483*^9}, 3.512489675499004*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleParameters", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"9", "/", "10"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.512475210915781*^9, 3.512475255632621*^9}, {
  3.512489650617848*^9, 3.512489668156967*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.18657074177344288`", ",", 
     RowBox[{"-", "1.997296801634149`"}], ",", "1.3815508520345952`", ",", 
     RowBox[{"-", "2.1420489226394355`"}], ",", 
     RowBox[{"-", "1.6129064335812886`"}], ",", 
     RowBox[{"-", "0.47370035696100565`"}], ",", "3.7435678627196918`", ",", 
     RowBox[{"-", "1.5053847634217659`"}], ",", "0.16576890542126244`", ",", 
     "4.949746447442161`", ",", "1.0023168922385142`", ",", 
     "1.3820145391842602`", ",", 
     RowBox[{"-", "1.63404272386478`"}], ",", 
     RowBox[{"-", "1.7638181151358632`"}], ",", 
     RowBox[{"-", "0.6287143884359588`"}], ",", 
     RowBox[{"-", "1.0536237351396867`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.5569688347662507`", ",", "1.070148282487544`", ",", 
     RowBox[{"-", "1.2084954505505714`"}], ",", "0.2710532413865198`", ",", 
     RowBox[{"-", "0.18562712241077367`"}], ",", "2.065726149356152`", ",", 
     RowBox[{"-", "1.3192453530275334`"}], ",", "0.8940858505276842`", ",", 
     "0.16272209014989816`", ",", 
     RowBox[{"-", "0.032994382035457716`"}], ",", "1.15820901420012`", ",", 
     "0.09542256467567925`", ",", 
     RowBox[{"-", "1.0678366495936973`"}], ",", 
     RowBox[{"-", "4.594841800044502`"}], ",", "0.024624244486594792`", ",", 
     "0.11008048562609432`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512475257253497*^9, 3.5124755488742228`*^9, 
  3.5124757428633537`*^9, 3.512482828162709*^9, 3.512486601782569*^9, 
  3.512486636554912*^9, 3.512487603430482*^9, 3.512489669260077*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bench test evaluationExcludingData", "Subsection",
 CellChangeTimes->{{3.5124918891033583`*^9, 3.512491895402742*^9}}],

Cell[CellGroupData[{

Cell["First try", "Subsubsection",
 CellChangeTimes->{{3.512494019620328*^9, 3.512494020941136*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"testSampByPeaks", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomReal", "[", 
         RowBox[{"NormalDistribution", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"11", ",", "5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", "16", "}"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testSampParams", "=", 
  RowBox[{"sampleParameters", "[", 
   RowBox[{"testSampByPeaks", ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"9", "/", "10"}], ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512492072173843*^9, 3.5124921096990643`*^9}, {
  3.512492170619174*^9, 3.512492198978036*^9}, {3.512492360297326*^9, 
  3.512492395211882*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3.918217025069692`", ",", "3.2182916360565734`", ",", 
     RowBox[{"-", "5.96299297374556`"}], ",", "5.022367456216888`", ",", 
     "3.6336265712832705`", ",", "3.883217064668928`", ",", 
     RowBox[{"-", "8.645331181213345`"}], ",", "0.8959554062880761`", ",", 
     "2.391389007565333`", ",", 
     RowBox[{"-", "6.181277439017554`"}], ",", "4.614166369069345`", ",", 
     RowBox[{"-", "2.1059548789161067`"}], ",", 
     RowBox[{"-", "6.726389454735485`"}], ",", 
     RowBox[{"-", "1.4929611924726356`"}], ",", "5.81411587556331`", ",", 
     RowBox[{"-", "2.276439291680733`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.09784722980855`", ",", 
     RowBox[{"-", "3.1548457900082796`"}], ",", 
     RowBox[{"-", "0.4604406772848858`"}], ",", 
     RowBox[{"-", "1.365457683100565`"}], ",", 
     RowBox[{"-", "2.489229259426125`"}], ",", 
     RowBox[{"-", "0.505837329065317`"}], ",", "1.822703257445851`", ",", 
     RowBox[{"-", "0.07291826665179886`"}], ",", "2.470413453693612`", ",", 
     RowBox[{"-", "0.734754681212881`"}], ",", "1.8828911061280253`", ",", 
     "0.7255646057492372`", ",", 
     RowBox[{"-", "2.537053874200374`"}], ",", "4.958145384555803`", ",", 
     "0.7165577874873963`", ",", 
     RowBox[{"-", "2.353585263918249`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8017425645624143`"}], ",", "2.4741642872942675`", ",", 
     "1.1230683951845977`", ",", 
     RowBox[{"-", "2.0313229321189423`"}], ",", 
     RowBox[{"-", "0.023966790655937605`"}], ",", 
     RowBox[{"-", "0.19750255322899593`"}], ",", 
     RowBox[{"-", "0.06367340383775343`"}], ",", "2.31413489866695`", ",", 
     "0.23762028773169996`", ",", 
     RowBox[{"-", "0.8966598198278535`"}], ",", "1.372065652404681`", ",", 
     "1.6548446759850732`", ",", 
     RowBox[{"-", "0.5567122511594833`"}], ",", 
     RowBox[{"-", "0.8324199627618282`"}], ",", 
     RowBox[{"-", "1.5107340019335884`"}], ",", 
     RowBox[{"-", "2.2611639171804647`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.51249211240191*^9, {3.51249217152532*^9, 3.51249219971052*^9}, {
   3.512492362035317*^9, 3.512492395645454*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"testMeans", ",", "testReactParams"}], "}"}], "=", 
  RowBox[{"reactionParameters", "[", 
   RowBox[{"testSampByPeaks", ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
      "15"}], "}"}], ",", 
    RowBox[{"9", "/", "10"}], ",", "0"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512492115930921*^9, 3.512492162892321*^9}, 
   3.5124922447614517`*^9, {3.512492390036743*^9, 3.512492390883746*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.8421161540046709`", ",", "3.7960791442695365`", ",", 
     "11.88419501448551`", ",", "2.970148500454558`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.19758141992678907`"}], ",", "0.6091705741769861`", ",",
        "0.26198162959281684`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.12443094911435482`"}], ",", "0.5279094293457202`", ",",
        "0.5127264748113546`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.965832615364494`", ",", "0.12528853678586`", ",", 
       "0.21160186765143907`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.11245390389130784`", ",", "0.5783819054178786`", ",", 
       RowBox[{"-", "0.7897479581422396`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512492163770784*^9, 3.512492245249188*^9, 
  3.5124923914312353`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "/@", 
  RowBox[{"{", 
   RowBox[{"testMeans", ",", "testReactParams", ",", "testSampParams"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.512492552820057*^9, 3.512492582930366*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "16"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512492576139971*^9, 3.512492583613328*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testReconstruction", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"testMeans", "+", "#"}], "&"}], "/@", 
   RowBox[{"Transpose", "[", 
    RowBox[{"testReactParams", ".", "testSampParams"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.5124925250693827`*^9, 3.512492547603333*^9}, {
  3.512492595426777*^9, 3.512492628220495*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.5266836743731842`", ",", "3.4770209467668005`", ",", 
     "15.636434260374319`", ",", "4.67891682717033`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.06741210665938424`"}], ",", "2.998720753919746`", ",", 
     "15.120797813596496`", ",", 
     RowBox[{"-", "0.44661395453379527`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3.034029149329361`", ",", "4.8708159435969485`", ",", 
     "6.304897346440385`", ",", "1.146335133469382`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.514176272203285`"}], ",", "1.4087901624212629`", ",", 
     "16.13405338864674`", ",", "4.349410449132059`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.39846501952810676`"}], ",", "2.0175675353377445`", ",", 
     "15.076726759783494`", ",", "1.9579665555734815`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7149813555528994`", ",", "2.944585675683743`", ",", 
     "15.52956518014329`", ",", "3.270241498958114`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.643928892319564`", ",", "5.801401105171693`", ",", 
     "3.7491426019904335`", ",", "3.102451782415603`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.2269331821252982`", ",", "4.83261855099538`", ",", 
     "13.230077411412216`", ",", "1.2011442665104162`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.936777450537951`", ",", "4.924505109416266`", ",", 
     "14.553671897561513`", ",", "4.480251833546032`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.3809223955446037`", ",", "3.717596209752131`", ",", 
     "5.632324427836345`", ",", "2.5582061707243917`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.4369004627835724`", ",", "4.919424398118073`", ",", 
     "16.866943712653757`", ",", "3.4944736200933946`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3.133745221706992`", ",", "5.289640182697771`", ",", 
     "10.291268257851764`", ",", "1.846068888176743`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.4797787854142528`", ",", "3.008274395265297`", ",", 
     "4.951963575722937`", ",", "1.1860160568943752`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.939375078721903`", ",", "6.172497669944304`", ",", 
     "10.887301562933787`", ",", "6.327362726769026`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7340762468188344`", ",", "2.676307481109`", ",", "17.269760096996176`",
      ",", "5.231511680130167`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.26577996723709574`", ",", "1.6775001881164275`", ",", 
     "8.912191937824502`", ",", "3.1386324722431986`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5124926300633163`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["testSampByPeaks"], "Input",
 CellChangeTimes->{{3.512492633053204*^9, 3.5124926356313868`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.0749523226571167`"}], ",", "4.559579422622431`", ",", 
     "15.456005555553805`", ",", "1.0306845146263799`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.33818131484648883`", ",", "1.5128917238443316`", ",", 
     "15.35144598743355`", ",", "5.50434303264651`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "5.568468594796123`", ",", "2.6943481356779984`", ",", 
     "5.883513486896404`", ",", "3.973434472495213`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.765792530028009`", ",", "5.921475782688766`", ",", 
     "16.86182773323254`", ",", "3.259538358652468`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.5971437530471574`", ",", "3.9731318198632932`", ",", 
     "15.651846977319288`", ",", "4.65984005927051`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.2694612925324136`", ",", "4.041485548539184`", ",", 
     "15.63745949349137`", ",", "2.6545035805752573`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.51929774006229`", ",", "3.7507585642604466`", ",", 
     "2.9136029106545056`", ",", "2.0037469950016957`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.41873968061132283`"}], ",", "1.5024741186667538`", ",", 
     "12.643516193037566`", ",", "2.750411310423376`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.780308555406238`", ",", "3.444583384223499`", ",", 
     "13.772408672751748`", ",", 
     RowBox[{"-", "0.0728109965965884`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.289972530888464`", ",", "4.72523220893518`", ",", 
     "5.6836802097684025`", ",", "4.167792094908323`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.29971915388357`", ",", "2.3489059739364593`", ",", 
     "16.06384955123641`", ",", "0.27601231989451147`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4114084221435492`"}], ",", "2.1103809413663823`", ",", 
     "9.556609491794442`", ",", "2.3201088953803044`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.295890943842708`"}], ",", "4.4802807862487235`", ",", 
     "5.382961186551973`", ",", "6.041441130818358`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.6303963507325312`", ",", "4.370388643177008`", ",", 
     "9.58521466319122`", ",", 
     RowBox[{"-", "2.0808607277628726`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.039305220671256`", ",", "5.292874115370376`", ",", 
     "17.378629247032546`", ",", "1.1216789262492832`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "4.273273315764333`", ",", "6.184304186938688`", ",", 
     "9.753806343934981`", ",", "5.185351458813097`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.512492636228825*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testDifference", "=", 
  RowBox[{"testReconstruction", "-", "testSampByPeaks"}]}]], "Input",
 CellChangeTimes->{{3.51249351469162*^9, 3.5124935331204367`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4.601635997030301`", ",", 
     RowBox[{"-", "1.0825584758556301`"}], ",", "0.18042870482051399`", ",", 
     "3.64823231254395`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4055934215058731`"}], ",", "1.4858290300754142`", ",", 
     RowBox[{"-", "0.2306481738370536`"}], ",", 
     RowBox[{"-", "5.950956987180305`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2.5344394454667616`"}], ",", "2.17646780791895`", ",", 
     "0.4213838595439814`", ",", 
     RowBox[{"-", "2.827099339025831`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.279968802231294`"}], ",", 
     RowBox[{"-", "4.512685620267503`"}], ",", 
     RowBox[{"-", "0.7277743445858`"}], ",", "1.089872090479591`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.9956087725752641`"}], ",", 
     RowBox[{"-", "1.9555642845255488`"}], ",", 
     RowBox[{"-", "0.5751202175357939`"}], ",", 
     RowBox[{"-", "2.701873503697029`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.5544799369795141`"}], ",", 
     RowBox[{"-", "1.0968998728554404`"}], ",", 
     RowBox[{"-", "0.10789431334807986`"}], ",", "0.6157379183828566`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3.124631152257274`", ",", "2.0506425409112463`", ",", 
     "0.8355396913359279`", ",", "1.098704787413907`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.645672862736621`", ",", "3.330144432328626`", ",", 
     "0.5865612183746496`", ",", 
     RowBox[{"-", "1.5492670439129599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.15646889513171303`", ",", "1.4799217251927672`", ",", 
     "0.7812632248097646`", ",", "4.55306283014262`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.9090501353438607`"}], ",", 
     RowBox[{"-", "1.0076359991830492`"}], ",", 
     RowBox[{"-", "0.05135578193205781`"}], ",", 
     RowBox[{"-", "1.6095859241839316`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.1371813089000025`", ",", "2.5705184241816137`", ",", 
     "0.8030941614173486`", ",", "3.218461300198883`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3.5451536438505413`", ",", "3.1792592413313887`", ",", 
     "0.734658766057322`", ",", 
     RowBox[{"-", "0.4740400072035613`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.7756697292569608`", ",", 
     RowBox[{"-", "1.4720063909834264`"}], ",", 
     RowBox[{"-", "0.43099761082903587`"}], ",", 
     RowBox[{"-", "4.855425073923983`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "3.3089787279893716`", ",", "1.8021090267672966`", ",", 
     "1.3020868997425676`", ",", "8.4082234545319`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.3052289738524216`"}], ",", 
     RowBox[{"-", "2.6165666342613756`"}], ",", 
     RowBox[{"-", "0.10886915003636943`"}], ",", "4.109832753880884`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.007493348527237`"}], ",", 
     RowBox[{"-", "4.50680399882226`"}], ",", 
     RowBox[{"-", "0.8416144061104784`"}], ",", 
     RowBox[{"-", "2.046718986569898`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512493535538781*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testDifferenceEdited", "=", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"testDifference", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{
       "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",",
         "15"}], "}"}], "]"}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124935486067123`*^9, 3.512493633181177*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.601635997030301`", ",", 
   RowBox[{"-", "2.5344394454667616`"}], ",", 
   RowBox[{"-", "0.9956087725752641`"}], ",", "3.124631152257274`", ",", 
   "0.15646889513171303`", ",", "1.1371813089000025`", ",", 
   "3.7756697292569608`", ",", 
   RowBox[{"-", "1.3052289738524216`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.512493624040476*^9, 3.5124936338014936`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testError", "=", 
  RowBox[{"Norm", "[", 
   RowBox[{"testDifferenceEdited", ",", "\"\<Frobenius\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5124936661513357`*^9, 3.5124936907017727`*^9}}],

Cell[BoxData["7.458549607038543`"], "Output",
 CellChangeTimes->{{3.512493687282463*^9, 3.512493691215708*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "=", 
  RowBox[{"evaluation", "[", 
   RowBox[{"3", ",", 
    RowBox[{"-", "testError"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5124937104860497`*^9, 3.5124937722293987`*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", 
   RowBox[{"-", "7.458549607038543`"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.512493753500108*^9, 3.5124937732837048`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["It doesn't work", "Subsubsection",
 CellChangeTimes->{{3.5124940309029703`*^9, 3.512494033367856*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "evaluationExcludingData"}]], "Input",
 CellChangeTimes->{3.512493806264761*^9}],

Cell[BoxData[
 StyleBox["\<\"estimationError[positions,testSamples,testPeaks,fracVar]\\\
nReturns an evaluation object from estimating the testPeaks peaks in the \
testSamples samples using the data from the rest of the corresponding peak \
positions and the hough-transform linear model - in this case, gives negative \
root sum of squared error (rather than variance accounted for) and the number \
of dimensions required to get it\\n\\nLIMITATION: does not handle the case \
where the number of principal components in one direction is greater than the \
number of training variables in the other direction (and thus greater than \
the maximum number of variables the other can supply) -- TODO: need to fix \
this\\n\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512493807286975*^9},
 CellTags->"Info3512479406-3746257"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testActual", "=", 
  RowBox[{"evaluationExcludingData", "[", 
   RowBox[{"testSampByPeaks", ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
      "15"}], "}"}], ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512493789087729*^9, 3.5124938454301434`*^9}, {
  3.5124939692375803`*^9, 3.512494008277804*^9}, {3.51249546949317*^9, 
  3.512495476627976*^9}, {3.5124955452882957`*^9, 3.512495546163746*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Dot", "::", "\<\"dotsh\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Tensors \\\\\\\"\\\", \\\"MT\
\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\({\\(\\({\\(\\(-0.19758141992678907`\
\\)\\), 0.6091705741769861`, 0.26198162959281684`}\\)\\), \
\\(\\({\\(\\(-0.12443094911435482`\\)\\), 0.5279094293457202`, \
0.5127264748113546`}\\)\\), \\(\\({0.965832615364494`, 0.12528853678586`, \
0.21160186765143907`}\\)\\), \\(\\({0.11245390389130784`, \
0.5783819054178786`, \\(\\(-0.7897479581422396`\\)\\)}\\)\\)}\\), \\\"MT\\\"]\
\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" and \\\\\\\"\\\", \\\"MT\\\"]\\)\
\[NoBreak]\\!\\(\\*StyleBox[\\!\\({\\(\\({3.918217025069692`, \
3.2182916360565734`, \\(\\(-5.96299297374556`\\)\\), 5.022367456216888`, \
3.6336265712832705`, 3.883217064668928`, \\(\\(-8.645331181213345`\\)\\), \
0.8959554062880761`, 2.391389007565333`, \\(\\(-6.181277439017554`\\)\\), \
4.614166369069345`, \\(\\(-2.1059548789161067`\\)\\), \
\\(\\(-6.726389454735485`\\)\\), \\(\\(-1.4929611924726356`\\)\\), \
5.81411587556331`, \\(\\(-2.276439291680733`\\)\\)}\\)\\), \
\\(\\({1.09784722980855`, \\(\\(-3.1548457900082796`\\)\\), \
\\(\\(-0.4604406772848858`\\)\\), \\(\\(-1.365457683100565`\\)\\), \
\\(\\(-2.489229259426125`\\)\\), \\(\\(-0.505837329065317`\\)\\), \
1.822703257445851`, \\(\\(-0.07291826665179886`\\)\\), 2.470413453693612`, \
\\(\\(-0.734754681212881`\\)\\), 1.8828911061280253`, 0.7255646057492372`, \
\\(\\(-2.537053874200374`\\)\\), 4.958145384555803`, 0.7165577874873963`, \\(\
\\(-2.353585263918249`\\)\\)}\\)\\)}\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" have incompatible \
shapes.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\
\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Dot/dotsh\\\", ButtonNote -> \
\\\"Dot::dotsh\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.512493846889139*^9, {3.5124939698876657`*^9, 3.512494009081712*^9}, 
   3.5124954777191896`*^9, 3.5124955470566263`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "::", "\<\"tdlen\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Objects of unequal length in \
\\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(\\(\\({\\(\\({3.\
918217025069692`, 3.2182916360565734`, \\(\\(-5.96299297374556`\\)\\), \
5.022367456216888`, 3.6336265712832705`, 3.883217064668928`, \
\\(\\(-8.645331181213345`\\)\\), 0.8959554062880761`, 2.391389007565333`, \\(\
\\(-6.181277439017554`\\)\\), 4.614166369069345`, \
\\(\\(-2.1059548789161067`\\)\\), \\(\\(-6.726389454735485`\\)\\), \
\\(\\(-1.4929611924726356`\\)\\), 5.81411587556331`, \
\\(\\(-2.276439291680733`\\)\\)}\\)\\), \\(\\({1.09784722980855`, \
\\(\\(-3.1548457900082796`\\)\\), \\(\\(-0.4604406772848858`\\)\\), \
\\(\\(-1.365457683100565`\\)\\), \\(\\(-2.489229259426125`\\)\\), \
\\(\\(-0.505837329065317`\\)\\), 1.822703257445851`, \
\\(\\(-0.07291826665179886`\\)\\), 2.470413453693612`, \
\\(\\(-0.734754681212881`\\)\\), 1.8828911061280253`, 0.7255646057492372`, \
\\(\\(-2.537053874200374`\\)\\), 4.958145384555803`, 0.7165577874873963`, \\(\
\\(-2.353585263918249`\\)\\)}\\)\\)}\\)\\) + \\(\\({1.8421161540046709`, \
\\(\\(\[LeftSkeleton] 19 \[RightSkeleton]\\)\\), \\(\\(\[LeftSkeleton] 18 \
\[RightSkeleton]\\)\\), \\(\\(\[LeftSkeleton] 18 \
\[RightSkeleton]\\)\\)}\\)\\)\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" cannot be \
combined.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Thread/tdlen\\\", ButtonNote -> \
\\\"Thread::tdlen\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.512493846889139*^9, {3.5124939698876657`*^9, 3.512494009081712*^9}, 
   3.5124954777191896`*^9, 3.512495547110557*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "::", "\<\"tdlen\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Objects of unequal length in \
\\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(\\(\\({\\(\\({3.\
918217025069692`, 3.2182916360565734`, \\(\\(-5.96299297374556`\\)\\), \
5.022367456216888`, 3.6336265712832705`, 3.883217064668928`, \
\\(\\(-8.645331181213345`\\)\\), 0.8959554062880761`, 2.391389007565333`, \\(\
\\(-6.181277439017554`\\)\\), 4.614166369069345`, \
\\(\\(-2.1059548789161067`\\)\\), \\(\\(-6.726389454735485`\\)\\), \
\\(\\(-1.4929611924726356`\\)\\), 5.81411587556331`, \
\\(\\(-2.276439291680733`\\)\\)}\\)\\), \\(\\({1.09784722980855`, \
\\(\\(-3.1548457900082796`\\)\\), \\(\\(-0.4604406772848858`\\)\\), \
\\(\\(-1.365457683100565`\\)\\), \\(\\(-2.489229259426125`\\)\\), \
\\(\\(-0.505837329065317`\\)\\), 1.822703257445851`, \
\\(\\(-0.07291826665179886`\\)\\), 2.470413453693612`, \
\\(\\(-0.734754681212881`\\)\\), 1.8828911061280253`, 0.7255646057492372`, \
\\(\\(-2.537053874200374`\\)\\), 4.958145384555803`, 0.7165577874873963`, \\(\
\\(-2.353585263918249`\\)\\)}\\)\\)}\\)\\) + \\(\\({1.8421161540046709`, \
\\(\\(\[LeftSkeleton] 19 \[RightSkeleton]\\)\\), \\(\\(\[LeftSkeleton] 18 \
\[RightSkeleton]\\)\\), \\(\\(\[LeftSkeleton] 18 \
\[RightSkeleton]\\)\\)}\\)\\)\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" cannot be \
combined.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Thread/tdlen\\\", ButtonNote -> \
\\\"Thread::tdlen\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.512493846889139*^9, {3.5124939698876657`*^9, 3.512494009081712*^9}, 
   3.5124954777191896`*^9, 3.5124955471319857`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "::", "\<\"tdlen\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Objects of unequal length in \
\\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(\\(\\({\\(\\({3.\
918217025069692`, 3.2182916360565734`, \\(\\(-5.96299297374556`\\)\\), \
5.022367456216888`, 3.6336265712832705`, 3.883217064668928`, \
\\(\\(-8.645331181213345`\\)\\), 0.8959554062880761`, 2.391389007565333`, \\(\
\\(-6.181277439017554`\\)\\), 4.614166369069345`, \
\\(\\(-2.1059548789161067`\\)\\), \\(\\(-6.726389454735485`\\)\\), \
\\(\\(-1.4929611924726356`\\)\\), 5.81411587556331`, \
\\(\\(-2.276439291680733`\\)\\)}\\)\\), \\(\\({\\(\[LeftSkeleton] 1 \
\[RightSkeleton]\\)}\\)\\), \\(\\({\\(\\(-0.8017425645624143`\\)\\), \
2.4741642872942675`, 1.1230683951845977`, \\(\\(-2.0313229321189423`\\)\\), \
\\(\\(-0.023966790655937605`\\)\\), \\(\\(-0.19750255322899593`\\)\\), \
\\(\\(-0.06367340383775343`\\)\\), 2.31413489866695`, 0.23762028773169996`, \
\\(\\(-0.8966598198278535`\\)\\), 1.372065652404681`, 1.6548446759850732`, \
\\(\\(-0.5567122511594833`\\)\\), \\(\\(-0.8324199627618282`\\)\\), \
\\(\\(-1.5107340019335884`\\)\\), \\(\\(-2.2611639171804647`\\)\\)}\\)\\)}\\)\
\\)\\\\ \\(\\({\\(\[LeftSkeleton] 1 \[RightSkeleton]\\)}\\)\\)\\), \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" cannot be \
combined.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\
\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Thread/tdlen\\\", ButtonNote -> \
\\\"Thread::tdlen\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.512493846889139*^9, {3.5124939698876657`*^9, 3.512494009081712*^9}, 
   3.5124954777191896`*^9, 3.5124955471561413`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"Further output of \\\\\\\"\\\
\", \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(Thread :: \
\\\"tdlen\\\"\\), \\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" will \
be suppressed during this calculation.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.512493846889139*^9, {3.5124939698876657`*^9, 3.512494009081712*^9}, 
   3.5124954777191896`*^9, 3.512495547178299*^9}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   PanelBox[GridBox[{
      {
       StyleBox[
        StyleBox[
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
           StandardForm],
          ImageSizeCache->{377., {3., 10.}}],
         StripOnInput->False,
         DynamicUpdating->True], "Panel",
        StripOnInput->False,
        Background->None]},
      {
       ItemBox[
        TagBox[
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"3.918217025069692`", ",", "3.2182916360565734`", ",", 
              RowBox[{"-", "5.96299297374556`"}], ",", "5.022367456216888`", 
              ",", "3.6336265712832705`", ",", "3.883217064668928`", ",", 
              RowBox[{"-", "8.645331181213345`"}], ",", "0.8959554062880761`",
               ",", "2.391389007565333`", ",", 
              RowBox[{"-", "6.181277439017554`"}], ",", "4.614166369069345`", 
              ",", 
              RowBox[{"-", "2.1059548789161067`"}], ",", 
              RowBox[{"-", "6.726389454735485`"}], ",", 
              RowBox[{"-", "1.4929611924726356`"}], ",", "5.81411587556331`", 
              ",", 
              RowBox[{"-", "2.276439291680733`"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.8017425645624143`"}], ",", 
              "2.4741642872942675`", ",", "1.1230683951845977`", ",", 
              RowBox[{"-", "2.0313229321189423`"}], ",", 
              RowBox[{"-", "0.023966790655937605`"}], ",", 
              RowBox[{"-", "0.19750255322899593`"}], ",", 
              RowBox[{"-", "0.06367340383775343`"}], ",", "2.31413489866695`",
               ",", "0.23762028773169996`", ",", 
              RowBox[{"-", "0.8966598198278535`"}], ",", "1.372065652404681`",
               ",", "1.6548446759850732`", ",", 
              RowBox[{"-", "0.5567122511594833`"}], ",", 
              RowBox[{"-", "0.8324199627618282`"}], ",", 
              RowBox[{"-", "1.5107340019335884`"}], ",", 
              RowBox[{"-", "2.2611639171804647`"}]}], "}"}]}], "}"}], " ", 
          RowBox[{"{", 
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}]}],
         Short[#, 5]& ],
        Background->GrayLevel[1],
        BaseStyle->{Deployed -> False},
        Frame->True,
        FrameStyle->GrayLevel[0, 0.2],
        StripOnInput->False]},
      {
       RowBox[{
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
             StandardForm],
            ImageSizeCache->{68., {0., 10.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 96, 23019370986188296609, 5/2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
             StandardForm],
            ImageSizeCache->{71., {0., 10.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 96, 23019370986188296609, 5 2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
             StandardForm],
            ImageSizeCache->{110., {3., 10.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 96, 23019370986188296609, Infinity],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
             StandardForm],
            ImageSizeCache->{101., {0., 10.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>FrontEndExecute[{
            FrontEnd`SetOptions[
            FrontEnd`$FrontEnd, 
             FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
            FrontEnd`FrontEndToken["PreferencesDialog"]}],
         Evaluator->None,
         Method->"Preemptive"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[1.2]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    DefaultBaseStyle->{},
    FrameMargins->5],
   Deploy,
   DefaultBaseStyle->{Deployed -> True}],
  Out[96]]], "Output",
 CellChangeTimes->{
  3.512493848163876*^9, {3.512493970467372*^9, 3.512494009612309*^9}, 
   3.512495479132856*^9, 3.512495547670919*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Find out what went wrong", "Subsubsection",
 CellChangeTimes->{{3.512494051829122*^9, 3.512494053634008*^9}, {
  3.512494102574184*^9, 3.512494106503408*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"evaluationExcludingData", "[", 
     RowBox[{
     "positions_List", ",", " ", "testSamples_List", ",", " ", 
      "testPeaks_List", ",", " ", "fracVar_"}], "]"}], "/;", 
    RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sampCoeff", "=", 
        RowBox[{"sampleParameters", "[", 
         RowBox[{"positions", ",", "testPeaks", ",", "fracVar"}], "]"}]}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"reactCoeff", "=", 
        RowBox[{"reactionParameters", "[", 
         RowBox[{"positions", ",", "testSamples", ",", "fracVar"}], "]"}]}]}],
       "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"reactCompNeeded", "=", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"reactCoeff", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", 
         RowBox[{"sampCompNeeded", "=", 
          RowBox[{"Length", "[", "sampCoeff", "]"}]}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"reactCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"reactCompNeeded", "<", "sampCompNeeded"}], ",", 
           RowBox[{"reactionParameters", "[", 
            RowBox[{
            "positions", ",", "testSamples", ",", "fracVar", ",", 
             "sampCompNeeded"}], "]"}], ",", "reactCoeff"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sampCoeff", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"sampCompNeeded", "<", "reactCompNeeded"}], ",", 
           RowBox[{"sampleParameters", "[", 
            RowBox[{
            "positions", ",", "testPeaks", ",", "fracVar", ",", 
             "reactCompNeeded"}], "]"}], ",", "sampCoeff"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"estimatedPositions", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "+", 
                RowBox[{"First", "[", "reactCoeff", "]"}]}], "&"}], ",", 
              RowBox[{"Transpose", "[", 
               RowBox[{
                RowBox[{"reactCoeff", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ".", "sampCoeff"}], "]"}]}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"errors", "=", 
               RowBox[{"positions", "-", "estimatedPositions"}]}], ",", 
              RowBox[{"prinCompNeeded", "=", 
               RowBox[{"Max", "[", 
                RowBox[{"reactCompNeeded", ",", "sampCompNeeded"}], "]"}]}]}],
              "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"testErrors", "=", 
                RowBox[{"Transpose", "[", 
                 RowBox[{
                  RowBox[{"Transpose", "[", 
                   RowBox[{"errors", "[", 
                    RowBox[{"[", "testSamples", "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "testPeaks", "]"}], "]"}], "]"}]}], "}"}], ",",
               "\[IndentingNewLine]", 
              RowBox[{"evaluation", "[", 
               RowBox[{"prinCompNeeded", ",", 
                RowBox[{"-", 
                 RowBox[{"Norm", "[", 
                  RowBox[{"testErrors", ",", "\"\<Frobenius\>\""}], "]"}]}]}],
                "]"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}]}], 
      "]"}]}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511868706674631*^9, 3.511868734809435*^9}, {
   3.5118688724096203`*^9, 3.51186888396852*^9}, {3.511869049305642*^9, 
   3.511869049961523*^9}, {3.511869675792551*^9, 3.511869679776599*^9}, {
   3.5118697581441393`*^9, 3.511869902015358*^9}, {3.511869965518659*^9, 
   3.51186998577255*^9}, {3.511870016154146*^9, 3.5118700204960833`*^9}, {
   3.5118701056745768`*^9, 3.5118701270589657`*^9}, {3.5118701683964043`*^9, 
   3.511870393826042*^9}, {3.5118704728662777`*^9, 3.511870492173098*^9}, {
   3.511870718629366*^9, 3.511870857068286*^9}, {3.511870887436969*^9, 
   3.511870970278597*^9}, 3.511871004055237*^9, {3.511871328529257*^9, 
   3.511871351767191*^9}, {3.5118714429595127`*^9, 3.511871593325675*^9}, {
   3.511871678173822*^9, 3.511871703938517*^9}, 3.511872048104251*^9, {
   3.511872090190297*^9, 3.5118721016799803`*^9}, {3.512494301714076*^9, 
   3.512494322626246*^9}, {3.512494385305704*^9, 3.51249440269029*^9}, {
   3.512494503773031*^9, 3.51249461696861*^9}, {3.5124949051885357`*^9, 
   3.512494907649107*^9}, 3.5124954230229263`*^9, {3.5124957940090714`*^9, 
   3.51249585592412*^9}, {3.512495923249075*^9, 3.5124959287670527`*^9}, {
   3.512495982486356*^9, 3.512496003958445*^9}, 3.512496034091735*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "reactionParameters"}]], "Input",
 CellChangeTimes->{{3.512495753178637*^9, 3.5124957559077682`*^9}}],

Cell[BoxData[
 StyleBox["\<\"reactionParameters[positions,excludedSamples,fracVar,\
minComponents]\\nCalculates the reaction parameters for each peak using SVD \
based PCA given a set of corresponding peak positions.  Samples at indices \
given by excludedSamples are not used to create the \
estimatereactionParameters\\n\\npositions is an array of dimensions samples\
\[Cross]peaks\\n\\nReturns {means,reactionCoefficients} where means is a 1\
\[Cross]peaks array and reactionCoefficients is a peaks\[Cross]d array where \
d is the number of components needed to get fracVar fraction of the variance \
or minComponents, whichever is larger\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512495757003879*^9},
 CellTags->"Info3512481356-2868314"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "sampleParameters"}]], "Input",
 CellChangeTimes->{{3.512495758198442*^9, 3.512495761562327*^9}}],

Cell[BoxData[
 StyleBox["\<\"sampleParameters[positions,excludedPeaks,fracVar,minComponents]\
\\nCalculates the reaction parameters for each peak using SVD based PCA given \
a set of corresponding peak positions.  peaks at indices given by \
excludedPeaks are not used to create the estimate\\n\\npositions is an array \
of dimensions samples\[Cross]peaks\\n\\nReturns sampleCoefficients, a d\
\[Cross]samples array where d is the number of components needed to get \
fracVar fraction of the variance or minComponents, whichever is larger\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512495762814062*^9},
 CellTags->"Info3512481362-2165483"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleParameters", "[", 
    RowBox[{
    "positions_List", ",", " ", "excludedPeaks_List", ",", "fracVar_", ",", 
     RowBox[{"minComponents_Integer:", "0"}]}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"includedPeaks", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{
          RowBox[{"Dimensions", "[", "positions", "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "excludedPeaks"}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"editedPositions", "=", 
        RowBox[{"Transpose", "[", 
         RowBox[{
          RowBox[{"Transpose", "[", "positions", "]"}], "[", 
          RowBox[{"[", "includedPeaks", "]"}], "]"}], "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"means", "=", 
          RowBox[{"Mean", "[", "editedPositions", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"meanCenteredPos", "=", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "-", "means"}], "&"}], ",", "editedPositions"}], 
             "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"wxd", "=", 
              RowBox[{"wxDecompose", "[", 
               RowBox[{
                RowBox[{"Transpose", "[", "meanCenteredPos", "]"}], ",", 
                "fracVar", ",", "minComponents"}], "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"With", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"w", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                RowBox[{"x", "=", 
                 RowBox[{"wxd", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
              "\[IndentingNewLine]", "x"}], "\[IndentingNewLine]", "]"}]}], 
           "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.511867634809342*^9, 3.5118676887450666`*^9}, {
   3.511867783773283*^9, 3.511867848347035*^9}, {3.511867981102407*^9, 
   3.5118679951572323`*^9}, {3.511868335114819*^9, 3.511868365203348*^9}, {
   3.511868642985024*^9, 3.51186865547156*^9}, {3.511868859403586*^9, 
   3.511868866086565*^9}, {3.511869055920473*^9, 3.511869063159749*^9}, {
   3.512234364908141*^9, 3.512234427291312*^9}, {3.512234459916006*^9, 
   3.5122344734711*^9}, {3.512475644526998*^9, 3.5124756915370827`*^9}, {
   3.5124828478110228`*^9, 3.512482897106379*^9}, {3.512486579955283*^9, 
   3.512486584439505*^9}, {3.512487653476987*^9, 3.512487654842448*^9}, {
   3.5124952778402042`*^9, 3.51249528306068*^9}, {3.512495408197075*^9, 
   3.5124954154605217`*^9}, 3.512495531348456*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleParameters", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"9", "/", "10"}], ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.512494786809985*^9, 3.512494839696419*^9}, {
  3.512494872826503*^9, 3.512494875805353*^9}, {3.512494956018886*^9, 
  3.5124949604034853`*^9}, {3.5124950280208397`*^9, 3.51249505329604*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{
  3.512494876492412*^9, 3.51249491527039*^9, {3.512494946047064*^9, 
   3.512494961305017*^9}, {3.51249504001309*^9, 3.512495053967046*^9}, 
   3.5124952866668377`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluationExcludingData", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5124944799899197`*^9, 3.51249448967347*^9}, {
  3.512495387831236*^9, 3.512495393332546*^9}, {3.512495840090695*^9, 
  3.512495840502248*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19758141992678907`"}], ",", "0.6091705741769861`", ",", 
     "0.26198162959281684`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.12443094911435482`"}], ",", "0.5279094293457202`", ",", 
     "0.5127264748113546`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.965832615364494`", ",", "0.12528853678586`", ",", 
     "0.21160186765143907`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.11245390389130784`", ",", "0.5783819054178786`", ",", 
     RowBox[{"-", "0.7897479581422396`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5124945917119713`*^9, 3.512494619306882*^9}, 
   3.51249539410637*^9, 3.5124954330224953`*^9, 3.5124955351153593`*^9, 
   3.512495832099152*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evaluationExcludingData", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", 
   RowBox[{"-", "7.458549607038543`"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.512495860818618*^9, {3.512496016581291*^9, 3.512496038716323*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["New and improved with obvious bugs fixed", "Subsubsection",
 CellChangeTimes->{{3.512496106060953*^9, 3.512496121350831*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testActual", "=", 
  RowBox[{"evaluationExcludingData", "[", 
   RowBox[{"testSampByPeaks", ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
      "15"}], "}"}], ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"9", "/", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512496144095663*^9, 3.512496146697188*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", 
   RowBox[{"-", "7.458549607038543`"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.512496128424693*^9, 3.512496147721407*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testExpected", "\[Equal]", "testActual"}]], "Input",
 CellChangeTimes->{{3.5124961485606117`*^9, 3.512496154358177*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.5124961552027893`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Write leave-one-out cross-validation", "Subsection",
 CellChangeTimes->{{3.51249699857664*^9, 3.512497041205282*^9}, {
  3.512497238382555*^9, 3.512497250254644*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"leaveOneOutEvaluation", "::", "usage"}], "=", 
   "\"\<leaveOneOutEvaluation[positions, fracVar]\nUses leave-one-out \
cross-validation to evaluate the consistency of positions with the hough \
transform paper linear model, generating a model that explains fracVar of the \
variance using all but one entry.  \n\nReturns the mean of those generated.\>\
\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.512497829741028*^9, 3.512497966795796*^9}, {
  3.51251252945187*^9, 3.5125125305842743`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"leaveOneOutEvaluation", "[", 
    RowBox[{"positions_List", ",", "fracVar_"}], "]"}], "/;", 
   RowBox[{"NumberQ", "[", "fracVar", "]"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"evals", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"evaluationExcludingData", "[", 
          RowBox[{"positions", ",", 
           RowBox[{"{", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", "fracVar"}], "]"}], 
         "&"}], ",", 
        RowBox[{"Tuples", "[", 
         RowBox[{"Range", "/@", 
          RowBox[{"Dimensions", "[", "positions", "]"}]}], "]"}]}], "]"}]}], 
     "}"}], ",", 
    RowBox[{"(*", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"worst", "=", 
         RowBox[{"Fold", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"isBetter", "[", 
               RowBox[{"#1", ",", "#2"}], "]"}], ",", "#2", ",", "#1"}], 
             "]"}], "&"}], ",", " ", 
           RowBox[{"First", "[", "evals", "]"}], ",", 
           RowBox[{"Rest", "[", "evals", "]"}]}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "worst"}], "]"}], "*)"}], 
    RowBox[{"Mean", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", "evals"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.512497257604965*^9, 3.5124973108414383`*^9}, {
  3.512497349114276*^9, 3.5124975447147627`*^9}, {3.512497636438817*^9, 
  3.51249763828202*^9}, {3.512497679339951*^9, 3.512497774719121*^9}, {
  3.51251185130622*^9, 3.512511852721821*^9}, {3.512511952116559*^9, 
  3.51251197468473*^9}}],

Cell[CellGroupData[{

Cell["Quick smoke test", "Subsubsection",
 CellChangeTimes->{{3.5124979960782146`*^9, 3.512498001977541*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testSampByPeaks", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"RandomReal", "[", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"11", ",", "5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2"}], "}"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"{", "16", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.5124975896518583`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "4.34758249926212`"}], ",", "1.4100928276253994`", ",", 
     "17.429470617218026`", ",", "6.535618996079258`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.765501086517362`", ",", 
     RowBox[{"-", "3.065181348990542`"}], ",", "5.531363273882522`", ",", 
     "4.080303132143981`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.9884296036168423`", ",", "3.649321724868803`", ",", 
     "17.352434003240173`", ",", "7.55295905595793`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.7418498771331388`"}], ",", 
     RowBox[{"-", "0.6620742189127546`"}], ",", "12.203214110906977`", ",", 
     "3.0308999811369004`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0864594278263352`", ",", 
     RowBox[{"-", "0.6944457611328008`"}], ",", "20.57445820045203`", ",", 
     "0.7004754100599375`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5.466058293891765`", ",", 
     RowBox[{"-", "1.001029748170311`"}], ",", "24.636671393378453`", ",", 
     "3.558628521863457`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6877573360743512`"}], ",", "2.434446851437057`", ",", 
     "6.377254867099743`", ",", "3.6931860902577234`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.109183536845902`", ",", 
     RowBox[{"-", "0.3290853694359699`"}], ",", "16.245940444056757`", ",", 
     "1.2011873423161863`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7249493302591605`"}], ",", "0.9213363980089819`", ",", 
     "9.334424373853173`", ",", "0.587940591360383`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.3215705357571189`", ",", "0.008666216293584217`", ",", 
     "8.869033019452928`", ",", "1.9125290516928772`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.474366829638797`"}], ",", "3.7325071917572874`", ",", 
     "17.148481280520766`", ",", "0.18090287738036537`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.4372495852942593`"}], ",", "1.1229093999817221`", ",", 
     "7.256082180631055`", ",", "4.152669168986786`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2.3285897800783113`", ",", "7.05828940810389`", ",", 
     "7.169123564388311`", ",", "4.472136896345609`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "3.690431771189438`"}], ",", "2.1469843409228195`", ",", 
     "14.305690390959512`", ",", "3.5392274733388636`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.8354958318569681`"}], ",", "2.338854249541736`", ",", 
     "13.747133086063062`", ",", "0.6138528401642391`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "5.091127296560639`", ",", "1.2505387278106102`", ",", 
     "16.72887158770425`", ",", 
     RowBox[{"-", "0.01896223007661213`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.512497590097065*^9, 3.5124978002701387`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{"testSampByPeaks", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512497641046391*^9, 3.51249765869151*^9}}],

Cell[BoxData[
 RowBox[{"evaluation", "[", 
  RowBox[{"3", ",", 
   RowBox[{"-", "16.850101184102982`"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.512497659338224*^9, {3.512497778873384*^9, 3.512497804444578*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "!"}]], "Input",
 CellChangeTimes->{{3.512498077151566*^9, 3.512498077704792*^9}}],

Cell[BoxData["24"], "Output",
 CellChangeTimes->{3.512498078168831*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"4", "!"}], "^", "5"}]], "Input",
 CellChangeTimes->{{3.512498080112982*^9, 3.512498114628641*^9}, {
  3.51249814601971*^9, 3.512498167627042*^9}}],

Cell[BoxData["7962624"], "Output",
 CellChangeTimes->{{3.512498086655711*^9, 3.512498106240602*^9}, {
  3.512498148945541*^9, 3.512498168260083*^9}}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
See how well leave one out cross-validation works on test data (not perfect)\
\>", "Subsection",
 CellChangeTimes->{{3.5125106199081984`*^9, 3.512510635596719*^9}, {
  3.512570281359065*^9, 3.512570287078484*^9}}],

Cell[CellGroupData[{

Cell["\<\
Doesn't work on a small (3 \[Cross] 3 matrix (though typically only one \
error))\
\>", "Subsubsection",
 CellChangeTimes->{{3.512512895429531*^9, 3.5125129242131233`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "randomPeaksAndPermutation"}]], "Input",
 CellChangeTimes->{3.51251068323787*^9}],

Cell[BoxData[
 StyleBox["\<\"randomPeaksAndPermutation[numPeaks,numSamples,factorStdDev,\
noiseStdDev,peakResponseStdDev,peakRange] \\n\\nReturns a list of rules \
{\\\"peaks\\\"\[Rule]...,\\\"permutation\\\"\[Rule]...}.\\n\\n\\\"peaks\\\" \
gives a list of samples, each sample is a list of peaks sorted by their \
location.\\n\\n\\\"permutation\\\" gives a list of permutations that, when \
applied to the corresponding sample, will make the \
\!\(\*SuperscriptBox[\(i\), \(th\)]\) position in that sample contain the \
position of the \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak.  Thus, after \
applying all the permutations, the corresponding positions in the sample will \
contain corresponding peaks.\\n\\nnumPeaks and numSamples determine how many \
peaks and samples will be generated\\n\\nEach sample has a number of latent \
factors \!\(\*SubscriptBox[\(s\), \(j\)]\).  Each peak has the same number of \
latent response variables \!\(\*SubscriptBox[\(a\), \(i\)]\).  Each peak also \
has a base location \!\(\*SubscriptBox[\(k\), \(i\)]\).  The latent factors \
are selected from a multidimensional Gaussian with mean 0 and standard \
deviations given by factorStdDev.  Similarly the responses are selected from \
a Gaussian with mean 0 and standard deviations in peakResponseStdDev.  The \
peak means are selected independently from a uniform distribution over \
peakRange.\\n\\nThe \!\(\*SuperscriptBox[\(i\), \(th\)]\) peak in the \
\!\(\*SuperscriptBox[\(j\), \(th\)]\) sample is given a \
location:\\n\!\(\*SubscriptBox[\(\[Delta]\), \(ij\)]\)=\!\(\*SubscriptBox[\(k\
\), \(i\)]\)+\!\(\*SubscriptBox[\(a\), \
\(i\)]\)\[CenterDot]\!\(\*SubscriptBox[\(s\), \(j\)]\)+\!\(\*SubscriptBox[\(\
\[Xi]\), \(ij\)]\)\\n\\nWhere \!\(\*SubscriptBox[\(\[Xi]\), \(ij\)]\) is a \
normally distributed random variable with mean 0 and standard deviation \
noiseStdDev.\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.512510686758339*^9},
 CellTags->"Info3512496286-5561169"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"initialOutput", "=", 
  RowBox[{"randomPeaksAndPermutation", "[", 
   RowBox[{"3", ",", "3", ",", 
    RowBox[{"{", "1", "}"}], ",", "0.00001", ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512510826600239*^9, 3.512510868129294*^9}, {
  3.512511250940734*^9, 3.512511251953925*^9}, {3.51251217055147*^9, 
  3.51251217996659*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"peaks\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "1.7535274014935776`", ",", "7.518152550315021`", ",", 
        "9.869654063421674`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1.376970215128852`", ",", "7.088265835187146`", ",", 
        "11.936883822401727`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "2.2801503827625194`", ",", "6.978763565462136`", ",", 
        "8.119342059361193`"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"permutation\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "1", ",", "2"}], "}"}]}], "}"}]}]}], "}"}]], "Output",\

 CellChangeTimes->{{3.5125108412369337`*^9, 3.512510868999777*^9}, 
   3.512511252291291*^9, 3.5125121818507233`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"positions", "=", 
   RowBox[{"\"\<peaks\>\"", "/.", "initialOutput"}]}], ";", 
  RowBox[{"correctPermutation", "=", 
   RowBox[{"\"\<permutation\>\"", "/.", "initialOutput"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5125108699075613`*^9, 3.512510951696493*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"positionPermutations", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"Permutations", ",", "positions"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512510965493985*^9, 3.512510967982596*^9}, {
  3.512511041449748*^9, 3.5125111273178787`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "positionPermutations", "]"}]], "Input",
 CellChangeTimes->{{3.512511175839387*^9, 3.5125111904493856`*^9}}],

Cell[BoxData["216"], "Output",
 CellChangeTimes->{3.512511190926531*^9, 3.512511255976263*^9, 
  3.512512192511704*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"evals", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"leaveOneOutEvaluation", "[", 
       RowBox[{"#", ",", 
        RowBox[{"9", "/", "10"}]}], "]"}], "&"}], ",", 
     "positionPermutations"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.512511226410833*^9, 3.512511281708337*^9}, {
  3.512511318997912*^9, 3.5125113342175703`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"evalsPlusPerm", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"evals", ",", "positionPermutations"}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5125114485639973`*^9, 3.5125114532975063`*^9}, {
  3.5125115230843782`*^9, 3.51251154221916*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fold", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ">", 
       RowBox[{"#2", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ",", "#1", ",", "#2"}], "]"}], 
    "&"}], ",", 
   RowBox[{"First", "[", "evalsPlusPerm", "]"}], ",", 
   RowBox[{"Rest", "[", "evalsPlusPerm", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51251134044904*^9, 3.512511418698633*^9}, {
  3.512511566874076*^9, 3.512511585994219*^9}, {3.5125120422877083`*^9, 
  3.512512096761392*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.9740981521445917`"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "7.518152550315021`", ",", "1.7535274014935776`", ",", 
       "9.869654063421674`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "7.088265835187146`", ",", "1.376970215128852`", ",", 
       "11.936883822401727`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "6.978763565462136`", ",", "2.2801503827625194`", ",", 
       "8.119342059361193`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.512511343934017*^9, 3.51251141989052*^9, 3.512511589373991*^9, {
   3.5125120902225447`*^9, 3.512512097594035*^9}, 3.512512199769733*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correctPositions", "=", 
  RowBox[{"applyCandidate", "[", 
   RowBox[{"correctPermutation", ",", "positions"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512511639602007*^9, 3.51251165260566*^9}, {
  3.512511683537656*^9, 3.5125117134990597`*^9}, {3.512512324240402*^9, 
  3.5125123271943398`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "7.518152550315021`", ",", "1.7535274014935776`", ",", 
     "9.869654063421674`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7.088265835187146`", ",", "1.376970215128852`", ",", 
     "11.936883822401727`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "8.119342059361193`", ",", "2.2801503827625194`", ",", 
     "6.978763565462136`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5125117144415092`*^9, 3.512512201582367*^9, 
  3.512512328197689*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{"correctPositions", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.512512304852594*^9, 3.51251237410266*^9}}],

Cell[BoxData[
 RowBox[{"-", "1.2123373162462983`"}]], "Output",
 CellChangeTimes->{{3.512512339473208*^9, 3.5125123747494183`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "7.518152550315021`", ",", "1.7535274014935776`", ",", 
       "9.869654063421674`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "7.088265835187146`", ",", "1.376970215128852`", ",", 
       "11.936883822401727`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "6.978763565462136`", ",", "2.2801503827625194`", ",", 
       "8.119342059361193`"}], "}"}]}], "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.512512396110668*^9, 3.51251244714804*^9}}],

Cell[BoxData[
 RowBox[{"-", "0.9750711603092428`"}]], "Output",
 CellChangeTimes->{3.512512447771431*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Before giving up, I'll try it on a larger sample (4 \[Cross] 4)\
\>", "Subsubsection",
 CellChangeTimes->{{3.512513004742154*^9, 3.512513013118452*^9}, {
  3.51257016477488*^9, 3.512570174427149*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"initialOutput", "=", 
  RowBox[{"randomPeaksAndPermutation", "[", 
   RowBox[{"4", ",", "4", ",", 
    RowBox[{"{", "1", "}"}], ",", "0.00001", ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512510826600239*^9, 3.512510868129294*^9}, {
  3.512511250940734*^9, 3.512511251953925*^9}, {3.51251217055147*^9, 
  3.51251217996659*^9}, {3.5125131176410027`*^9, 3.512513148534932*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"peaks\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.6073333792249511`", ",", "4.468712860151824`", ",", 
        "7.687965619244198`", ",", "8.10978143092246`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1.9437491299893621`", ",", "3.7215113690944315`", ",", 
        "8.894176557520533`", ",", "9.641748960490586`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "1.464719021675608`", ",", "3.989345830674273`", ",", 
        "8.461819751050875`", ",", "9.092624558726845`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.38827339658180915`", ",", "4.591173220211834`", ",", 
        "7.490239621934476`", ",", "7.858646064847546`"}], "}"}]}], "}"}]}], 
   ",", 
   RowBox[{"\<\"permutation\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}]}], "}"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5125108412369337`*^9, 3.512510868999777*^9}, 
   3.512511252291291*^9, 3.5125121818507233`*^9, 3.512513149520356*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"positions", "=", 
   RowBox[{"\"\<peaks\>\"", "/.", "initialOutput"}]}], ";", 
  RowBox[{"correctPermutation", "=", 
   RowBox[{"\"\<permutation\>\"", "/.", "initialOutput"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5125108699075613`*^9, 3.512510951696493*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"positionPermutations", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{"Map", "[", 
     RowBox[{"Permutations", ",", "positions"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.512510965493985*^9, 3.512510967982596*^9}, {
  3.512511041449748*^9, 3.5125111273178787`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "positionPermutations", "]"}]], "Input",
 CellChangeTimes->{{3.512511175839387*^9, 3.5125111904493856`*^9}}],

Cell[BoxData["331776"], "Output",
 CellChangeTimes->{3.512511190926531*^9, 3.512511255976263*^9, 
  3.512512192511704*^9, 3.512513156299615*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{
   RowBox[{"evals", "=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"leaveOneOutEvaluation", "[", 
        RowBox[{"#", ",", 
         RowBox[{"9", "/", "10"}]}], "]"}], "&"}], ",", 
      "positionPermutations"}], "]"}]}], ";"}], "]"}]], "Input",
 CellChangeTimes->{{3.512511226410833*^9, 3.512511281708337*^9}, {
  3.512511318997912*^9, 3.5125113342175703`*^9}, {3.512513159679883*^9, 
  3.5125131650930433`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4529.7699999999995`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.512517428586134*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"evalsPlusPerm", "=", 
   RowBox[{"Thread", "[", 
    RowBox[{"{", 
     RowBox[{"evals", ",", "positionPermutations"}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5125114485639973`*^9, 3.5125114532975063`*^9}, {
  3.5125115230843782`*^9, 3.51251154221916*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Fold", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ">", 
       RowBox[{"#2", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ",", "#1", ",", "#2"}], "]"}], 
    "&"}], ",", 
   RowBox[{"First", "[", "evalsPlusPerm", "]"}], ",", 
   RowBox[{"Rest", "[", "evalsPlusPerm", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51251134044904*^9, 3.512511418698633*^9}, {
  3.512511566874076*^9, 3.512511585994219*^9}, {3.5125120422877083`*^9, 
  3.512512096761392*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.5363158852462766`"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "4.468712860151824`", ",", "8.10978143092246`", ",", 
       "7.687965619244198`", ",", "0.6073333792249511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3.7215113690944315`", ",", "9.641748960490586`", ",", 
       "8.894176557520533`", ",", "1.9437491299893621`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3.989345830674273`", ",", "9.092624558726845`", ",", 
       "8.461819751050875`", ",", "1.464719021675608`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "4.591173220211834`", ",", "7.858646064847546`", ",", 
       "7.490239621934476`", ",", "0.38827339658180915`"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.512511343934017*^9, 3.51251141989052*^9, 3.512511589373991*^9, {
   3.5125120902225447`*^9, 3.512512097594035*^9}, 3.512512199769733*^9, 
   3.5125191169838953`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correctPositions", "=", 
  RowBox[{"applyCandidate", "[", 
   RowBox[{"correctPermutation", ",", "positions"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.512511639602007*^9, 3.51251165260566*^9}, {
  3.512511683537656*^9, 3.5125117134990597`*^9}, {3.512512324240402*^9, 
  3.5125123271943398`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.6073333792249511`", ",", "4.468712860151824`", ",", 
     "8.10978143092246`", ",", "7.687965619244198`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.9437491299893621`", ",", "3.7215113690944315`", ",", 
     "9.641748960490586`", ",", "8.894176557520533`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.464719021675608`", ",", "3.989345830674273`", ",", 
     "9.092624558726845`", ",", "8.461819751050875`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.38827339658180915`", ",", "4.591173220211834`", ",", 
     "7.858646064847546`", ",", "7.490239621934476`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5125117144415092`*^9, 3.512512201582367*^9, 
  3.512512328197689*^9, 3.512519125896969*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{"correctPositions", ",", 
   RowBox[{"9", "/", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.512512304852594*^9, 3.51251237410266*^9}, {
  3.5125191337559*^9, 3.512519135230495*^9}}],

Cell[BoxData[
 RowBox[{"-", "1.187710425498596`"}]], "Output",
 CellChangeTimes->{{3.512512339473208*^9, 3.5125123747494183`*^9}, 
   3.51251913589473*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{"correctPositions", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.512512304852594*^9, 3.51251237410266*^9}, {
  3.5125191337559*^9, 3.512519135230495*^9}, {3.5125191878529797`*^9, 
  3.512519188596755*^9}}],

Cell[BoxData[
 RowBox[{"-", "1.1877102538099518`"}]], "Output",
 CellChangeTimes->{3.5125191895420322`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leaveOneOutEvaluation", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "4.468712860151824`", ",", "8.10978143092246`", ",", 
       "7.687965619244198`", ",", "0.6073333792249511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3.7215113690944315`", ",", "9.641748960490586`", ",", 
       "8.894176557520533`", ",", "1.9437491299893621`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "3.989345830674273`", ",", "9.092624558726845`", ",", 
       "8.461819751050875`", ",", "1.464719021675608`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "4.591173220211834`", ",", "7.858646064847546`", ",", 
       "7.490239621934476`", ",", "0.38827339658180915`"}], "}"}]}], "}"}], 
   ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.512512396110668*^9, 3.51251244714804*^9}, 
   3.512519172004328*^9}],

Cell[BoxData[
 RowBox[{"-", "0.5363156686945076`"}]], "Output",
 CellChangeTimes->{3.512512447771431*^9, 3.51251917407041*^9}]
}, Open  ]],

Cell["\<\
About 1 in 1000 permutations are \"better than\" the correct permutation\
\>", "Text",
 CellChangeTimes->{{3.512519369863078*^9, 3.5125194016061087`*^9}, {
  3.512569998704266*^9, 3.512570013015108*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Select", "[", 
   RowBox[{"evals", ",", 
    RowBox[{
     RowBox[{"#", ">", 
      RowBox[{"-", "1.1877102538099518`"}]}], "&"}]}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.512519203672895*^9, 3.512519250938862*^9}}],

Cell[BoxData["494"], "Output",
 CellChangeTimes->{3.512519251878343*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"494", "/", "331776"}], "*", "100"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.5125193489545307`*^9, 3.512519359930771*^9}}],

Cell[BoxData["0.14889564043209877`"], "Output",
 CellChangeTimes->{{3.512519354679647*^9, 3.512519360812935*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Unanswered questions", "Subsection",
 CellChangeTimes->{{3.512570293840536*^9, 3.512570297377821*^9}}],

Cell["\<\
1) My evaluation function isn't perfect, but how does it compare to the other \
available methods - is it better than the Hough transform or the \
edit-distance method?\
\>", "Text",
 CellChangeTimes->{{3.512570305073133*^9, 3.512570365699296*^9}}],

Cell["\<\
2) What happens when a better cross-validation strategy is used (e.g. 2-fold \
50 repetitions) - is the best any better?\
\>", "Text",
 CellChangeTimes->{{3.51257037273315*^9, 3.512570373650444*^9}, {
  3.512570410820359*^9, 3.512570424480465*^9}, {3.512570469995933*^9, 
  3.512570509671669*^9}}],

Cell["\<\
3) Is there a better way to fit a linear model and/or a better way of \
evaluating how good the fit is?\
\>", "Text",
 CellChangeTimes->{{3.512570514807753*^9, 3.512570521841242*^9}, {
  3.512570556130248*^9, 3.512570572911214*^9}}],

Cell["\<\
4) How does my beam-search/hill-climbing with cross-validation compare to the \
available methods -- maybe the sorted peaks will put it in the basin of \
attraction of a local maximum that only contains the correct permutation.\
\>", "Text",
 CellChangeTimes->{{3.512570576125062*^9, 3.512570683364912*^9}}],

Cell["\<\
5) Does the algorithm (with hill-climbing) perform better on larger data sets \
(since there are more constraints to violate)?\
\>", "Text",
 CellChangeTimes->{{3.5125707416313267`*^9, 3.512570769064262*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["25 April 2011 Monday", "Section",
 CellChangeTimes->{{3.5128304525337563`*^9, 3.512830459570524*^9}}],

Cell[CellGroupData[{

Cell["Read about hough transform", "Subsection",
 CellChangeTimes->{{3.5128304656226807`*^9, 3.51283046912901*^9}}],

Cell["\<\
I checked two books out of the library - one on the hough transform and the \
other on parallelization.  Through reading some of the chapters of the first \
book I have some ideas and found a few papers.  One is titled \"On the \
sensitivity of the hough transform...\" and the other two concern a \
statistical treatment of the transform as a hypothesis tesgint method when \
used for object recognition.\
\>", "Text",
 CellChangeTimes->{{3.512830470909841*^9, 3.512830664494413*^9}}],

Cell["I wonder what is the best cell size etc for our application.", "Text",
 CellChangeTimes->{{3.512830673325911*^9, 3.512830684481084*^9}}],

Cell[CellGroupData[{

Cell["Sample param+peak param hough inference idea", "Subsubsection",
 CellChangeTimes->{{3.512830686965621*^9, 3.5128306901330853`*^9}, {
  3.512830772959673*^9, 3.5128307874735117`*^9}}],

Cell["\<\
I think it might be possible to do the inference for the sample parameters \
also using the hough transform - the special structure may let us marginalize \
treat it as several different accumulator arrays - one for each \
sample-parameter set then with extra dimensions for the peak position \
parameters\
\>", "Text",
 CellChangeTimes->{{3.5128306918013763`*^9, 3.512830766197091*^9}, {
  3.5128307963508263`*^9, 3.5128309064537363`*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["26 April 2011 Tuesday", "Section",
 CellChangeTimes->{{3.5128309152233477`*^9, 3.5128309194010143`*^9}}],

Cell[CellGroupData[{

Cell["Web-site configuration", "Subsection",
 CellChangeTimes->{{3.5128309760833387`*^9, 3.512830979137032*^9}}],

Cell["\<\
I spent some time looking for cheap mac server OS packages and also looking \
at server burn in to test bio-db.  I sent my findings to Paul and Dan.\
\>", "Text",
 CellChangeTimes->{{3.512830980610824*^9, 3.5128310302543383`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Reading about the hough transform", "Subsection",
 CellChangeTimes->{{3.512830921971878*^9, 3.512830929541264*^9}}],

Cell["\<\
I continued reading \"A Formal Definition of the Hough Transform: Properties \
and Relationships.\"  I won't finish it today.  It contains a number of \
things that are hard to visualize.\
\>", "Text",
 CellChangeTimes->{{3.5128309313153963`*^9, 3.512830972136455*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Hough variations to try", "Subsection",
 CellChangeTimes->{{3.5128321142682447`*^9, 3.512832117238103*^9}, {
  3.5128504888539143`*^9, 3.5128504901816263`*^9}}],

Cell["\<\
1. Use the known (model) peaks to derive the sample parameters but then \
calculate peak parameters for all peaks in the sample.  See how this works \
compared to the normal way.  Also see how it works in the face of errors in \
the model peaks - especially using the input of another matching algorithm as \
the model\
\>", "Text",
 CellChangeTimes->{{3.5128321229588413`*^9, 3.5128321984311733`*^9}, {
  3.512832229212027*^9, 3.512832261686027*^9}}],

Cell["\<\
2. See what happens to error when different quantization shapes (and \
quantizations) are used\
\>", "Text",
 CellChangeTimes->{{3.512832266798893*^9, 3.512832269480138*^9}, {
  3.512850492891852*^9, 3.5128505105421457`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["First crack at hough transform prototype", "Subsection",
 CellChangeTimes->{{3.512831099396618*^9, 3.5128311426292467`*^9}, {
  3.5128311970973873`*^9, 3.512831202694479*^9}, {3.5128524535469522`*^9, 
  3.5128524558497887`*^9}}],

Cell["\<\
The basic paradigm is read/write space-separated line oriented data file \
using the standard streams\
\>", "Text",
 CellChangeTimes->{{3.512835874375024*^9, 3.512835906845468*^9}}],

Cell[CellGroupData[{

Cell["hough_sample_params", "Subsubsection",
 CellChangeTimes->{{3.51283408529628*^9, 3.512834091529793*^9}}],

Cell["\<\
hough_sample_params [fractionVariance] < known_peaks > sample_params\
\>", "Text",
 CellChangeTimes->{{3.512831135113229*^9, 3.5128311386440353`*^9}, {
   3.512831450858382*^9, 3.512831471758383*^9}, {3.5128315136979847`*^9, 
   3.512831517057518*^9}, 3.512832062098823*^9, {3.512832327112322*^9, 
   3.5128323385354548`*^9}, {3.512832574541724*^9, 3.512832603454234*^9}, {
   3.512832651149777*^9, 3.5128326579896727`*^9}, {3.512832736387932*^9, 
   3.5128327432004423`*^9}}],

Cell["\<\
Reads a known peak correspondence list from standard_input and writes the \
calculated sample parameters to standard_output.  The peaks must be present \
in all samples.  Outputs the sample parameters for each sample - calculated \
by choosing the principal components that explain fractionVariance portion of \
the variance.\
\>", "Text",
 CellChangeTimes->{{3.512832660952713*^9, 3.512832733593745*^9}, {
  3.5128327965907173`*^9, 3.512832818779917*^9}, {3.512833212480723*^9, 
  3.5128332198344107`*^9}, {3.512833518333908*^9, 3.512833527685792*^9}, {
  3.512834717454102*^9, 3.512834738524317*^9}, {3.512834825049527*^9, 
  3.512834839707478*^9}}],

Cell[CellGroupData[{

Cell["Input", "Subsubsubsection",
 CellChangeTimes->{{3.512835403436387*^9, 3.512835404805444*^9}}],

Cell[TextData[{
 "The input peaks are one per line.  Each line begins with a type string.  \
The format for each line is:\nknown_peak ",
 StyleBox["sample_number  peak_id peak_group_id  peak_position",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5128335308467627`*^9, 3.5128335372677402`*^9}, {
  3.512833824365385*^9, 3.512833857078424*^9}, {3.5128338879382668`*^9, 
  3.512833890146963*^9}, {3.512834385068729*^9, 3.512834386893008*^9}, {
  3.512834432955517*^9, 3.5128344351622458`*^9}, {3.512845187263307*^9, 
  3.512845189464929*^9}, {3.512845331408695*^9, 3.512845332593299*^9}, {
  3.51284538369304*^9, 3.5128453913332376`*^9}, {3.512845426858327*^9, 
  3.512845460590931*^9}}],

Cell[TextData[{
 StyleBox["sample_number",
  FontSlant->"Italic"],
 " is a non-negative number identifying a sample\n",
 StyleBox["peak_id",
  FontSlant->"Italic"],
 " is a non-negative integer uniquely identifying this peak in this sample\n\
",
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " is a non-negative integer identifying a group of corresponding peaks - if \
a peak_group_id is present for one sample it must be present for all the \
samples\n",
 StyleBox["peak_position",
  FontSlant->"Italic"],
 " is a decimal rational number expected to be ppm (though it doesn't really \
matter)\nAll peaks with the same group identifier are expected to correspond"
}], "Text",
 CellChangeTimes->{{3.512833900998667*^9, 3.5128339466819887`*^9}, {
  3.512833982580433*^9, 3.512834060663746*^9}, {3.512834437031822*^9, 
  3.512834448878625*^9}, {3.512834624352916*^9, 3.512834635440126*^9}, {
  3.512834690557947*^9, 3.512834692550995*^9}, {3.512835241124256*^9, 
  3.512835242046352*^9}, {3.512835339703095*^9, 3.512835354888803*^9}, {
  3.512845199816901*^9, 3.512845317089818*^9}, {3.512845369904389*^9, 
  3.5128454332767563`*^9}, {3.5128456448707542`*^9, 3.512845645799412*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Output", "Subsubsubsection",
 CellChangeTimes->{{3.5128354149776793`*^9, 3.512835416039151*^9}}],

Cell[TextData[{
 "The sample_params are output one per line in the format:\nsample_param",
 StyleBox[" sample_number  param_1 param_2 param_3 ...",
  FontSlant->"Italic"],
 "\n",
 "param_stats",
 StyleBox[" fraction_variance_1 fraction_variance_2",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.512834217896432*^9, 3.512834308057804*^9}, {
  3.5128343897069693`*^9, 3.512834398496232*^9}, {3.512834908330311*^9, 
  3.512834959686665*^9}, {3.512844204846787*^9, 3.512844212385709*^9}}],

Cell[TextData[{
 "Each line begins with a type string.  \n\nExactly one line has the string \
\"param_stats\".  Its fields are the fraction of the variance explained by \
parameter 1, the fraction of the variance explained by parameter 2, etc.\n\n\
The other lines begin with the string \"sample param\"  their fields are:\n",
 StyleBox["sample_number",
  FontSlant->"Italic"],
 " is an integer corresponding to the sample number in the input\n",
 StyleBox["param_1..param_n",
  FontSlant->"Italic"],
 " are the calculated principal components for that sample"
}], "Text",
 CellChangeTimes->{{3.512834295715222*^9, 3.512834346614521*^9}, {
  3.512834658578656*^9, 3.512834675416594*^9}, {3.5128347066425123`*^9, 
  3.5128347113779783`*^9}, {3.512834756549101*^9, 3.512834778889172*^9}, {
  3.512834948672475*^9, 3.512835059006482*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["simple_hough", "Subsubsection",
 CellChangeTimes->{{3.51283409769344*^9, 3.512834103667535*^9}, {
  3.512834134334455*^9, 3.512834145280264*^9}}],

Cell["\<\
simple_hough centralLocationResolution baseResolution < \
sample_params_and_peaks > correspondence\
\>", "Text",
 CellChangeTimes->{{3.512834150572906*^9, 3.512834173822555*^9}, {
  3.512834867641458*^9, 3.512834869009192*^9}, {3.512835144504862*^9, 
  3.512835146437089*^9}, {3.5128359479395857`*^9, 3.512835954774075*^9}}],

Cell["\<\
Reads sample_params_and_peaks on the standard input and calculates the hough \
transform correspondence which it writes to stdout.  The hough transform is \
calculated using centralLocationResolution bins for the location of the peak \
center and baseResonlution bins for the first principal component.  The other \
principal components are allocated bins according to the fraction of the \
first's variance that they explain.  Thus if component 1 explains 30% of the \
variance and component 2 explains 15% of the variance then component 2 would \
be allocated baseResolution/2 =(baseResolution*15/30)\
\>", "Text",
 CellChangeTimes->{{3.5128339272094183`*^9, 3.512833938295236*^9}, {
  3.512834702558419*^9, 3.512834704496907*^9}, {3.5128348046036453`*^9, 
  3.51283481689531*^9}, {3.512834856458015*^9, 3.51283486522645*^9}, {
  3.512835136833406*^9, 3.512835140310197*^9}, {3.5128352934044533`*^9, 
  3.5128352971301126`*^9}, {3.512835957309637*^9, 3.512836017070201*^9}, {
  3.512836056577662*^9, 3.512836132550961*^9}}],

Cell[CellGroupData[{

Cell["Input", "Subsubsubsection",
 CellChangeTimes->{{3.512835429070829*^9, 3.5128354308495073`*^9}}],

Cell["\<\
The input is one record per line.  Each line begins with a string indicating \
its type\
\>", "Text",
 CellChangeTimes->{{3.5128353723790283`*^9, 3.5128353730631227`*^9}, {
  3.5128354479941273`*^9, 3.5128354491229486`*^9}, {3.512835505215063*^9, 
  3.512835540297762*^9}}],

Cell["\<\
The first two types are the \"sample_param\" and \"param_stats\" types from \
the output of hough_sample_params\
\>", "Text",
 CellChangeTimes->{{3.512835572772559*^9, 3.512835609848777*^9}}],

Cell[TextData[{
 "The third type is \"unknown_peak\" with a format:\nunknown_peak",
 StyleBox[" sample_number peak_id peak_position",
  FontSlant->"Italic"],
 "\n\n",
 StyleBox["sample number",
  FontSlant->"Italic"],
 " is a non-negative integer\n",
 StyleBox["peak_id",
  FontSlant->"Italic"],
 " is a non-negative integer uniquely identifying this peak in the sample\n",
 StyleBox["peak_position",
  FontSlant->"Italic"],
 " is is a decimal rational number expected to be ppm (though it doesn't \
really matter)"
}], "Text",
 CellChangeTimes->{{3.5128357417977333`*^9, 3.5128357744033947`*^9}, {
  3.512842268939452*^9, 3.512842307759306*^9}, {3.5128441343123302`*^9, 
  3.512844159875463*^9}, {3.512844831904087*^9, 3.512844843213191*^9}, {
  3.512845677267353*^9, 3.512845688543359*^9}}],

Cell["\<\
Any lines beginning with \"known_peak\", \"human_verified_peak\", and \
\"peak_group_params\" will be ignored.\
\>", "Text",
 CellChangeTimes->{{3.512835545650824*^9, 3.5128355631045847`*^9}, {
  3.512835683411776*^9, 3.512835737307695*^9}, {3.512845904242532*^9, 
  3.512845919630231*^9}, {3.5128459537505302`*^9, 3.512845957639056*^9}, {
  3.51284643045823*^9, 3.512846457677105*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Output", "Subsubsubsection",
 CellChangeTimes->{{3.512835429070829*^9, 3.5128354428083153`*^9}}],

Cell["\<\
The output is also one record per line with each line beginning with a string \
indicating its type\
\>", "Text",
 CellChangeTimes->{{3.5128353723790283`*^9, 3.5128353730631227`*^9}, {
  3.512844675903324*^9, 3.512844691986898*^9}}],

Cell[TextData[{
 "\"peak_group_params\"\npeak_group_params ",
 StyleBox["peak_group_id location_param param_1...param_n",
  FontSlant->"Italic"],
 "\n\n",
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " the identifier of the detected peak grouping whose parameters are being \
given\n",
 StyleBox["location_param",
  FontSlant->"Italic"],
 " the base location of the detected peak\n",
 StyleBox["param_1..param_n ",
  FontSlant->"Italic"],
 " the peak reaction parameter for "
}], "Text",
 CellChangeTimes->{{3.512844762593981*^9, 3.512844767392857*^9}, 
   3.5128448051652184`*^9, {3.512844873623942*^9, 3.512845109078207*^9}, {
   3.5128457051043177`*^9, 3.512845732300119*^9}, {3.512845923499193*^9, 
   3.512845939267208*^9}}],

Cell[TextData[{
 "\"known_peak\"\nThe format is the same as the \"known_peak\" input to \
hough_sample_params\n\n",
 StyleBox["peak_id",
  FontSlant->"Italic"],
 " will correspond to one of the unknown_peak ids (in the future it may also \
correspond to one of the known_peak  peak_id's)\n",
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " will correspond to one of the peak_group_params lines"
}], "Text",
 CellChangeTimes->{{3.5128457574354887`*^9, 3.512845897017407*^9}, {
  3.51284596781074*^9, 3.512845996471693*^9}, {3.512846039991516*^9, 
  3.512846065513968*^9}, {3.5128461038888273`*^9, 3.5128461075390244`*^9}}],

Cell["\<\
\"unknown_peak\"
The format is the same as the \"unknown_peak\" input to this program and will \
be one of those entries unmodified\
\>", "Text",
 CellChangeTimes->{{3.5128461401706877`*^9, 3.512846166506608*^9}, {
  3.512846281354143*^9, 3.512846308655003*^9}}],

Cell["\<\
Future versions may also output \"human_verified_peak\" entries.\
\>", "Text",
 CellChangeTimes->{{3.5128461477032223`*^9, 3.512846148826951*^9}, {
   3.5128463999491053`*^9, 3.5128464194441547`*^9}, {3.512846470136346*^9, 
   3.5128464835669193`*^9}, 3.5128504367442837`*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["27 April 2011 Wednesday", "Section",
 CellChangeTimes->{{3.512918050401314*^9, 3.5129180731624727`*^9}}],

Cell[CellGroupData[{

Cell["Improved design for hough transform prototype", "Subsection",
 CellChangeTimes->{{3.5128515417797937`*^9, 3.512851552858687*^9}, {
  3.512852462432822*^9, 3.512852463487632*^9}}],

Cell[CellGroupData[{

Cell["Goals", "Subsubsection",
 CellChangeTimes->{{3.512947647535294*^9, 3.51294764834476*^9}}],

Cell["Easy to implement", "Text",
 CellChangeTimes->{{3.512947658332226*^9, 3.51294766122044*^9}}],

Cell["\<\
Extensible to humans verifying/modifying correspondence and then adding more \
samples and repeating the analysis.\
\>", "Text",
 CellChangeTimes->{{3.512947663341651*^9, 3.512947706363687*^9}, {
  3.512947770450178*^9, 3.512947770956698*^9}, {3.5129478543550587`*^9, 
  3.512947863907452*^9}, {3.51294866357471*^9, 3.512948676508121*^9}}],

Cell["Should do the correspondence not just predicted points", "Text",
 CellChangeTimes->{{3.512947869349978*^9, 3.512947882833576*^9}}],

Cell["Can interact with Matlab", "Text",
 CellChangeTimes->{{3.512947667689211*^9, 3.512947677476089*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["File-format", "Subsubsection",
 CellChangeTimes->{{3.512851567449967*^9, 3.5128515703881083`*^9}}],

Cell[CellGroupData[{

Cell["Overview", "Subsubsubsection",
 CellChangeTimes->{{3.512919347472014*^9, 3.512919348830381*^9}}],

Cell[TextData[{
 "The file-format can be viewed as a serialization of database tables \
describing the relationships shown in the following diagram.  I do not use \
SQLite because I want a text-based format that is easily written by Matlab \
(and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", but that is not essential)."
}], "Text",
 CellChangeTimes->{{3.5128515726424*^9, 3.51285162396723*^9}, {
  3.512851697399476*^9, 3.512851698963485*^9}, {3.5128523384843397`*^9, 
  3.5128524356202497`*^9}, {3.51285247284372*^9, 3.512852537502095*^9}, {
  3.512852587895509*^9, 3.512852620633321*^9}, {3.51285265306472*^9, 
  3.5128526852340508`*^9}, {3.512856843086403*^9, 3.5128568708097277`*^9}, {
  3.5128597336091957`*^9, 3.512859783058876*^9}}],

Cell["\<\
One constraint that is not drawn in the diagram is that the parameters \
vectors in sample params and in peak groups must have the same dimension.\
\>", "Text",
 CellChangeTimes->{{3.512862569965164*^9, 3.512862579491007*^9}, {
  3.512862635096137*^9, 3.512862654178693*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.011627906976744193`, 0.9335195270679142}, \
{0.14311270125223613`, 0.7957734022250151}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.3291592128801431, 0.907070707070707}, \
{0.4561717352415027, 0.715151515151515}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.5894454382826477, 0.913131313131313}, \
{0.7245080500894456, 0.709090909090909}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.8228980322003578, 0.9151515151515152}, \
{0.9445438282647586, 0.7111111111111111}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.20393559928443653`, 0.5696969696969697}, \
{0.32647584973166366`, 0.40808080808080816`}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.46332737030411447`, 0.5797979797979798}, \
{0.5840787119856887, 0.4161616161616162}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.11627906976744187`, 0.23838383838383836`}, \
{0.23434704830053668`, 0.06464646464646462}]}, 
   {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    RectangleBox[{0.3184257602862254, 0.2404040404040404}, \
{0.4355992844364937, 0.07070707070707072}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    ArrowBox[{{0.1771019677996422, 0.24444444444444446`}, {
     0.25402504472271914`, 0.40808080808080804`}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    ArrowBox[{{0.38014311270125223`, 0.24848484848484842`}, {
     0.2924865831842576, 0.40404040404040387`}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    ArrowBox[{{0.27906976744186046`, 0.5838383838383838}, {0.3828264758497317,
      0.709090909090909}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    ArrowBox[{{0.5125223613595706, 0.591919191919192}, {0.424865831842576, 
     0.7030303030303031}}]}, 
   {GrayLevel[0], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], EdgeForm[
    GrayLevel[0]], FaceForm[None], 
    LineBox[{{0.4552772808586762, 0.8101010101010101}, {0.5894454382826475, 
     0.8101010101010101}}]}, 
   {GrayLevel[0], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], EdgeForm[
    GrayLevel[0]], FaceForm[None], 
    LineBox[{{0.723613595706619, 0.8161616161616161}, {0.8220035778175314, 
     0.8161616161616161}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["0..n",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.4615384615384615, 0.8303030303030303}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["1..1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.569767441860465, 0.8404040404040404}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["1..1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.7316636851520573, 0.8383838383838383}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["0..1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.8050089445438282, 0.8444444444444444}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["0..n",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.24239713774597493`, 0.593939393939394}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["1..1",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.15026833631484796`, 0.8444444444444448}, {
     Left, Baseline}, Offset[{19., 19.599999999999998`}, {0., 0.}], {{1., 
     0.}, {0., 1.4}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.23613595706618962`, 0.5191919191919192}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["Peak",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.37119856887298747`, 0.8565656565656565}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["Known Peak",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.23076923076923078`, 0.5313131313131313}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["Unknown Peak",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.4982110912343471, 0.5434343434343434}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], InsetBox[Cell["\<\
Human verified
peak\
\>",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.14177101967799643`, 0.20404040404040402`}, {
     Left, Baseline}, Offset[{88., 33.}, {0., 0.}], {{1.0864197530864197`, 
     0.}, {0., 1.}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.2549194991055456, 0.18585858585858583`}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.20304114490161002`, 0.2161616161616161}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.17889087656529518`, 0.21818181818181814`}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.15742397137745975`, 0.1777777777777778}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.18872987477638642`, 0.17373737373737375`}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox["", {0.1708407871198569, 0.21414141414141408`}, {
     Left, Baseline}]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[
     InsetBox["", {0.36583184257602863`, 0.20606060606060606`}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["Unverified peak",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.3443649373881932, 0.19999999999999996`}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["Peak group",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.05724508050089447, 0.8949494949494949}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["Sample",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.6350626118067979, 0.8686868686868687}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["Sample Params",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.8488372093023256, 0.8666666666666666}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[
     InsetBox["", {0.9257602862254024, 0.9878787878787879}, {Left, Baseline}],
     
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
    StyleBox[
     LineBox[{{0.3291592128801431, 0.8444444444444451}, {0.4579606440071557, 
      0.8444444444444448}}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["ppm",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.3372093023255814, 0.7656565656565657}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
    StyleBox[
     LineBox[{{0.8246869409660107, 0.8404040404040404}, {0.9418604651162787, 
      0.8404040404040404}}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["parameters",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.8363148479427549, 0.7414141414141414}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["class",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.6019677996422184, 0.7535353535353535}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
    StyleBox[
     LineBox[{{0.5894454382826475, 0.8404040404040404}, {0.7245080500894454, 
      0.8404040404040404}}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[InsetBox[Cell["ppm",
       GeneratedCell->False,
       CellAutoOverwrite->False,
       CellBaseline->Baseline], {0.09391771019678002, 0.4686868686868687}, {
      Left, Baseline}],
     FontColor->GrayLevel[0.]]}, {
    {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
     AbsoluteThickness[0.5], Dashing[{}], JoinForm[{"Miter", 3.25}]}], 
     FaceForm[None], 
     RectangleBox[{0.08075931969044675, 0.6141414141414142}, \
{0.16051975007699526`, 0.4101010101010102}]}, 
    {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[
     1.], Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
     StyleBox[InsetBox[Cell["\<\
Parameterized
Peak Group\
\>",
        GeneratedCell->False,
        CellAutoOverwrite->False,
        CellBaseline->Baseline], {0.08799194991055465, 0.5777777777777778}, {
       Left, Baseline}],
      FontColor->GrayLevel[0.]]}, 
    {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[
     1.], Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
     StyleBox[InsetBox[Cell["parameters",
        GeneratedCell->False,
        CellAutoOverwrite->False,
        CellBaseline->Baseline], {0.0942531305903398, 0.44040404040404046`}, {
       Left, Baseline}],
      FontColor->GrayLevel[0.]]}}, 
   {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
    StyleBox[
     LineBox[{{0.08050089445438285, 0.5171717171717172}, {
      0.15921288014311274`, 0.5171717171717172}}],
     FontColor->GrayLevel[0.]]}, 
   {EdgeForm[GrayLevel[0]], FaceForm[None], 
    RectangleBox[{0.6520833166208075, 0.5757575757575759}, \
{0.7629435170106773, 0.41414141414141437`}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["Param Statistics",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.6663685152057246, 0.5272727272727276}, {
     Left, Baseline}]}, 
   {GrayLevel[0], AbsoluteThickness[0.5], Opacity[1], Dashing[{}], EdgeForm[
    GrayLevel[0]], FaceForm[None], 
    LineBox[{{0.6520572450805009, 0.49898989898989976`}, {0.7620751341681575, 
     0.4989898989898993}}]}, 
   {GrayLevel[0], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1], 
    Dashing[{}], Arrowheads[0.04], EdgeForm[{GrayLevel[0], Opacity[1], 
    AbsoluteThickness[0.5], Dashing[{}]}], FaceForm[None], 
    InsetBox[Cell["param_frac_variance",
      GeneratedCell->False,
      CellAutoOverwrite->False,
      CellBaseline->Baseline], {0.6592128801431127, 0.45858585858585865`}, {
     Left, Baseline}]}, {{
     {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[
      1.], Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
      StyleBox[InsetBox[Cell["ppm",
         GeneratedCell->False,
         CellAutoOverwrite->False,
         CellBaseline->Baseline], {0.02785729848565266, 0.2161616161616161}, {
        Left, Baseline}],
       FontColor->GrayLevel[0.]]}, 
     {GrayLevel[0], Opacity[1.], EdgeForm[{GrayLevel[0], Opacity[1], 
      AbsoluteThickness[0.5], Dashing[{}], JoinForm[{"Miter", 3.25}]}], 
      FaceForm[None], 
      RectangleBox[{0.014698907979319387`, 0.3616161616161616}, \
{0.09445933836586795, 0.1575757575757576}]}}, {{
      {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[
       1.], Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
       StyleBox[InsetBox[Cell["\<\
Detected 
peak group\
\>",
          GeneratedCell->False,
          CellAutoOverwrite->False,
          
          CellBaseline->
           Baseline], {0.028192718879212597`, 0.32121212121212117`}, {
         Left, Baseline}],
        FontColor->GrayLevel[0.]]}, 
      {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[
       1.], Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
       StyleBox[InsetBox[Cell["parameters",
          GeneratedCell->False,
          CellAutoOverwrite->False,
          
          CellBaseline->
           Baseline], {0.028192718879212375`, 0.18787878787878787`}, {
         Left, Baseline}],
        FontColor->GrayLevel[0.]]}}, 
     {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
      StyleBox[
       LineBox[{{0.01444048274325549, 0.2646464646464646}, {
        0.09315246843198544, 0.2646464646464646}}],
       FontColor->GrayLevel[0.]]}}}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[
     ArrowBox[{{0.050983899821109124`, 0.3616161616161616}, {
      0.050983899821109124`, 0.795959595959596}}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsolutePointSize[3.], AbsoluteThickness[0.5], Opacity[1.],
     Dashing[{}], Arrowheads[0.04], EdgeForm[None], 
    StyleBox[
     ArrowBox[{{0.12880143112701253`, 0.6222222222222222}, {
      0.09481216457960645, 0.793939393939394}}],
     FontColor->GrayLevel[0.]]}, 
   {GrayLevel[0.], AbsoluteThickness[0.5], Opacity[1.], Dashing[{}], 
    StyleBox[
     LineBox[{{0.22808586762075134`, 0.5696969696969697}, {
      0.22808586762075134`, 0.8848484848484848}, {0.14311270125223613`, 
      0.8848484848484848}}],
     FontColor->GrayLevel[0.]]}},
  AspectRatio->Full,
  ImageSize->{1118., 495.},
  PlotRange->{{0, 1}, {0, 1}}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQfbA4a6aNzitHLp+pYPrG6atzQfQk8S/zQLTM1IRl
IDqgu+AciH4TNek6iJ631PA2WH3L80cgOiU56zlYPOjyJxCtr9L9HUQvTJf7
C6KZroew2QLp14WrBO2A9AGnQGkQ/SoujtkBSBt5cbCAaB/1PE4QbXashRtE
a6g13QPTlgxPQLTOvs8fQfSD7+5fQLTLIRF7RyB9aLdRCIh+sPjR3BggvSKE
Yz6IvrVT82QGkJ5lVwKmP1pZXgTRk0pu3AfRWzun52SB9C90LADRMpqZq0E0
c6XHJhA93e33NhDdZXVjN4iekR18GEQvnJ94A0QDAPfblWU=
  "],
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztnQe8HUXVwJe8luSlUxICCaGE3pHQCSUJvVfpLfQaCBAMEHqooYliAQso
olhQlCAlKCCgERRFUFBQooIIKqjYvv32f/acvbN7Z+/b+969N/fBnd8vL+/t
zs45c+bMaXNmZrcjzzp++ilHnnXC0UdO2GHGkacff8LRZ06YdtqM6FHbEkHQ
flgQLPH2hIDfwyCwH75yFD/871qvWq9ar7KvLua/yzzz6SDnfdDmVggu8jzL
fH1gI78+mJ+XpPswqxdNZJ5dWBHRc1oAWgBaAFoAWgBaAFoAWgBaAFoAWgBa
AFoAWgBaABoOYAT/HUSdMQ0Blam0v+fZMi1ECiAyVn62h9/4xjfCtra28LTT
Tgv/9re/Hd0s+C0XPwuXWWaZ8Je//KX81XTIjR49OvzVr37VjMh1CHIHHHBA
eO2114Yf/vCHw5/85CfBAHk3MrziiivCTTbZJNx///3DT37yk/Lhn/70p3Dt
tdcODz/88PDKK68Mx44dG37zm98Mv/CFLxD5l29+//vfhxtvvHE4Y8aMYPfm
6vBI6fCTTz4pDx955JFwnXXWkd9/9KMfhQMHDgzfeOMN+furX/1q+Ne//jW8
7bbbwq222kqefe1rXws32mgjJVB7OHjw4PCPf/xjuN1224UzZ87co7n6OtDl
PKatDNDbb78dfvSjHw3XX3/9dqnWEf7sZz8LN9hgg/D5558Pv//974dbbLFF
0sXu7u7wzDPPDDfffPPw3//+d5N1MR5OnfnSNer8+te/Dj/2sY+Fq666qvDj
ZZddFu64447STwrDetddd4UnnHCC09c26Ws0vOELL7wQ7NlsHUXEffGLX5SH
X//618Mll1wy/O9//xv+/Oc/l47+3//9X/i///0vHDZsWPiLX/wifOmll8ID
DzxQnn/rW98Kp06dmhrUZ555JjzssMOaalBjddMZfvvb3w7HjBkTfuITn0CI
CHNGKihGf7CM7QUXXBCed9554SWXXCLf/utf/xLtdNVVV4W77bYbpIqrd0hv
EVtf+cpXwu23355Z3zxiad34WYIkf9Wd94bKzzK1PrVKnBF/DcN5mAJ1VX1R
hNfRb+nvyJEjQTrYq1EIu+q/KgoPYO42CM2JPkNAKuQp/O9+97vhkCFDwmOO
OUYUfl69Bx54QGQSwpY6++23X7jSSiuFTz31lLzv6uoKzzrrLIGVMThUXo0K
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
tLBuYd3CuoV1C+t6YG07XCMnfSOec6nSLPnZNqT5sY6sleTw8lnx4eUjmhfr
/skhLaxbWLewfn9gvUJcMyU37dIHTljVFoL1Wlh/QDmkhXUL6/6DtR23xhoA
Z0mxzvnggw/Gq4pjG5WKFAcb15EAJRnFnDNOpJ7okcXb3N0WlVKS3HpuOhHR
18zOi4r1gZtNJfLs3vCesNb8424nLTqHAwZ2NGld84g63QUOKYQQ77jjDlu4
hK6s4FDcHRz5WA1L1aPYyoBnN4fbbvz5kKS6L/uHA3IyTTRmxGMoKyczk8VY
soY5FwK+Z0WM/lRKhcu7L4VcA84ktY6yWsYpy5QK6XXJ5o6MtIjXqWtzLcza
HlLUgtHdI0WN0euavbSkuwYlhdGz49BYk+Qkj4svljOMU3n++WgNS9WjGHzP
fhm3XRs4q57KQurwfd0guba8/FwxkUPQhfQETlWzMw3zkvUq3WzDWgRnk9uM
J/kQtnSv1si0mWS2lMvE7lpc2LOOp/t95+wO4WxAsMSNtMKgr5iHVPN8qphI
XcKYXN/Ehghba1QGrIzR4Fy+zuwzsg7kVU8lRbVnv17eQ0X5WYilN9NGM6mZ
y3qq5nN6RyKIuDWI9cRXX321x6RBvUTHUmDcO3Q4iglziaQJmJMly7vvvju1
aSvTpPF5uUj0H1VexRVL9eHxbkGVrDYKKMB9pAM0KMHLJgSZTtiCmL5nnHEG
J7UGPpb0oGUX1LjVMEEtL4sxy2zakt/z6qdysjolJ4s8xEwTfRPimysbuOmj
1bF7u4wcpgUmxfz589uUWpWyGnM4HaONcy9ZVqariHvSLkkdoniaNMPEIyIT
aH25DMvX8b6z+wruzJSCDOMozwYkiOmsX0fS3rH77HYPtCz8n93xlodTth4Z
g5bZRUJjZvdbxfqUbFYX0z/TRh9tFmN3N7O1OnaPZSp23fTp09WeGJubVmnH
kWWv9CIth3OYofZ9990nJjWjRLHjfz1tuszuk5U1uLSsPuK9U5o3fsdhQL1G
Aicm6iDBgLPzrXComt28qfsONfG0092HKEXT1Torv57oQU5+FmIc23dYR7co
npXj5WxwrsriqD4O40dzHXTQQXJuex1vzBzt6XVPUh+QqKGIhc31z8ncNIcp
eyEbaYZIeUQbFwQhNvDPkfqIaXiCDviSQd3Z4BOllIL3ziXq33fxXK39Vbsy
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
x6FNhWbm1fWeZwe3EG4h3EK4hXAfEL4yfiYe9dy5c8/h5c38FrRt2tQIE2uJ
fIW5McLRb0HbNk2JcL9jiaII67MU65wcsw4prlY3uLzZEHZZ5+SYdVgXbj6E
+x1LtBBuIdxCuI4Ix0tmNTuYe3Z/679lBdToEO/z+2f/e3Xgd7/tay9OCO+3
fe3FkeI6h1kMnEKT0bQOPio/20a4IOIg/VBZubCT0e1UzzzRQYnqBwOoHcFw
TgG1+9ilG6xyAPFi+dmerNUJ1ZKN7/UnX+9OND++xpSxhbOeRiQe1cGSg2iX
j1NyhJg161QP9mvAIJymcN95552NqMEx+9fIzzb7W46StUHIkc0z+97bDg+e
vmmtR1hEnw1OfvMdSl6DqV7rWbV9GdmjYUy46JqYi+xvOUvQDr3IHDN/tocG
nX2g3/ba0Wosj3RHO9KHCMdcqWfv9mkMajCPpiZkLypyLqgxfeMTuodUa9n4
OtPmAVkDVvdhPa1J6JZrEQ1MKra/r6mSYYFBnmfbKqVy7Kn+RKkCvS2qK+yk
HxI7OOMt+j5pz31mfJZjofUT6p1fsLfV8h5SyQ7YHOR5ZryXY6A1hnoFuKay
HohztcquhI1xHundCpu3t4IkK5rmG5IXSHOZMWNGMM0D1li+JyIXZfkDdDBy
VI2dNtYAlVJ08lVmdEtiKr8otjt3f2v+Ntx2yd8h8Yld7zNnztzBA7Jo4OhA
bTJjnBmJ3T7WmfN7Yp7KnG8kLr8Z1rdro9Jtse2SEgwt2EUesVtfyGun47sd
8bHq+go6s2tir76Tt7KvGpNtpO+mV6lQaT+of9tqnFHNZiIuO9ixIO2m+fu/
s6eqLyRipyq4GyIaSjvflax5mzHz94zGrMdGZyRFFaxnR+u6/a+Wdu4mh4bS
zndzKsW3A9KzYyJJZrdMfjJ7ONDskUce8WqrSgR0iVCUgGPl50QhPNuMyKID
ZxJFyb6txWEXeZsi3F2SlOyhGLYbazHfEe/blDmuMTyWexGsHdzibgApKq7W
b+Ihn1wV23ZLrJGzSK0wPmxayjdAKu0bGejuG/HtPbFqtg01x/4x3V1uMnXU
94SSrqQDvhNF6s60sQWfe8uvXWpj1AurZtpmHfCtPRhXYlv2vuuJT6JJuWSE
M67zDbtKZ5oMc3fmVNzdY+JCjUqzXsvtzko2Zg1OYelKMPZsJq4/n07WnmKw
kZfPTq+dPPUqMWKTDOF2HhR9nLe8/BwkJwPsvPPOYqvYdiW/LVzpbJZR7ral
ilufDN0cW9y4zWPCJ2al9+SYGhww05l0IrPPeryHfjXlv23itxHbFOW6DZtz
+KqVe3gSbJDCPGOTqR59WMGrWLbQETOUSvvHrBs5Xk0Sz8jzhvp8Us6wQt3w
bEWvuywsmrhjcq9Zh7A6VlxejgklT0fvDZBVINqrdJpOD7vopF7OTjzTe+4x
EBkfUWNUE3P9ygYc9CP1fLv1m4wPm3L8JlfFgp0SK9lwww2TcWbpKGp7TPxJ
yrcbqJ/kuINbNtfoVNW17QtSbTn52SFcjonARRwMMO643e/qbt03kuU4I1tV
R7J5CsHNFzgkzhcQlrJ7Zk7rA/E2qLKHUwpSzm5mcffg79L37h+q3XczYXz7
iIt2366Yc9Es2sUahPIX9gH1OmW/xYPUKVOFPYscZg5jsG4Uybn4FJCyuPOa
/atzGASYrlaYTTfddFN8TXU6KtzPevb444/LtQeoqNdee02CiNHQWc/ccG0/
6Zmt9NRxiTZWtOMkC4cDJrAzueIUr4d62eguhX3SsBBtkT2ghyaJKY/OJwDP
9SfA1uPhvaf4rN4/RsEWPeq0ImvRSy4zZAQiC1xN0+GpCCUxXU6G1lOWjL3l
d5fSHM619957VzzTp59Rvg4LtfaJXaEO1YimsxDpix9hfE6aNClxQzHWubeL
wn58OzmR8wT32WcfC3nkhJZW60/0r9+Kb7sSmnNM8aRwPjnZP2rTG1YpOgg4
GplB8ERc+uEg1GnpOJ4My8h4MT8ojCOKQM9STsVd+BQpZqKIa+9MFAHexoGb
BJ1xyIk39MNxqOcydPxuKSEuXjKheiQUp6lwRXQ2/MDhjGhkbuEGBmOKRobC
nHzDYEQuzQBGIk6gyXO689VCPW+Uy6d1VcuxlgaEIWPNDFIyQw4LbDFFCHev
5wErP//auG6a+17FAp4vgt1otO2eZ3c9x5cAUcJLrsL0nRhWJWTxTyWSnwtP
irCAe01lUa80TJeHW19/YL++2a2oZUH8PvSUo1qvWq9ar2ryKlji/wGFzKd/
\
\>"]],

Cell["\<\
The hough tools use a file format consisting of lines of space-separated \
values.  The first value in each line is a type identifier.  It would be the \
table name in the database.  There is a table for each of the following \
classes: parameterized_peak_group, detected_peak_group, sample, \
sample_parameters, param_statistics, human_verified_peak, unverified_peak, \
and unknown_peak.\
\>", "Text",
 CellChangeTimes->{
  3.5128526228011017`*^9, {3.51285980950461*^9, 3.5128598364780293`*^9}, {
   3.512859869963209*^9, 3.5128599749433537`*^9}, 3.5128600575998087`*^9, {
   3.512860207173373*^9, 3.512860213824254*^9}, {3.512863554012232*^9, 
   3.5128635553403473`*^9}, {3.512944461835423*^9, 3.5129444654581947`*^9}, {
   3.512947943348864*^9, 3.512947955594503*^9}, {3.512948435154171*^9, 
   3.512948440502288*^9}}],

Cell["\<\
It is assumed that there is a peak group for any peak_group_id referenced in \
a known_peak object, this avoids materializing the list of peak_group_ids \
directly\
\>", "Text",
 CellChangeTimes->{{3.512863623491695*^9, 3.512863664322465*^9}, {
  3.512948514857566*^9, 3.5129485157957277`*^9}}],

Cell["\<\
A peak is identified by a two-part primary key: (sample_id, peak_id) - I did \
this because the natural way to identify peaks is to sort them by ppm within \
each sample and then sort the samples in some way and give the sample number \
and peak number.  This also makes merging new samples into the database a \
little easier - no need to renumber the peaks, just give each sample a unique \
id.\
\>", "Text",
 CellChangeTimes->{{3.5128602160094233`*^9, 3.512860422614649*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Fields for each table (that is each line-type)", "Subsubsubsection",
 CellChangeTimes->{{3.512860432374092*^9, 3.512860442584797*^9}, {
  3.512860521737116*^9, 3.512860535974435*^9}}],

Cell["\<\
Each table has fixed fields.  Thus each line of the file, depending on its \
type has well defined fields to model the relations and data shown in the \
table.\
\>", "Text",
 CellChangeTimes->{{3.512860539249481*^9, 3.512860641529158*^9}}],

Cell["\<\
Each description begins with a prototype line of the file and then a \
description of each field.\
\>", "Text",
 CellChangeTimes->{{3.512862902598979*^9, 3.512862947782179*^9}}],

Cell[CellGroupData[{

Cell["parameterized_peak_group", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.512860091399046*^9, 3.512860093005937*^9}, {
   3.512863484777368*^9, 3.5128634859364023`*^9}, 3.5129485232834377`*^9}],

Cell[TextData[{
 "parametersized_peak_group ",
 StyleBox["peak_group_id ppm param_1 param_2 ... param_n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5128606648726797`*^9, 3.512860666151311*^9}, 
   3.512862662302587*^9, {3.512862693731703*^9, 3.5128627247221823`*^9}, {
   3.5128634893055677`*^9, 3.5128635042905817`*^9}, {3.512948536552684*^9, 
   3.5129485410304127`*^9}}],

Cell[TextData[{
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " non-negative integer uniquely identifying the peak_group to which the \
parameters apply"
}], "Text",
 CellChangeTimes->{{3.51286274016573*^9, 3.5128627709017963`*^9}, {
  3.512863513912805*^9, 3.512863518954089*^9}, {3.512863579645277*^9, 
  3.5128636172504587`*^9}}],

Cell[TextData[{
 StyleBox["ppm",
  FontSlant->"Italic"],
 " the base location of the peak group"
}], "Text",
 CellChangeTimes->{{3.5128627833865013`*^9, 3.512862795371359*^9}, {
  3.512863713792913*^9, 3.512863714061513*^9}}],

Cell[TextData[{
 StyleBox["param_1 ... param_n",
  FontSlant->"Italic"],
 " a vector of n reaction parameters so that the predicted location of a peak \
in this group is ppm + peak_group.parameters \[CenterDot] \
sample.sample_parameters"
}], "Text",
 CellChangeTimes->{{3.5128628080395203`*^9, 3.512862869362644*^9}, {
  3.5128637266585903`*^9, 3.512863728472499*^9}, {3.512863832067727*^9, 
  3.512863833030181*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["detected_peak_group", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.512860091399046*^9, 3.512860093005937*^9}, {
   3.512863484777368*^9, 3.5128634859364023`*^9}, {3.512948017231636*^9, 
   3.512948022787404*^9}}],

Cell[TextData[{
 "detected_peak_group ",
 StyleBox["peak_group_id ppm param_1 param_2 ... param_n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5128606648726797`*^9, 3.512860666151311*^9}, 
   3.512862662302587*^9, {3.512862693731703*^9, 3.5128627247221823`*^9}, {
   3.5128634893055677`*^9, 3.5128635042905817`*^9}, {3.512948026001808*^9, 
   3.512948028095695*^9}}],

Cell[TextData[{
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " non-negative integer uniquely identifying the peak_group to which the \
parameters apply"
}], "Text",
 CellChangeTimes->{{3.51286274016573*^9, 3.5128627709017963`*^9}, {
  3.512863513912805*^9, 3.512863518954089*^9}, {3.512863579645277*^9, 
  3.5128636172504587`*^9}}],

Cell[TextData[{
 StyleBox["ppm",
  FontSlant->"Italic"],
 " the base location of the peak group"
}], "Text",
 CellChangeTimes->{{3.5128627833865013`*^9, 3.512862795371359*^9}, {
  3.512863713792913*^9, 3.512863714061513*^9}}],

Cell[TextData[{
 StyleBox["param_1 ... param_n",
  FontSlant->"Italic"],
 " a vector of n reaction parameters so that the predicted location of a peak \
in this group is ppm + peak_group.parameters \[CenterDot] \
sample.sample_parameters"
}], "Text",
 CellChangeTimes->{{3.5128628080395203`*^9, 3.512862869362644*^9}, {
  3.5128637266585903`*^9, 3.512863728472499*^9}, {3.512863832067727*^9, 
  3.512863833030181*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["human_verified_peak", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.5128601042493067`*^9, 3.512860107432747*^9}}],

Cell[TextData[{
 "human_verified_peak ",
 StyleBox["sample_id peak_id ppm peak_group_id",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5128628890156517`*^9, 3.512862894502688*^9}, {
  3.512862952869981*^9, 3.512862989971086*^9}}],

Cell[TextData[{
 StyleBox["sample_id",
  FontSlant->"Italic"],
 " non-negative integer uniquely identifying the sample to which this peak \
belongs"
}], "Text",
 CellChangeTimes->{{3.5128630897386713`*^9, 3.512863135349742*^9}}],

Cell[TextData[{
 StyleBox["peak_id",
  FontSlant->"Italic"],
 " non-negative integer uniquely identifying this peak within all peaks \
belonging to that sample"
}], "Text",
 CellChangeTimes->{{3.51286311176022*^9, 3.512863158284938*^9}}],

Cell[TextData[{
 StyleBox["peak_group_id",
  FontSlant->"Italic"],
 " the id of the peak group to which this peak belongs"
}], "Text",
 CellChangeTimes->{{3.5128636798662357`*^9, 3.5128637075416737`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["unverified_peak", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.5128601110614643`*^9, 3.512860114589192*^9}}],

Cell[TextData[{
 "unverified_peak ",
 StyleBox["sample_id peak_id ppm peak_group_id",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.512863002770936*^9, 3.512863013239389*^9}}],

Cell["Fields are the same as in human_verified_peak", "Text",
 CellChangeTimes->{{3.512863045512755*^9, 3.5128630528643303`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["unknown_peak", "Subsubsubsubsection",
 CellChangeTimes->{3.512851753308806*^9}],

Cell[TextData[{
 "unknown_peak",
 StyleBox[" sample_id peak_id ppm",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5128357417977333`*^9, 3.5128357744033947`*^9}, {
  3.512842268939452*^9, 3.512842307759306*^9}, {3.5128441343123302`*^9, 
  3.512844159875463*^9}, {3.512844831904087*^9, 3.512844843213191*^9}, {
  3.512845677267353*^9, 3.512845688543359*^9}, {3.512851676058429*^9, 
  3.512851678622175*^9}, {3.512851733465119*^9, 3.512851740882955*^9}, {
  3.5128601714573927`*^9, 3.512860198869239*^9}, {3.5128637395168343`*^9, 
  3.5128637756125727`*^9}}],

Cell["The fields are the same as in human_verified_peak", "Text",
 CellChangeTimes->{{3.512863781499023*^9, 3.51286379060808*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["sample", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.5128601486769743`*^9, 3.512860149399611*^9}}],

Cell[TextData[{
 "sample ",
 StyleBox["sample_id class",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.512863800327096*^9, 3.5128638086420727`*^9}}],

Cell[TextData[{
 StyleBox["sample_id",
  FontSlant->"Italic"],
 " a non-negative integer uniquely identifying the sample described by this \
line"
}], "Text",
 CellChangeTimes->{{3.512863814954463*^9, 3.5128638620234947`*^9}, {
  3.5129184864409437`*^9, 3.512918495997427*^9}}],

Cell[TextData[{
 StyleBox["class",
  FontSlant->"Italic"],
 " a string (without spaces) indicating which treatment class this sample \
came from.  If two samples have different strings, then they came from \
different classes, same string, same classes"
}], "Text",
 CellChangeTimes->{{3.512863866503633*^9, 3.512863867011032*^9}, {
  3.512918261411395*^9, 3.5129183414691896`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["sample_params", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.512860152519236*^9, 3.512860154369104*^9}}],

Cell[TextData[{
 "sample_params ",
 StyleBox["sample_id param_1 param_2 ... param_n",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.512918374342269*^9, 3.512918434619418*^9}}],

Cell[TextData[{
 StyleBox["sample_id",
  FontSlant->"Italic"],
 " a non-negative integer uniquely identifying the samle to which these \
parameters apply"
}], "Text",
 CellChangeTimes->{{3.512860143518787*^9, 3.5128601445972033`*^9}, {
  3.512918474311311*^9, 3.512918520599001*^9}}],

Cell[TextData[{
 StyleBox["param_1 ... param_n",
  FontSlant->"Italic"],
 " a vector of n sample parameters so that the predicted location of a peak \
in this sample is peak_group.ppm + peak_group.parameters \[CenterDot] \
sample.sample_parameters"
}], "Text",
 CellChangeTimes->{{3.512918553870042*^9, 3.512918585287904*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["param_stats", "Subsubsubsubsection",
 CellChangeTimes->{
  3.512851753308806*^9, {3.512860152519236*^9, 3.512860154369104*^9}, {
   3.512944644717148*^9, 3.5129446544329853`*^9}}],

Cell["param_stats fracvar_1 fracvar_2 ... fracvar_n", "Text",
 CellChangeTimes->{{3.5129446576517277`*^9, 3.512944675715708*^9}}],

Cell[TextData[{
 StyleBox["fracvar_1 ... fracvar_n",
  FontSlant->"Italic"],
 " is a vector of n decimal rational numbers that give fraction of variance \
explained by the corresponding sample parameter in the group of known peaks \
used to generate the sample parameters"
}], "Text",
 CellChangeTimes->{{3.5129446789265547`*^9, 3.512944772121903*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["hough_sample_params", "Subsubsection",
 CellChangeTimes->{{3.51283408529628*^9, 3.512834091529793*^9}}],

Cell[TextData[{
 "hough_sample_params ",
 StyleBox["options",
  FontSlant->"Italic"],
 " ",
 StyleBox["fractionVariance",
  FontSlant->"Italic"],
 "   <   initial_db   >   db_with_sample_params"
}], "Text",
 CellChangeTimes->{{3.512831135113229*^9, 3.5128311386440353`*^9}, {
   3.512831450858382*^9, 3.512831471758383*^9}, {3.5128315136979847`*^9, 
   3.512831517057518*^9}, 3.512832062098823*^9, {3.512832327112322*^9, 
   3.5128323385354548`*^9}, {3.512832574541724*^9, 3.512832603454234*^9}, {
   3.512832651149777*^9, 3.5128326579896727`*^9}, {3.512832736387932*^9, 
   3.5128327432004423`*^9}, {3.512918665538003*^9, 3.5129186764584007`*^9}, {
   3.512918931950904*^9, 3.512918946431259*^9}, {3.512943582761167*^9, 
   3.512943592031831*^9}}],

Cell["\<\
Reads a peak database from standard input.  Extracts the set of peak_groups \
that have a representative in every sample.  Creates a set of sample \
parameters that accounts for at least fractionVariance (0..1) of the variance \
of the peaks in those peak groups.  Outputs a database with these new sample \
parameters along with a param_stats object added.\
\>", "Text",
 CellChangeTimes->{{3.512918683640894*^9, 3.512918759701789*^9}, {
  3.512918794645802*^9, 3.512918904656478*^9}, {3.512918980832136*^9, 
  3.5129189972907677`*^9}, {3.512919046639976*^9, 3.512919075470748*^9}, {
  3.512919140863475*^9, 3.512919189739751*^9}, {3.512919368771625*^9, 
  3.512919427630797*^9}, {3.512944797744252*^9, 3.512944806003613*^9}}],

Cell["\<\
If there are already sample_params objects in the database, then three things \
differ.  First, the number of parameters is set to be the same as the number \
of parameters in the existing objects.  Second, only samples not associated \
with an extant sample_params object are given new sample_params objects.  \
Third, the param_stats object will be left unchanged.  (Maybe I should update \
it? - check for later version.)\
\>", "Text",
 CellChangeTimes->{{3.512919429920203*^9, 3.512919465620377*^9}, {
  3.512943615197925*^9, 3.512943689427772*^9}, {3.512944816522481*^9, 
  3.512944838450777*^9}, {3.5129448798001842`*^9, 3.5129449333418303`*^9}}],

Cell[CellGroupData[{

Cell["Options", "Subsubsubsection",
 CellChangeTimes->{{3.512943736966728*^9, 3.51294374239797*^9}}],

Cell["\<\
The only option is --remove-sample-params which, when present, removes all \
sample_params objects from the input database before processing it\
\>", "Text",
 CellChangeTimes->{{3.512943744974175*^9, 3.51294379499345*^9}, {
  3.51294399976042*^9, 3.5129440021018467`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["simple_hough", "Subsubsection",
 CellChangeTimes->{{3.5129440098505287`*^9, 3.512944012385881*^9}}],

Cell[TextData[{
 "simple_hough ",
 StyleBox["centralLocationResolution baseResolution",
  FontSlant->"Italic"],
 " ",
 StyleBox["standardDeviation max_GiB_RAM",
  FontSlant->"Italic"],
 "   <   initial_db   >   db_with_detected_peaks"
}], "Text",
 CellChangeTimes->{{3.512944015330653*^9, 3.5129440203875217`*^9}, {
  3.51294409625839*^9, 3.512944143790782*^9}, {3.512945129701129*^9, 
  3.512945144671627*^9}, {3.5129479250402308`*^9, 3.512947930024087*^9}, {
  3.5129510953050137`*^9, 3.512951103889146*^9}, {3.512951370304287*^9, 
  3.512951380217441*^9}}],

Cell["\<\
Reads a peak database from standard input.  This database must have \
sample_params objects defined for every sample and also a param_stats object. \
 Uses the Alm et. al. Hough transform algorithm to infer the existence of \
peak groups.  The output database has a set of detected_peak_group objects.\
\>", "Text",
 CellChangeTimes->{{3.5129449688638163`*^9, 3.512945013610648*^9}, {
  3.512945106737544*^9, 3.512945107940775*^9}, {3.512945469752722*^9, 
  3.512945484775813*^9}, {3.512945525530162*^9, 3.5129455587487173`*^9}, {
  3.512945641970704*^9, 3.512945754307271*^9}, {3.512946721996518*^9, 
  3.512946761573937*^9}, {3.512946810675273*^9, 3.5129468450413446`*^9}, {
  3.512948572173431*^9, 3.5129485845173798`*^9}, {3.5129487442368097`*^9, 
  3.5129487572535477`*^9}}],

Cell[TextData[{
 StyleBox["centralLocationResolution",
  FontSlant->"Italic"],
 " gives the number of steps to use in definining the central location of the \
peaks."
}], "Text",
 CellChangeTimes->{{3.512951113735547*^9, 3.512951142911283*^9}}],

Cell[TextData[{
 StyleBox["baseResolution ",
  FontSlant->"Italic"],
 "gives the number of steps to use for the first principal component.  If \
another principal component explains 25% of the variance of the first it will \
be given 25% of the steps."
}], "Text",
 CellChangeTimes->{{3.5129511465820103`*^9, 3.5129512099321623`*^9}, {
  3.512951253605517*^9, 3.512951265762288*^9}}],

Cell[TextData[{
 StyleBox["standardDeviation",
  FontSlant->"Italic"],
 " gives the standard deviation of the Gaussian used in \"fuzzifying\" the \
hough transform"
}], "Text",
 CellChangeTimes->{{3.5129513574260693`*^9, 3.51295142134479*^9}, 
   3.512951530471697*^9}],

Cell[TextData[{
 StyleBox["max_GiB_RAM",
  FontSlant->"Italic"],
 " gives the maximum number of GiB of RAM to use.  The program will either \
use partitioning methods to try and meet this constraint or exit with an \
error.  The program calculates only an estimate, so this is more of a \
suggestion than a hard rule."
}], "Text",
 CellChangeTimes->{{3.512951430322555*^9, 3.512951505955454*^9}, {
  3.512951604356937*^9, 3.512951633048246*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["assign_peaks", "Subsubsection",
 CellChangeTimes->{{3.51294876694215*^9, 3.512948783219778*^9}}],

Cell[TextData[{
 "assign_peaks ",
 "[keep_original_groups|keep_new_groups]",
 StyleBox[" singleMismatchPenalty groupMismatchPenalty",
  FontSlant->"Italic"],
 "  <   initial_db   >   db_with_correspondence"
}], "Text",
 CellChangeTimes->{{3.5129488927090797`*^9, 3.512948920009192*^9}, {
  3.5129490560899353`*^9, 3.512949086712624*^9}, {3.512949121789072*^9, 
  3.51294913182202*^9}, {3.512949324961236*^9, 3.5129493451014223`*^9}, {
  3.51294938682682*^9, 3.512949393083354*^9}, {3.512949427014985*^9, 
  3.5129494330591993`*^9}}],

Cell["\<\
Reads a peak database from standard input.  This database must have \
detected_peak_group objects.  Does an assignment of unknown peaks to detected \
groups.  Many of them should become known peaks.  Then the extant known peaks \
are harmonized with the detected groups and newly known peaks.  Known peaks \
in the input that correspond to one another will continue to correspond \
afterwards.  However, if keep_new_groups is set, they may be given different \
peak parameters.  The output will have no detected_peak_group objects, and \
may have new parameterized_peak_group objects.  I outline the algorithm in \
more detail below.\
\>", "Text",
 CellChangeTimes->{{3.5129489236545563`*^9, 3.5129489259153843`*^9}, {
  3.512948989718502*^9, 3.5129490138767767`*^9}, {3.512950421473537*^9, 
  3.5129506604969788`*^9}}],

Cell["\<\
Alm et. al. does not speak about peak assignment - they use the predicted \
locations as the peak location in each sample.  This does an assignment of \
peaks to detected peak groups.\
\>", "Text",
 CellChangeTimes->{{3.51294697012208*^9, 3.512947027957899*^9}, {
  3.512949178385405*^9, 3.512949198931471*^9}}],

Cell["\<\
First, for each sample, an assignment is made between all peaks and both the \
detected peak groups so as to minimize a penalty function.  For any groups \
that do not have a corresponding peak, a singleMismatchPenalty is charged.  \
Otherwise, the distance between a group's predicted location and the assigned \
peak location is charged.  Then any unknown peaks are changed into known \
peaks assigned to the group from the generated assignment.  (Note: I do not \
match to both groups because one expects that each peak group in a set should \
have a representative peak, thus it makes sense to charge a penalty.  However \
there is overlap between the sets - most peak groups in the original should \
have a corresponding group in the detected.  If I use both sets, I don't know \
which groups correspond so I don't know when to charge a penalty.)\
\>", "Text",
 CellChangeTimes->{{3.5129491861751328`*^9, 3.512949224870956*^9}, {
  3.5129492603346987`*^9, 3.512949312690757*^9}, {3.5129494795411987`*^9, 
  3.512949612854702*^9}, {3.512949650508915*^9, 3.512949703458128*^9}, {
  3.512949844461131*^9, 3.512949972801229*^9}, {3.5129500153316708`*^9, 
  3.5129500659993477`*^9}}],

Cell["\<\
Then, depending on the first parameter (whether it is keep_original_groups or \
keep_new_groups), the group that is to be discarded is matched in the as done \
with the sample peaks to the group that is to be kept.  An discarded group \
with no match is charged a groupMismatchPenalty.  A discarded group with a \
match is charged a penalty according to the total error of its peaks in the \
matched kept group.  Finally, any known peaks in a discarded group with a \
match are moved to a the kept group and the discarded group is removed.  \
Those \"discarded\" groups with no match are kept.  At the end, all remaining \
detected_peak_group objects are promoted to parameterized peak group objects.\
\
\>", "Text",
 CellChangeTimes->{{3.5129497167071447`*^9, 3.512949826908492*^9}, {
  3.512950078150457*^9, 3.512950323024849*^9}, {3.512950678159091*^9, 
  3.512950719923258*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["28 April 2011 Thursday", "Section",
 CellChangeTimes->{{3.5129848274303923`*^9, 3.5129848323872023`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Rewrote the specification from yesterday and put it on the wiki\
\>", "Subsection",
 CellChangeTimes->{{3.5129848362449293`*^9, 3.512984849813622*^9}, {
  3.51298488121489*^9, 3.512984884315257*^9}, {3.512988008884961*^9, 
  3.5129880273669558`*^9}}],

Cell["\<\
Note that I am calling it a specification rather than a design since that \
really describes its function a little better.  There is a good bit of design \
there too (I specify a serialization format, executable names etc.)\
\>", "Text",
 CellChangeTimes->{{3.512988029261265*^9, 3.5129880928363*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Began writing test cases for hough prototype", "Subsection",
 CellChangeTimes->{{3.513002435637372*^9, 3.513002448622335*^9}}],

Cell[CellGroupData[{

Cell["Generate test data for simple test case", "Subsubsection",
 CellChangeTimes->{{3.513010803734977*^9, 3.51301083201792*^9}}],

Cell[CellGroupData[{

Cell["randomPeaksAndPermutationAndParameters definition", "Subsubsubsection",
 CellChangeTimes->{{3.5130133286166477`*^9, 3.513013345061976*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutationAndParameters", "::", "usage"}], "=", 
   "\"\<randomPeaksAndPermutationAndParameters[numPeaks,numSamples,\
factorStdDev,noiseStdDev,peakResponseStdDev,peakRange]\n\nExactly like \
randomPeaksAndPermutation except has 4 more rules in the output: \
\\\"correctly_ordered_peaks\\\", \\\"peak_params\\\", \\\"peak_ppms\\\", and \
\\\"sample_params\\\"\n\nNote that the peak_params and peak_ppms are given \
for the corresponding indices in the correctly ordered peaks.\n\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.513011767279105*^9, 3.5130119349640207`*^9}, {
  3.513013116741414*^9, 3.5130131395895*^9}, {3.513013189589666*^9, 
  3.513013259331264*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomPeaksAndPermutationAndParameters", "[", 
    RowBox[{
    "numPeaks_Integer", ",", "numSamples_Integer", ",", "factorStdDev_List", 
     ",", "noiseStdDev_", ",", "peakResponseStdDev_List", ",", 
     "peakRange_List"}], "]"}], "/;", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "factorStdDev", "]"}], "\[Equal]", 
     RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "&&", 
    RowBox[{"NumberQ", "[", "noiseStdDev", "]"}], "&&", 
    RowBox[{"noiseStdDev", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"Length", "[", "peakRange", "]"}], "\[Equal]", "2"}]}]}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"factorStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "factorStdDev", "]"}]}], "]"}]}], ",", 
         RowBox[{"{", "numSamples", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"a", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"peakResponseStdDev", " ", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0", ",", "1"}], "]"}], ",", 
            RowBox[{"Length", "[", "peakResponseStdDev", "]"}]}], "]"}]}], 
         ",", 
         RowBox[{"{", "numPeaks", "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"k", "=", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"peakRange", ",", "numPeaks"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"rawPos", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"sj", ",", 
            RowBox[{"MapThread", "[", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"ai", ",", "ki"}], "}"}], ",", 
                RowBox[{"ki", "+", 
                 RowBox[{"Dot", "[", 
                  RowBox[{"ai", ",", " ", "sj"}], "]"}], "+", 
                 RowBox[{"RandomReal", "[", 
                  RowBox[{"NormalDistribution", "[", 
                   RowBox[{"0", ",", "noiseStdDev"}], "]"}], "]"}]}]}], "]"}],
               ",", 
              RowBox[{"{", 
               RowBox[{"a", ",", "k"}], "}"}]}], "]"}]}], "]"}], ",", "s"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"sortOrdering", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Ordering", ",", "rawPos"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"sortedPos", "=", 
           RowBox[{"Map", "[", 
            RowBox[{"Sort", ",", "rawPos"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"unsortOrdering", "=", 
            RowBox[{"Map", "[", 
             RowBox[{"Ordering", ",", "sortOrdering"}], "]"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<peaks\>\"", "\[Rule]", "sortedPos"}], ",", 
            RowBox[{"\"\<permutation\>\"", "\[Rule]", "unsortOrdering"}], ",", 
            RowBox[{"\"\<correctly_ordered_peaks\>\"", "\[Rule]", "rawPos"}], 
            ",", 
            RowBox[{"\"\<peak_params\>\"", "\[Rule]", "a"}], ",", 
            RowBox[{"\"\<peak_ppms\>\"", "\[Rule]", "k"}], ",", 
            RowBox[{"\"\<sample_params\>\"", "\[Rule]", "s"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.510999189261509*^9, 3.510999221714493*^9}, {
  3.5109992581438093`*^9, 3.510999276538602*^9}, {3.510999307952742*^9, 
  3.510999358696295*^9}, {3.510999400722991*^9, 3.5109994721006536`*^9}, {
  3.511000237381385*^9, 3.511000263925104*^9}, {3.5110004862317333`*^9, 
  3.511000500748392*^9}, {3.511000785185664*^9, 3.511000786914557*^9}, {
  3.5110010304887857`*^9, 3.511001325865036*^9}, {3.511001359320874*^9, 
  3.511001438719915*^9}, {3.5110014754930964`*^9, 3.5110015512785463`*^9}, {
  3.5110015910832443`*^9, 3.511001656814919*^9}, {3.513011738044154*^9, 
  3.5130117408056393`*^9}, {3.513011952865796*^9, 3.5130120452085953`*^9}, {
  3.51301309568863*^9, 3.513013106321127*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Generating the test data", "Subsubsubsection",
 CellChangeTimes->{{3.513013388325934*^9, 3.513013391356782*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "randomPeaksAndPermutation"}]], "Input",
 CellChangeTimes->{{3.5130134930409727`*^9, 3.513013502490815*^9}}],

Cell[BoxData[
 StyleBox["\<\"\\\"randomPeaksAndPermutation[numPeaks,numSamples,factorStdDev,\
noiseStdDev,peakResponseStdDev,peakRange] \\\\n\\\\nReturns a list of rules {\
\\\\\\\"peaks\\\\\\\"\[Rule]...,\\\\\\\"permutation\\\\\\\"\[Rule]...}.\\\\n\\\
\\n\\\\\\\"peaks\\\\\\\" gives a list of samples, each sample is a list of \
peaks sorted by their location.\\\\n\\\\n\\\\\\\"permutation\\\\\\\" gives a \
list of permutations that, when applied to the corresponding sample, will \
make the \\!\\(\\*SuperscriptBox[\\(i\\), \\(th\\)]\\) position in that \
sample contain the position of the \\!\\(\\*SuperscriptBox[\\(i\\), \\(th\\)]\
\\) peak.  Thus, after applying all the permutations, the corresponding \
positions in the sample will contain corresponding peaks.\\\\n\\\\nnumPeaks \
and numSamples determine how many peaks and samples will be \
generated\\\\n\\\\nEach sample has a number of latent factors \
\\!\\(\\*SubscriptBox[\\(s\\), \\(j\\)]\\).  Each peak has the same number of \
latent response variables \\!\\(\\*SubscriptBox[\\(a\\), \\(i\\)]\\).  Each \
peak also has a base location \\!\\(\\*SubscriptBox[\\(k\\), \\(i\\)]\\).  \
The latent factors are selected from a multidimensional Gaussian with mean 0 \
and standard deviations given by factorStdDev.  Similarly the responses are \
selected from a Gaussian with mean 0 and standard deviations in \
peakResponseStdDev.  The peak means are selected independently from a uniform \
distribution over peakRange.\\\\n\\\\nThe \\!\\(\\*SuperscriptBox[\\(i\\), \
\\(th\\)]\\) peak in the \\!\\(\\*SuperscriptBox[\\(j\\), \\(th\\)]\\) sample \
is given a location:\\\\n\\!\\(\\*SubscriptBox[\\(\[Delta]\\), \
\\(ij\\)]\\)=\\!\\(\\*SubscriptBox[\\(k\\), \
\\(i\\)]\\)+\\!\\(\\*SubscriptBox[\\(a\\), \
\\(i\\)]\\)\[CenterDot]\\!\\(\\*SubscriptBox[\\(s\\), \
\\(j\\)]\\)+\\!\\(\\*SubscriptBox[\\(\[Xi]\\), \\(ij\\)]\\)\\\\n\\\\nWhere \
\\!\\(\\*SubscriptBox[\\(\[Xi]\\), \\(ij\\)]\\) is a normally distributed \
random variable with mean 0 and standard deviation noiseStdDev.\\\"\"\>", 
  "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.513013503885344*^9},
 CellTags->"Info3512999103-4095725"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"combinedFirstTestSample", " ", "=", 
  RowBox[{"randomPeaksAndPermutationAndParameters", "[", 
   RowBox[{"10", ",", "100", ",", 
    RowBox[{"{", "1", "}"}], ",", "0.0000001", ",", 
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "11"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.513013403987261*^9, {3.513013441497715*^9, 3.513013482799741*^9}, {
   3.513013526476973*^9, 3.51301354653001*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "applyCandidate"}]], "Input",
 CellChangeTimes->{{3.513013778127406*^9, 3.51301378038095*^9}}],

Cell[CellGroupData[{

Cell["Global`applyCandidate", "Print", "PrintUsage",
 CellChangeTimes->{3.513013787616871*^9},
 CellTags->"Info3512999381-5384665"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"applyCandidate", "[", 
          RowBox[{"candidate_List", ",", "initialPositions_List"}], "]"}], ":=", 
         RowBox[{"MapThread", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "#2", "\[LeftDoubleBracket]", "#1", "\[RightDoubleBracket]"}], 
            "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"candidate", ",", "initialPositions"}], "}"}]}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}}],
  Definition[$CellContext`applyCandidate],
  Editable->False]], "Print",
 CellChangeTimes->{3.513013788808537*^9},
 CellTags->"Info3512999381-5384665"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"correctPeaks", "=", 
   RowBox[{
   "\"\<correctly_ordered_peaks\>\"", "/.", "combinedFirstTestSample"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.513014053966612*^9, 3.513014080370376*^9}, 
   3.513014158226226*^9, {3.513014199307581*^9, 3.513014218041213*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"incorrectPeaks", "=", 
   RowBox[{"\"\<peaks\>\"", "/.", "combinedFirstTestSample"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.513014084303693*^9, 3.513014106295658*^9}, {
  3.513014147226921*^9, 3.513014154802742*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"perm", "=", 
   RowBox[{"\"\<permutation\>\"", "/.", "combinedFirstTestSample"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5130141099339323`*^9, 3.5130141437037287`*^9}}],

Cell["\<\
Verify that applyCandidate provides the way to interpret \"permutation\" above\
\>", "Text",
 CellChangeTimes->{{3.513014408140441*^9, 3.513014426692493*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"applyCandidate", "[", 
  RowBox[{
   RowBox[{"perm", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "2"}], "]"}], "]"}], ",", 
   RowBox[{"incorrectPeaks", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "2"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5130142289819813`*^9, 3.513014253626958*^9}, {
  3.513014346256543*^9, 3.513014372658886*^9}, {3.513014462792736*^9, 
  3.513014479133109*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "5.902203521447378`", ",", "10.77410482233327`", ",", 
     "0.7553903370204283`", ",", "9.002144823806912`", ",", 
     "9.484046611333495`", ",", "7.126605641315132`", ",", 
     "10.291643487549653`", ",", "0.7062389286242927`", ",", 
     "10.63245834569107`", ",", "10.393002774942827`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7.200627417142884`", ",", "9.567847875332514`", ",", 
     "0.2963048914735035`", ",", "11.131507578551432`", ",", 
     "6.466640433098502`", ",", "10.875738685279876`", ",", 
     "9.874411123984501`", ",", "2.078007470588374`", ",", 
     "13.067695435979617`", ",", "12.29514037913062`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.5130142551247053`*^9, {3.513014351120884*^9, 3.513014373436529*^9}, 
   3.513014479822575*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"correctPeaks", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51301438282097*^9, 3.513014401125033*^9}, {
  3.513014482379642*^9, 3.513014483671097*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "5.902203521447378`", ",", "10.77410482233327`", ",", 
     "0.7553903370204283`", ",", "9.002144823806912`", ",", 
     "9.484046611333495`", ",", "7.126605641315132`", ",", 
     "10.291643487549653`", ",", "0.7062389286242927`", ",", 
     "10.63245834569107`", ",", "10.393002774942827`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "7.200627417142884`", ",", "9.567847875332514`", ",", 
     "0.2963048914735035`", ",", "11.131507578551432`", ",", 
     "6.466640433098502`", ",", "10.875738685279876`", ",", 
     "9.874411123984501`", ",", "2.078007470588374`", ",", 
     "13.067695435979617`", ",", "12.29514037913062`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5130143914076843`*^9, 3.513014401943707*^9}, 
   3.5130144842367477`*^9}]
}, Open  ]]
}, Closed]],

Cell["\<\
Gave up generating the data in Mathematica - I think Ruby will be \
conceptually easier\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.51301501636497*^9, 3.5130150659375277`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Hough algorithm robustness evaluation", "Subsection",
 CellChangeTimes->{{3.513012074668873*^9, 3.513012085376162*^9}}],

Cell["\<\
Some quick ideas on ways to evaluate the robustness of the hough algorithm\
\>", "Text",
 CellChangeTimes->{{3.513012104386714*^9, 3.513012117750049*^9}}],

Cell[CellGroupData[{

Cell["Data sources", "Subsubsection",
 CellChangeTimes->{{3.513012672858697*^9, 3.513012674764862*^9}}],

Cell["\<\
1. Synthetic data from the model -- can see what the effects of different \
amounts of noise are.  Easy to generate.\
\>", "Text",
 CellChangeTimes->{{3.513012095475869*^9, 3.513012140428986*^9}, {
  3.513012180863359*^9, 3.513012189794094*^9}, {3.513012323377584*^9, 
  3.513012323516127*^9}}],

Cell["\<\
2. Hand-labeled real data -- how can I be sure I've labeled it right?  Not so \
many samples.\
\>", "Text",
 CellChangeTimes->{{3.5130121918529587`*^9, 3.513012218988138*^9}, {
  3.5130122879569483`*^9, 3.513012322003256*^9}}],

Cell["\<\
3. Tuned synthetic data - using known compounds (from a DB) and their \
reactions to certain physical parameters, generate random parameters and then \
put the artificially generated peaks in the right place\
\>", "Text",
 CellChangeTimes->{{3.513012268219853*^9, 3.513012274100499*^9}, {
  3.5130123194292803`*^9, 3.513012320417304*^9}, {3.513012365254352*^9, 
  3.513012436022727*^9}}],

Cell["\<\
4. Arabadopsis dataset in the initial paper?  I need to look at this again \
and how THEY used it.\
\>", "Text",
 CellChangeTimes->{{3.513012530930241*^9, 3.513012549460449*^9}, {
  3.5130130528205843`*^9, 3.513013077896596*^9}}],

Cell["\<\
5. Make our own labeled data using similar techniques as those used in \
Arabadopsis (proly very expensive, but I had to mention it)\
\>", "Text",
 CellChangeTimes->{{3.5130126050088167`*^9, 3.513012640634791*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Questions to test", "Subsubsection",
 CellChangeTimes->{{3.51301268543699*^9, 3.513012687882801*^9}}],

Cell["\<\
Also, how does lack of data affect the algorithm -- accuracy as number of \
samples/number of peaks/number of initially known peaks decreases?\
\>", "Text",
 CellChangeTimes->{{3.513012301718205*^9, 3.513012333357926*^9}, {
  3.513012437475672*^9, 3.513012480916507*^9}}],

Cell["How do errors in the known peaks affect the algorithm?", "Text",
 CellChangeTimes->{{3.513012460882164*^9, 3.513012478700426*^9}}],

Cell["\<\
How does the algorithm do using \"known\" peaks from another algorithm?\
\>", "Text",
 CellChangeTimes->{{3.513012483233729*^9, 3.5130125081316967`*^9}}],

Cell["\<\
How does noise in the various parameters affect the algorithm.\
\>", "Text",
 CellChangeTimes->{{3.513012510439633*^9, 3.513012519810546*^9}, {
  3.5130127003809967`*^9, 3.5130127094415407`*^9}}],

Cell["\<\
What about systematic errors caused by, for example, incorrect baseline shift \
or distortions near the water signal.\
\>", "Text",
 CellChangeTimes->{{3.5130127182956457`*^9, 3.513012787855036*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["29 April - 1 May 2011 Friday-Sunday", "Section",
 CellChangeTimes->{{3.5133436177126293`*^9, 3.513343638368821*^9}}],

Cell["Wrote test cases for hough transform prototype", "Subsection",
 CellChangeTimes->{{3.513343642952845*^9, 3.513343649412601*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["2 May 2011 Monday", "Section",
 CellChangeTimes->{{3.513343662539036*^9, 3.513343666528075*^9}}],

Cell["Wrote test cases and code for hough transform prototype", "Subsection",
 CellChangeTimes->{{3.5133436690517406`*^9, 3.513343676893118*^9}}],

Cell["Set up documentation for hough transform prototoype", "Subsection",
 CellChangeTimes->{{3.513343679096939*^9, 3.513343688951314*^9}}],

Cell[CellGroupData[{

Cell["\<\
Idea: eliminate peak position axis by solving for maxima analytically\
\>", "Subsection",
 CellChangeTimes->{{3.513343697562271*^9, 3.513343736172357*^9}}],

Cell["\<\
One axis of the hough transform will need to be the parameters of each peak.  \
Alm et. al. fill the accumulators with votes that are equal-width gaussians \
centered on the predicted parameter values to get a given peak.  To save \
space at the expense of time, we could generate the accumulators only when we \
need them after all peaks have been examined. \
\>", "Text",
 CellChangeTimes->{{3.513343742303671*^9, 3.513343931988945*^9}}],

Cell["\<\
However, this idea goes farther - don't search an array of accumulators for \
the maxima.  Just solve for them analytically.  Gaussians are (mostly) \
well-behaved functions and we are just summing them.  However, as you see \
below, solving the equation analytically isn't that simple.\
\>", "Text",
 CellChangeTimes->{{3.5133439061950903`*^9, 3.5133439854959383`*^9}, {
  3.5134175379085083`*^9, 3.513417570661387*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gaussian", "[", 
   RowBox[{"x_", ",", "\[Mu]_", ",", "\[Sigma]_"}], "]"}], ":=", 
  RowBox[{"Exp", "[", 
   RowBox[{"-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], "/", "\[Sigma]"}], ")"}], "^", 
     "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.513344003352992*^9, 3.513344160881969*^9}, {
  3.513344223830306*^9, 3.513344271404765*^9}}],

Cell["\<\
Looking at the case of only two peaks.  Without loss of generality, we can \
shift the axis so that the first peak has 0 mean and scale the axis so \
\[Sigma]=1.  Let n be the mean of the second peak.\
\>", "Text",
 CellChangeTimes->{{3.5133445517921257`*^9, 3.513344556377466*^9}, {
  3.513348853457327*^9, 3.51334890147158*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"twopeaks", "=", 
  RowBox[{
   RowBox[{"gaussian", "[", 
    RowBox[{"x", ",", "0", ",", "1"}], "]"}], "+", 
   RowBox[{"gaussian", "[", 
    RowBox[{"x", ",", "n", ",", "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.513344101315792*^9, 3.5133441037729273`*^9}, {
  3.513344292539238*^9, 3.5133443830656223`*^9}, {3.513344547548368*^9, 
  3.5133445876015663`*^9}, {3.513348812780171*^9, 3.513348820078599*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    SuperscriptBox["x", "2"]}]], "+", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "n"}], "+", "x"}], ")"}], "2"]}]]}]], "Output",
 CellChangeTimes->{{3.5133443570552073`*^9, 3.513344384172595*^9}, 
   3.5133445887486*^9, 3.513348820495975*^9}]
}, Open  ]],

Cell["Take first derivative", "Text",
 CellChangeTimes->{{3.5133446340232162`*^9, 3.513344637911643*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"twopeaksderiv", "=", 
  RowBox[{"D", "[", 
   RowBox[{"twopeaks", ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.513344607536079*^9, 3.513344666193095*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "2"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox["x", "2"]}]], " ", "x"}], "-", 
  RowBox[{"2", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "n"}], "+", "x"}], ")"}], "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "n"}], "+", "x"}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.513344614678645*^9, 3.513344624224023*^9}, 
   3.513344667148074*^9, 3.513348823448967*^9}]
}, Open  ]],

Cell[TextData[{
 "Solve for zeroes - but ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can't do it analytically"
}], "Text",
 CellChangeTimes->{{3.5133446433533087`*^9, 3.513344645996615*^9}, {
  3.513349066495079*^9, 3.513349079292502*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"twopeaksderiv", "\[Equal]", "0"}], ",", 
   RowBox[{"{", "x", "}"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.5133446695308323`*^9, 3.513344767049553*^9}, {
  3.513348976451961*^9, 3.513349023070513*^9}, {3.513349055883441*^9, 
  3.513349059650134*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "::", "\<\"nsmet\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"This system cannot be solved \
with the methods available to Reduce.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Reduce\\\", ButtonNote -> \
\\\"Reduce::nsmet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.51334907740403*^9}],

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox["x", "2"]}]], " ", "x"}], "-", 
     RowBox[{"2", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "n"}], "+", "x"}], ")"}], "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "n"}], "+", "x"}], ")"}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", "x", "}"}], ",", "Reals"}], "]"}]], "Output",
 CellChangeTimes->{3.513349077418949*^9}]
}, Open  ]],

Cell[TextData[{
 "So, try with some test values to get an idea (after trying a bunch, it \
seems that the collapse from 3 optima to 1 optimum takes place when movable \
mean is located in the interval [-",
 Cell[BoxData[
  SqrtBox["2"]], "Output",
  CellChangeTimes->{3.513350081734294*^9}],
 ",",
 Cell[BoxData[
  SqrtBox["2"]], "Output",
  CellChangeTimes->{3.513350081734294*^9}],
 "], in other words, when ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["n", "2"], "\[LessEqual]", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.513349083495804*^9, 3.513349100423841*^9}, {
  3.513350006760277*^9, 3.5133501144467573`*^9}, {3.513350662364781*^9, 
  3.513350680316536*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sqrt", "[", "2", "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.513349545134951*^9, 3.513349551162095*^9}}],

Cell[BoxData["1.4142135623730951`"], "Output",
 CellChangeTimes->{{3.513349547754622*^9, 3.5133495517390957`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"nval", "=", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Sqrt", "[", "2", "]"}]}], "-", 
      RowBox[{"Power", "[", 
       RowBox[{"10", ",", 
        RowBox[{"-", "30"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"nval", "/", "2"}], "//", "N"}], ",", 
     RowBox[{
      RowBox[{"Reduce", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"twopeaksderiv", "/.", 
           RowBox[{"{", 
            RowBox[{"n", "\[Rule]", "nval"}], "}"}]}], ")"}], "\[Equal]", 
         "0"}], ",", 
        RowBox[{"{", "x", "}"}], ",", "Reals"}], "]"}], "//", "N"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5133446695308323`*^9, 3.513344767049553*^9}, {
   3.513348976451961*^9, 3.513349023070513*^9}, {3.513349130509069*^9, 
   3.513349177635906*^9}, 3.513349211306395*^9, {3.513349261072813*^9, 
   3.513349300252433*^9}, {3.5133493341885157`*^9, 3.513349559786083*^9}, 
   3.513349596952715*^9, {3.513350124407584*^9, 3.513350222964506*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.7071067811865476`"}], ",", 
   RowBox[{
    RowBox[{"x", "\[Equal]", 
     RowBox[{"-", "0.707106781186549`"}]}], "||", 
    RowBox[{"x", "\[Equal]", 
     RowBox[{"-", "0.7071067811865476`"}]}], "||", 
    RowBox[{"x", "\[Equal]", 
     RowBox[{"-", "0.707106781186546`"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.513344676010859*^9, 3.513344738666275*^9}, {
   3.513344779141026*^9, 3.513344804381206*^9}, 3.513348844513628*^9, {
   3.51334901107148*^9, 3.513349023882533*^9}, {3.513349115388797*^9, 
   3.51334921202278*^9}, {3.513349277876796*^9, 3.513349304553879*^9}, 
   3.513349433117292*^9, {3.513349467256956*^9, 3.513349561220294*^9}, 
   3.5133495984142227`*^9, {3.5133501269229097`*^9, 3.5133501728570213`*^9}, {
   3.513350213356619*^9, 3.513350224028738*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"twopeaksderiv", "==", "0"}], "&&", 
    RowBox[{
     RowBox[{"n", "^", "2"}], "<", "2"}]}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.5133506101235437`*^9, 3.513350637651849*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "::", "\<\"nsmet\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"This system cannot be solved \
with the methods available to Reduce.\\\\\\\"\\\", \\\"MT\\\"]\\) \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/Reduce\\\", ButtonNote -> \
\\\"Reduce::nsmet\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.5133506586553297`*^9}],

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["x", "2"]}]], " ", "x"}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "n"}], "+", "x"}], ")"}], "2"]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "n"}], "+", "x"}], ")"}]}]}], "\[Equal]", "0"}], "&&", 
    RowBox[{
     SuperscriptBox["n", "2"], "<", "2"}]}], ",", "Reals"}], "]"}]], "Output",\

 CellChangeTimes->{3.513350658672763*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "-", "n"}], ")"}], "^", "2"}], "-", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "-", "m"}], ")"}], "^", "2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5133460889323483`*^9, 3.51334610886456*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   RowBox[{"(", 
    RowBox[{"m", "-", "n"}], ")"}]}], " ", 
  RowBox[{"(", 
   RowBox[{"m", "+", "n", "-", 
    RowBox[{"2", " ", "x"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.513346109438394*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"x", "^", "2"}]}], "]"}], "+", 
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"n", "/", "10"}]}], ")"}], "^", "2"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51334852817021*^9, 3.513348608422861*^9}, {
  3.513348659160141*^9, 3.513348693843336*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = -14.141, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], -20, 20}}, Typeset`size$$ = {
    360., {114., 117.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`n$31380$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = -20}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$31380$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[Exp[-$CellContext`x^2] + 
        Exp[-($CellContext`x - $CellContext`n$$/10)^2], {$CellContext`x, -10, 
         10}, PlotRange -> All], 
      "Specifications" :> {{$CellContext`n$$, -20, 20}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {157., 162.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.5133486093492813`*^9, {3.513348640761133*^9, 3.513348714044712*^9}, {
   3.513348760260871*^9, 3.5133487609549*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.513344647923606*^9, 3.5133446496885567`*^9}}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"n", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Exp", "[", 
            RowBox[{
             RowBox[{"-", "2"}], "x", " ", "n"}], "]"}], 
           RowBox[{"Exp", "[", 
            RowBox[{"n", "^", "2"}], "]"}]}], "+", "1"}], ")"}]}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "n"}], ",", "n"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513350275095707*^9, 3.5133503599271307`*^9}, {
  3.513350765416464*^9, 3.513350793733398*^9}, {3.5133508255522003`*^9, 
  3.5133508272215757`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = -0.125, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`n$$], -3, 3}}, Typeset`size$$ = {360., {109., 112.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$77484$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = -3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$77484$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[{$CellContext`x, $CellContext`n$$/(
         Exp[((-2) $CellContext`x) $CellContext`n$$] Exp[$CellContext`n$$^2] + 
         1)}, {$CellContext`x, -10, 10}, 
        PlotRange -> {-$CellContext`n$$, $CellContext`n$$}], 
      "Specifications" :> {{$CellContext`n$$, -3, 3}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {152., 157.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Input",
 CellChangeTimes->{{3.51335087835187*^9, 3.513350880007518*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Looked at numerical stability of polar box-muller", "Subsection",
 CellChangeTimes->{{3.513360106811254*^9, 3.513360117631036*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.513360077928753*^9, 3.5133600842209263`*^9}, 
   3.5133601242906647`*^9}],

Cell["\<\
The plot below shows that the multiplicand in the polar version decreases \
MUCH faster as you get close to 0, giving potentially much larger values.  \
The polar form is also always less than the normal form.  The only place \
there will be a stability problem is near 0 where the slope is large (and \
thus small input errors give rise to large output errors) near 1, there \
should not be a problem\
\>", "Text",
 CellChangeTimes->{{3.513360430171433*^9, 3.513360447918103*^9}, {
  3.513360480656086*^9, 3.513360515147161*^9}, {3.513417448912263*^9, 
  3.5134175188488817`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Log", "[", "s", "]"}], "/", "s"}], ",", 
     RowBox[{"Log", "[", "s", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"s", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Log", "[", "s", "]"}], "/", "s"}], ",", 
      RowBox[{"Log", "[", "s", "]"}]}], "}"}]}], ",", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5133596502106256`*^9, 3.51335971746521*^9}, {
  3.513359756335718*^9, 3.513359764324745*^9}, {3.513359907799177*^9, 
  3.513359912069586*^9}, {3.513360129790324*^9, 3.5133601349603987`*^9}, {
  3.513360175554145*^9, 3.513360194537517*^9}, {3.513360230064272*^9, 
  3.513360256710518*^9}, {3.5133602911207867`*^9, 3.5133604024030437`*^9}, {
  3.513360620930217*^9, 3.51336062592247*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
tA==
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJwVzHc81fsfwHGZJ/uYHTmhUBknuUaR3qSMhrJDdpkJUWly/FCyi6MklHFD
9srI51PE5dojyZ6R8T3dWyji9/v98Xo8/3vJuPiaXWJlYWF5/r/+r4bdPrHh
v/+AWWER64ggacyuL+E3RlEDLQfRshFlafxH+pPUMspxaLrzb/16EhVPS8rS
b8ibQCxy9Whb2YlPtQ+UPqdYQI+tb61mlwSWjaZmb0nZwHx40PCbBQreOOma
7CzvABHd75mcByn4a1hfozPDGQbWhQqVH+/A1hdX3z6iXIT0KyjSn3sHbtSX
qGpIdYPnO3jz+hPEscoeneLvUp4Q0SWn/Y+cOE5ldcqVy/QGH/PBSzaNYpg0
GfrSSv4K1NLZOHS9xXDNeE97g4UfNMQFehlTxLDfuYsnLzD84eELhRi3dlE8
cuC+fgwlEFgM13TzjovixPQdWM7uGhitTxJJnKL4pEDekfrU6yBqcuwYf5sI
rlxuUyekboLOzpgaBScRfNnBofS+8y0Q4St5o0YTwbs7CJp05m244PG9K2FT
GMcWCO0zlb8HSx5qjkHZwvgENStr3j0Y+NnW9uXfFsb3mlIE31mEwMZ1y0q6
uTBW01CKsWHQgXOlqS2NSxhniJ6NeEgJA4pS9uXJe0L4dntyo1VNGCjpdfc7
Ogphq/Bx1j124cC8ZivcoSuEeX/4B9emRkDdkI+DAacQDupLDFqUigTtA6at
LilkbB49UvkGR8Ka9HAzhU7GtOPyP8KcHwKhLttw2YOMp8uq/KmZUXDK4dHH
lkNkbPr4s5eJfCwknbC/UDwmiJVO7cmVaI4FT7qZ3ONWQUxiu/xl1j0OFrQ8
dk9VCGLH6s0SZBEPf5lava6OEcSi++Np5xkJsBKeXfdRTxDTSWV7IymJcJZ9
R7baVQGsYJjwoNQvEbY+tK62nxXAPeG+80PNiXAAv2heUxbAsmxK+bTrSUCP
N6ExF/hx0+8sWl8PA+YrD6sRPvyY91+GulT0U1BMKWRw3+fDFQevMYymnoLx
kI3fkjcfdvAzX/XXSgGmpOyGgikfLloSqG6cS4EUpubMa0k+bDb34IjXiVRo
mpMajavixU9GbulXbKZBR+yTeNo6D9aTtMkatUyHcS2etx3TPPirrSYHqSAd
lgv4ul538OBdizddC5QzYOkO1ZOayYN9PTXkWIYzYDnl4XSBCQ8Wulj0KvvQ
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
7sfzlvX/BY8z5U4=
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 1}, {-8.23539993400659, 0.}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{0.05, -0.45}, \
{0.8500000000000001, 0.15000000000000008`}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{RectangleBox[{0, -0.4}, {0.8, 0.20000000000000007`}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], InsetBox[
              RowBox[{"log", "(", "s", ")"}], {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], InsetBox[
              FractionBox[
               RowBox[{"log", "(", "s", ")"}], 
               "s"], {1.2100000000000002`, 1.74}, {-1, 0}, Automatic, {1, 
              0}]}}, {}},
          AspectRatio->0.7500000000000001,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 2.42}}], {0, -0.4}, {
         Left, Bottom}, {0.8, 0.6000000000000001}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.5133597187216587`*^9, 3.513359765108478*^9, 3.513359912801351*^9, 
   3.513360137156176*^9, 3.5133602028838577`*^9, {3.513360246061516*^9, 
   3.513360273570939*^9}, 3.5133603100055943`*^9, {3.5133603423968573`*^9, 
   3.513360418256812*^9}, 3.513360635976754*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
bm4uW7JkiTV0qyur1E69pIvA7HMy3nq6bcXArVu3smeffbZWqnWIOonPXV7r
rd6TRJFilJQoJ4762kKUezc6ENQQUWw3ok41J5qTU6oGC6uI6jkSSaAw7TaL
O6E4qw/FPTgSmX2+oENANB3Qkt0wadIk/Jg60rvjxE2bNqmf620NI6K1Lfuv
mpnCjpb+5offuoxYNVNJAAukqrxSM1O0V7zEhmsfHQKybcelMXfXzgj8mB6k
d8f2BQVl6uem28JIzvWbLOmckuyOE/cQGeXxgt72ztRFgIm9Os1MYaXSGzea
wJXd51hZUYlmBud5yRIaopyUe16HwEv0brgN8pot9BH5og/60dVH4t5KnpnK
ErGXMf3GboPot0wpwZXcmTsKKR30lmSBY8yd/TseFju5khkZ61IuXiUjNBef
x95IOqqCq546DIou6e+93dHXlnnVVNcmBHJeKACXL7uE8kp3Xi/Q+++yBWKV
jpoIvqP2+6oJnpwLuhY444qrHoZz+V/eFrFpFhXFd9X9yvHiHqIL/C6unrN7
FvdrC8QqA2sqWL+y6yyV2eZKQd2+amUA9jMtTOd32RaxSjVyLlCN3MqWqsF+
udzi+avhXH6/rRKrJtRMMI/2T3F2gWZCQZfT1O2T7oYTsnv7xCb+KkrKVIF/
LO6hR4rzA7h6Voe/PrWu3uYtFauYay4YifG8hH6ERngo4GT2ZYE5zYbL27YQ
hb/2X+6pkciNGwVqoHxGh6hVeUoLAZYdm0oNPHMCOE6F1hiu/mI1AQrwEjZs
+ynVDUhY9+3havH9tL18txRgVWUVLHCNt4aArB6LiyvsJ9BKgKFwqysYZIho
70Hdf7aXgDy8gr5ZQWq2hgCON8m65SkjAnXwujZMClbkt/QAhGb6RNy7EpGp
buU92XhSbQRsaW4RC9qgHISTpHBwKyxM2bTq1nhSskDMik5Rz5pKUtjJThdn
xJ5oPCnZb0EvUp5alrqCtcEYeES4H6QeErDIam5FJmlIoTH42xI/7EuaHm88
qXYCFnpCW8qcFEx82VI//DY9dv9IIQdAwycvKVPVFXZZMSs+OwHRKFLtBew9
rhd00bmvVknxQpRmVV5eZfoT7i3F0MeNwR424xtgt6+lqWA4grxiuT/yZtNV
MwhygAKMzm/eDLqmkS3arMiD4D4ijWl3FB+/fvRyPQ8E/4nNzKqqGtMVY4hO
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
nu+1\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], "<", 
     RowBox[{"-", "k"}]}], "&&", 
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"x", "<", "1"}]}], ",", 
   RowBox[{"{", "x", "}"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.513361521617673*^9, 3.513361541029016*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", ">", "1"}], "&&", 
  RowBox[{"0", "<", "x", "<", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "k"}]]}]}]], "Output",
 CellChangeTimes->{3.5133615428220463`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Log", "[", "x", "]"}], "/", "x"}], ")"}], "<", 
     RowBox[{"-", "k"}]}], "&&", 
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"x", ">", "0"}], "&&", 
    RowBox[{"x", "<", "1"}]}], ",", 
   RowBox[{"{", "x", "}"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.513360972386051*^9, 3.513361013725429*^9}, {
  3.513361071741068*^9, 3.513361100722126*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", ">", "1"}], "&&", 
  RowBox[{"0", "<", "x", "<", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     RowBox[{"ProductLog", "[", "k", "]"}]}]]}]}]], "Output",
 CellChangeTimes->{
  3.513361016488183*^9, {3.513361075759514*^9, 3.51336110202603*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{"ProductLog", "[", "k", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1000", ",", "100000"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513361108387567*^9, 3.513361110456747*^9}, {
   3.5133613084484253`*^9, 3.51336138935181*^9}, {3.5133614247550907`*^9, 
   3.513361490649345*^9}, 3.513361579272284*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVy3s804sfx3GVinKJYjdj+7pUolN+SUg+daSQSGcVCtWvcklL+UVSSuSS
UkykUynk1IhsikZ9ZijJJSUqRJe5d4ajfVE5+/3xfrwezz/e7D1cj33TlZSU
EhT7fz+nOxoqQzKMx1ZxMqYWYNHpXy3/o12Cnsdtqzk0HTxU4pnZl3IJFrxI
TN5uoYP9+vMMX8VeBp1H8VTOHh38PBy5IisoFV4/9LhoLNLB2yZt5PyvqZA8
3hg7q0kH/bz/UxHnw4PfwyujD37RwfaqvvXcLWnQPKUU1TFXF1vSt21fY5UO
w4uqJt9xdJH38gGjuCgdbiYZpx48oIse09S7jE0zYFpw48+8cF1sCJT4qzOv
wviBJxEmmbr4zG5ZRPv0a9DPDDvBe6eLZZ9Vr0c03ICTrnUGHpsoGE7dt/vb
hpsgfHqlt8CTgitd0XiP+CaMSbo3t+6noKe3bauRVxYcEd2pzThNwZaqYV81
11swg1M+OPmAgg3pPiEfLLKhI1429rs6Fc0tkramcbMhWG61V41KxaSXZZZu
+dnwcCxVSUhQ0XmazkSlcQ6sa+v/mG1FxWeBddH3qLnw0DrSie5HRbRbxTv+
6w68+Gvo4t98KrZn6tPcIA+mNdlfLy+hIilXvmEUnQdxjoLMQ0+p+Fvxq7zG
mX9Bmq9B8dlmKt4wCRIZq9+FbubPyDNyKkZq3vj0isGHELd6vpUdDTMOxhzI
28UHj4VTOy6tp6GwNnAw8iYfEnvnBrS40nDgrNX3hYb5UMY3MzDxoaEX2aR6
yrQAWDVaXgMnaWjVPWO5qXUhhIFajtNjGnqs6S+ZiigEaa+v8KKYhoeuNdm0
lBfCTz1HadVzGr6+t5kAVhEUUXyzZrbScM4+htlAdhF87nN93DlCw+PvhPZr
+Q9g1M3pCXMRHbdX9uwfKhNA8JHLJqqJdNxcNLP8bpsAFty4dJ6bTEeHG4Za
++UCsOtKeVLPo6NFhK+oc4UQwg3EwyE36ahm0arZVCiEruzTpjuFdBTfqikt
zi0B9b5pZ+va6bjkTO6c8MuPYEFyjn/WIgYSXInviqJHsJXpeWKxOQOpu7qF
soZHMOGp8jx/OQNnWTN9A9RK4f6vKafbNgzskvEEXnGl4BHXe8p5EwPT/GJ2
2p0sA+Amhl07xMAp+733pweI4I/6sUReoeLfoMU3ihNB0I9Q7UABA9V2Yp5j
rgh09ndG2D5iID2ceSuxWwQOz99qNT9h4Iqi1lRtr3JYW6js3FjPQH/WpuOE
SwXARylVa4CBzUqWDuvMn0KNjaRHSuhhs9+MIQwXw7an6mvtE/Qwpk3lDTVB
DFq3h97HJumhlbuG6PBVMcgm/xtam6yHf9rTEliPxfCqj1q+4Yoe7tf/zfj0
pBiuvNlgyc7Ww/EPXrvsT1XChbhAzqZyPWRtL66vOCsB/uRIU86gHnJdd99/
fLEavvFIW0dHJr41KveZvF4NUXC6tnIjE1f/0NVcXVANhzrG/7RzYeIc/ktu
RV01TJnsMljqzsQ7KquWo0oNBGyY+WbCk4ntEg1hdXQN9HUb/XIIZqKTTXlZ
07FnMLGi4Sg/hYmGCynVUp9a2NCc9NrsHRNvmXnOrj9dDzbzSzfzduujRmYr
U/isCVoY99c5vNVHT979T/T8ZmAyUqRLrQwwIcelwqfsDbRBqW53mgGu5/Mq
RdlvwfhCcN16qQEqCXrgaEwbdFzO7DlAYWFWk1LL7IvvIcUxeqLGloUvv1Sn
loS2w92KASM3bxZ2aGzxh5hOME5V1V51goXf9Ubfa6/vAoa2yt2EDBZKCuZT
UlZ2Q6ZGStumYhaedaJ0Rq3+BBYpScKSlyxM6DpsM7HsMwTV2Q5qfWFhdHQB
+7P1F+j10QnT/8HCCSPu+nG7r3DwJWimarOxtPLcr2vLpBAveNieZsLGgKAz
6wqsemCW+SoNT1s2+mk2M1zMe2GqOz1nyJWNbwV5y3X1+4B/0rr3iC8b7ff6
NbsZ9kPoq4G08hA2flPnquhSBoAyg2JmHs3GZIlfrbPBIDz23e26M5WNRcdb
a/KJIYjmhu25nc1GypIcz2sLvsGj2Nh+92I2Hu7ZGkbS/4bVoe1KIjEb4xvN
dIZny4B/mW6W38jGjCUjST+iZGANu01H2tnIVl/sbD99GCoOqLR962ej6+Ac
j+cnhkFzjbXbdTkbR9x9bsZPDcPGwuOxk8oE2gh2WiVHjMCPP/rLWFoEVqZd
DzYbHYF5cRKrcj0CJT/d+pSOjYImS1I3bTGB/nsLChmyUbAMeTLdfAWB5zZH
ioJD/wHSnvF90p7AL2UX9m37/g+MOA0wXFwI/Eo4e8VyxyDdjZRe5RDoqxXO
GxgZg3gz2cNzfgRG/nSnZQR/hxbH1yNRgQS+Czi4+sPX71A90aE9P5TAQu/x
HI6/HJK9TEvWnCJwkcvyHbqf5KAvq9VOjCOwJqjwl+UXOSTJly0SKLwvyTyX
I5WD85IJ63aFb9cvHuH1y+FjbonH0ngCme5E0vxROeiIP+1oVlibMx/nKZPg
1ZhdSksk8IfP2MK5JiRYRpu+yE0iMDPqaIPpIhLMq+YFNyhsnTUc6mxKwhKP
YDW5wse6h8QJS0kg6s7DxgsEDu+VeqtYkbD/GPdUv8JS/9bkmRtJGOJ4b1ma
TGBMAmelsTMJ3ktlom0KG9573e6wiYQGw5mGUQr7DTQujnEnIfDNA2mjwh+C
n0ume5Jg7LzQIeQSgREXHQMJbxJiVRtSripMLayat24XCfSn4x1ihbfJcNeZ
3SSEHfsUoH2ZwH/m2Svf2kvC3fysezYKpy6vuIf7SOhcK+3Zo7CFh+2WrgMk
9DQK2OcVbjpSJp8KICFIprpDoPC/M285Kw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, -9.},
  PlotRange->{{1000, 100000}, {-9.284571410382531, -5.24960454952224}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{
  3.513361391271236*^9, 3.513361429183811*^9, {3.513361481724455*^9, 
   3.5133614914426813`*^9}, 3.513361582966716*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Log", "[", "s", "]"}], "/", "s"}], "<", 
     RowBox[{"Log", "[", "s", "]"}]}], "&&", 
    RowBox[{"s", ">", "0"}], "&&", 
    RowBox[{"s", "<", "1"}]}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.5133597266190233`*^9, 3.513359727340723*^9}, {
  3.513361792005406*^9, 3.513361835180809*^9}}],

Cell[BoxData[
 RowBox[{"0", "<", "s", "<", "1"}]], "Output",
 CellChangeTimes->{3.513361836303521*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3 May 2011 Tuesday", "Section",
 CellChangeTimes->{{3.513417603524353*^9, 3.5134176070585117`*^9}}],

Cell["Set up documentation for hough transform prototype", "Subsection",
 CellChangeTimes->{{3.5134176238650618`*^9, 3.513417631299529*^9}}],

Cell[CellGroupData[{

Cell["\<\
Derive algorithm for analytical maximum finding when the basis function is a \
triangle rather than a Gaussian\
\>", "Subsection",
 CellChangeTimes->{{3.513445080201079*^9, 3.5134450984229116`*^9}, {
  3.5134487842339783`*^9, 3.513448836582609*^9}, {3.513448985921543*^9, 
  3.513448987776135*^9}}],

Cell[TextData[{
 "I'm giving up on the Gaussian for a while and going to focus on a piecewise \
triangle function.  After experimenting, I can see that, for triangles, \
finding the local maxima admits an easy, relatively fast algorithm (O(n log \
n)).  Make a list of change points by, for each center adding 3 pairs \
(center-width/2, 1), (center, -2} (center+width/2, 1).  Sort these change \
pairs by first coordinate.  Start a slope accumulator at 1 and a current \
height at 0. Starting at the second point update the current height by adding \
the distance from the last point to the current point * the current slope \
accumulator sum * the slope of a single triangle.  Then add the second \
coordinate to the slope accumulator.  A maximum is any transition from \
positive to negative slope.  Plateaus form where slope goes positive->0.  If \
slope goes 0->negative then that whole plateau was an extended maximum.  (We \
may wish to use the center of the plateau as a point estimate of the maximum \
location.)  This method may have accuracy problems for the heights of later \
maxima because they are the result of many floating point sums.  Round-off \
can be avoided by just detecting the maxima using the accumulators, then at \
each maximum, calculate the height by summing all the triangles at that \
point.  This would be worst case ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " though keeping a list of the active triangles could reduce it to more like \
n log n again."
}], "Text",
 CellChangeTimes->{{3.5134451133720503`*^9, 3.513445149750615*^9}, {
  3.5134474049625587`*^9, 3.51344743069748*^9}, {3.513447479029242*^9, 
  3.513447552902264*^9}, {3.513447585689866*^9, 3.513447712690646*^9}, {
  3.513447758436474*^9, 3.513447776428334*^9}, {3.513447818531289*^9, 
  3.513447865798161*^9}, {3.513447897456522*^9, 3.513447948608987*^9}, {
  3.513448039185368*^9, 3.513448164560391*^9}, {3.5134483650433407`*^9, 
  3.5134484222154284`*^9}, {3.513448561562006*^9, 3.5134485908393183`*^9}, {
  3.5134490480844727`*^9, 3.513449145254692*^9}, {3.513449806577837*^9, 
  3.5134498078950377`*^9}, {3.513449854850589*^9, 3.513450206809407*^9}, {
  3.513452093071992*^9, 3.51345212842633*^9}}],

Cell[CellGroupData[{

Cell["Triangle Experiments", "Subsubsection",
 CellChangeTimes->{{3.513450297273684*^9, 3.513450301328863*^9}, {
  3.513450838211587*^9, 3.513450839623417*^9}}],

Cell["\<\
Since I'll eventually want a unit area function and since I am going to scale \
the axis by sigma (allowing unit sigmas) making the math easier, I'll use an \
isoscelese triangle of height 2 centered on the origin with base 1.\
\>", "Text",
 CellChangeTimes->{{3.513445261708096*^9, 3.513445302538116*^9}, {
  3.513445349107541*^9, 3.513445354326096*^9}, {3.5134458903863688`*^9, 
  3.513445909850347*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"triangle", "[", "x_", "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "-", 
        RowBox[{"Abs", "[", 
         RowBox[{"4", "x"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"Abs", "[", "x", "]"}], "<=", 
        RowBox[{"1", "/", "2"}]}]}], "}"}], "}"}], ",", "0"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5134453561080713`*^9, 3.513445570494639*^9}, {
  3.513445628131908*^9, 3.513445661127488*^9}, {3.513445839612193*^9, 
  3.513445878434299*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"triangle", "[", "x", "]"}], ",", "x"}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1"}], "/", "4"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.513448191681561*^9, 3.513448280151421*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "4"}], " ", 
  RowBox[{
   SuperscriptBox["Abs", "\[Prime]",
    MultilineFunction->None], "[", 
   RowBox[{"-", 
    FractionBox["1", "4"]}], "]"}]}]], "Output",
 CellChangeTimes->{{3.513448203365202*^9, 3.5134482807701063`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"triangle", "[", "x", "]"}], "&&", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "1"}], "/", "2"}], "<", "x", "<", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513448290548224*^9, 3.513448325435473*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "+", 
   RowBox[{"4", " ", "x"}]}], "&&", 
  RowBox[{"x", ">", 
   RowBox[{"-", 
    FractionBox["1", "2"]}]}], "&&", 
  RowBox[{"x", "<", "0"}]}]], "Output",
 CellChangeTimes->{{3.513448314156164*^9, 3.5134483263244667`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"triangle", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513445669960555*^9, 3.513445682924263*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAGIQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5z/9fuSqXHqDAj/KE0y2Zf7bz+Mb81av1k75Q+cP8XB3Nyx9hecnzwn4umr
+T/g/PPL5TgZZ32D8+V4Nhju3/YFzudSeHb+5apPcH5OSOuMFSs+wPkJh++f
lpv0Fs5Xsv0XeLTxJZy/MmPzw93bnsL5V5Lmy3svQ/AZYrtjb01F8MMCk2/+
KEHwmayEL5oaI/hR3MUH1q9/gnDfOqP5i1c8hvNNV8jdNZqB4Ccs4pI+1I7g
b5v2aNqDNAQ/qX5Sn6wqgr8r4FPt9IWP4Pyszxtjumc9hPNnmn20Tu9C8E9U
Gkg7VyH4qgzrb/6KRPAf8KwJy5JE8EPVlgV4zngA57dkPtVX7UDwN61R4Wes
QPAFjBef3RGO4J+2X+ClIY7guyTXZqzhR/ABFdTNig==
      "]], 
     LineBox[CompressedData["
1:eJw11H081HcAB3AvOc6opbxKkpgWmdKDPDR8JM01ZRWOytPUWsSssk5miOY5
D5siD6PmIQ/nrhRd4uvxmhT2OjoOd9cm56mm11zdsPvNXq/tj8/r83q/Pv9/
jIPCj36hqqKiEriUfzvSjmZZIZUQlWT+fJ9PLGpXPepjPVty5duba11SoH1j
T6Yle8lNx3YY3MtB8EbeIVm6hLR8+CDbgl8IfpmNdnGohDi5al0yDL2Fy3et
UlZYSIiUEzy0LaYKYts6V77W0j6Wp2mTVAt7skM9ZlpMnLTHCjcy7uBt97aE
V1ViUuK0+pnpkfsIfWn23dMtS3vlua22J5vgo7fhXKrpKHFyWMuqaedjWwzt
mLrJMGFoTBWMXxBA/2Ff7oTaMMlb21TiNyMA7W3B8yfjIjJjmlXWf6ofI2E7
PTOrRCSLYc1p8xpAql/AZ3o7RWQwJb7tJxshZPa8/eZ7h8gp7fWTzAURShZC
d7oHCEkLfXPByb0vsPpSv9b1AgERLfeeEPwyAeGpUHPO73yS86wrxCxjDs2j
h23qy/nEONt7rLRmDuXM3S5NwXzC9nzpZ9w9hwiG0q/7j07CH1Y5ok+XY6VF
VrZsoYMoJm1stOPlOPBnnWKjbjvxVS9fNvvNW3yz7N1V45RmYoL4wgY/BVzk
pMLy/WbCUV25xipagVWy5FaHa03Enl+Uyc1XoPaJvvzYzUfE8xAvvlKowHi2
o+8PvIck8cTsmYIjf8HHKNF82VQ9mWL5747dPw9WlHlG17Vacoe7p+eTrYtw
fz37nFPOJta/GdPM3RaxOahh4/WGGtK4WtN+efAiBg643AkaqiKdF4WVgtJF
7Frn379gUEFE9hHfBxr8DXG4yW5fRjFR7WLbR2kpcdWbyzcLKSJJ8zkX/LYo
YQ8HH3laAdG2iK5yclUif4X3txm9uWRN5qd6GglKMNmprS3MLPKRl+zPH+eV
eM/cslz/TTrhJvaYs/QonPmL0VVnlUJ2P7j/+XFrCiZ50e+PN14mWH+l1+g8
BdVeiy+Uym9Jx8Gz6mpZFJrCAqu3J0aQAzFHHWRsCm/0zH7v1A8hPRy7iCfd
FPpqDCWeR5nE44VRNXuSgtrnbkbJ+xxh9urdhnAFhcptt1jaD4Pwc+NKWZqI
wo3IIrlg4GsYpm7h3n5EYXQomHPTPRI3fJwvdf5E4YOPrYPDH8ditekJ59/i
KOxyv5xtWJKADPkFLSqIAotzyG1GLw1XfigrsjWloC/dZeYxkAEqsPm0lyYF
f/pV1VFGNqIshZbnp5VQsbsg2Ue7hq+f0tuqOUq45OOGTkwhfNVDxw1tlajK
tHUq3c6G1msFa/rYItQ6ih9pWNUiTiOUHmu3iACFut1ZGw7mjCR5q9YtIpU7
pbeumAuxRyfPbnABjut4OtKyu+DysheSmAson/Ja9lVdPZjfm8du8phH5NXM
8ZSeZtwy8E30O6hARvDl54Hxj2HnRnJ6HeewfO7gxzVHBBhfezqlwncSK0U7
T7LOCyB1y7fTWT8J3Ra9NOcfBRiM7ZmMGpqAfvqYaLBfgKcy60/dmRMw2xQd
RfPpB7dBQ0v+mQzOntU8f/8BRHtXpjvve4mL9zRtdc4KoZs7kzm65QUu5f8R
MJImxIpuIyfXCSmi4waSKmqEoFOes9xyKRIO3hQ6vBZi/nTT4SsmUmSN2bJC
zg2iJczAhLlHjGrdM/XtrCF4sgM2vzESQRrBt7p4ZRhxFuMWpq9/xcgvNP3b
pcPIGpnIDQj7FYMG+6mhjmGUpE+r5s30oa+jvcuBNoK4oRd3dJ73okW31Z+W
OAKV4+80B3q7UXyvMTknaRT0Ex88PNHejnz6Qhi/YhTbG02znra24brvHg/F
41EcXr/1tENLKzLUeBt86WIYNYRvcowiiPGsv2uSsuQH+f0dYQ2Iui3P9aoU
IzCyLK485D4uLlp9l9QlRokt1yL5yzp8VVrnOq0pgdP5NM3ctlr4z3FH7qZK
EDfRJmB4FOE4Y7Z1rGrJk68Sej+5Bq9Cy4o13Use2HGmJiIV//09/v/7fwC6
Cw4T
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAWIQ7ZJcm7GG/4E9AxSonCnTviaK4CuVicm9V0Xw5U6F
Miu6IfgyJV+/WoYh+FJyU18EpSH4YkVXzra0Ifh8UsEzXhxD8HmOfOpivI7g
c+VNqpV6juCzHbqY5MP+EM7/lxmgu8EdwX+30/dQ+QkEX5XzeEn1dQQ/JsJB
vf4Zgn/qm1FPG8sjOH+psUTYVAcEP2bto5ebdiD4pxaUC75b8RjOX9a+MCGl
8ynCvm+rhStmv4Tz722S32ud8RbOD53+oOP1hA9w/rylPXt9pn2C81mic9+y
Vn6B888lrFwe1PINzt/KKxX7PecHnK82S/EFu88vOP9XWcvf1cF/4PzXv6T5
Vlj8g/MXpLdfkVZmcIDxJzie6ZFUZYTz+fJXOx0WZYLz97ns2LtNihnO/5sb
bxbGxwLnM7Jfmqn9F8E38yg65MXABuf/urPmhegnBN8l58QE328Ifu/vxxat
vxB8BSnpzi9M7HC+e3in5mVhBH/KxdSsCaYIvt4xuTdclQh+RajVFKdaBP/g
k1CbqkYEP4S5t+dlJ4Jf7fBb58QsBP/Eruu5rXsQfCGvz6J7DyD4MTf59n05
guC//+7Kl3IWwRcz3bLO6R6Cn3DkfFjVIwR/ZfDrfxufIfg2RUr+iu8R/DZG
u+8RnxH8CxMi50/4juBLKZS6n/iN4Cevn/D+/38EHwAUVd6n
      
      "]]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{-3, 3}, {0., 1.9981528444903436`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{
  3.513445683974812*^9, {3.513445861597377*^9, 3.513445880162448*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"triangle", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513445690800797*^9, 3.513445707044039*^9}, {
  3.513445738322813*^9, 3.513445739879076*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.513445708041252*^9, 3.513445741162971*^9, {3.513445865199054*^9, 
   3.5134458813052483`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"triangle", "[", "x", "]"}], "+", 
      RowBox[{"triangle", "[", 
       RowBox[{"x", "-", "n"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"-", "3"}], "/", "2"}], ",", 
       RowBox[{"3", "/", "2"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5134459210294952`*^9, 3.5134460608227453`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Maximize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"triangle", "[", "x", "]"}], "+", 
    RowBox[{"triangle", "[", 
     RowBox[{"x", "-", "n"}], "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.513446129290155*^9, 3.5134461600503387`*^9}, {
  3.5134462062908688`*^9, 3.51344621882125*^9}, {3.5134462581008987`*^9, 
  3.513446263293311*^9}}],

Cell[BoxData[
 RowBox[{"Maximize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Piecewise]", GridBox[{
       {
        RowBox[{"2", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Abs", "[", "x", "]"}]}]}], 
        RowBox[{
         RowBox[{"Abs", "[", "x", "]"}], "\[LessEqual]", 
         FractionBox["1", "2"]}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->False,
         DeletionWarning->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}], "+", 
    RowBox[{"\[Piecewise]", GridBox[{
       {
        RowBox[{"2", "-", 
         RowBox[{"4", " ", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"-", "n"}], "+", "x"}], "]"}]}]}], 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"-", "n"}], "+", "x"}], "]"}], "\[LessEqual]", 
         FractionBox["1", "2"]}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->False,
         DeletionWarning->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}]}]}], ",", "x"}], 
  "]"}]], "Output",
 CellChangeTimes->{
  3.513446161644658*^9, {3.513446211310193*^9, 3.5134462237840014`*^9}, 
   3.513446265165689*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Maximize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"triangle", "[", "x", "]"}], "+", 
    RowBox[{"triangle", "[", 
     RowBox[{"x", "-", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "/", "16"}], ")"}]}], "]"}]}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.513446129290155*^9, 3.5134461600503387`*^9}, {
  3.5134462062908688`*^9, 3.51344621882125*^9}, {3.5134462581008987`*^9, 
  3.513446309156583*^9}, {3.513446632862021*^9, 3.513446646868219*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["15", "4"], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["1", "16"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.513446279393846*^9, 3.5134463099706907`*^9, {3.51344663392645*^9, 
   3.513446647894073*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"triangle", "[", "x", "]"}], "+", 
      RowBox[{"triangle", "[", 
       RowBox[{"x", "-", "n"}], "]"}], "+", 
      RowBox[{"triangle", "[", 
       RowBox[{"x", "-", "m"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"-", "3"}], "/", "2"}], ",", 
       RowBox[{"3", "/", "2"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5134459210294952`*^9, 3.5134460608227453`*^9}, {
  3.513446519023019*^9, 3.513446534731996*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Derive algorithm for analyitical maximum finding when the basis function is \
any truncated polynomial or truncated member of a family of functions closed \
under addition.  This lets me approximate a Gaussian by splines.\
\>", "Subsection",
 CellChangeTimes->{{3.513456253144389*^9, 3.513456299183919*^9}, {
  3.5134570389623137`*^9, 3.513457054602077*^9}}],

Cell[TextData[{
 "I believe I can use a similar algorithm to that for triangles for bounded \
quadratic humps.  A unit area, unit base, 0-centered hump is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["3", "2"], "-", 
    RowBox[{"6", 
     SuperscriptBox["x", "2"]}]}], TraditionalForm]]],
 ".  The slope of a quad. hump is a line.  The slope of a sum of quad humps \
will be a sum of lines over their width.  So, starting from the first, keep \
track of the current acceleration and slope.  If the slope would change from \
positive to negative before the next peak starts or ends, add that point as a \
maximum.  Otherwise, check at each peak's start/end and update the \
acceleration and slope there.  This would be approximately ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "2"], TraditionalForm]]],
 " or ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "3"], TraditionalForm]]],
 ".  (I'd have to work things out in detail to know for sure.)  See below, \
something very close to the original (at n log n) can be used."
}], "Text",
 CellChangeTimes->{{3.513450236681995*^9, 3.513450252207141*^9}, {
  3.51345028827464*^9, 3.513450293956065*^9}, {3.5134509958798*^9, 
  3.513451072290687*^9}, {3.51345133290631*^9, 3.513451369642956*^9}, {
  3.513451748911471*^9, 3.513451915083148*^9}, {3.513452046496664*^9, 
  3.513452075570796*^9}, {3.513452132462574*^9, 3.513452168504307*^9}, {
  3.513456241363575*^9, 3.513456248550363*^9}, {3.51345635558274*^9, 
  3.5134563755612793`*^9}}],

Cell["\<\
Actually, thinking about it, any truncated polynomial can be used.  Why?  \
Because the sum of polynomials is a polynomial.  Since over the area of \
support, each is just a polynomial.  Then between changes in which group of \
polynomials is in its area of support there is a maximum iff the polynomial \
has a maximum.  At the change points, maxima can be checked for by looking at \
the changes to the slope.\
\>", "Text",
 CellChangeTimes->{{3.513456094151153*^9, 3.5134562287937593`*^9}, {
  3.5134564977512503`*^9, 3.513456517521213*^9}, {3.513456646782077*^9, 
  3.513456685365851*^9}}],

Cell["\<\
This same relation holds for any family of functions F such that if f\
\[Element]F and g\[Element]F then (f+g)\[Element]F.  Further, piecewise \
combinations of functions from F also work (that is what is happening with \
the linear version) since shifting to the zero-area and then adding the other \
function will be the same as having twice as many instances in in the basis \
but shifted.\
\>", "Text",
 CellChangeTimes->{{3.513456762850979*^9, 3.513457031782267*^9}}],

Cell["\<\
This will let me approximate a (truncated) Gaussian by using splines.\
\>", "Text",
 CellChangeTimes->{{3.513457061212829*^9, 3.513457080809433*^9}}],

Cell["\<\
The new algorithm is: make a list of change points consisting of the \
beginning and end of each function from F.  Each change point consists of a \
coordinate, the function from F, and whether to add or subtract it.  Sort \
those change points in increasing order by coordinate.  Then, at each change \
point add or subtract the function from the currently active to make the \
functions active over the new region.  Finally calculate the two slopes at \
the change point.  If the change point is a maximum, add it.  Otherwise, if \
there are any maxima in the new region, add them.  Repeat for all change \
points.\
\>", "Text",
 CellChangeTimes->{{3.513457818278055*^9, 3.5134578795495358`*^9}, {
  3.513457913871676*^9, 3.5134579261918707`*^9}, {3.513458017421277*^9, 
  3.5134580512039433`*^9}, {3.513458084940813*^9, 3.513458248796884*^9}}],

Cell[CellGroupData[{

Cell["Quadratic hump Experiments", "Subsubsection",
 CellChangeTimes->{{3.513450842356497*^9, 3.513450850051714*^9}}],

Cell["Here, I define a quadratic hump with unit area and unit base", "Text",
 CellChangeTimes->{{3.513450999542234*^9, 3.513451013160829*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"quadhump", "[", "x_", "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"3", "/", "2"}], "-", 
        RowBox[{"6", 
         RowBox[{"x", "^", "2"}]}]}], ",", 
       RowBox[{
        RowBox[{"Abs", "[", "x", "]"}], "\[LessEqual]", 
        RowBox[{"1", "/", "2"}]}]}], "}"}], "}"}], ",", "0"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5134508585537024`*^9, 3.5134509000742064`*^9}, {
  3.51345093174679*^9, 3.5134509464104137`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"quadhumpderiv", "[", "x_", "]"}], ":=", 
  RowBox[{"Evaluate", "[", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"quadhump", "[", "x", "]"}], ",", "x"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.513451222942141*^9, 3.513451239561174*^9}}],

Cell["Here I plot the quadratic hump and the Gaussian together", "Text",
 CellChangeTimes->{{3.5134515913065777`*^9, 3.513451601202504*^9}, {
  3.513451649226438*^9, 3.5134516506338263`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"quadhump", "[", "x", "]"}], ",", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"quadhumpderiv", "[", "x", "]"}], ","}], "*)"}], 
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"-", 
        RowBox[{"x", "^", "2"}]}], "]"}], "/", 
      RowBox[{"Sqrt", "[", "Pi", "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513450902522901*^9, 3.513450916346869*^9}, {
  3.513451158380402*^9, 3.513451200591927*^9}, {3.513451249371358*^9, 
  3.513451270109033*^9}, {3.513451430427247*^9, 3.51345147131172*^9}, {
  3.5134515691334677`*^9, 3.5134515728438997`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQB2IQrWcv9ur///f7GaAg/6dyx89fCP6GzYZqn78i+EYa
vknPXiP45oItt85cR/AdHn88NXM9gh/Ufna1cTyCX36+JTd93zs4/8oV7lcH
E9/C+bIH8kXMZd7A+Vuzj7Dy330F5yf0GH642fQSzv8xqbpjv/0LOH8x3z3J
GQ+fwflzvAyLLnc+hfObchIrND2fwPnVzKvKi94+gvMTG86rXFvxEM4Puznf
7u5iBN/LqCDiyTwE3+SJQM+nKQg+h0fQZ75GBH8d/9WD7pEI/u95t+J2ciL4
H76vqjjAguA/CaiedPz/Azj/HJPMsatfEfxFabG6nx4i+B56D35r7ULwp+59
OmNOFoIfVzGrzjwVwdcw9k+5FI/g71qxQ58jFMG/N7n7WLE9gq+eZfjFSwTB
/6Dy7OZTPgR/5/1Z+xs4EfymWf5LpVlw8wHbIrvA
      "]], LineBox[CompressedData["
1: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
Zv2qxA==
      "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGAwBGIQffC0ZoUl6wN7BijYW1jvWsmG4Hd95g2awI3gh5fO
iVsugOCrfNfK3ieK4O/75d7yRh7B7665NoFZFcGP+JcyV0oLwf/E2LTNwwTB
V+Pc82KJB5L8cb2sRb5I5rctfD0/CMEPY2l/NysGwW/9H/hlQgGC/+Tr8/81
MxD8RY+ExUNfIPiye7JdWTsewvkMv5hWFj16BOd/D9wbd1T1CZx/2yReWrXl
KZxfEC4gqHTnGZwvOeVJBIvsCzh/XfSC5Z8rXiLCz7be48TeV3D+xrhcJas/
r+H8H1zOzDtD38L5QRetzWRnvIPzuay5D+6Zi+AfXHLLO2Yxgm9QUZk4ex2C
zye/vUfyKIJ/MsfosegnBN+BQ3MCn897hP2FP6TWBSL4628fX+objuDLrU/b
3ZOE4P8JXfKMqxLB375Y3pZ9GYKfx/v++LLVCL5a+b4gt40I/hSv2IzWPQh+
0cdZk5kvI/ha0Vlyi28g+A+PWK50uofgB8y4sa/xJYLPwbTCU/E9gr8/u/zK
gS8IftlVt/iEXwi+nr3Yq///EXwAgpjJjw==
      "]]}, 
    {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1: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
ZwIV/vd+h/+/3/8LDYQ0hQ==
      "]]}, {}}, {{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.513450917344599*^9, 3.513450948665884*^9}, 
   3.513451183178681*^9, {3.513451243543296*^9, 3.513451271403*^9}, {
   3.513451450814378*^9, 3.513451472798131*^9}, 3.513451573889736*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"quadhump", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513450956103244*^9, 3.513450982754838*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.5134509837512827`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{"-", 
      RowBox[{"x", "^", "2"}]}], "]"}], "/", 
    RowBox[{"Sqrt", "[", "Pi", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.513451504369421*^9, 3.513451561424858*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.513451518673381*^9, 3.513451562118626*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extend analytical method to multi-dimensional spaces", "Subsection",
 CellChangeTimes->{{3.513458284414134*^9, 3.513458292001408*^9}, {
  3.513459063658806*^9, 3.5134590696153803`*^9}}],

Cell["\<\
The algorithm can be extended to multidimensional spaces by partitioning them \
into regions where the same number of functions from F are in their region of \
support.  Then, you look for maxima in these regions.  You also look for \
maxima along the boundaries between the regions using a recursive version of \
the algorithm.  The boundary will be 1 dimension less.\
\>", "Text",
 CellChangeTimes->{{3.513458295408346*^9, 3.51345843062183*^9}}],

Cell["\<\
I think in this case, F when projected onto a lower dimensional space must \
yield a set of functions that (1) are closed under addition and (2) have \
projections onto d-1 dimensions that also fulfill this property.  All \
0-dimensional functions are closed under addition since the real numbers are \
closed under addition.\
\>", "Text",
 CellChangeTimes->{{3.513458772090715*^9, 3.513458897802203*^9}}],

Cell["\<\
So, in this algorithm, you make a list of potential maximum regions.  It \
consists of all d dimensional regions and d-1 dimensional regions that are \
the borders of those d-dimensional regions.  Then you calculate the maxima \
over the d-dimensaional regions and check to see if there are maxima across \
each of the borders.  Then you repeat, extracting the borders of the d-1 \
dimensional regions.\
\>", "Text",
 CellChangeTimes->{{3.5134587051207943`*^9, 3.513458763072928*^9}, {
  3.5134589013607063`*^9, 3.5134589193766212`*^9}, {3.513458978443636*^9, 
  3.513459043025608*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Idea, reduce hough part of problem to linear programming", "Subsection",
 CellChangeTimes->{{3.513452195430378*^9, 3.513452198451812*^9}, {
  3.513452228890421*^9, 3.513452247328088*^9}}],

Cell["\<\
If we use triangular basis functions, it seems to me that the maxima might be \
findable by linear programming.  If this is true, then given that in all the \
other directions, things are oriented along hyper-planes, we may be able to \
use linear programming to solve for maximum vote locations for all variables \
exactly.\
\>", "Text",
 CellChangeTimes->{{3.513452249407866*^9, 3.513452344335018*^9}, {
  3.513452376301538*^9, 3.513452386322069*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["4-15 May 2011", "Section",
 CellChangeTimes->{{3.5145554169036903`*^9, 3.514555425274907*^9}}],

Cell["Write and test hough prototype", "Subsection",
 CellChangeTimes->{{3.514555428213129*^9, 3.514555434274143*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["16 May 2011", "Section",
 CellChangeTimes->{{3.5145554400516148`*^9, 3.5145554418188343`*^9}}],

Cell["Write and test hough prototype", "Subsection",
 CellChangeTimes->{{3.514555443507903*^9, 3.514555447890504*^9}}],

Cell[CellGroupData[{

Cell["\<\
Multidimensional analytical method from 3 May is exponential in #Dimensions\
\>", "Subsection",
 CellChangeTimes->{{3.514555455170739*^9, 3.514555507439046*^9}}],

Cell[TextData[{
 "Assuming that the basic votes are hyperplanes then in ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " dimensions there are at least ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"n", "+", "1"}]], "-", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " items that have to be explored when there are n+1 hyperplanes.  This is \
because a simplex in n has ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"n", "+", "1"}]], "-", "1"}], TraditionalForm]]],
 " elements, each of which will need to be examined because it is the \
boundary between subspaces and thus a potential region where maxima or minima \
could reside."
}], "Text",
 CellChangeTimes->{{3.514555513263206*^9, 3.5145555715878267`*^9}, {
  3.514555608947126*^9, 3.5145556432795753`*^9}, {3.5145557391973886`*^9, 
  3.514555853032036*^9}, {3.51455589977299*^9, 3.5145559109096613`*^9}}],

Cell["\<\
The mathematical complexity of intersecting the various functions with \
arbitrary hyper-volumes is also not to be sneezed at for difficulty in \
implementation.\
\>", "Text",
 CellChangeTimes->{{3.514555915949109*^9, 3.5145559833678627`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analytical maximum search using PRIM-like algorithm", "Subsection",
 CellChangeTimes->{{3.514555993929572*^9, 3.514556024014943*^9}}],

Cell[TextData[{
 "PRIM (patient rule induction method) is a machine learning method that \
searches for rectangles of parameter space that have uniform class \
(classification) or maximum response (regression).  I adapt it here to search \
for dense regions in the Hough space.  The original is detailed in Hastie, \
Tibshirani, and Friedman ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "nd"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " edition p. 281."
}], "Text",
 CellChangeTimes->{{3.5145560257120523`*^9, 3.514556107265855*^9}, {
  3.5145562724049597`*^9, 3.5145562802415257`*^9}, {3.5145563391207867`*^9, 
  3.514556439906358*^9}}],

Cell["\<\
Zeroing can be accomplished in the analytical domain by taking the integral \
over the entire box and then subtracting the integrals over the sub-boxes \
intersecting the various zeroed boxes.\
\>", "Text",
 CellChangeTimes->{{3.5145564555610733`*^9, 3.514556476998949*^9}, {
  3.514556531655108*^9, 3.51455657645444*^9}}],

Cell["The algorithm is: (I'll write this up on a later day)", "Text",
 CellChangeTimes->{{3.514556599394701*^9, 3.514556601938088*^9}, {
  3.514718463739965*^9, 3.514718473208725*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Calculations for hand-example for analyitic multi-dimensional Hough\
\>", "Subsection",
 CellChangeTimes->{{3.514566041906612*^9, 3.514566071068398*^9}}],

Cell[CellGroupData[{

Cell["A bit more quadratic hump calculations", "Subsubsection",
 CellChangeTimes->{{3.5145593836446877`*^9, 3.514559401105649*^9}}],

Cell["\<\
General formula for a quadratic hump (that is zero everywhere the quadratic \
would be negative)\
\>", "Text",
 CellChangeTimes->{{3.514559879205799*^9, 3.5145599061712217`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"quadhump", "[", 
   RowBox[{"x_", ",", "h_", ",", "s_"}], "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"h", "-", 
        RowBox[{"s", " ", 
         RowBox[{"x", "^", "2"}]}]}], ",", 
       RowBox[{
        RowBox[{"Abs", "[", "x", "]"}], "\[LessEqual]", 
        RowBox[{"Sqrt", "[", 
         RowBox[{"h", "/", "s"}], "]"}]}]}], "}"}], "}"}], ",", "0"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5145594036284237`*^9, 3.514559468047772*^9}, {
  3.514559759742734*^9, 3.514559768030953*^9}}],

Cell["Calculate what will make the area 1", "Text",
 CellChangeTimes->{{3.514559917331647*^9, 3.514559926120388*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"quadhump", "[", 
      RowBox[{"x", ",", "h", ",", "s"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}], 
   "\[Equal]", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.514559480180607*^9, 3.514559570915781*^9}, {
  3.514559774541272*^9, 3.5145598471859093`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", ">", "0"}], "&&", 
  RowBox[{"s", "\[Equal]", 
   FractionBox[
    RowBox[{"16", " ", 
     SuperscriptBox["h", "3"]}], "9"]}]}]], "Output",
 CellChangeTimes->{
  3.514559807825365*^9, {3.514559840527062*^9, 3.514559847869739*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"width", "==", 
    RowBox[{"2", " ", 
     RowBox[{"h", "/", 
      RowBox[{"(", 
       RowBox[{"16", " ", 
        RowBox[{
         SuperscriptBox["h", "3"], "/", "9"}]}], ")"}]}]}]}], ",", "h"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.514560241368794*^9, 3.5145603002435083`*^9}, {
  3.514560400841712*^9, 3.514560406519517*^9}, {3.514560454511094*^9, 
  3.514560458491262*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"h", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["3", 
       RowBox[{"2", " ", 
        SqrtBox["2"], " ", 
        SqrtBox["width"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"h", "\[Rule]", 
     FractionBox["3", 
      RowBox[{"2", " ", 
       SqrtBox["2"], " ", 
       SqrtBox["width"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5145603013729753`*^9, 3.514560409420855*^9, 
  3.5145604591389437`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"unitquadhump", "[", 
   RowBox[{"x_", ",", "h_"}], "]"}], ":=", 
  RowBox[{"quadhump", "[", 
   RowBox[{"x", ",", "h", ",", 
    FractionBox[
     RowBox[{"16", " ", 
      SuperscriptBox["h", "3"]}], "9"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5145599284610767`*^9, 3.514560015122321*^9}, {
  3.514560217133912*^9, 3.514560219515163*^9}, {3.514560313878633*^9, 
  3.514560330780521*^9}, {3.514560463875106*^9, 3.514560470754736*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"unitquadhump", "[", 
    RowBox[{"x", ",", "h"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514560017611408*^9, 3.514560045560768*^9}, {
   3.514560417177924*^9, 3.514560442462421*^9}, 3.514560478485445*^9}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{"-", "1"}], 
     RowBox[{"h", "<", "0"}]},
    {"1", 
     RowBox[{"h", ">", "0"}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514560046843799*^9, 3.5145603337424517`*^9, {3.514560417722674*^9, 
   3.514560422350671*^9}, {3.514560473122368*^9, 3.514560479197823*^9}}]
}, Open  ]],

Cell[TextData[{
 "Wow, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " correctly handled the discontinuity at ",
 Cell[BoxData[
  FormBox[
   RowBox[{"h", "=", "0"}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.514560113482119*^9, 3.5145601517638483`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"unitquadhump", "[", 
  RowBox[{"x", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.514560524549945*^9, 3.5145605619362783`*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{"12", "-", 
      RowBox[{"3072", " ", 
       SuperscriptBox["x", "2"]}]}], 
     RowBox[{
      RowBox[{"Abs", "[", "x", "]"}], "\[LessEqual]", 
      FractionBox["1", "16"]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{{3.514560541608406*^9, 3.514560562978023*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What the hand-example should look like in parameter space", \
"Subsubsection",
 CellChangeTimes->{{3.514567171194778*^9, 3.514567181192375*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"votes", "[", 
   RowBox[{"m_", ",", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"unitquadhump", "[", 
    RowBox[{
     RowBox[{"m", "+", "b"}], ",", "12"}], "]"}], "+", 
   RowBox[{"unitquadhump", "[", 
    RowBox[{"b", ",", "12"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.514566413193431*^9, 3.514566533226717*^9}, {
  3.514566623750699*^9, 3.514566624886791*^9}, {3.514566822367626*^9, 
  3.514566829665353*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"votes", "[", 
  RowBox[{"0.5", ",", "0.5"}], "]"}]], "Input",
 CellChangeTimes->{{3.514566606032297*^9, 3.514566613367283*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.514566616556396*^9, 3.514566628426002*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", 
     RowBox[{
      RowBox[{"-", "1"}], "/", "16"}], ",", 
     RowBox[{"1", "/", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{
      RowBox[{"-", "2"}], "/", "4"}], ",", 
     RowBox[{"2", "/", "16"}]}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<b\>\"", ",", "\"\<m\>\"", ",", "\"\<votes\>\""}], "}"}]}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.514566536753685*^9, 3.514566580532987*^9}, {
  3.514566686705514*^9, 3.514566730667582*^9}, {3.51456693757688*^9, 
  3.5145669800564213`*^9}, {3.514567186442877*^9, 3.514567248862402*^9}, {
  3.5145672825193*^9, 3.5145672850728893`*^9}, {3.514567319449778*^9, 
  3.51456732111701*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
ENWK/m2K2meTj496VqQkie87eJqLf65uHNG/bNKyIiBZGFnwpKXl+mpy8/qd
FW8WZpCeQ7udfTtd1K+p17/n9wUPSOayTxeafhL7YOO0XRsPzcgk/VZPNlvY
WOTZ3SQ5IbnvI7I/N2NX4WSxrhL3NO3C3Oo8MnTR2d7TLWT7rlxtoLvsuRcn
LgtKyE4gRWM7LS6c+UDwnHX7z/d646JLEp0SMslQnZVDpVpifvQxqN+AVzqP
SNcbX6p/+YnrauwJj+9HUsV7BWPf1/E8Mcj9zMlZ4u8Yvkpvv0xXll9v8m87
0vi94u/lqW+xfmO+o5TYcecX6Fvu/6rSs8cmEc/uoBPYuyKTrOoYOXmgkchD
1K/rFc/8pQrrNmz+44SFR3PIdvNdk6yninVCLXqO3/PUDampmvhe13R8Ln9d
cIcc5PbRkCzdl1L5eYa+w+Tpr+4KjY2+D0m2Vpekdln1Tu+X+Ps1AVnRV4/J
eHBY1PaztXIiuRDYR71DZYTgqqGsK11ZTV6c6+G/v/9hsorGz1kXjtS4Z5tK
xvXoZuSbsUZoTvsVDa/Yjx+x3VyCdb4SvyPzuO/kZtNNJTn3d5eHDI0jAQ1W
tJDjYy/5ZPT+WUWU9ZcusN94VpDQc5kl5QNfGWQYSda91prd+UmEwncNvkOT
3w7qfeuvvyNg4tyt3durHmKeQvsnreq1Uvcom0vcjV+NMJPtO4yTfb9A92N6
w/VX9mldYHmuR01awEYHfcnXsR0ebvvkJ0QYxqZu3xNJdJzaLZqfpMP6t6/t
cst4dkqs23Rd4f9+tOstoms+36uii7gv5u1Vv3TExZ+Er/rH8bxPtHC59GH2
ruGtJc4js40vm2wiA41ehPnmBQmap7fUPJprLlH+9+DqPYaxJNEkaE15r2BB
veXjgfL13+JL0y3NVPzJgqLXvbtdO0a8Ywtb7u32j6RDpX5YRXk+iQw2PfpU
X+z3uxL+e4r/ACmxX/Td7aayuN4slF5tXRWfRtbPK4vbbpco7qNRm2+/9Q0i
/34Km2myJExIGnC7Z26JkQS4+SynHycW3hS6rY3Zer7CRFLvg8nNBu/PCjmG
p/X6z74kZH1zvzWkjYHEYOCWCLn80vBvLZzqr2P14S0nj26Jn3GSnNMtiJh5
xZckti54Er7TUJJP+5kvX3R61tNVPLdSPmV5QP9SIdHh7k/40qlFcj07xXv8
Zlh+H7Y//hI5vnR/7IrqCMHiuFNnZ4+OEqeCZU2brFW8H8+Hfnd2/9ySSfHO
AsPRr6KR1euh04sQ1q/yifLgUOjQ/8n3S8LTrwZtNAsMJKFGIc9e978gWG0K
ln57EU7clt4wvP/eULKoXoNb5+0OsDzdYX56RcsYY0ke7Rd6Zi5oVDVUvIfN
oItTRIMN4j1s5ms8lYrCFrP7Umyn9p9i/V6sw7z0GEwua0Ww+9PCphnV/PQL
ItineiPDQ3MtxN/B7DbJzq51a/Ec0PD5+1ftm0oVvstQndF9gn+SlPTi+nNQ
Z5uW/oLUjxLxRbrNFsw3KyaTCzN7+nwvEzzLbZs2NfhICrZo/NjUuIRUTWpS
tNq6UMio53q0Smbnnej3CMq2Vs0Fs2Jh9qag9Rqy/fjAtuiwTkI+ad3U7M6M
X9mCZe5jY2WrahKrP6TD6taK91kdfJRWr3/XJLI1d9/dsRFpQpDy9D/+Avsd
6wT7ff9evQnmBy6TM53fqalNvyN0WnP9ikWynqTlFV3dxnMCyOuUybnB1lFC
+5zI6RYr2koSahK+mm+OIxVBZc0q3t0S3O3q/OnY4YZHL6kp3keEulaQ1epy
d0uxf0CN9l/18pa6vt0UJoTRfum5rv4HOq0+xuq3c3Wf9zo92ojZVeCx5k+u
bVpgJIm5t93/rk88mbnBP7uya7jw6sCkLLOh1ST4Zf7ee64xJDd2w9UZSmI/
uZ/mTv2J78V7gT44L5sr93fLndfEH2i9g3ScOW3aLf0rZIKFcnzaP+aS0AMB
U5reuErGPVDddqxwI3F6mDKta72Wkk++vZqsUDvN7ucRDKPHNFQ3lISk9J+9
Zux1YWl+8673B90lq+0b3XjopimpiXE5M257HrsfI3mLmY1tj2piuWKgr93Z
K+y7ufkzf6clHWgtaawx6sbqA3nk2K4lGYuSRX+64tUQh189cknH6mdbPrmI
9RYD5Zp1e89nEcH/26HUAtHPbtzYqsXpq9kk/XLuy1uPxfh5QHiOjknrTLJr
8oK3zuFinPzC/NShWevSSU53B5s1yqI992szoXWvUVeE0SfmqFa0OSyot/2Y
EarSXPKB2gHlO/92q7wk2iXYhz4Nz7562/w/v69E8QNTtm51/897QT7W/5Tl
1r5ivJHX/mPbfSvzydiLGTXHZLgeXc9RASlFoffFe0XcqR+HfW5Tsym9+TvR
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
IDGZ85/6GM2/StR8cpq91WN5GfKpxW1/ZOXXmkhOmeTOeep5l0wzs/a8//W6
ENvwndvlFdWk6fJPtuGVceR4mmbDkx/F/sl/bhhc3u0ZS5psPxrQVSVEcIh/
9nLtrioyMDdqXrOwQMHC5nLk3ZbrBffywqqP8yrJaM1jFr1OXiSxtWtfrSbe
pEP/bmtOxOhJ7jXTLC+wuyxo7OnXYHDzKHJCP2JTTqCOpHXl9rvJWbkk7Ir9
6ewTop2XWhQmT35ySRgfPc/78tszwlNX0mfc+vbsvRB3HehU1UpV+o9k7aeZ
9awe55Khv2uNu7YT90XJ+fRVXQKLiMnM6JP6r/ME11v1yuQ8e8X++D5h+AOi
Wjy9KHRBpqBH/S++O/68/3XixqaiHd49fpd/UEYSiQ+cGZ8x7aGgbnwvzGRd
NbGpNzq8x42HxOHngZ86srwbdcvC4x7H/tlSRI56zV+pP7RUcKP6vd8UvZFm
FJKSw6HJL4+VCCPpvKN+srr0ZaZlmuhPrc6fHOcRX0jSWnoN99xdIhQ4ft0k
t2+5ZQ/fJCXkk88HrL7lekiFx0Z141FJWia94lNGhFi7iNAF4vrMaBvXfVl1
Kakfe7rp+kiRn9Ku/Ts7vComQ5y0+y28IeYj1/td2L9VUkycAo8t2qsq4iUr
jxcOUi0m7+du+vYkVVznx2NXpNo0SySrHplq9dotxtsJOxr1eLA7kaQ4O37c
8VPEP7re7TR9RhzZXXV8zfAssb5hFtv9xMm4eDIku3aDW18xPt/WXT/80Is7
pFy1fkL+pkTGw4tFl+ZXnIokm+4eW18WL9Yrbi1Y3/zwh2QyuN09h43z45i/
YPd2Tn4+If+bGAeGhw2wtmySQrY8LnA03R4nWH6u8yNYb+zcTSNbf8qk+ux7
5F1TN96yTBPPI6yb6Qptj98nWW2dVOs3jmVx3fC+8wL3l3uQvGPDGrbvHiLk
7Pe32nPPjK1nnLupbZ6SWM/aRDK1S6uO5WviyOHrD7asqifuxyOz5t3od/M2
+Wa1ZvvJJmcYHh8SqGb3PZQ4dJ30qsTKk+GBrac1KbS/S6pjvqVNbi/Wi3Du
5trVP6RyT5wwe++lIRWyuF2rlX1JT9ciovFl8Qh5P/zjsz9j5OfXqPtlLZ85
JySkWPCgefGaX8FRBcpin7zbwtifL2T29leQcsTpVkXs3EevfPkmeTx/rNPh
FS0WiL9jaDFf20qOb96b0PVJ8H0Se7LZ1D/fR+y531H+XMsQ54M+fgmka9qQ
wpNzxL7oLrUt/Vt12k1CTCZPlfd7b3cZYnsy24zlZaiTb12RYp2qZiqBXR27
dGuVsfZFwT5+Yu8pnkaSpNLI3Y3UDgvn/OZPCpx0i2ztGG+45KepZFx1s1ZZ
D48JVTSe7PS5KjX7vonkQKtDGhkmnoIQ0CBQ3nftGHStYE4rM8mBG+63hqa4
CdGXzgcK3kHEMvFox91rzCX+bYa92vhzBzv3uTKlxkdP2VyiUVJ/0FrXa0Lc
PCPlp8djyMiBWTcaLG4oMe550SD2iy9533mT0/7yKKGqZdlOpTltJd1eWpbV
nC4hRsZ2kcqzxTw93vbX1otpJQr3crzoU69w26YisoH2S3iE9D9+ZnA1mTNo
9JV/slNY3cNibt05AuonLiWpFs87JwivaJ0t/3WjqScOiv3eHwwuxL+SzS/u
abH9tvhbS33RzjTNX/GjpX4Z6VN60vPP9w776+YR9z8P03t3bli+OE5bz21q
Xfop/j5dRO7omT4RxeRHnGm9H1tE+7PtmY3qvUlSElk1v1mFLD6ZvaWDnVY3
mf2crffCr7OUPK6yK1yyIF/4GndrV/WCajKwoEWEy2EpSe58/klfmb2K3agW
4xNaRVQWdGgz0K2YdO88WL+PRNQfPyl46bfEQtYXNJaes+C+Jmsj16CyFXnC
bMrPhmuew+7oF7H+c/DTSzi1boNfAVmfEHV6+ZMcZv9TRic2/T21QMx3Quvq
kOkbl3ZzDC0gH7YdSZT347nT9b94sXXH8AmFpHuiy7BrB3OZHZtqlz32S9P/
1NXpPjJc7O1fXJFC7KVXLNZHZgje1L+UVr0j01aLvzuT/LJuPx78/EZtsnoK
+75JQuseA06rqhxLTCZzjkcM+3pWrKvgns+dK3299gSmCxbUDjw4YG+dZyf2
yY+ldiDl8+HYRxcTiMG2u/7Fzf5j/yd00a3fMYH0tZ5XNP6oaOe/0HrvkQ6+
v3XtxTp2vSZfnw88G00WpIYlyvs83S7U2aXS8w+OTTC5Ql7csr88duVdYe2x
Bqf3TWkuubW3/4m7RfHkrmbpzJw8sa/ea77Ktgnzo8h52rcWROdrs/Gwr6YH
BTJ/Ra8hueuDBPfmcWeWrRHrgd/Upx47e+s403PXf0WX8uthZEezvury70cc
6Dr33THsTqBeMPnlrf7VXWuC6I/2h061bhLO6s/AYa/Qz4/zTdirzkbnRv3q
epHMPtN1xqCllWRXzolPLcIDSYB9hMv5WceJxM9S46Z9Jek133rCjcpTRCdh
VbVH34tk5J16biZhxpJH3W6OjZpxgjSKHxq+YaMPqX9jcuboDSaS8uCXW02v
nCN2qqvLe6WeJ4+37K14v8xI0rNY90pJ/2gykuuD8rGY0utnZAjJHv20xr9c
Zrc/nxsj54fZW/pdAD9+pWt+jULPXmfj17q7a+9+swdko2R2oLxvfzadx65D
3kmHrUgiX4q29K35lSa4fmxw7L1KNelvs7XFyxYCUfszCrF+gu/g6m+8dlt4
JuIbA3c7Zj4NJ2upvYql63BLZHffiw8y2L6LVdMwkD93SsOyE16Nc0knFcdj
p4ZlCh5T3aZtWF5F/KYoq2kdzSeNDFNvLZwmFSR0PKdqD6lU9r5P9u0Kj6gX
+0jQalkXT969Z9l56Kn75CrtA5RMvTZEbm8fHhlWqvpN8ffWz/dobrdLI480
lp6ftDVLjHu3ZE5cmDYyj9xskXZTv5lYl1ihWf1+ik4GyTnTVPPHk2zBm5hF
yetyXSbZdz4/KIM46jzv4LtWjFcDDE8vnfFN8R65MVkvjAOs7hH7Pi0cVt5/
KLgFVD3ul1lFcF9KlPvN65svhrPfbbnUs3Fbed/dxP27r158IOq/0r7RvLPB
GaTrgdBh396I+NPkKY/aOSj+DmzEhc3XBn/NJ5HjWiYaC1LhpH/dcy/6F+gE
bvpPvxa1Y3vKLzzP1ikhfSxnfIl4JtrnHjNudbnoEE/etm7VND9V7GO8uOne
mMLu4v3J6jTe2O3YuM1djYfEZnPcz7PuSYLrtBkX5XHy22dfLiRdTCNKzy6v
/tEiSRg5dUBFf9l43lTp+Oxoe41YnZjXoXRpjLDa1nDrEeNGktc/nw9r9vS+
wu8wBrmNSm5huoN9pzDJ4+OmywtMJNpfmy7s7hhP3h8eWzOiWPx+wUPz7Kjx
D6PZfXFaVv9Yaw+vJhoVjW+N+uc265vSozyUNun6pHzfFfL4RtCsbic8yY7R
YfW3L2wm6Zo94XJSt2vkwTnjf6zn7iVuC5ttGhemweJJ/h7U2tXlbeas9WZ5
YniQc1Slb0cmj3jJvOGeRb8KDSW937VuN7PXGmF42/U+8xYEEbvatTPb7jSX
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
FgfvvxbH/6VZ8x+eR+6RE/Gr9zk0FM/fqwKOTgz/HUfSF2x4+MEjRbA40efZ
Ftl8kRFOnyodb7L79mdvj1cPNv7Jvt+0dY183/ODzM+OqZuXR5UHmptsyWB5
q0V4TKy8nrzW5bOtSu8Chfvb5zW9OulXqvj7wmMznn2Xz4v2z063mm7JIm9r
R+fVuyOukwnfO4w/2P4kuzejYpFX0dUThpKbat4TRu47wuqueu6frBolGLHf
O2jq/8l6q5rYF4d4RrfJ+zfDckU/uOzQheUbz8WRyn2Bto1MZXn37W058vnC
97bSpP5BIUGiv743o+zsvOp08jFtQ0KDxcmC631Ni1+DqknlBfXD8vuaMrsu
nr8q74EQ8FPZQr5Oqlz29BtmmqbwuyrBKYfnb7L0JYuX3Fgpr3sPaNFxV+/n
2pLx6zM6fPa5SA4vrcPN48s0T483kOwescdcvp63ppgKFTNldnXPo49y/oWT
QubLOUtJYZPWCc8eBQsG4xd6674zkTSrWT3EalAceVS6+6KjZzB7bk/BOzv6
USyp9I2NzPUIEUzPDOjhsEy8l+lzm2nDGxw6RmY1VXfQSuzI7pNpq1F/wI1S
MY5Fn8B1uztPC/4V5zci3z5m/oYSMjTrRIZuWKEg8Q9LkPM5tUzj/f8xduZh
PT7RAk9KErKkfdGubCVJinmRpWTPvqUs4YcUKfu+ryFbUkSUtEjS4q1QUmjf
lV2KZClEun01Z17O9/bc6w8en2ee+c6cd+bMmTNnzrR2LyEHrBVLIwcK9gnc
5+rQ1n2somIB76ndrN/WwPt9kYfWVecK8dUjd/5wntY0L/zdVXrNdI/hVbss
UdwzRoeD/U5F7FWb+fXRfF+9tcob3PQ4KB8drpCxKT6SX/Aw33z7SUPmZ5D4
Hvhq5/AI/teJhf57DhpxipF5F12M/fmGmDaftK4E8N4H1OfKPNNm+bSH/tI8
8WHaZZZPO1G76+/WjaEkyUCpz5M2M3mX0PE+Qx7LcVt1p33cn3yWXNnx4/yw
TxdJw5Hwr1036LL2xG/o7LGnRoj3hvY4+c+QbN8/ie0f9cLtraKjr/L9tlkG
901NIIOzz8peadWZg3tnGoMlO3ZKEb4L5KGSD9/mRVo3yX/1lJxnPWuJx7XI
YwmPi8kAy9NbpY8L80vVoucqw9Sm39UZxN/flMg75kX0+njvPds/Vi7tOavi
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
G+SR6XTPmRZJfKey5vtl7/n/GruejSQqL7t98y1K5I+8X2Zcqymc3+H3laD9
J+4knVricI3xQZlOlsY2D8mrwc3xeMDBj/TaadROT+1HvGtc+Pf6o19JfsSr
kVKZPOk4Sk32x3jBL7QiMt5xwtU75PTNIA/vh8K6/2hc0mm3EYli+et+Hbj8
VM7kJrFfo7HtUwfBzgy6FtjTUz66aR935EHW0WT+WYTZHz0J+bc7n8u0eW6a
zLt++nFftF97G7Kpg9usLFK341PFhu55fM1YqwSRfDp9mzgp8kMu2ZrosSao
RxZvQvMvgT9nosv1YqP/Svju/s39ui+/5EE3kwyiMGCGjMRkYV+5Xn5j3Mq7
GeTxb+8JN04I/HX7p6FGL1NJdsMZR7K8af8V2dzOJGfXLVphiURzY+QjWX1h
Hzpue1Ze8tSLvO3MmTb7+BiyetE4edMqbe5pabFl5ckAftyZVbfSbt0mdcN/
r8690529lxS97Gdu8NpYlrf/qpN5+xUvzrN3MdpOyDvbWU6He6NSkrn/Ux55
cPbXly29spm9F1uTdWyRUT4xXR3huqpa+L6dziV/MqvJI955R+b+HR+YO37m
Mcc5+aTA9OSICD2hv0NC9iqI9tFhboM210zP5TOpf+/kTuvAU9MySVRrta0X
1XPZ/bKyaxs21EzPFLvXeff6iOcJWplkbM9FUjdmCnyvq/8mded0cmjt6vqy
KqE9kXrt1/jlPSQ9Fa/MuXdJ4OE/L0+L3JNCZlc4dXrQ5TH/jN67/G4yweqr
UQpZXdkwueHGI75m1c1dA9fXkq2KqjFZAf78vF87xissvEUSnj4InG2mx4Ut
jtZJKTrLn9un/8u3XTQxv+yocEHXgJOpCh7rUXCM3zgkKSnh+U2yhcsK9IjQ
52Krvu77kZFJfJcrXq+WEfTz4eSqsblSWaTtyHTj8rRclo+ltvDjjVkemWRB
xu78CRFCf3OrZxb8PFBMNPts9rZPFezPigdHsq1HFpO4jMha060Cl3kSeXNx
TQFJDZEd9t/NEp6j/Vp6cWT4qB/l5MUZvYOT7gjrpq5vV9/Q8HKyKioyvIuX
wJ+7VczO9CsjkffuWpY4C+tvybqeTrpTykjf8EvvDbUFTpzvyc6weUp6TNd5
4ywrrOMVVa5y9QpPiYxbJ5/fRcL6+GTt5Xwf2WSy5HClxtbNgp8hZteauw4u
yWRMwoewMWUCt6sZ3tWd3CYDZN88udhNWF8c3l5cVjI/ltzuW71b11/gbqGf
VnhFZJA+E39OczW8z3O9pueK5GAVeVhX6b2Qd9oh6dms+RVtuLNJBbbbdILJ
1+zlEd0aEvjMNgPMpnyT5+ZN87Oa6JlKoubk754nI8RzGoV2GPFE+gFpO+ZY
Q5qWkE9s4YDwCoV7+0ht66C994dG8bGTbBSnfzHgLL2Wje//fitZtWmN4iyj
G/yIdaXB+3YbchKPVt44YJRMZDcoq/6dv9ph9aFvn84mkx11Z5zk7YW49AMq
CyquWcYTjY2Z0q3HBPMmY5vtw15F9yQiZW+Tbiu8KmKthDjJLvHfw2zf3iJa
a3JlRf4K4NJK9jdyz98gJp8fmrfy38n4xwHTH3T3iiQv7nbS63tsHeNvd3qn
Vy+7Rswn1pm/u76TZF7d01dxhBQ3v66kuK4mmFxxOs8dO7uf9NIbqSr7VY7F
rdXrz8sdk3+Y+SdhfQlNj3WqebmTrS+HlvQefvicH9E6OH7ZwGMxvFGfvF7t
tukw+1z/4fABzg6BvHvy22XcXEPmD2mc2VOqwC2IH/ZzhrVurD7ndaJ4672r
C8nFQV4uu4aEE7WPnYlE076j/0u1F4HLrvF3Xh5uuKzNk+4HJOT9R0qxfdDx
suWGPTKv8V0sbk+0avou4I9q9UBqzNHJwfz+VdVuIe5GXP+aNsP6hBQTG/UF
Yw3e/HW/e/xAMrlnCfEZo6g+t6aMN6H+k9jho/Wi/EuIy4R3dldLBPt/oZPJ
EKd9h8ih+EFreiVE8UvXDpsw6IIBt1uvz+cto06SHK/W4XJvovgT9j0/WW0z
5O4N1XMwWhBL2i8cePhqzQVWz9Lp+l9UZp/iSzrOli2RvEUeuJxvfLNTj3tQ
+NXvXZ0v/8Ixd/CVDjGkyk9Ny6ebkC9OE+XZAznU9Ght/myCOB99WvVl/ULx
uB18HwfKb0iV2Om2RpznWiibHdwnHueD7eoRtHybRb9zpc4UiPG5+d22a4WJ
xwXh/FHwu0ekfumdvJMrxitXd82JyBHKj9FRud3nRRFZp/nthGWQeHwRfh8N
6lG9+GO10cssMe7ZtbOuzXehfHYnTzK8/hGZ0Vslv2dyNtsnTlRdr3xw3yNS
eLos0kpC2MfBOzU/J0g2mJkIfJ50humz7o/E3iGyvtBQL1v8gMws3Vjodlmw
/6OtZ+U17VXIofzfft935fAVdD+4vXNxxdPtBeRAG8vkitFC/fCuWX/v/HU1
ygL/ojhpfFSM+DtZbDyg/MYgh4nbq/eulX8sxiUjO7rnq4vHZeF7EFB+YeI7
I9/pD8S4coDyrqxt4v7qy0Qx3zkoVax+nL8Xyr+f+9arz0ZhHVlNz9eWKudZ
196+z3c61vmByA6EeiA//MIdlaeOGykxfbIppJdJd6tz/NXeZ26UXdDihk7f
PGJjk75a2Kp1aptOe/iBvgt/lgxpx/RM6IuD0zST1vOd9th0nyzTmeWT/9hu
oOen+d4sTzj8LsTr4vYPuLCwV6fnN8S4d5J8hZ1KGMFygHhd9t0hbpbG7UN8
I9RzYVHn/rPrhfi3UZTLPFSLi8gpF5MzzjMJ9VybIdXh5B1xfYLPf6G8SVlX
g7p08fNNr4ZXaYkBQjwAO0e49bDLWUkhvhfK37Fq0+N4yEXW/l5Zlo92Fzwh
KurzB7rrCfpB54fdhMcDs0jjMeeuWhJN+wWLYxYqIV9J8g2dSuMNeeSZaatU
86HCfK8u7Wk4wSaPeMywtxuxOYsvpHYd0z8uKnI230vF+rsAnftDefPvreYY
vSwR4+oySrPy1cXzpbxH9zqhfJJP47U4GXF++ZJCiMtQ8fwq61DebChva97w
a2wvcW5i0+Vn/ULxfCw4byeUz8+pt382QeA27t8nbz2fTiIXzrgZ007QY2Gm
s8aln88g0ifkdtQoNHG6njK/5Qv5MQf3ied7wXn5oLyT23dftzXi/LCk2gAy
Vzw/DPaHQPlC7fdFsv3TxXjUxfa5W4bfFJtf+N1kKK+3cOmBqpO3xbhCj5Xv
U8bxYvxYiVbhSLlg/nv6hQD9ewbchbdes6NbZZK+rgtGm9/P4WMUui0VxdXs
nHf+vW7xY9L3cHK/vv1y+D00XuWX7/HgzUGPya3w9SStSZ9fCYqyFuXf3h14
cLff5sck4ef9ufelmtaFX+21J2+pJRLqO5VXjMon+rsf9/q4vUn+D5ZsENXv
OvdJvymyBWTE2hyleTZN9Wea6YjKFxYZmG+5lUU0tmR9d/osrJtm2roaJ3Wz
yHHj0acPzBW4qdZRl+eeuaS4Q/GYeGvhu+yw1OpU65hLBq1Z76JhKPDDutJ9
U/zySUi9TMc7RdksX9Om3Ij21eX5xDPqpGqZag7vP27JHNO1wvlI/oC1plIr
hXsBfSn3XuwpG1daznOUQ3l+3RM3j9uprDzwMSqPktuW3WMc9Myk8do3bZ0v
snuLwLXaeMwY20q4ZwT8SqD71XJ94d4Q1G8+fNWPVXYFYvUnPF9hK7UyV6y8
3Zb/TvscyxJr59XBudkTXR+J1TN1R123m+nneP0BM0qmyumxdWdL7zNnZmnd
FGv//LzVW32OCfcLIM7/vbtbVo+YQhbnD/L06uKqHVeax+QJ9bSOWL5qbKsc
MTkcHr8sqVw/U4z3K83SeXX8oRg3yDNeI5F1nWA5rKjxqx+QH0vwvQ+IP//l
umlImxI9to8IPxTRddu7s2L3TcAvh+P5e459kbbW6apYeYgPx/cINJXKV2iG
PRW7PwL5r3D9V2+W3gnPKRa73wTv5+LyZg7FHYd/LxArD/5tKA/3s/jPBXPz
1PPY/SyWBwbut6L7HbZH864vHpotdg8O7ofi9lyZd7nhS/pjsfZA3i1cPsE3
4JxytzSx8pD3TOweltX5D8GWKWLl4f4mLn9xz+r30x8d5VcuMbsTsFGDg35t
e1dro+QSSXC/IA8YrsdxZaPU47wE9t2BF456NjJPvVysPezdATQecot8Bw+e
e5eNB2iP85unPouHlorJGe5B4O/4cUfJmx8Li8S+I9yPwOXX6RYNOLAvX6y8
Kr03gdspnZy/SzMsR2zcwn0KLJ/Djrn54TmZYnKAuFDcngG/L47dVZMu1p51
9P4Frn/5tfrAz5oxYvMO7l9AecgvIfX9l3bK8RL+meOln6K4GsgHu6X/1tB4
l/s8V3HUXuSHhHv61Ys9NcPKzvGJ2Rf/lJ9617q9zfeHpDBv04w+K+7yE6hf
pdXgHyskHxUSL/Ppozt4l/Ke1M8c3nqXrrLVQf7hMMXkI0WXeYm84wturjDi
OtL7qturw54s1Qzkn+VtcBLF6cH7EWPM7dql1xTzFeruX46q1xLIr7Jvm/3F
Br9jvAvl8O4AF6XxMjI8hd+T/spYxKH+YdtI2Tf1e3z3kYcOiOqX/DN/MshS
8+ODO6U02UW0POSxWaquH9dvQyZfM6K5POTDn55RtH74yUR+4PxmuUF+fpVr
mbHbGp4yuUHeoavybe58ysjjB9J+JdP8+c9+vjf2U43g8zbI/nhubczy28dV
rTsyZnwYuVB0ss27i8YsL319lV/exoAyfjptpwatvz6772T/aU/50bRfED9p
v/DQzf7ypfzoia8SReWBty62GaKwPZfJU4LKoePKufvK3e/xjpY99b3/koNp
ZN2Yti+T+ETafsjPk3yw4tQZvzu8I61Hhsbpzf2p77Mv+AbfU1/2mtT1Hiy+
cWJSas+M5Av8yCsqK94cM+QK6X3Pw0PXuvQlkUTP/HhKdpgRB3ngR34v8amW
u0TKP09M/7uejfbDUtWeRJFLW5etFtUD+VV0Pt3X6abTtI/wOPZH/vBOwc6O
1g0lhsFEd13pg/Txxlx7/166Dop5TA9M8L5bKrp/BPd0zIv2rZY0L+SPSPbo
KIpng+/yqE+OslGbUP6iTLGc6LtA3p4E329T5A3z2HiYE/Kq1Z79WcRxbge7
+gPpzK8VJ6kZH/usiPROKfq95PJTvtO558llQ2oJFxue6GVYTFZEHzq34/1T
FofT0FPZLSfzAZnVYF61ekQSL7EpaZuovNfDRy5Thj8gmtmdw8jtRGbnL7k6
LXzUm6O8i9Eoc4OzN0iNvergQ1d6cKb3B+ZVrPThe8mnXNEPjyLm1rLkV5wh
N0nvCv8tcQO/v/zO3owX4UT6cLzyjJnG3BbjdatnD9zNywyQkbT4GUE2Zuy/
X/3KiDvn0y7KwPQheZ/lGahxOpm/onPF6GLjZ3LkpnF8xrk0UtV5teStrsn8
kVX5f86DfjeQ0Xd23CZLl1+6qv88kA+nXDOx0cItJJa4L48xTay7zLvSehSs
U1ccSygjvjbvju75Xsy3rX3zp1+Pxnbb2rtNOZH7/WDFg8ElfPji06+MbL+S
8ladPkt8LSLbtEYt/WXYpLe1m+uZ1rl73eTgIrKTt1Gxfd2kt+nv7v0sf9Pj
VCFJuXD3QufMXH46rSfjWdKF0vGFxOHdy/tZ+3LZ7x7MUJxYMLyIWN+81KHH
pjwm//Szq+yVGwrJufPHVnYYmMe+16xTBqPPtHtI/OSfLPr1MJM/Rb+vs4z9
ROVTD0l543Zppc5Z7Hsdtr3aelTwA5Le/32bHtpN5W/KaAU2td9O/WOD/+A0
8r08e1aJc5O9R9ufa5Va/0w1ijxaO1gjX/U4//1rczsfbGscbjv4JnnR0bIq
Z8UpvhPt18WDQ1Vs+twhd2/OTrEISOEf0PJtVM4VlMglkCHnkuRiFFP47md2
3zJuKu+R/iB90b0Y4iR7Vsv2/V1+IP3dX/qDCyLP3SLSNx6tebHoLmvnvI0h
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
lrgu8WGU8OEZ4tsj7ibf3qK8gjTJKwjU3L8v0NyTIj+H8UINfrtB/fvrHLm/
hh5hft59+/7+VLEmf6kTyS3yNPbJPSzOkxmPt23a8N55Uka4X7iJIz7PfNio
wT+keMWtE2a8Yo6Gb8No/9pk/0LPqnsNiZvB/sc87qemtHbewwcQ3nm/iSNO
DjmpPDwrP/KMr5GU3nlJXm662r973BqdLe0ebLTDO8iCh0i/WT+JM0NOLkj/
TNAJHHRiPPiD8agLBo664CKKE/aKMefJoX4dBwVfR3k1nR4182pAD9YR9NTK
d8EHm3wX44FjvI/4O1jHleLvYDxwjD8k84P/D+SZ83cVPgDfJnzYKePB52gZ
30vGA18h48PFb2L5qZD6KcZxHjJerelDkqDJ94PeZzyb7uN6yH3cl+JHAI/9
w8v/5eoQI7BdffzobRN/dfbpjj2OORT/89aEN4x7sYGK9wL3etP7uazAVkZx
ccb3eetd+IIxZ5OyNjRXcWzgZzaZ/VR7Ez51o4l/K//F5/8qDV6lqcv4SjO+
lOhMEToHiB7kdXlJ7CLG14rdy/ijIg8cJ4EdyPhhTZ+ZrqJH7t8X65AFB5+Z
nvYSD2f8qPCBcehxS1xIQ2eUZvx5Oreb9DDP7SW1mfX06cTFgTvr9Gm4Rm+e
oPWKkvWKEv0FPbJE+vf29D3SdnhAjoXPr9J5PvWgeZ4HzFsVWpfHC36Wbd6V
t6yVm3FX4qLwFw5/mhuw+Ul/FR/g+SdSnSDy7a/R/Ze33JdVkb+2Svy1GJrn
GOoNyR74Jdy0BwaSPt3nZerTaTR+pdgPJbQu80WfDiJ+9hd+XiN91zfaPFdP
kV7wkPM2WmO/+VN9a6LUt3bTrHs16ZfR8l1DY//Xkt5ZJPmcvcienyv2/GnS
F2dl/vfSG7Qa8bCV/o3Z9e38WrHzt5N9+ESIaR8WUZ1jgdzPBhAfGgsfrmrs
pZ7kF/xF4tL+Gr+p8ErWgKzvSy35yUM7pIyLnb5UydXAC30qOh4OMs4G2X9u
s3qDJW7cPXR9eR3O63LhRur/frRZ/cfX+xw89UDxGtc9RdPZoT0btzSGnXit
SeMpVn9wVk3UucpJLv3yzv69q7+JcdorYxLcYnpa9WCY0MN+EHDej0vTwj0i
fXItuPug6zvabbHGMydmtHH0mmS1b0dsuL0mc65D0XNn08yQZ7s77cM8M+IH
zP1MrW942vWIhkVBxr/fTX9z3ydWvzV3RFDtnXt08n91qEhamHxkhVqXQy3L
z7SbH2hgPPAxianXYn8PNF5JCAz4Lsp1Xt32X9hsboTT/shI/+pTa95Q9Kd2
mFiz/XSIAf4AX9o6sDp6X4hxcZSj4czcbIWX72/yXO/HQo3J70cYPebex1/o
6F15JXStkpMdSb8PTY7wNcat3P3GCxHHlbwN/C7t+bp+s+lvvPlsfJS1jv5q
j/Vv9d/r8ncOlLUvWhlfY8f/Qk7KOtf4epxsZQxJ9ilMmO/y11anJt4JnFNj
XzBiQLDnxmw1/ubFmowVR3yN4PL2he9N3m9Z97tlvV68tNV1Hq5bn7JxyWSn
PTjj1owWUVb/enRls5Fdft1s8WsGp0Z6DO66Wn13se+I5dWXWxvbitLb+nb+
UNGZ+2C/uC+OhRp+c8b94DtntxrfLrNXzh9TnfbmXQqrFm2x+iknai7bR0xy
+Sk/nH/97Tp5O7Ur4eKr8637HXxjv3XN4bLboakuv+OHwJaXUu/U2EOiZ7U4
32K7RQ4nZH/40pHTeYpv55J33Dm3rsb+VHBWeWG2y+9YPNazu2e3YKPP8Cec
kX9fpPAbf6v1v7swyLgkcgV+jv/G/Z3OidX2biKHFntGxgP/SMZ/tWZOx6Ao
V1xi1trP+6x/3Wm/1jJucM5ma7wC3wX9KTIP+MPnOcZjnn/QeOYz9hHvC9AP
fKrMg/GW/lEyHvg0Gd9337ZZk3ZZ7VXIOdZrS+Dyy17rqpX8q/qFiTOf8jz5
iPGp4JCHHBqv8qsFd1Q2HL7kE5c94Oi4vLDi3ro3LdrYxpnzkZrnn1+/bDxb
FGoMXjl+e6bNFf/JvOlz/XKi077j+W9Sbu1y6bUhY15Laj/LaXdWNtoU0+pb
RefjY9tE1Mnz+V3NbBu2us6Hm2djrmaMdNrf0+RpTKf7uJEX5D5O4qK8f78Q
fwfn0ga5Nxkl932sH2eL3wR6bsl9Tabcj7DcFojeZ3w03UOtQN2l5Mmz/Fzf
c3xb3qMnreetps/kOk0/yc81fSPTNP0hpwl/cC7tFf4kC38s/RWFPyqvdZDJ
n2zhD+vNncIfS98bsYf5XE0SP5fxWPEvGLeJ3ch2i6f0Q2D8qvjjjJ8U/4Lx
NMkzsZyr4lcy/pn49YzPEH+Z8XGSn8N4gMQt+dzYLXn+jA+UOL8lP1b8UMYD
xR9k/GGRT8ZrRD4ZLxG+Qf7nndrad55HR2OB5IewPOfKfZOqO969u6LfPfu5
THDmf+nH9e+1u4wx4zwfyPy839vJfzFeK3kOvN+R72fJl9PUKzlkPOud6Zr8
ildkfRmv+Lh+/OpB+a8XNXHsB6TOgvFEqWsGPydsDxrmMdjP6ET3C5mSlzJW
E99uJPMzvkT4zOu+bJ3pB4HPL0hfiKWCg5/An3avX894Vu5lYigP8K7kASbK
fQr0UYLMU/bnjHp5Pi0lz+c76TtkkQfZRyyHoymvOFL6BuO+QOnB95dFlB4P
MR6n+p0pUr/z23qTTsw/TOhMcKt/v3xG/rdCE6c6r4n7XZF9h//yb3Sxr704
wACu6j4K360Kbe1nLNLUu80UOcF/TZ5ivvP+q9RPqf+Vd9ttpfX7xR2S/JA9
lD/2pLwHGqC5Z/GTeDX2dYm8u/2T+NGQq6HCt58ov6vGzczvOkD3+H/6m/fj
D9M91GPnzHsoT6/75zU1kfgt6LfLO3dJlEfaW/JIe1JdbZXEVfpTnalD8MHU
r6Bc+hU4pc8S+BwmfVG2avT7GE28d77YOTh/WjQ33/0xwk4kZT3j8mcXXtrX
oc7/smnqnfH+AuN4t4JxvMvAON53YBzvQVj8dE3/JZumnlq9V0g46GQcdDLu
p+nPadPUX2N+xjE/4zadvpB5GMe7FZZ7WE2fTIzX4Xy+JVOfzOP0HjH7xeAP
41hHxrGOjON9DcbxX4yDfsZt1BelRPqiQB6AH5jWdnH8Dtd7uGyvgn7GQT/j
oJ9x0M846GfcRn0ShkifhExNn0nQwzjoYRz0MA56GIfcsv0cpukbie8yju8y
ju8yDvlnuw70MF6g6RuJ7zKO7zLu0PSNxHcZj9b0jcT8unnYLpqn8UPVe3Z0
/uDdIuxrvHsIOef97k33lRifqbmHAj8t9zvyv7pzA3pn3Pc3rkTHud7LtsRj
RX4Yx3cZx3cZB58ZB98sdoXsd8YxnuUQ4xnHfzGOeViuMA/jmIdx8IdxrKPq
f0jrzvIGehgHPYyDHsZBD+NYL8a96b6b6WT5x77T7QvGQT/joJ9x0M846Gcc
8sY49i/rX4emHyn2hYpfFb90YOGAYPXuGPCybp2G3p4YpvYL73e8S6X85aO/
/bl6iEt/sV1RoqnnwjyqPuuVad1i3UNc7+oK/lbC8uIbo1qr9/XYDsG66OwT
xsFP5luKpo8f+Kkbz+cP6AH/T9p8s+LdXP8FO+GKyCHGs/7NJ/9lr/gvWEec
G7+IXQT+8HkC+vl8SNH0E8P82EdrW926GT8yXL2XzXKIeZjPkGeWw3mafuP4
X+gdyBVwjP+X4AXUx/iY9DGuoH4apYlmPw2Hpl4+X1NXbtPUv5RQf5Kx0p8E
80BO5hL96h5E1hE46Fwg40E/9IjHYwOX1tmHGK/quWS/YDzLTzLlWdklzwrj
dXpZxWGkzhc4+OAl/XWxjjr9CP78LPWkYVQH+pDUgUZTHWjn1mYdKM4fyFX0
iim58WlBajzLmx/VGx6SekM/yq9Ok/zqAk2fZ4emTtCmqbNzUJ1df6mzS6F4
xdMSr6igeMUmiVc4KC5RI3VtKRQf+6vEx/Kpvixa6ssw3hJnpnhanMTTkim+
sVPiG2Ga/m82TV59vqYeB/NDj+C8Ao51Zxzry7iqQyF/kNcR40E/j9fpR6w7
j9fZmVgvHq+zB1Q9r9QXzKN8+NmSD1+giQf6UbyoQPKWMT/+a35lp3eaB95U
76KyXoCcsDx7U3zpCYkvgR5819bv8vgst2bqfACdlvfWZd0Zx7ozDnpmiN73
pn68N0hvAi+R96PDKB+vr7x7Dr7p7HO2T8I0eWj5lA+zQ/Jh/g+19oah
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFnQf8VuP//+993+fc+/OxhZaSmYiMzDIqSkpWoYFIySYpe4WQ7EKJSkbJ
agjZOzPSRPbeq//r2ev6/b+Px30e1/u+znWuc51zrvEer/f7atZ/WM+hqUQi
cUU5kUgrXVxKJBqSicS1xUTiLh3rKO+COJHIqdC3yv+0mkh81JBIvKJzl4s+
Xkcblfm7kkh8rPzXlH+l8r5U2VY6lJVYqf+bi95XdY9QPWkdTfX/cf3fWfRA
pZ0yicQXSZd7Rxf9qLybaolEWfkfqsxmyl83m0jsrf8p/f9EZeapzGCVeV//
n0u63V/qOdZTer3a8afu+5XoFUrz+l9XW87TszTVNQfrmkeUdkz7+kaV69Tg
NixT+bOVt6OOTZKub92k38++qv83Efso/UXpzzoW6txiXbtQ9xita69Tvfso
/1qlF6iODjqaq8xuhUTisJzeoc59rvIbqv3PqvxnosfyLlR+gRrZQmXaqMwx
Kt9G9O6ib1P+Aj3/rUqnKp2rYye152b9ny96vNKyrt9c9/pMaVHfY4DOv602
7ab/Zyn/aKWH6vmHqc499R5fUplH1K6Ryp+s53lZeQ8pHaA2baprf9P5P3Tv
C3XtSyq3RGlHHc2S/iad0v4u/6h8hm+ienZS2ln5y3X9p3qugp7rMZ1/RMfd
Kvsy70T1Hid6EO3V0VPXPKH0I6X7hWs307O3UzuP1f9lqmc7PccGSndVmSa6
dmOVGac8PXpipJ7pyZLbOU7p5Ur30NFW5TZUgStFRzrWV/mdVf5Old9fz1pQ
3nYqsw59T/SefCO9x8X6P0Dpt7rfuapvM7XtUd6jrm2p/+vof3uV313pqXqu
3ZW/Rs/UTP+7K3+Y0hG6/jbd+3ylK3XNtqp7iuoYoXKLRO+jMtfrGXvr+Q7R
MUPnduJd6vzFOt5jvKjMctW3V8rXV/V/C9GfK71EaV7HNsq/QPe4Q/capfQJ
3Wt35Q9WeonqeZ9+rfJVPdPK8E6Gq817K80oPUT539EeHT30/0SVOVTl0zp2
V95Q5dVVZk/l76r/X6ne3ZQ+rPY2KP+zlP8naz5/StX9bbboeaI34Bvo0KdM
HFv1d/uZ7y96o6Tp8apLv8SV+i6LVP9Wyr9J9Isq00z5Wfqf6BYJz0PMQa2T
prfWvfooPVbptjqOFH2c0lb0ddFnKN1Sx2Git1L6Pe9VR1vV9UXVz72fvnOj
nmU1/Vv/N9C73F3/u+q7tNe5m9W44Uo/0zUddH4LpaeUXHamzj0leh++u9LV
qrO98v9TWtL9Wir/XKWPZz1+H9OxTaTzSh/Vudc03nqKfl3pI0of1vGRrn9F
//fI65vo/VREH6N79tK51vq/VPndlW6ie5+gdp6l833VvmOUvqE0p3SQ8s9Q
2l9pQvfbVeXHhTmBueJwlbtW97lX7bwz63tz32vrLkPZSTqGJzznLFVdZ6vM
MqXLdZwreoXSj3WcLnpJ2W2nnp303g5XWtF9e6qOG+quh/qYx57WuVuUrlf0
HHYH64vOPaH8r5X3huo6Ws94iPI20v++eobTlLerrvlQ9JNKmyn/VNHnKf89
jaMtVX53Xb+L7plVZ3td7/Y+5TeKjtSeaSrfTeVPVPl7lT9I+WuUf7LKHyr6
Y9FLlb+L6tmHZ9A99lbeNfp2R+hdXa12rqe8CapnP9UzUPWcpu+9H2uH2vm3
rj1Z9Wyhczuo/A5Kv9K1fyr/U9V5sOpspWvPVv4Furafygzm3eraPqJHiq6p
/ryOETq/caPGntIjVH6Y0id07aGiT6FfiN4j4+/dRvXfoPturHZcr2tHU4++
6dE610FlLlW6TOU/5N3oXofqXk1U5nu1bY3OzVJ+SvmLRQ+nDyg9Ren7SrdQ
G+7TM05T3bOVHqu8U3WvTiq/sd7bHyp3DnOK2vA+9av/dFEbTtZ9O+o+LVRu
W33bzkq30bWDmd9Fn6zyW6ieXfR+m4muif5F517UPY5WujnjgHU243HBffcS
3UbXHqj6jxO9i+pfV/kH6tp9lH9q0v2KftZGz9Zb9Ryo9ASVy+j8g0pX6NhJ
72JDpZ+qngOVv7mesaJyrVX+PKVb6bn+pR/r/xaqPyv6CaUHqXxW991b126p
63ZQuX2Vnq9rGvUczyo9hrlX+ccq/yldN0fHAWpXXDFdULqeyt7FOFL+hapz
HZU/UteOpm9lTb+rerZTuR667/PwY3rGLrr2Hp2/W8dTats/OveXnvUrPc9J
uvZd/W+tZzlR9Lqqc7DShorpQ5X+Vva1v4aUuhaxlurcy6p/L6VnKm+yjiYZ
f8up2f+NT1LaP0XXf6Dz95V9fpqOA1X2at1vuuirlC5h7Khsc7XnduU9qOMD
lTlG7+4BXddM+auUXqD8T5XOCGV2SDudEco/qHO/Bp7kgaLn/7FqS015n6rt
7VTmPN3nbaV76719quM/5Z+l9CJd85Tq21TpGl13jcqcq/Qh1uSk+8k9On+G
6CGib1Q9/eEP1faCrq+rnluVHqA2/6Myv2lMTVReDx0j9L/Idxd9d83rL3Pn
u8z5ov8S/Yvoh3TcrjqbKn1cx1R4KKXzU15n79X/N0pOl8Sew+GR4JUe1nEX
a43SddXOh1T+TnhQlb9Nde6o9HHlTddxR9Lfl371i9KGmss+WHX/vF30DNHX
lFz2VaW/6v8o0Xco/Vd1HEL/T3q9ZN1srfR1tedsvff9Wav1/0Dup3QHHSeJ
7q20iY6uoh+GJ9Jxiuh3lN6l43S1+xK9j7nwT6LnKL1J4z0nui9rn+o/XfXv
CZ+gc/vzTpRuyHsXPbVm+WLLpPnhK/R8l+sYrf/H69oLlU7Q+Q4qd5rK94H/
1DFM9FF8Q72LM1Vmte6xQM98kPLPUfp31TLIgJrX6EtVZiLfCrmEMvr/TMky
wnlKt9EzPKk+ty+8t9oxRce5KrOowTxlVelZOt8svMNNVGc30bNq5otKzM1K
r1Vdk3X+NaXLVMe2yo/1/yj9Lyp9SOn1JfOWg1TvAynPS2PhWdLmreGNHxfd
SvS/Cc9ZlFm/aj4DfqMsenLKssA/CcsD0BXld8p6/M5XHY+kXf5s1T9A99UQ
SIxRP/wkyCxV+pnKthX9mOjWZc91r6jsIWrfc8r7UeXbqcx2rBH6f37KMt0K
eGLVu4PoF0Tvr/KPKv08Nv+8ceAH1xU9SPX9qHc4KtyXa5G7kL+WMWZ1zxai
/xa9IO3nvZj+nTI/nGCOVT0Noico/aPqe/dDDlL543j/8LLqey/q/246Ls74
2huU/xJjSmkvnk/XTIKvUx3b6ns/pXKdlL6na95N+/ttqPT4lMvldNwDv6pm
HFj2OJ2q+pqWfc8/9dxLdf35unc3pRvp2q1VZorKx/BJ4ftup/tsI/r+hPl7
2rYBcmvW8sgbXKd0K+YllelZM11X+nfNPNJfgW8vI8vA8+pdL8t5DdtK57dU
/s26dqHqaiM6SduZB5RXVXoP6yjyFHM4czqyhf5fpWe5QddfqfSaunmGm5SO
1DVfw14yTvWcG8HPKP2j5Pmzi9KlyAuiT1DaI22ZBVmmX9rjAtnhipRlMWST
kSnLL8iY45BHlJ6m+qeXPQbvUPoN+gKVOVXpeOXdpGNr1TdL5QvIlepLH4uO
RLdWul3Z7/wIlX9K/2vK76t0bMrvCj4eXuMBHdurnkPT5udpz4yy+8AEpa+i
1wiy3kZ6B31Ubl+VG6jzm2U85pFdkBOQEb7X/Torb7jSc9JeL3ow56rs7Tq2
hW/IeN7rwlqg+r/Vdemq12LW4aOTniP3Vf58pYcrb/2M58dLA4/Xl3fCeEla
XvpM1+8gurPeQxed/zrp/1mVW1/XHYysrHuvxzyp/CP0fheK7q/0k7Ln7b9K
nvt7qL43lb6rcj+KPkzHoLT5XuTlm9LmPU8SfZHoLqHO20Q3ET1E9L8lrx1n
KH1H7+4z5X2sez2R8jhiTUL3sAFrB3Oxrt1E9FDRY/QsvzC2lA7SOxmoYxBz
ATyB6L+ULkb/kPRYuFB0T9FvsvZlPO9dpv/PlqxnuEBpWvUfkfK8f3fKc+Al
yD66pr/St9EbVS0nDtA73Fn3eTLMufCWrP+3Va1vuVz0XaK/YW5lPkCXIvoK
5AWlC0tep57RWGyBsgJdjuo5TvSxOjqkPefQP19inq67H+6ndFTGvMeYpNd0
xjvjHl3ItarqVdXZRmWyabcDPpY5576q7wnfA8/zXMn88EVKu6lML+ZNpSdX
Lc9+K/ph1XWcyj6SsU6G9e1W1pGS56iLlc7U0U70sUofLnnOP1rpu0q317FK
13ye9lr8oOgndH2F/qV0Xso8A/NnW91jlcptgf5M5/5U3v7of0Rnk+aXbglz
K/PqyrBWTtf/jK5No8sQvUDf/hOd2xGeNG3eA15qC727HZnjkbtZF3Q+J57z
MeUdlfK7Qh77B/2V/k9Le93nmdEN0mdvqno951v/oTbMhX9JW2ZGD/OJ0g9U
5kMdKdYEpf+VzV/+C4+tNu6s8n/q2h6a++uahwv6/x7rO/Kozs+u+X1vprZN
hwdXuZLqekdpZx27svYpf1/RW4u+VM91n+ofg+xc8RhEBv1S5/fOe/3oou84
Tde8r3pXqOyeBa8d7+majgXLzts1WvauqG+/q/+7K/8epRfruj1EX6pr95Lc
8ABysegHkbEKXrOR93upjf/pvh8hX+ncV7p2mO51qo7tE5YjT9OxF31P17XM
e56cjzwuenudy6r+S3XtFcjJokt5rxM/oOMtWM/3rNJvlb9EZY7XPXqI/lrp
Vcp/WNd+ovyfVH6/gvU73fTsM5W/VPn36tliPWOsdLKOvuj+9I1+Vvnn0Cuy
Biu/pvyS0tnKW541r5zQ+zlQz7e/8h9T/rm67y3K/l3nD9a9ztC1v4heqnP9
Ra9Rue9UvpfSpK79h/Em+li1tYPKHaP0Vl03S+WXwUfqeR/lfugylHbTufGq
HwX1SP3/Q+nXKnNz3nNdTz3XvqJR1A9V/kEqfx/6WdX9Qs75v4ruqvyBog9S
+ceVvwLdAfI4Ok/1l6N0frXKPaRnfEz0EtW5SmWeUJm3RP9GqvzmeetL0QMM
1dE84WdppfzVSi/Ts22NbUDv8xLkYXSBoi8Q3VR0Hh246PaiN4O/EL256AIy
CLoR0ZuIvlz0NqLXFX2V6LbwEKKvFr296I1FjxHdTnQT0deK3lH0pqL3V7tO
CM8yusG6laga1oes+bmJyu+h/HbIUqJ7it4BPbToQ0XvKHqC6O6itxf9tvr2
mxorTyq9U/kHK79t1bqu87J+j5cqfyvlNyr/YtFtsCuIvkj0FkXrXq4XvYvo
5qwDDeYF5yPjhzbDT/NdaWue+aXscf07uqyy7SbL1YdOrq/tiolv9O2+Vvmz
6H+sWfo/jLbUrJcbqLxI6flp8w1reQalZ1Be5e4Ncj3n0N2dpvO1oM87h/IJ
r0WsSVcknfYPNPL0sYFGz3By1u3hOU4M7/+dsu0jH6nN36A7z1q+GBnqZI07
ivvoqGatX+2rY2td05zxoeMs5tOyeZgvVE+bRv8fons20fl+OvZIWif1XtBR
jddYuF/9/B3d82V0FQXzrymVuVFlNtG1C9ETqb59lT6n4yd0l8qfx9hHb6v0
eR1H63ttoXSOjoP4dg0eF/+q7oeVvqr/A5S/rdKXGNuit1L6so7jRG+NTUxH
f9HbKH1BRz/RbZS+iG5W9JZKW6u9JxasI12g/4cpf3Oll9W8XlxSs25sSMH6
sR56xjc17v5ROyoV68HO0zXzdU0vdCJK/1LeuzmvK6SDC6af1rneKtNS6bM6
DhfdWukzOvqIbqV0b80Vb2atS3pK/7spv5nSJ3V0Fd2U9wAfyVhW+nDo/+so
fSTMA+sqnRnG8nrw3szNOq5UnbPgnxjXDZ4vRxQ8Z26u51qs+16kb9pH9Nt6
xjV6jqNE/5JPrDXstBB9RsF9o4euPU/0S3quR1VXB+YHpQ+F+aeRuZrnYW5R
OhUbIn0cvRS6SMap0mk60nqP1yn/Y/qd6rxI971f+YvRq2Lz0Ts5W/kZnT9I
9z1H9DO672yd24u5qMFrNmt3G9XzuP7vw7yEfktHS+bDBr+Dcwt+Dx+IHi56
JbYtPdd7WeuvLgnffYrqeVF5Oxash7ozyB3IH/2VtzxvuaJB196UtT1go4rn
+zHqx9cq/wOVmaNrftO970HeUvqDrt0tb56T+ewhXbdKz/eW7nez2rSD0l/R
paDvUPoGsm7O7UGvvEPB/P1Lumd70afo+leUfqM65+teGb2HM1VvZ811N6r8
zgXzPiXlHw7frzqzos8W3ZX6mQ9U5nf0icpfX893mPL/0PGz6It030v1LJNU
12vo/lR2nOinRedVfiQ8LN8Q20Le/Nsd+n+g2rAd863yJ6P/V/mqyu+kOo/i
m4h+Bl2y6Hv13i5MeN7ettG2hxOVv3HFc3Nf3WOR2vG56rkfXkt1zsFum7E9
dljBNtkGXXsktgrmDJV5Q+35W2XeV5lTC+ZvP8wHvYPy94j9H/p+5S0W/S7j
Wde+Kvp50TeKvk/Xv4W8rvpXMr+r/rHKn6L8N5V/keh7RL8qepGO50X/h+ys
/LtFv6K8A3WviTnLVVurnnX0bINVz9Uqc6/y38jYLoZ8P5m1XWVeoq+pzAG6
9k6VeQmZv2Se9xXlTdK5I7HZoCujHPOh6Of0znbQdz1d6XOqY2/do7+uOyFl
Xu9f5C/R7bLWGS1ApyR6pvKO5L2I3l/5x6kd3yvvoZr56qW6bvuabWTI5a+W
fUBfW3Z799S1Lyq9Uu25BJmk5u+8jfInliwjbCX6aXT46LWz5qs/Uh2dI9sk
ZuvoJHoquqqyy3xbsk5m66z56oHo37LmY9fWEep5VOXeSFkfvqjsMgt5jyrf
kbUSXVbWtqlKymO3Vxi/t6ZNX6+0u9IeWesE/glyBPIEckAt3Au9zS0F626w
083Oeh5rUHpEqBN+BBsjNg8wAPNElypeew8P6++v6I2U9kwYP8D5to22gXIv
7KAHKD0wa53eAWpHUucmKb0843Pko8PoHtpcVNpbx7UZ34N7rZuxjIWstVjf
cqDu9WXadjH0A3sr/2fVM03f+madn660S9b1g5Hoq/JXwu9UPS7h+dBDDgJz
ovwTlB6pMlNEPyp6HHrarOWaq5K2iY9EVtc7667+/DxjtmSZYxq6EHhZ+AQ9
+8lF67jW6rpEX58xJuYAXbuhrm3Qte0KlgHg//fBbpoxj/GZyl2o/M/Rj+m4
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
         "]], 
        Polygon3DBox[CompressedData["
1:eJxFnXOYJEn3tquru7q6O8uztm3rXdu2PTtrY9a2bdu2zVnbtmaN333vU9/1
/ZFXxclgRkVGHDzn5KSb7rDq9uVSqfRBtVTq4/fTeqn0cU+p1OL6hPT4nVLp
OO4/M1Qq3UJ6jYFS6aH+UukbCg/0lkprQt8KfTblO9BvU2eXSqm0InWuoM7r
0DtAzwp9BvQO0OtQdwfKrkh60QblaeMy6DGhP+Dai/IjKH875Tfg2pWxPcsg
36XeIuT/TNlH6G9h0s1mqbQ/ZR+i3BeM7/pGxjtzUSq9Bz0h17nQr5B/G+lD
6Ws3rvtp416uCbh3Dvkvk38r6Ym4zoN+Ffp20qe0SqVNKPc59+ajr1+o+zXP
22GMK3DtN1gqbcm9nxnbkdDfcZ3LeA/gdxbGvDF5j1N+WupPSztPQo8J3ST9
AXVO5RnmID2a/FNI70m/D5L/dV/meGPG8Cf5M9dKpSmG8WyUmRX6e8ofS/oj
xjcV5baD3oX0Edz7lfyxmZ+TmIOx6G8Y1yOM5RWuncnfkPLLU3488jel/Z0p
/zvtT0X7gzzPeox/TcZ/HOVWoO4EXJNQ5nLqDGNs40EfSXqQe4/W8nsVbV9O
+l2uxaE/In9r2n+nXSp91p+5vpfxLUT/P5C+n/EtSHoz+l+M9I/Ue4X0elxX
QQ9BNxnPrpTZgnFsyL1VSS9Oe3dBn0t6UvLn5vdT2ruO/Gepsx3096QX57qD
/mdnPXzK83zCeLaBXpL8vyj/BvlLkL6Q9t6gvSrPuzzpNV0jjoeyA7Q/HvSx
1H2a/+Vm0k3m55pq/usxqXc+9NE832WkZ6HdfZmbyaCncQ64PnS9UPY18hfn
90363InfhWnzQtp8iT6fob1R5N9GemHGuwl1pnZtkr6VdA/tPc78fkyZObn3
BvRwxvgOY5wD+nroGWjvM57/f9BP0v6O0HfQ/kjGt/JA3tW9ubcp9GKUPwH6
Bdr7lDU9B229xrim5XkbjGFv7u/HvV/IW5i683N9TPmaa4r0L9SfkD4m4rqD
ei+Q9zTXNKTHZI52pZ976ftG0mfyn29D3nLUHSB9Gtfm0F9QZn7ab3EdQPph
yh9E+Xlof1LfJ573V+6Pxb3d+L2P/JtIz0TfazJfq9H3crSzBuOdmPQkXGuS
3ojnW4Qyx5L3Ks/xPPdmo71daW9e1x/zs8FA3sWtmL8nyZ+O8otAz0V6Cvq4
m/6+or/7Sf9OnTX877j3G+k9qHs25R/jXh99Tk2Z+8j7lvIPkd6B/CfIv4R7
C9DmSOZkN8ruxvO3SU9DmcfJ+5nyj5Iu85+dT94x3Pub8YzBGI6DPtx3jfTc
tHcC7c1NWxfSzrTUeZK8X6j/GOmpuO6F/sZ9g/TM/G7B/KzunkX572h/U9Jf
U2Zn2p+SMveQ/ppyD5BeifmahfbXocyzlF+Q+bkD+kLGUKHuKMZwJvTD5N1C
enLq3EX9L6l/H+lB/r89oe+HPgB6edqbgfLL0t4z1HmLOfuEtm7iupuyA7Sx
NeVvpfy1lB+b8psy3vWYywcpv7fvB7/DKTMp4z2b+tvS1hLQB5H+iPk4lfYf
oMwS1LmIe7uT/w35C7qWqL8veXt0x/Q6ZX/tz1pdiDHsRf2lB3JWuYddSP3d
SK9EXkF6BPVXov5M5J1G/YK6Y1OeaSm9yRragT4WpOwPzM1LjH9Pym9H+U3I
n4jx/kIbC5Ieh/SYvE+zUGYD6Leh3yb9kvNBf9fSxpykz6O9Ax0XZc4lfRd9
rcL1GW3OwZj/x/yMV036Sfr/hDrTknc4deqkP+WaDvod6Cbpunttf/77jyi/
Fm0txfUgfW4M/Srzvwz0baRXofxr0Mu6Zh0T/S9GehyuD8vZUz6mzNSe16R3
Iz3M84L03czN9aRn82xjfPMzvo1pY3fmY2vKr0uZCT2DaWs+8hfzvKTNVXme
OaizFWWfo9yO5G/ItWBf9swxaHMX6t5D+zeQPoa8Uf6H5I9BG9sy7zPxrJ9R
Zjvab5G/Htf13FuX3yV4nl8oewPjmIz5Xxv6ZvqdjqvF+I+jzAiueenrH88o
55rx/UF6Lu71uAdQfxXKT0H5PVt5d7clfw/Sq1F+9v7wA87RFjzPEtAX9+Yd
WRN6Puh9oJ+H/pU6q/ZlTbg2jmL8J9JeH9eBjP912puL8ntQ/h3fF/r/kfEs
RHqeZsazPentKX8a9DmU/6mS/9L/cA/yT4P+iLauZL625rm/cW1xXVWENzmD
9h/qC49yA2M4g75GkD8B6XfIX5j8g7j3JfkrQn9Oezf0ZM8cH3oM8uvyFFw3
Q/9L/l3lnFnj0f9ZXX5uXNILkf9Bf87T5+QPGMOqtLUWz3/1UNb2eeQ/0Zc1
fjr02/3ZS+XJHqb8KpSfn/K3kJ6WNq+n3Jk818T8nzPzIo6m7Ob0Px7pKag/
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
r8WGrK1dm/ub7az/q6l7Kddk7axJ16Y6qEXlPalza0/0zzfVwj8pW52vTNkO
DyUvdU1f5C3Xr7yWNtzn2uHh5VXlWZUHpm5nLWlzmL4dG/U/tL/2QGzXw7nG
ZC5+Ug/Cel6lnbaV4VZtx+ai7eXq7vvqeh5J3W8rwTY83oruS4yD+vQF2tFT
qq98vhX+Q15WnnY+0ne2k76JNl5pZ093b7+vL/pO58S52aWrX9QmK68tz628
5vpUT+uac+1pY9HW8jvlX23FRqKt5Nbu8/r8ppV5lH208WiDuaA355mYF7Ev
4jXWI39v0nuqy2P+H+zyO6uVwkPcT3pdykzHs8/GnH3Ujk5HPlp+ejnSa3H9
zn9x8kDwAspMyk6ukee6/Nqn5B9I/qXtvO/KYspsK0Iv2I6u+nt16u3wZ+rF
hvWG/5en+on8+2rhtS5vR3d8EOXfI70/673UE57rtu75KK5DfMf6rdhk5R33
GYit1v9bu6cyvLL8b0Xkk+cpc2st+m95pWGUWZn8RdrRm8rzyfvJL55O388o
W5C+uZaz40Cuk0lf4v6hPYP8912LjdjOtaG3oU9uRR+gXuAfnqfB/9FTiz7T
9aMMtng98qOymToJdURf90RXcRzj7Xieck1QC8ZETNh3PcGeTAm9DH2Or02G
9k8oIg+OxfVFVyZ8md8veiIrqsOvNaIjVVc6PfQ/tdiPDiX/LfLuZ/zr0M5F
tPcU9FXQy0CfA12n/Gz1yJOrUP5J8q/0fBJroCwBfRH0kp550M+Lr4FeEfrc
Tvidq9SRqP/n+b/rRAaQp1ijGflkhlr0mSc0o5OZg/7e6Y2uRn7mJPLnpf6Y
XfllmlrsbwdTfjzSD8rvqv8h/QL93+D5Qv/nKQ8z/tW596w6ZXnNYbGpqC/c
pZHz+vh68GGL296wYCp25P/sa0cnswnl9ipHVyOG6pp6dC7qXiaEPgz6X/r/
jfpHDkU2Hg/6tK7N7sB6zhzPng9p6wnyNyDvkk5sdPuQ/3tPbHfqOPdQ59QT
3ac2yV2gf+qJrVIb4uH18BDjdM/nRWjz+f7Y8ieHvrMemVrZeiwGc5+8kvqi
WjAW25K/cl/s62MNC8ZtA+g/occZFkzCVtD/QL9N2w8w3nW1BXSi89yM/MX6
ogtVh7gV9DJ90e9tqc2T8kOUv1T+id8D6Ptw5v9Lyr2iPYv81dRlkf+y+Bno
VaEvgP6uGfvm99rtoOduxza8H8/3u+dfO3pBbbzaetelz/NIn891oGePmB3q
f65OvZb1/jj3TlRHTf4u6oiUN9jvfiV9bCO6pBuh/+jSp1eCEdi9HXnuo570
cQD0KV19tzbA49xvtLP3BXOnvvGoduwy2mf2klcbim1wSXlaxvFcEdvZ/vw/
PdqWKbOl500RffnOjdj6tPlpTzy1EducNjntGxdD3076Dq6ToE9sh76N6wTS
Mw2LnWunUvKdr3PIO4o+LqLu12LMapHZ51VX044eV52/toFHKHOB7wLjOaMT
eUqbpfbW21uR5yaoh8dZqxN5Tb29PNA66n+gZ6gH37ZQJzqhqaGf6o2uqF6L
Pdz3Zf569nz3/mXVFyvLQl9ai45kBe0HnZxbnl/qC3tp/4x6bFYTM96/OsHt
uSZWJT2KMjeSXpnxnw/9XiO6uJv5f/+i/Is88470fVYl9g+f3/RI7p1M2Xnb
sfUdxnr7s536Z1aic9+znT3dvV0d48yd6H/U06mvW6uZ/V69q/rXhcn72zHU
wuOt5nqXP+zJfyI+YTHxn1xfce9D8s4vggUT63CjWAXqrFWPDmR20ptSZmlt
PczHn54X7knUXYp7x5M+oxXs4Aj1paTPUafQG0zYApRXeBHLoE5P3Z4Yvqdp
e5nBYPsc79uMZ9Fuezcwng1687zqt4/i3oL+t+ozSV/eim32MOgrSC/WzF6q
zVbbrf/X6fXozOT3xmCuzlYnyvn1HPe3bMUWrU1Z2/JgK7YAbSraVu6X5+Bs
X0jMKPSunrHM3Slcu5Ee0YpuRhu3tm7Pc2314hkXJd1H/wP12PC15WsT1TZ6
aHe8v9YyV4uXY39QHyveYj7uve5GTvlfasFkis10Ti1vvZ2K8Iee7doP/9fO
eXmYOCX5I8r+SbldPcuUSUg/wr1zST/DvUdJr9oM7lUZQVnhGa7LyH+zW3/N
ZtaWGDixcJ6Jno0TcK3dDOZX7K82A+2r4vvs7y/u9QzLO+e7dzXPdxnll2kG
GyGmSWyTz6TstEz3WcU1i29eohz8o+t92yJrRt5GncuNRTDe6mIq1Kkzn6dA
Xwe9dStYKXVc6rpq5M9Uj05X3a77w19FeGx57ae4Xu2NjnclxrZsrYsNgf6t
Fp5T3vO3/mBXz23F1uYYz2/lGR8sgmn02cWYTFSPDktd1ged/I/+n4eT/2EX
Q3oabVyprNuJXKN8o+5WDPzoIhh5sfG+u75bCzAfW9ei0/6qnvNMXfc7nfDR
8tPq5i4Xv0X5VXpjj/vYPZHfG5WBaO8jdVbQF0DfQP3nOsGNih/doBOM577a
OPqC/dRm9BZtbtUTW5I2dc+QtXtiax8uJom+VuD6qJYz07PTd2SBTu6ZN385
+HLLf1SKTVvb9mXaZHrThvbt68SrDsWeuxXpT2p5ljV6g5f+Snsyv5PR3hDj
P4v6i/Vmv9A++CX5i7qWyP+K8b3eCUZtEW08zdgoXnT99MR28Sb0tOqAofdp
ZM9xvp1396LXuO6uRaesbln+WHW3e9AbtZzpnu2e6Z7tF1NmL3VxFFqyGQyj
WMZf2HM+If9V8b9FMAq7N2IDUb4c3hv80ROUebSSM8Wz5eci2Bbxj6+Rf3IR
7LPYtOXFGnTCg75DmS9o7zPoqaCX4Hl2bcZGfT115umJ7XpS/2PKfkD7d3Xi
n6CtdRX6fLoejOw29WAEtL9Uizynz+veq//DeeTd3hd72FuUf7aIjXEk/e9H
2UN6YlN4qBY7jPYYdQaP1MKvDqvljBubZ/1FvqMcfe+vRc5edXPrcR2q/qYW
fP/F6ohI/6CcoH6M64Ba5F2xPfL48vrKW/o2aOOZivFdwf1rodfm2o+8D+Ur
SL9OmzOR98BQsLyO4TL/Z+UOdcNcI9XvcG0vfwJ9QS02D+ufV4stZIsi9lNt
Utqm1Gmq25THkddR56DuYQFxhe7jziX04Vynk56tE2yiMoeyh3gXserL8X8s
XY+OVV3vgbXoXtWxXgB9US2616+L0G/R/yy+fzzPCqXYW86VrseXYU5tobXY
YF7picyj7LMP5fkpHVQOv6q+ZLZy9H3q/Y4jf1Lyj+LeGbU8l8+3UDl43puU
b0kvIk3e/5QVe2Oz/Iz0Alxf9QZ/Ih5mbvrfsZw9z73vWdbY8z1Zs67dwVqw
Z+5X7lu3yTtT/jnoKZX3i4zlaejJarEhjeqJTKZsps55n3JkNmW3syk/shz5
bUvXFvSh5fwHI2r5/94rRUdwYi36JsenzlTdqf/X9OQfwr3TSJ/OvVlKGdPZ
7qPQC5Vizzqnlv/U/3ZRru1rkQec2ycZ4yS12H+0Pc2m/ZC5GcY7My7nyw/K
B7XgFMUrblQOPlRsxOrVYEHUu4qNeLiS99X39qt2fJz0bdqyHV+HHweyflxH
+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
dyf0+0N5Z59t5DI+1HJF8p5rJL7U8kXsu+IhjXe1QhF/NGNIGUvKMm80EjPL
2Fm28XojMamMTWWdN8U7NROryf/Y/1r/DOdSzLPYZzHjYsfHVvZvxv90mp74
JG5DelPmda5ybPQPMwfjUqZM/qlcV5CepBnfO3WA6gIXagafJsZArMEu1F+y
HHyFOIs9XCOU/aac+A/avLV9b0be05R/t5l4iD/W458sZlHs4imUP6wZfzZt
c+JHxJFoA9YWPFE5/p9TN4M1VYeoLlF8jL6w17hmedZ/monV8wzXv8pqjfjS
6lOrP+5f0HP1xAd3x0b8Q8RuaHPU9jiqE7ul9su/m/H51WdBn159e0fV4nuq
f7LxXvS3+K4UHc/47cSwkZeZZzCxbfQZ1S7kebhjO2v6dtKtWta6Z4SxEt3D
PTvG4ZpOfqk/8RvF5+tbNzl1NmvGZr19EXuutmz927QlGG9otnbwVWL7jaHy
bis6anXVgiIWcc+rhY8cUYmPqP5NxmbS51HfR21k+9div9d2ZkyPmbWPVcNP
6f+kb5mYxv/iQTTji+Ye717/oDqsSjArYldeacb2vX9P4nE91cx/Mzn513r2
0P4Cpei4n25GB+255PmkbvqcRuprQ9e2vk49/gjamIwfpP+gWDdtytqWte8Z
q7EH+nfPn0bWj5gAsQH6H6kreI97bziWZmzXxkzcpZkYMhfzvK9X4p/veirK
iYH4mfjmZtaGMf6GN4NHU3ewIvS+zWBexL44Zp9df0594S50v6Xs483YmvU5
35z04Y3EMlBHfVwz/lf+t/rk6ZtnzBpjfb0/kFg26kvEQm/d1c/oT6LvlD7u
rXZiqhxZSkxJY630U6ZVzjv2dXf+Zyvlmf7tPr/2cc8kzybxf/oCilEXz+Xz
ak8fKud90J9T35sTfL9bwQcsUkofVfUvzcQCmRq60Yq/qml93vR90x9G30hj
Ao3Vjg+Eur7rBhILRozB3UXatG33t2VKwcc914wOXxvcyz3R7YuTEC8xbjnx
LoyhZpwaMbGXNRLzzNhnxlC8opH4WWuWgi/yjBusR4+uz7jxME5rpOzk5F3d
Cc/W1wh+Vl5O/1Z9YfW50/dOf6J/yvH50/dPe5y2QmMMGF9T/0x9ifW51fdW
fZG+GFN09UenNGOf3LNIPLvhrfBKYsbEjo0qEivGeBHvF4kBaSxIecirGrGX
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
8Ru2fst27E5i//osxnr9P223FSw=
         "]], Polygon3DBox[CompressedData["
1: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
         "]], 
        Polygon3DBox[{{3857, 2857, 3588, 4711, 3748, 3749}, {4482, 3571, 3602,
          1536, 2324, 4481}}]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], 
      Line3DBox[{1032, 1, 829, 275, 3682, 16, 3689, 31, 3695, 46, 3700, 61, 
       3705, 75, 3714, 89, 3723, 104, 3738, 3739, 119, 3758, 134, 3766, 149, 
       418, 4327, 1070, 164, 2174}], Line3DBox[{1034, 2, 3100, 451, 1032}], 
      Line3DBox[{278, 3, 1164, 3101, 452, 1034}], 
      Line3DBox[{1473, 4, 2961, 278}], 
      Line3DBox[{2685, 5, 1165, 454, 3405, 1036, 2086}], 
      Line3DBox[{2687, 6, 281, 2685}], Line3DBox[{2689, 7, 2687}], 
      Line3DBox[{2691, 8, 2689}], Line3DBox[{2693, 9, 2691}], 
      Line3DBox[{2695, 10, 2693}], Line3DBox[{2697, 11, 2695}], 
      Line3DBox[{2698, 12, 2697}], Line3DBox[{2699, 13, 631, 285, 2698}], 
      Line3DBox[{2700, 14, 2071}], Line3DBox[{733, 15, 638, 290, 2700}], 
      Line3DBox[{739, 30, 3939, 291, 733}], 
      Line3DBox[{320, 45, 649, 305, 2130}], Line3DBox[{3703, 60, 3952, 320}], 
      Line3DBox[{3712, 74, 3703}], Line3DBox[{3721, 88, 3712}], 
      Line3DBox[{3736, 103, 3721}], Line3DBox[{3756, 118, 3736}], 
      Line3DBox[{3765, 133, 3757, 3756}], Line3DBox[{3774, 148, 3765}], 
      Line3DBox[{3783, 163, 3774}], 
      Line3DBox[{428, 179, 709, 4028, 436, 802, 194, 4032, 442, 804, 2077}], 
      Line3DBox[{3794, 178, 3783}], Line3DBox[{3805, 193, 3794}], 
      Line3DBox[{2813, 209, 1006, 443, 3422, 1081, 210, 444, 2814, 211, 
       2420}], Line3DBox[{1082, 212, 3096, 448, 213, 2815, 214, 2816, 215, 
       2817, 216, 2818, 217, 2819, 218, 2820, 219, 2821, 220, 2822, 221, 3099,
        450, 1083, 222, 1031, 487, 3818, 208, 3805}], 
      Line3DBox[{428, 4025, 1510}], Line3DBox[{713, 441, 2813}], 
      Line3DBox[{3095, 447, 1082}], Line3DBox[{713, 1385, 1911}], 
      Line3DBox[{1545, 729, 2699}], Line3DBox[{739, 1549}], 
      Line3DBox[{1672, 1163, 3095}]}, {}, {
      Line3DBox[{3682, 3934, 2823, 4234, 4235, 4236, 4063, 4676, 4842, 3819, 
       4036, 3935, 4064, 4903, 4458, 3820, 4459, 4592}], 
      Line3DBox[{3689, 4336, 4619, 4883, 4337, 1093, 4066, 3139}], 
      Line3DBox[{3695, 4338, 4621, 4884, 4339, 4340, 3944, 4069, 4677, 4817, 
       4093, 4041, 3945, 4070, 4905, 4460, 4461, 4240, 4594}], 
      Line3DBox[{3700, 4341, 4624, 4885, 4342, 4343, 3954, 4072, 4678, 4820, 
       4101, 4044, 3955, 4074, 4707, 4821, 4462, 4247, 4527, 2525}], 
      Line3DBox[{3703, 3844, 3953, 4824, 3967, 3843, 4046, 3902, 4258, 4865, 
       4693, 3966, 4107, 4257, 4616}], 
      Line3DBox[{3705, 4346, 4347, 4886, 3704, 4348, 3970, 4073, 3971, 4850, 
       4161, 3706, 3972, 4075, 3973, 4907, 4466, 4467, 4599}], 
      Line3DBox[{3712, 3845, 4732, 3711, 3969, 4047, 3968, 4825, 3710, 4197, 
       3910, 4259, 3909, 4868, 4267, 4122, 4202, 4417, 4418, 4596}], 
      Line3DBox[{3714, 4349, 4350, 4888, 3713, 4351, 3983, 4078, 3984, 4851, 
       4163, 3715, 3985, 4079, 4775, 4668, 4468, 4469, 4535, 4609}], 
      Line3DBox[{3721, 3847, 4734, 3720, 3846, 4733, 3719, 3982, 4049, 4840, 
       4667, 3718, 4321, 3981, 4048, 4880, 4666, 4310, 4396, 4548}], 
      Line3DBox[{3723, 4355, 4356, 4890, 3722, 4357, 4358, 4081, 4687, 4852, 
       4165, 3724, 3991, 4082, 4777, 4471, 4470, 3725, 4602}], 
      Line3DBox[{3736, 3848, 4735, 3735, 4780, 4626, 3734, 4779, 4625, 3733, 
       4493, 4501, 4912, 4503, 4502, 3732, 4494, 4495, 4778, 4050, 4475, 4476,
        4474, 3731, 4334, 4556}], 
      Line3DBox[{3739, 4361, 4736, 3849, 4362, 4365, 4366, 4086, 4680, 4843, 
       3850, 4053, 3997, 3998, 4710, 4830, 3851, 4465, 4597}], 
      Line3DBox[{3756, 4786, 4630, 3754, 4785, 4629, 3752, 4784, 4628, 3750, 
       4783, 4627, 3748, 4711, 4782, 4504, 4506, 4505, 3747, 4498, 4910, 4712,
        4052, 4478, 4479, 4477, 3746, 4690, 4860, 4552}], 
      Line3DBox[{3758, 4369, 4631, 4892, 4370, 4371, 4372, 4005, 4696, 4832, 
       3862, 4004, 4140, 4192, 4141, 4415, 4444, 4522, 4705, 4901, 4580}], 
      Line3DBox[{3765, 3871, 4751, 3764, 3870, 4750, 3763, 3869, 4749, 3762, 
       3868, 4748, 3761, 3867, 4747, 3760, 3866, 4746, 3759, 4831, 4632, 4003,
        4008, 3865, 4056, 4145, 4144, 4855, 4175, 4400, 4550}], 
      Line3DBox[{3766, 4010, 4011, 4633, 4833, 4231, 4232, 3916, 4405, 4410, 
       4537, 4565}], 
      Line3DBox[{3774, 3878, 4757, 3773, 3877, 4756, 3772, 3876, 4755, 3771, 
       3875, 4754, 3770, 3874, 4753, 3769, 4788, 4635, 3768, 4787, 4634, 3767,
        3873, 4009, 4834, 4015, 3872, 4058, 3917, 4294, 4899, 4698, 4427, 
       4441, 4557}], 
      Line3DBox[{3783, 3885, 4762, 3782, 3884, 4761, 3781, 3883, 4760, 3780, 
       3882, 4759, 3779, 4791, 4638, 3778, 4790, 4637, 3777, 4789, 4636, 3776,
        3881, 4758, 3775, 3880, 4016, 4835, 4021, 3879, 4059, 3921, 4877, 
       4302, 4300, 4020, 4442, 4579}], 
      Line3DBox[{3794, 3890, 4767, 3793, 3889, 4766, 3792, 3888, 4765, 3791, 
       4795, 4642, 3790, 4794, 4641, 3789, 4793, 4640, 3788, 4792, 4639, 3787,
        3887, 4764, 3786, 3886, 4763, 3785, 4023, 4060, 4022, 4836, 3784, 
       4221, 3928, 4304, 4848, 4658, 4309, 4546}], 
      Line3DBox[{3805, 3894, 4771, 3804, 3893, 4770, 3803, 4802, 4647, 3802, 
       4801, 4646, 3801, 4800, 4645, 3800, 4799, 4644, 3799, 4798, 4643, 3798,
        3892, 4769, 3797, 3891, 4768, 3796, 4031, 4797, 4674, 3795, 4315, 
       4027, 4376, 4881, 4673, 4429, 4314, 4586}], 
      Line3DBox[{3818, 4035, 4034, 4838, 3817, 4811, 4654, 3816, 4810, 4653, 
       3815, 4809, 4652, 3814, 4808, 4651, 3813, 4807, 4650, 3812, 4806, 4649,
        3811, 3895, 4772, 3810, 4805, 4648, 3809, 4033, 4804, 4675, 3808, 
       4189, 4190, 4088, 4893, 4375, 4409, 4603}], 
      Line3DBox[{3939, 3830, 4317, 4092, 4038, 4118, 4191, 4117, 4849, 4157, 
       3829, 4195, 4091, 3938, 4238, 4239, 4861, 4691, 4335, 3828, 4316, 4090,
        4523, 4435, 4521, 4577}], Line3DBox[{649, 521, 1829}], 
      Line3DBox[{3952, 3839, 4043, 3899, 4246, 4245, 4819, 3951, 4436, 4100, 
       4447, 4448, 4583}], 
      Line3DBox[{4025, 4306, 3922, 4328, 3923, 4385, 4305, 4879, 4699, 4329, 
       4147, 4181, 3924, 4180, 3925, 4847, 4182, 4148, 4222, 4149, 4307, 3926,
        4299, 3927, 4859, 4515, 4569}], 
      Line3DBox[{4028, 4150, 4187, 3929, 4024, 3930, 4151, 4837, 4224, 4152, 
       4183, 3931, 4308, 3932, 4913, 4539, 4223, 4611}], 
      Line3DBox[{4032, 4184, 4194, 4185, 4061, 4480, 4186, 4481, 4482, 4856, 
       4457, 4456, 4590}], Line3DBox[{4327, 4233, 3918, 4517, 4520, 4562}], 
      Line3DBox[{4544, 809, 3942, 3835, 4816, 3943, 3941, 3694, 3834, 4726, 
       3693, 4774, 4620, 3692, 3833, 4725, 3691, 3832, 4724, 3690, 3831, 4723,
        4662, 4040, 518, 4068, 4722, 842, 2379}], 
      Line3DBox[{4545, 4814, 4701, 4017, 4297, 3919, 4298, 4681, 4876, 4296, 
       4115, 4018, 4146, 4179, 3920, 4019, 4709, 4815, 4464, 4087, 4533, 
       4607}], Line3DBox[{4547, 4425, 4665, 4887, 4077, 3974, 4162, 3707, 
       4826, 3975, 3976, 3708, 4827, 3977, 3978, 3709, 4812, 3903, 3959, 3904,
        4260, 4198, 4199, 4120, 4261, 4432, 4530, 4509, 4403, 4560}], 
      Line3DBox[{1583, 854, 849, 3429, 1095, 520, 648, 574, 3222, 644, 519, 
       848, 3300, 844, 1084, 843, 4570}], Line3DBox[{4549, 4373, 4519, 4575}],
       Line3DBox[{4551, 4483, 4908, 4713, 4455, 4379, 3905, 4380, 3906, 4381, 
       4866, 4264, 4263, 4319, 4121, 4265, 3907, 4318, 3908, 4894, 4378, 4377,
        4388, 4387, 4386, 4256, 4484, 4485, 4492, 4510, 4909, 4486, 4487, 
       4595}], Line3DBox[{4553, 4406, 4237, 4715, 4065, 4089, 3821, 4037, 
       4660, 4716, 3822, 3683, 4717, 3823, 3684, 4718, 3824, 3685, 4618, 4773,
        3686, 4719, 3825, 3687, 4720, 3826, 3688, 4661, 4721, 3937, 3827, 
       3936, 4116, 4156, 4896, 4682, 4414, 4578}], 
      Line3DBox[{4554, 4313, 4312, 4737, 4512, 4555}], 
      Line3DBox[{4558, 4518, 4228, 4230, 4229, 3745, 4213, 4324, 4214, 3994, 
       4137, 4169, 4853, 4686, 3744, 4134, 4212, 4135, 3993, 4133, 4280, 4871,
        4684, 3743, 4211, 4323, 4617}], 
      Line3DBox[{4559, 4153, 3933, 4026, 4796, 4659, 4330, 4452, 4526, 4608}],
       Line3DBox[{4561, 4532, 4404, 4279, 4870, 3992, 4216, 4215, 3742, 4168, 
       4311, 4704, 4900, 4443, 4051, 4541, 4588}], 
      Line3DBox[{4563, 4534, 4408, 4672, 4878, 4303, 4412, 4413, 4301, 4542, 
       4614}], Line3DBox[{4564, 4514, 3898, 4244, 4863, 4692, 3950, 4099, 
       4159, 4098, 4160, 3897, 4844, 4158, 4119, 3949, 4097, 4241, 4096, 4243,
        4862, 4655, 4242, 4225, 4397, 4419, 3483, 4615}], 
      Line3DBox[{4566, 4177, 4657, 4752, 4057, 4113, 4178, 4114, 4014, 4292, 
       4293, 4671, 4875, 4295, 4411, 4451, 4513, 4428, 4574}], 
      Line3DBox[{4567, 4013, 4220, 4290, 4219, 4858, 4291, 4006, 4176, 4173, 
       4012, 4440, 4112, 4581}], 
      Line3DBox[{4568, 4439, 4438, 4437, 4450, 4126, 4270, 4869, 4683, 3727, 
       4209, 4210, 3988, 4828, 4656, 3726, 4166, 4167, 4083, 4891, 4359, 4407,
        4601}], 
      Line3DBox[{4571, 3896, 4333, 3947, 4818, 4623, 3948, 3946, 3699, 4911, 
       4622, 4500, 4499, 3698, 3838, 4729, 3697, 3837, 4728, 3696, 3836, 2989,
        4042, 4095, 4094, 4071, 4727, 4663, 4423, 4593}], 
      Line3DBox[{4572, 4898, 4421, 4434, 4433, 4422, 4389, 4390, 4266, 4382, 
       4867, 4383, 4384, 4320, 3915, 4275, 4125, 4208, 4829, 4201, 4274, 3914,
        3980, 3913, 4272, 4124, 4206, 4200, 4271, 4449, 4584}], 
      Line3DBox[{4573, 4285, 4287, 4286, 4744, 4007, 4110, 4218, 3863, 4174, 
       4142, 4193, 4143, 4745, 4055, 4111, 4326, 3864, 4374, 4697, 4874, 4289,
        4288, 4511, 4525, 4582}], 
      Line3DBox[{4576, 4516, 4138, 4139, 4054, 4841, 3855, 4002, 3995, 4738, 
       3856, 4497, 4496, 4739, 3857, 3749, 4740, 3858, 3751, 4741, 3859, 3753,
        4742, 3860, 3755, 4743, 3861, 3757}], 
      Line3DBox[{4585, 4543, 4262, 4402, 4401, 4269, 4123, 4857, 4204, 4203, 
       4268, 3912, 3979, 3911, 4813, 3717, 3987, 4776, 4670, 3716, 4164, 3986,
        4080, 4889, 4669, 4426, 4352, 4600}], 
      Line3DBox[{4587, 4454, 4453, 4205, 4431, 3728, 4845, 4127, 4273, 4128, 
       3989, 4130, 4207, 4129, 3729, 4131, 4276, 4132, 4353, 3990, 4354, 4278,
        4322, 4277, 4895, 4393, 3730, 4395, 4391, 4394, 4392, 4227, 4430, 
       4538, 4508, 4714}], 
      Line3DBox[{4589, 4399, 3852, 4367, 4281, 4282, 4872, 4694, 3999, 4108, 
       4217, 3853, 4171, 4685, 4846, 4172, 4136, 4000, 4109, 4325, 3854, 4368,
        4695, 4873, 4284, 4283, 4001, 4445, 4524, 4446, 4507, 4610}], 
      Line3DBox[{4591, 4416, 4154, 4188, 4155, 4029, 4700, 4882, 4332, 4331, 
       3806, 4030, 4062, 4803, 4473, 4472, 3807, 4604}], 
      Line3DBox[{4598, 4536, 4528, 4424, 4664, 4730, 4076, 4102, 4103, 4045, 
       4839, 3956, 3840, 3701, 4731, 3841, 3702, 4822, 3957, 3958, 3842, 4344,
        4345, 3960, 3962, 4196, 4823, 4689, 3961, 4490, 4491, 4489, 4488, 
       4605}], Line3DBox[{1919, 1390, 1389, 4904, 4067, 3940, 4039, 517}], 
      Line3DBox[{4606, 4531, 3741, 4463, 4906, 4708, 4085, 3996, 3740, 4170, 
       4854, 4688, 4084, 4364, 4363, 3737, 4702, 4781, 4360, 3738}], 
      Line3DBox[{4612, 4703, 4897, 4420, 4398, 4226, 4251, 3900, 4252, 4679, 
       4864, 4249, 4104, 3963, 4248, 4250, 2929, 3965, 4105, 4254, 4106, 3964,
        4253, 4255, 4706, 4902, 3901, 4529, 4540, 4613}]}, {
      Line3DBox[{2685, 2964, 3103, 2965, 4716, 2686, 2976, 3105, 2977, 4723, 
       2704, 2988, 3107, 2989, 2713, 3002, 3110, 4839, 3003, 2722, 3018, 4826,
        3113, 3019, 2729, 4776, 3033, 3117, 3034, 3036, 4828, 2936, 3046, 
       2937, 3398, 3397, 3119, 4900, 3521, 3231, 3656}], 
      Line3DBox[{2687, 2824, 4717, 2688, 2830, 4724, 2705, 2836, 4728, 2714, 
       2841, 4731, 2723, 3020, 4827, 3021, 3023, 2935, 4813, 3035, 3340, 3339,
        3341, 4869, 3191, 3264, 3192, 3529, 3629}], 
      Line3DBox[{2689, 2825, 4718, 2690, 2831, 4725, 2706, 2837, 4729, 2715, 
       3004, 4822, 3005, 3006, 2931, 4812, 3022, 3329, 3328, 3330, 3189, 3262,
        4857, 3190, 3037, 3637}], 
      Line3DBox[{8, 3685, 23, 3692, 38, 3698, 53, 1108, 4344, 68, 750, 4199, 
       346, 1122, 3642}], 
      Line3DBox[{2691, 4773, 2826, 2692, 4774, 2832, 2707, 3591, 4911, 2838, 
       2716, 3592, 3594, 3593, 3007, 4823, 3259, 3487, 1295, 1368, 3666}], 
      Line3DBox[{2693, 2827, 4719, 2694, 2833, 4726, 2708, 2990, 2991, 4818, 
       2839, 2717, 3283, 3644}], 
      Line3DBox[{2695, 2828, 4720, 2696, 2978, 2979, 2834, 4816, 2709, 3282, 
       2922, 3635}], 
      Line3DBox[{2697, 2966, 2967, 4721, 2969, 2918, 2980, 2919, 3647}], 
      Line3DBox[{2698, 2916, 2968, 2917, 3217, 3169, 4896, 3681}], 
      Line3DBox[{2699, 3497, 3660}], 
      Line3DBox[{2700, 3171, 3255, 3172, 2971, 3174, 3218, 4849, 3173, 3251, 
       3219, 3257, 3220, 2983, 3302, 3429, 3301, 3303, 3636}], 
      Line3DBox[{2813, 2907, 3388, 3090, 3498, 3618, 3597, 3622, 3620, 3632}],
       Line3DBox[{2814, 3560, 3559, 3389, 3087, 4803, 3570, 2802, 3558, 3557, 
       3386, 2956, 4796, 3415, 3416, 3165, 3611, 3633}], 
      Line3DBox[{2815, 2908, 4805, 2804, 4768, 2898, 2792, 4763, 2888, 2781, 
       3076, 4835, 3079, 3075, 3124, 3370, 3460, 3371, 4899, 3513, 3537, 3613,
        3530, 3664}], 
      Line3DBox[{215, 3811, 201, 3798, 186, 3787, 171, 3776, 156, 3767, 141, 
       4008, 405, 126, 4516, 2187}], 
      Line3DBox[{2816, 4772, 2909, 2805, 4769, 2899, 2793, 4764, 2889, 2782, 
       4758, 2879, 2771, 3070, 4834, 3074, 3069, 3122, 3208, 4855, 3242, 1247,
        3634}], 
      Line3DBox[{2817, 2910, 4806, 2806, 2900, 4798, 2794, 2890, 4792, 2783, 
       2880, 4789, 2772, 2871, 4787, 2763, 2863, 4831, 3061, 2754, 4841, 2855,
        3060, 3287, 3286, 4860, 2744, 3645}], 
      Line3DBox[{2818, 2911, 4807, 2807, 2901, 4799, 2795, 2891, 4793, 2784, 
       2881, 4790, 2773, 2872, 4788, 2764, 4746, 2864, 2755, 4738, 2856, 3589,
        3051, 3590, 4910, 2745, 3581, 3582, 3580, 3050, 2938, 3598, 3625, 
       3424, 3652}], 
      Line3DBox[{2819, 2912, 4808, 2808, 2902, 4800, 2796, 2892, 4794, 2785, 
       2882, 4791, 2774, 4753, 2873, 2765, 4747, 2865, 2756, 4739, 2857, 3588,
        4782, 2746, 2850, 3585, 3041, 4778, 3587, 2737, 3578, 3579, 3577, 
       3039, 3641}], 
      Line3DBox[{2820, 2913, 4809, 2809, 2903, 4801, 2797, 2893, 4795, 2786, 
       4759, 2883, 2775, 4754, 2874, 2766, 4748, 2866, 2757, 4740, 2858, 4783,
        2747, 3584, 3586, 3583, 4912, 3596, 3595, 3025, 3040, 3024, 4880, 
       3396, 3114, 3502, 3503, 3492, 3621, 3678}], 
      Line3DBox[{2821, 2914, 4810, 2810, 2904, 4802, 2798, 4765, 2894, 2787, 
       4760, 2884, 2776, 4755, 2875, 2767, 4749, 2867, 2758, 4741, 2859, 4784,
        2748, 2851, 4779, 2738, 3028, 3411, 3027, 4840, 3115, 3335, 2934, 
       3336, 4868, 2933, 3325, 3188, 3010, 3508, 3616, 3623, 3663}], 
      Line3DBox[{2822, 2915, 4811, 2811, 4770, 2905, 2799, 4766, 2895, 2788, 
       4761, 2885, 2777, 4756, 2876, 2768, 4750, 2868, 2759, 4742, 2860, 4785,
        2749, 2852, 4780, 2739, 4733, 2847, 2731, 3013, 3026, 4825, 3012, 
       3111, 3323, 3440, 3324, 4865, 3009, 3187, 3603, 3186, 3606, 3630}], 
      Line3DBox[{2961, 3561, 2960, 3290, 3539, 4903, 3540, 2684, 3564, 2973, 
       3296, 3541, 4904, 3542, 2703, 3565, 2985, 3304, 3543, 4905, 3544, 2712,
        3566, 2999, 3314, 4821, 3545, 3546, 2721, 3567, 3015, 4907, 3326, 
       3547, 3548, 2728, 3568, 4775, 3030, 3337, 3550, 3551, 2735, 3569, 4777,
        3043, 3344, 3552, 3553, 2743, 4906, 3554, 3053, 3054, 3562, 3563, 
       4830, 2753, 3268, 2941, 3361, 3494, 3495, 3252, 3522, 4901, 3657}], 
      Line3DBox[{3095, 3390, 3391, 3092, 3516, 3091, 4893, 3462, 3136, 3387, 
       3085, 3515, 3084, 4881, 3463, 3403, 3126, 3384, 3402, 2954, 3385, 2953,
        4848, 3380, 3520, 3519, 3078, 3626, 3651}], 
      Line3DBox[{3096, 3094, 3128, 3093, 4804, 2803, 3089, 3127, 3088, 4797, 
       2791, 3081, 3083, 4836, 3080, 3125, 3377, 2950, 4877, 3378, 2949, 3373,
        3654}], 
      Line3DBox[{3099, 3098, 4838, 3097, 2812, 4771, 2906, 2800, 4767, 2896, 
       2789, 4762, 2886, 2778, 4757, 2877, 2769, 4751, 2869, 2760, 4743, 2861,
        4786, 2750, 4735, 2853, 2740, 4734, 2848, 2732, 4732, 2844, 2725, 
       2997, 4824, 3011, 2996, 3108, 3312, 3434, 4819, 3313, 2995, 3524, 3538,
        3627, 3525, 3679}], 
      Line3DBox[{3100, 2958, 3289, 2823, 2682, 3426, 3427, 4883, 2829, 2701, 
       3430, 3431, 4884, 2835, 2710, 3435, 3436, 4885, 2840, 2719, 3441, 4886,
        3442, 2842, 2726, 3445, 4888, 3446, 2845, 2733, 3449, 4890, 3450, 
       2849, 2741, 4781, 3453, 3454, 2854, 4736, 2751, 3456, 3457, 4892, 2862,
        2761, 3071, 3288, 4833, 2870, 2770, 3212, 3610, 3631}], 
      Line3DBox[{3101, 3392, 3393, 2959, 3102, 3137, 3138, 4842, 2683, 3221, 
       2972, 3104, 3139, 3140, 2702, 3224, 2984, 3106, 4817, 3141, 3142, 2711,
        3227, 2998, 3109, 4820, 3143, 3144, 2720, 3228, 3014, 4850, 3112, 
       3147, 3148, 2727, 3229, 3029, 4851, 3116, 3151, 3152, 2734, 4852, 3230,
        3042, 3118, 3154, 3155, 2742, 4854, 3234, 3052, 3120, 3156, 3157, 
       4843, 2752, 3238, 3062, 3063, 3357, 3458, 3358, 4832, 2762, 3209, 3359,
        2944, 3243, 3496, 3659}], 
      Line3DBox[{3170, 3523, 2970, 3293, 3425, 3292, 4861, 3295, 3176, 3256, 
       3177, 2981, 3179, 3222, 3178, 3223, 3182, 3258, 3183, 2993, 4863, 3310,
        3433, 3309, 3526, 3605, 3661}], 
      Line3DBox[{3405, 3394, 3395, 3464, 2962, 3404, 2963, 4715, 3291, 3129, 
       3428, 2974, 3505, 2975, 4722, 3297, 3130, 3432, 2986, 3506, 2987, 4727,
        3305, 3131, 3437, 3000, 3507, 3001, 4730, 3315, 3132, 3443, 4887, 
       3016, 3509, 3017, 3327, 3133, 3447, 4889, 3031, 3510, 3032, 3338, 3134,
        3451, 4891, 3044, 3511, 3045, 3452, 3345, 3047, 3346, 4870, 3347, 
       2939, 3490, 2940, 3399, 4737, 3628}], 
      Line3DBox[{3422, 3421, 3461, 3420, 3417, 2957, 3418, 4882, 3419, 3168, 
       3250, 3167, 3680}], 
      Line3DBox[{3638, 3365, 4874, 3363, 3459, 3364, 3066, 3206, 3270, 3205, 
       3237, 4846, 3199, 3235, 3200, 3057, 3198, 3266, 3197, 4871, 3350, 3348,
        3608, 3349, 3650}], 
      Line3DBox[{2652, 3512, 3368, 3372, 4875, 3068, 3369, 3067, 3401, 3241, 
       3121, 3204, 4745, 3254, 2943, 3240, 2942, 3236, 3203, 3058, 4872, 3351,
        3353, 3048, 3352, 3489, 3617, 3488, 3676}], 
      Line3DBox[{3639, 3607, 4859, 2952, 3376, 3278, 2780, 3556, 3555, 4815, 
       3135, 2948, 3245, 3213, 3275, 3274, 3367, 4858, 3273, 3366, 3064, 3253,
        3239, 3269, 3658}], 
      Line3DBox[{3640, 3614, 3400, 3491, 3055, 3362, 3056, 4744, 3360, 3065, 
       3210, 2945, 3244, 2946, 4752, 3211, 3123, 3573, 3574, 3572, 3072, 3493,
        3073, 4878, 3379, 3514, 3655}], 
      Line3DBox[{3643, 3609, 1194, 3285, 3343, 3481, 4895, 1201, 2736, 2846, 
       3448, 3153, 3038, 3261, 4829, 3263, 3260, 2730, 2843, 3408, 3284, 4908,
        3604, 3534, 3665}], 
      Line3DBox[{3646, 3077, 4814, 3423, 2878, 2779, 3381, 3413, 3382, 4879, 
       3082, 3162, 2887, 2790, 3215, 3279, 4837, 3216, 3086, 3166, 3249, 2897,
        2801, 3535, 4856, 3571, 3602, 3667}], 
      Line3DBox[{3648, 3612, 3280, 3465, 3466, 2923, 3281, 2924, 4862, 3307, 
       3306, 2992, 3184, 3308, 2928, 3319, 2929, 3316, 3008, 3322, 3549, 3575,
        3576, 4909, 3668}], 
      Line3DBox[{3653, 3619, 3518, 3599, 3615, 3175, 3294, 2920, 3299, 2921, 
       3300, 3298, 2982, 3180, 2925, 3225, 4844, 2926, 3226, 3181, 2994, 3185,
        3311, 2930, 3321, 4902, 3528, 3527, 3662}], 
      Line3DBox[{2650, 1364, 3342, 3193, 4845, 3265, 3194, 3049, 3196, 3232, 
       3195, 3233, 4853, 3201, 3267, 3202, 3059, 3355, 3455, 3354, 4873, 3356,
        3207, 3271, 1317, 3677}], 
      Line3DBox[{3669, 4913, 2955, 3383, 3277, 3414, 3164, 3248, 3163, 3247, 
       4847, 2951, 3246, 3214, 3276, 3161, 3375, 3160, 4876, 3374, 2947, 3536,
        3272, 3412, 3159, 3601, 3624, 3158, 3672}], 
      Line3DBox[{3671, 82, 757, 4206, 363, 1132, 96, 3729, 765, 378, 1142, 
       111, 3745, 1376, 392, 3673}], 
      Line3DBox[{3674, 3483, 3600, 3499, 3484, 2718, 3317, 3467, 3468, 2927, 
       3318, 4864, 3145, 3320, 3146, 3407, 3438, 3439, 3406, 3472, 2932, 4894,
        3471, 3469, 3470, 3531, 3532, 3533, 3504, 4898, 3649}], 
      Line3DBox[{3675, 3517, 3482, 3477, 3476, 3478, 3480, 4867, 3479, 3409, 
       3334, 3444, 3410, 3150, 3333, 3149, 3332, 3475, 4866, 3474, 3473, 3331,
        2724, 3486, 3501, 3485, 4897, 3500, 3670}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJzsvXlcTd/3P56IiEjmIVMhlRBFqmWqkDlRlG7zpBFJSWkwpiJNIpJoIKQy
hF0qmpAUGaLp3uZupgYpv3PuPad37z6f7f27r0e+L6/P59M/z8dZj906a6+9
9lprr73PvlMMbTeZ8PPx8c0V5ePrS+DbMr+K1p9sxMf9c78+e3/0Ri0T8JBc
vCSrG/3KxMSD10pcYXbfgczon2yg6cE+3xl7Yj1gR+m91JZu9O99pcvM20y7
nv8dm/7x9OKK0RtDLrBQFzZ36k/bawY3tVZ0/lQQ7UJ39YkdPwm9/J+ef02f
pWhxK4jQI41hAiFtAqaWwHY59/FmOKsL+dS2Ts81OgONHT+dQi+wupA/4DR7
p5jJ/+mZoq/+JqB9mtAjjYcUwg7YS9mA1JSahdMIfdGYumKq3n6TY3AVsTXP
EM80Ph9esJM9zwjL/3+bnk209ZL9CT3S6OIYkL051B6urAq6bEboi0b3nfwb
5EIPwo6U3d9JPdJ4Ly2WTzfUgOf3/tP1fNgz4MYxQl803jq4FBhie0DdbNsZ
N0IvNCbYDFtTY+IMSyUG7w8jnmncktq5J1eF0Wvy/FP0ObpDiOw/onFRfAWT
1MM5AS1SX4jGpoeuZ+oIvbmoBpH67UIH9rDMHYSee0seHP1P06fGEc58QzSm
3/vhSc67AO+j5PxENM7fpqS3gJinqp92kPO5C/0l7z3SJOb179Ybr/S/S8/6
rpx4gGh8ITtuYBMRFz4NfkjGD0Rj/3v3vrsTccS/uT8Zb7pw2ocbP2yJuPN3
6Y1X+u/W8+UoTr6CaLzd79FVayJvEZyg+oHIbxCNTgoZ+oVEnnOIxcmHuvC1
0uSCfkRe9KfpjVd6b+n5/HbvNvHONzAr5VlIhXIDmvMlNVtC0wabh//UHUPm
6104SUvHcSqRt/9p+uktOq96vmV+x3b4+ffIVuHJ5NHn69GE9uva0xLswChC
wWZGHRt8c7ZoKisnwJbFl27YqJtg8/A/TQ+/m47T8+HsaTOGXKpDC4yE2QmT
SpFQPGoPdTOB9xluU/Zvb4SZ4Suu/1AqhLHuQaucz+4Fo9sRO4aMbgDf3eu8
HWPfwsml0dumX9jyx/X376KPOgiK7pcbUUvogOssowI0X8/6k1mYLuhEzSl7
g8pQ4s7OpQXna0HZ1fLhnCQviOicNT44tAYGbU69PUeuAqaHnnzzpkTvH7Pu
+Lvooz7zTxiY3IDUmlsrX2W8hij9U2lt96zATyQs1ySzFC7LFS1JX1IHSsHh
k7/5G/1x645/Cv1PW3f8T6V/W+tyOpjIt2gEv2kD3IrNwVBxsgo7hNWFTU8l
pgrrxWL5MHe+jgwk/p/GKdbPLpyYuRP4BVTt0s+zunDQimb/hJCTWD4SiXfu
nyL+n8YC8f6vMlXsoLJxpP96Io7SuFnkdPF0MW9ItTl/lawj0DjeQHObip4h
lv+PxjUTfAm+NEKyaxtz3i6QOdsk7Uj8P407Albxq0sdAJdZ04Bcb9MYJD9e
S4LJ+7pbfHvnsEPE+2jMljauGrZ3L3hP4xchnrvQKubAiKEEnVf+yzumkvIh
GiOyFJ+Rclr4V5P9QTQmjL/VfzXRL8M+68n+d6GXIzu1ktADjv+9+Rz9Ihrd
Zm+oIfXc+PGnHzEeiEb/wR/yJIlxUfh2lxy/Ljz6xao5gxhHXvs1puGDLWE3
iMbPOcPikgn7UVEpJu2sC7cs377Bh7A3HJ91TSeT6rv5h6DFL1q8T9rDwgVG
coR9IxpXZaYem0zYeXIJZz504Sn7tX0OEPMCx7+Rf27hutp/+asxRtZXxoQn
8DyPJjoc8G3q5vfmy/q9V7SzhZQzeXO0tKuQt8w7oxflTHRk1X5pUyUr2JC+
fOuGKDbkMg+cyfnxCORzl/ItPGqNn1/3nxeERDWgAQ7vI31GFaM7b7c+WaFh
AG4lCxbIdlTA7oku+3b9qIbjRzS+9d10GBTWTZC68aAOLmpIaTSxPoLYtg9r
lSt1sPxbmLrObZF16OvQE7Exk0ohb6pjXx+3PWBYlF68QJIFIQuz24NGVoGF
aPa6A0oG2HHB6ROnH1yeieODey+Ojuvvn0YXpupiND7r086pj+H8w4F+3HoZ
jeGNrZy6Gc5v4PzYUDVufY1G+TGPMsg6W+XglY3k+odGo6Vqe75PMOZ5XP4u
fW6l6mU07tlW9su6Gc4fNjVx62g0ltY0ceppveUn/yn6xNXHcH4eVzcbTvl9
Gk20I37p/3uL/k/RM690XJ3trb0JJy7SeHJy3SEyPhpQdTcaDYv0OPW3TCpe
0nhKct4v42Zv0f+njgsuP8fV8R53TOTkGTRutG6X+FW+0Vv0f7r+cfvsItbc
9QyNQtpHOOsa3P47r+sdHP1P02doqjoZvxGNEePZk9uJOI7bTy+/xV2/0ZiV
O5+zjsPts7t+4a7raLxr1vyaXN/9br3h6ga86rlV9nYTed6FxrAvTvFtiqbY
/XHcOnTDGu5+OY2LG0+vJ/fNcetT3H66A7VepdHefv5fWrfi9Imrw+DaCy2b
67tJP1kl0d6X1CtamMx2P0zoE7cPjsszzcy5++I0joNADXJ/vDKIo/cuNLL8
9L6V0H9v7Zvj1h04er2mUsEX+XKULivWx3B9LXrmKrM0psIQbg2+wR4sUoV8
519+x5ZhodvHjo8/7MeAdCeBeUzlBvjINyprYucb1Aze28Q1bSBin0adoEIt
BDxY+zRJpxytlX/pFb7XCbuv/Z7Ks2lUnKrNybd57e/ha4+rgsRrke6msoLZ
u8vRbG2xtSmJuth1VmzQ7ZfZSoWw/eErm1HbG5Gn3KH9smcPQ5BhS86P09Vo
Y87RSKn9lUhXfsslfzFPeKspww7RbYDnB54UGTi8AZVBdckdK/B1m96iKy3Z
eSwxoxFd91mZ1Xb6BZJSzjSR8NwNTmWFq18lstGeS8LpuhppaJWhqJNAlSVU
fg1rW7K6AT245N7m+PgNmjBkl+itD1pQCmtz4Gct+DMVg4fNLgPBd9rpI6tN
IV6qtK93ERPGLJ5um25cBS9H6R+Nn2Dda34GR38WmXwg0+kVbBlxjKnV3AB6
PmN8dZ3tITihga+ogY3ubj1rsmPATSS2yTP3U4lRr8UXXJ0WNy+Obj2vmTTi
I5r/0FBDuK0O5EbesVLnt/7j4h2vdFx/efWfvL4XV8fjlX9vyfOn8fmnyMkr
n5Sp3HoxjY86P/6ybsxrvZdX+nBlmyPTax6gl6rvFrx4woazQkea7jj8/npa
b/mN/+PzZ/LBtV/5Qmzffc9GKLiiKn9P9SX4vixYff27Hs/zqNY7aNCizn+1
d4+KWTtpcyC2vVvG/h1k/ZTG6V/0tLf6M2CI5XhdF+KZxuX8oaetZ+6H9h8J
3j7EfKNxcdGy+Y0TdvP83h3NXip6BF8aLZ9fmfRgnid4Ko7OPknwpTERCQqK
MfH1Q17fa24/3rvjPAvReHXp8+jYWb5g7e/Zn6y70Rhn5XR64hT8vgOv7z1k
PGyy3DliPUmhbnYb3AuKgMqWoZJkXYlG3cc5notDLXrtvTj6smcnDgzzYHWh
U2mL9ZZl9377e1clzp1H1iNonJYz+7TAEiuQmqk12eg8qwtv5yXeWDkxkOf3
PkrPCQwg+NJY25Yy88AqW5iw02K4MqFfGn9U6Dk9cjz8n/j3+GuC7OSBbn7k
+o3CU1a6YvJ6DlD3phjZEnxp3Dw60yxOxR32DHgzkVyn0fhOOqnaQtkA7nzb
43eE+H8aZxYd/1mj6AiNFcFinuQ5Kwordtb3Nyt2gvGmycgtnAU3JMJXJV1k
wb52k9EvDxrCs9oxAapVleiT/J7Ac4rV6K7z5D3O9w2w89Tzg1ZjxIciFBG2
d6Tc8Eb04/I8sXzPo/g4/nrMzs0WbKR99Ey8nk0W8riddTJwlR2s1EhP966r
huuCw6YJi1aCqNCSebmvLUDL0LHpSzd/FSeTsssoywra0lCR0LOHkARjVU0y
2OCtaWEo3mrfa3aFo89XME8l9IYc9OtXEnpDHyP95pF6228SQOoX0TglLnu4
BaFn/0n7OfOBxsjq43vIebFReMk0Yt52oY2Rr3ACMX9x73V9XUyON6Lx091w
U0ti3Lc9fUbaB6KxoiVuxjXCTkz7cu2eRok29k3S/r1yt5N+qgvbb+teuET4
K8VZGqQdIxrZ5wTEHhP2jLPzQJ9A0s924fTCMfH3CH+bUJ5LzpMudJVKPLqf
mC+4fm2JuDSJkA/ROP5BTug6Qs4S+3nkfO5CI2NtnX7EvOZ1vFJ2xUgSekc0
vpAreu78C7+Eo9/fxvGniMbQt+dDlQi/qm4MnPGjsSJi+bBfjeO7aA8yHiAa
l7Qo/hAj4gIufmHH5SF3/Gh8tzM8ghzHjPyRZJxDNNbeUvtOxrvnB7jxiUYN
nxNXyDiF0z9ufHH9krLo3Pi+2zx1O+tUdbpyL1w5c4P0F4hGoxmnjrMJv4GL
X7jxuv91Cpk3dOHS1ylfLIn8QZTNyTO6cOT1QZVb/HmvX+H8hpUpdz7TqOCj
+8t5zas9XIktcWF2Wxd/3hIU/yVkN6wUNtD/mlWN7mx5rHBbuRIlP4jR/vJ6
BxwfsvS6RiITzlvkslZ7VqEjy9OlfcrcYd9UW9vSl2xY8vxJepX3Pchdd9Bl
cZo5DDw62/P6Mjb8WNknQ2dbLkgHn5irqOSAjUdr9RINNGY3oC9HlZJUl79F
LiUW0auVXKBG6KTN3Yo6qON/sUiG8RGSQ+a0vFzhDgGJcuy1q16oyN+SvatO
jH9trdZHqenHofRlcIi2aT2ktJ0Kb3UtgX1G2TopRvg62/E1Yg3b37KR2/3h
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
q59LtrvNNotlgVB2kH9OEAs63IY7WPgY8HxelFc9H6L2WWnc4DZcktxvxeU5
OHvA5Y24uhCuroKbv7j4/p7yOzSyO1N69V4LXvXJ+MKtk9Lo8FP9K1kvxc0X
XJ6Gq0dND+PaMY2ul1Zz7PllG7fuQ2PMQQlO/Uf5CLf+RePrd890Od+FYfap
cfaJqz/j8pNC10JyPdmFz0vyW9On/sfvbnr8/f5zkryOr2b0KmFiXYa2Xnw1
mViXId0p32N6c13WW3TcugZX98P5Q173qXF+A1fH+9aXu/9B49UhN9vJfRAX
qi5P4yjtY5z6fG/ph9dx30WdA6BR7OcdznmA3pIHR8edNxjxPIucb4jGTu27
cf7EvMP5GVx8xOWNuPmOq//g6icu94Zy9pNoNBt4fSm5r4TbL8OdH/u77tPI
vsapKyEahQMzL5H1JVx7sUvTyPiEaJSaEJ2dRcQpXJ0Nl4fjznXg/Dbue2ec
neDk30vVg2hcIOfIqQvh8kxcvRH3/RrunAluPy6M+j6ZxjmxM9LJ75TzT3Ls
uAsddmzuS9ozLh7h1im4/Qhe69u4ccfVSXD5Le68Ci5Pe0zFVxptz9Zy4ixu
HuHy2PtU/ZRGIQsrTh01ilqP0SioV85Zl2UJWrXYtrBRgO2IRVVnLyNvJa2s
hZOPwCAzybDpKWywuF1mNsM3FVWWFWxISLWAaSNanU4nlEPlkbSR/K016PxQ
+U1vjHbBKdXxG/aeK4YpARoP7hxtQM0LdeK3tjlix5fXehqv68EDVD2Xxviq
M5y6Lq/3xP60X8svkFqGJp+MVRt8oRYtzfEISo7dC5GRVRvWVNegM8fLnKyy
ypHSOGmxGbPN4fSNuOAEwTok3dH5asKkMrT3hdjQhQV2IPioZZjntSokMlFz
3b5DTGR67/njCaN3Q+c4qQjBPfUwZoLwY2nVEkhQfl+SsG0HVh4hKp+jcRp7
6i/P7eDshNf1yP6fkm6iL+uRtV6gxbHcd2j3pYFHjBSMYJJr/tJ+/RqRc0nH
2AOyr5CwV82e9brmYGyxICRVsRG9vDvLaWpnIZLVzOtnoKMP8wtkvi0fx0YW
9sFjrMY+Q6P6fTm1/54hlEQ7nHWIb0TiFU/4XWcXoAV8Ay8py5vAapPjrW8f
1qNnS6uel4m9R/md/febb94KyQ/OCz3NrQXV9LNu9a5lwPz+eXFJ9naImDlB
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
E/ElMbRTVK8SDvrKhsy/Xg0K+o2fN343gJIzO1eT57FNkpe2F95ZD2kqmaKy
X8yh+uFdzeVEXtERouZSuuoYqvffuEOz0pb3+OIj/d2Q8POqYd+UCwg/791v
c158OAPuUvsI6dQ+gja1j7CLqrO5UnU2JarOdqg10JgYXyi6M3YbMb5wbtrN
1kBP/LjkRHHH0XEydxzHJP56HHmll0XeXzyByBvGH1P9MDqayOftrT5fecwA
59am3YJEfxo1Xw2SuUyeM5cdHmXAAI85G7Stkol4fy9jWzIRv66dmu4X44SX
5zaln0xKP9mUfmQp/Tyi9PPzNlc/DEo/7ZR+tCj9HFPk+oG+bVw/0CrA9QPi
cdw65NLn3DpkMlX/33qZqzciWHH0ZpjM1Zs45cf8KD/mT/mxmnjuPJK8xZ1H
5tQ8sqDiizMVX66e58aXGdR8fELNxxHh3Pm4gqp7HKPqHjL/4RxFB1Ufu0H5
gXKqPqZA+QEG5QcuIa4f6K1xX035JUvKL9lRfsk/Nm8Jee7u+obV9kvUN6L8
9uzbVovw+/sK1HhNu8sdL2VqvMbnFDfxEfMkepEh33wiP1XNTZ/UbIiXf1E0
d7wEKX8189Zfs3P6PEN2w5N+fHzD7n+mzjM8+b6kL0m33mL40m/rKCR3i/0G
CHrViUEc+pvPdbrrDo9GfZSzOfRkry8SNltqwb/yp95j6XKoViia/mbqdtA9
FFqZ21wD0xcmGZsmloO389kGgY3b4cbpuIXiibVQLylzvTmiDOz3GJplZOLr
k0utFjEJ/aCTOd+FCP2gAjVJKVI/tPy5uWsF+FLnKpX3kP8MJb88Jf91V+44
ClzljuMMQ+44Lhk8yO9JIgu98hspp+fDQrO9I4YX/2Ke4ugbKTtUo+ywlrLD
sEmB9qPUqtCtOTVDljYzkenNSkPyXJaQi838u8Q4rp4UcWw/MY5Nb2/NXVTJ
gHohrjxS/lx5llHyzL4fu2Ud0f+V3z5qskKJPBQ9O2FK5JNPLjW3E/4WaRyZ
pUT4W3S0rayM9Le8yo+jK0h+Gh1ErCeXTj4ak0asL6PvTkv/1X4xjj54y4qB
cSFEPum4RPhoNJFPec+ddY/Ic5Js7y3zJ9bdh8IyBWc7n4QdwZZX9f3cek1+
Gy3ue5X3ct9b5Ml972gqH2in8oG367h+jFf+QPm3eMq/naP8W+vCVQ+JPBmq
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
uvZ8r9nn/8wjs94lqO8elkj53On7Dvv1u4+YbeRi/zdS1lbgcXjREjX1esxa
tFy/5F0dZrfBWcRIxgxsubdup0oCHXDSDocXfLsLTAvXsK3wsqDM/5nQte2p
kq1Y+KbH7zIEyrAy9y2Lar9ogZ4yDeMY+VYsUEB2lU75a2xrptncq5J64GrX
7YfdoTXYCbs1t2bKNwLTqgMWCpfigH3H992f9RpA65rd2b7XaoHDgyn2/Avd
QfxBP7mLE1qA13T6ELkrFUBewSSjIVkHVMA427tgnO3kAeJsh28UaNUso2PD
snjsTrlmYaJCe+pNK4zAqkOh7XeeN2ARx87tzRCtBSdffWw0/uIMdhkp8E/Y
VQ2Gi4lyJtU0ARvHae7fl1iD8fDcDQbP3TyG525ETL5vfdNvvt4S4VAfVHsA
rLWs5uvqV/8HdM8sGv3GGEh9fG9+u1/6uqS8KaPEXVluVzOt/Jccw9sNoqXE
D7D1Hf5cW7NefxHEXbVDFg41MgUfzC/VF/d7btSE+adX2bIel5JKTm6f5bB9
7pOTVqvq99whpVF6ekcHTw8RW/f+umiXN4Y4d5pbqwOuN4x3fl/ce34Z8u5H
8+ilEqaD9lz6ULFnm5v+875tehZJUyIzwOb2wKst/d43Q7qk61jg4MWF/tly
Tn75ivRIGobYsTx3zzP9cKAH/ZAQtz7X7vVHIp9Hlof3I/zscsqQ2tv6GkZ7
Szt+Qjj0dHjf34n8OLVNpofO1A7fPWW0Q7IfV9cvGmd4R7S95gm8nyMa73Ed
la/M+n2pPVqPshT630d5IUNCQsibSd+WSGLo2+Rxw3KQxw2zuN2ZxLyOqG2S
93H7aRvw49RxmiThxwwp/vFbzjrx40zj59MBxs93lxlxKxCHFC3tjV9xqIM3
YAueL+Jh486XQgLHKPMh23OcoT2HXJ6R5xjlIY8DIXAcuLvywiOiHIgeV0bk
fhS3Bp3Lrj17GkXrY9lbGd9DXQHA4WvqXkI/Q2waO0L04RDW/Zmp7FHkcWyq
PmMc+3zzvF3d7ttYcF5W4/g8Orba/WmA/RUbUG2wegkRbwXxlPCn+YpKrI9v
ZhfV2z/090c6lv3MtdGcSW9ZCvWW0VeVK94dr8a447a9ishtwr5+H3Jnl7ch
GD96iK3N4zbwvtzsS5xKCVZo4Su4Ts0cbNqoQ7SnPl65EVuz7TTr5fRJyasP
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
i9srbaj1jXndjpYn42jYg0OS/PFnadi4yNXpJzeyXk5p46LzUZdpWNjV8pme
vjTsWvWKJD0b6ny2jfJ2ehhFw+RlhNZZxNCwVix1QoibDngZUrPU3LYCXDHU
E9s4F//+Mnz3Shr0gWnaONU0fJ6yn25679NYI/Dw7TcF025XIKk5fMFnvH7U
1Cd8bNDjwLpG9FRlGVKPqyUSlwSJ9PTy7RneISMxP8OiEmtLI/D1dXEE7S4N
OIUfGcp/mAbYii7cz1SlLj967u1djOe+HeC5KP0kmJ6L88/TU8kfwPKP9Fft
LX/8obLe8lOlvwXTH6tgvG9gcMOfps+W95L/3H+eTS4uN19lBArSOcQybdrA
MVnPIIfMUuBZR9vw+awWuDI8h4NIH/Zw0zC2HDGZl/Lx8rWnjfrkKJ9kKD/+
OdgA/+6gNGuqBv7dQcTs9M/B+He3mCeyVjmqASRV/Ji51boW0MPHa7yvw/M3
6Xp16TsNq5Talfp5NQ3rWFeh5bVOF1z7eHzfzEQauC+rNYL3DA3c8U70XrtP
B/hf4rLC2zNwy0ichrdnoLNZ+QzRnpNN5wscwvvh1ZfHset4vwx8f3VoJj/1
9yXvx42B+3FU6cn7Jh5w34QqPXm/hkucsV9DlZ5KTtYDtaD+xmo+P1tOrp90
Futn6V+sn3/l/wy5//cpcsS5BcRbKsNNPgRS7yv5stdfUsDHBcSQgtIJvN0J
lOnJdp5aaOf52e/1s+Xk9yr4i+/1unb7RML+gjiVrtk+9IMh0/7C8gH8UliV
Y9U+f4gLcek7Iy7EhMr/XU7el9GC+zJkP8Cgaww/wC9Lj/8hn3Mw7oQd9PMp
gX4+mcoMPx9Wy0/2K56zhOFXHLTwvulYXP9B/DE0KCkkJxS0wnM7iGcm3Ow9
v7Mzzf8P5eSD79tKet/Iv7gPRZ+Z1kb4gyI+5ZylFPPDBIw/E/yDWMciut3l
26DKQ30v5w54vztiOrznnXxvey68t53sH9KT9L/fB2o6wH2gfvDe7e3w3u39
cxn3bot4Bf6h3q71MOrNH/p3qUD/rpnQv4u8P+4C98dPwf0nY8guuA9FWc/w
nrvsOyX5jeoct/YpMu65I/uR2kM/UrJdxYfiXO0RKFeC8QrcYbyCtwWMeAVk
u/Go2L9mN9aA9/0gysF7f048XhQii6+nMiYsLOnC11MZVTNmFy//fe5b/Fc+
uHKyf474X7yP+O+Sk+Oi+MO4KLKuQyIWr4vuo9nLF2I3u6jPq/5dcmEYHwHR
Z5DjJPwr/2fIqe49HKz0rMqPpmW9Lu43buREXeXdcmDw4lP9K2fIf/Z3/G8r
58+Wex4ZHmMT0oRNTHNXjHxcjeVMO1tkuVwTuKkEpLtY0YEvV/L48LYHQKPL
5XzoJ+r9jmSuAmmTHFrf/7/kPJWY6EpjuTyR9/WcN2yM7vt/9Ro96ddf6aC7
fHM9vd/3iglNfLR1NPV6/FeTc6fw8Ung8z0im5a/e33scaZ22DhAO6SR1i8F
txnrF7JeJDjIelG54zAF7/JX2KiEwuUhzq1g3J7byl9vuvz0eqNqVy4j/ygf
xsWQk+MYx6sy4hiT42lIwXgaLWqh9XezdGQR0Xn5PfBc+QF4rtwCniunKuc1
GJcEUciOEZ+El1R+y5GMcjaQvqNxJuM77hn1x/Sz4PuWmjbo8a6LxhC73rhv
JPTDpYV/7C9qsL9QlXMN9LOqhX5WfPBeb6r09vCcr4gq45xvCTznWw3j626G
8XXDBoivSz5PKgzPk5LPgb6G50DZ4flPRHd4DvTNrIxqVzwd4raO7N2Cr6i/
y1R4zhBxJTxvSPav5lAf3HOF5HN2N+A5O7K9Qp/CXhEP7RVku8RmaJcg28fY
oH3sOTxfJgvPl3HC82VU5STb0wShPc0T2jfsoX2jYw7DvsFqPZDtLTEJfz5e
DZacqjy/Wnry+YJl8HwB2R/+DvSHp8rnMLQTOZP8lo9ojkg7Hk8DBfnyC1Lw
9dqDw3JZYq/+gv0E2pf8y1v0k85z3LKC9qXk5sXuhD8Non+RY2oZpjdo96ST
5/0oOO+T09NgerIdaTm0I5H99K4Osj8eP/SHSYf+MJegP8z/ACK8br4=
    "]],
  Axes->True,
  AxesLabel->{
    FormBox["\"b\"", TraditionalForm], 
    FormBox["\"m\"", TraditionalForm], 
    FormBox["\"votes\"", TraditionalForm]},
  BoxRatios->{1, 1, 0.4},
  ImageSize->{360., 260.28108868674633`},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->NCache[{{
      Rational[-1, 16], 
      Rational[1, 2]}, {
      Rational[-1, 2], 
      Rational[1, 8]}, {0., 23.984694310492507`}}, {{-0.0625, 0.5}, {-0.5, 
    0.125}, {0., 23.984694310492507`}}],
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{0.5291785729413121, -2.8476827230007844`, 1.74947796415463},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{
  3.51456658149571*^9, 3.5145666310488863`*^9, 3.514566701830266*^9, 
   3.5145667329530163`*^9, 3.514566836899111*^9, {3.514566963645845*^9, 
   3.5145669815736732`*^9}, 3.514567211538903*^9, 3.514567250794324*^9, {
   3.514567295313294*^9, 3.5145673231832438`*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy8fQd8FNe1/hpJdMeJU5zkJY4TJ3lx8vIeIJpx3HtXFwjRQYDpHYzBuOCK
u41twD2uYMD0anpHFCFElYQoEkig3qXd8z/l3pk7u7MqiPz1+42kne1zv3v6
+c6j/cYPGTSi3/ihA/rdcP/YfqOHDB0w7ob7Ro3FUyFXeTxXDcEj9AYP/Q8e
j/7FP0Ppl7pxBf5fwn+a1+DPgdtvv31bjx49Nr766qtbe/bseS4rK2txwKPo
o2SfOXOGzmz78ssvdz366KOOR7XQjyrHHzqTfuTIkaJrrrnGhz+eRXU+9MSh
Q4d8V111VS3+OB9qvXfqrl276Mymd99990iHDh3cP+Gm9957b9OwYcPSwsPD
D+3YseMRvrvl5g8++GDjuHHjNg8aNGjv6tWr6eyZzMzM87/97W8L8vPzm/HD
QncuXLjw3PXXX7+lb9++pfgTZ75HiH6PCvzxPMbnWp3OyMjI/t3vfkf35V24
cOHSz3/+82r8ocfQJ/XijydEnr/74Ycf3r106VK+5XzpKvzxe+nm9FX233nn
naB+Lv3iF79I2bp1q7xa8w2TJ0+mb7px1KhRZ2644QZaj4ObN292vvC2r776
iq5FJf7oF97w1FNPbe3Vq5d+4aPt2rXb/t1338kLh6Xt3bt385w5c+iW/sie
eANBoeplpk2b5vYycnco3V1cVFSkX8LlFTbNnj3b7RuqV7h08eLFjbNmzarj
FYJd/jD59ls++eST4//85z/5K/wfnWtGV/mvxgvJI0M3f/jhhwyQpKQkAkhz
eQHC45H27dvzC/DTWvGW5EsFam96/mK8Xjv61ZLuko8YAtYO5luB5/5sPPtv
1rPbXsaz/2B9wF/TfyHGd/2G/7Subx9snDRpUvFPfvKTZrnXXXedJ6SyRYsW
dFn5yX2szxbm8jn+K/hn+5r/tGnIVjl3+vTpzYMHD/bIhgzJOXv2bHpaWhrf
irO+3j/Um+FiWYvgeLOgm0ctCv278aWXXmLRFGl9sY71vm6wvaMuCQmQTSNG
jKDv6Lnf+rzNXS5OR5dzNzrfK8gGU6+2YerUqbSOfOs26ztcc1nvFWwrKmFD
61RaUlJCt0hWEzBovTpbX/FXLm/Rhn6H0qm/1PsBgqFDCaUd8+fP3x4XxxA4
tH37dsbn/1rv3tLl9X9j3Yt3zEmxt+tfg38Y2SYB0kBQE0ZClK74hilTpmzr
3r07LYa8WkvrS/J/ren9/hb8bVLMjyan5KP90bqjGb2EejZ9eLrVln7fFPxl
dxsfIPBBv7bubePy2vyRW7k87Q/B32+T9Wn/XOfn/onLuVbm+0W0+9a6BDeo
c+YeVO8n+uvq+oQY3fZ/jKe39e3d5PL1dV4bt8/f0vr8zfDjf8dfYqn1gf8Q
/Es8yn+uaYg0DPYYT6z1cd3UxC+txQhx+eBXN/ALtrC+YIj1BRc2/AvWZ74E
u/sRJ6bUl2zYR3Y7F+qP64h23+Mx39OMf9O3WqCXTmAQYr259V3qtpiC3n2P
9Q3cFMB/1blMDf1+budC7O8cyt9XvvdC+q7Or72Mv/YNLp/uT84LEEQVhdR9
9y3WV/yJy1v8/IossNu5ZvYFCCPwGhdhEf0v358uxTK/z/T7ei9FPZoy2N3h
1qVw05StrXtDm/C1G7q15cpczWJXro55hRYrqHyvMPK9ur2csfKHei9Q3Zo8
6N1/ty5BUGXOWGnol7zci0bvxp9AxF5z2i/G1flBYWhhMwZSqLq5XF+g64Nf
H1FfAcZFEA/kRusb28o17AoDIajcb0GnbOEvQqOl32VYrLeTAsgieuzyBvgF
6npMtL5hM5cH/cG690qurvW41tb15K8Zan/NEAv3Hv5o+GVZiuh9sVB97WV8
34qGf98R1jq6mWfXWd+3+RVeUbdz6pvr/eR3DejXAv7S5nov4UtB9y3ii7RY
nV/heiF+ob7jHMPy1g6saTWoizPIBe5XWu7xuZYiYgLvtS1gxnwIg6GtIQT1
sUhdk6Xqmuh9wNdDX4qIdiutr8iXwjSM9TVqFvx6JBqbPhAsv7OuVosrfI3c
HhdmbZifBhMYreUr4nULdQJoof+FY7AsZcH5g3HhltCJlX5f86d+GJKne2wb
3rxw7G1edqhPdKInxpA6gZf959aiXHOFL3tbaz+2auAzmltwFQckVKFyvj5Y
jrGW1wLall42gJcZINabfJng1+/LXyPv5bF9vIh29tV329oi5i4/RqrW5GHr
qtsugdsGvtKwD7XERUOd2qCbR0yaMHXdv7MOvR9kw9AV/V7ka3OXpSIbY6no
oxC9Unis4lur/FarrUh0fG9epwYIHnXuRGpq6uYBAwbQ4Qnh36EUSad7tdOm
HqptW+PpQcPSai3vNlYwcH+x9d28MfuroavQxtpfrZvwKn6O1XxzPbXxIKcW
WG7G98pzVqJO6c9Qv3VdRqeXqChCXevaxlpX+gRJDmloPq6VWo7LiPXLtvXc
Yi3VT11en5fqStujbo9rZq1cQ93k4O8Wap5zyE975Vh2quhAqLmadPBS8uZc
ZBjBi/ViNmMDONSwDXh9w1zWsZW1jnRvEhvcbdSaNS6xopYr3FouN2s6XHbW
lV2a1paAbKgD3zgPNVTtrfl6rzWz9ZoZzFnEdyzk/WIZYspyb+W30Vao3aV3
GZ/jd1rtd8laWCvUoiE7rZHJLLVqf5d7/Y0WN5vvtv/EjmtUzOFysOK4mrxC
ekW/89tk89VGW9BMSU05vZClJi8tAk4Zi+r4wW9xV5rSdLmywnFl1eoGrnGY
tcbW+yWxumxeh9J0WfzG5CHVyt9U9zNDZbXxvbq4vG2zpm7nFpZUbYoACPo4
2y4NUWtMa2sLU1lj2bU/UecXg58rZYjQJS4LvcJe5BV6oRlSq+nXGr8rFmKu
tDZcaY1bNtA8aq12agMSxc4VrjsQbr8xvqCnm8tahzRl35OBybrFDSz/ET/R
Dh3xhZ6v7SOPOxKUSpU4mg0E9qMXe1ooHGhpvdTEAS/2ymYaCivD1LJHtFvr
NGp52ZsZ66x3eYsGrv0fHQtat00Var4avUpXc01Tv8bjK9EjDd2/za296mYV
N2XBbK/T9ib9ZHSIu8pVK+Zprs4tUQtlbVoJrmuPR2valWwJWeu2Ck0eEc9r
jGMtHusgov1G60pqJLMtGHLlFrKurAa/GH5Lerrxw2ZAeMCSfl3PkqrAdsOW
5T/ntLYMtsyh9jI3B2fKSMvjRc2UJra34BKPuC3a4rWi4IH6V1Z9Fctn1uPG
Srdbj8ePuOKb8Nhqyq5Ql7VuqMB2rnXdaZswx6bV0tit3qad+fjD3+jlBzik
drWbpLYDaFd6B9ft19o5XOWvypKT3J0fZqlhFadzrrjYz4v5av9gaGBtO+vo
w3Iz9qs0sZjTooVbBC5zuw14bIaIDjvkaUEXmfeaW2DJubT1lI4EX1p+/faO
Bf0WF/Mbp5gOtS5xQ0NzDd3TjXd3g6oHHWCSlJ6OAfJiG16TYXXpy70IJBxB
K97CWlfnWi8DHeRfaVnrLMlpmemF19B9a3lb+68zbul2W3Ctd8rzOu5p0opr
d8m1PsdNJIQ55Dfdf3xqktrESlOnfSfrfvibZlqQH/rKxEtoMGl6pde+lbX2
bv50UGnfyvg2KqioF9uRyXFmMhZamRzD/OaVWcJAWGoAYTmYzrJobq35VykB
v1ptdIWFtoZYJxxsVFjAfd9uK+JhFz89snMyRHbZp1WGPyZaNQQTHehPiLyE
XAg3lc3Vn2IK45LPt5ddb/dDjbTKLldqe9gQ8Lgncxv6okaBgySo/dbe2vFW
SHmh5+egdblhZhuS3BGyYlFuL752sGSxPWq5Vnt+AbYiD5TykZ22GKtO/29D
NOyWle9yACK7HoTIm1OsJfd42B4MHmq5wVhxNy/JZbsfezJJ6gT12h/9HuDI
fHPb866nvf9VUAXeFBXdwrLIGhfADh6sXOCX7FHLYSy2f5JWr5hkDrRMX2bk
4sQ6V0pcRH2IWvA11tPV3r7Wb6Vlb0d2wtXtuE32N610u+242nvUaqdAVLdD
EHlLaqNXu73LXWF+q033HZ3Cr+n5J59oZaz2Avcd31g/LOg5tuya4mAHrUFh
rahNNjnshV+gVamx5mK0hYFtsFkemRjl4peFOva0Wl1JOKx2rPha+rXO8zO1
2k5JHtlxO+7hXWTJyWq3w7/t90JE+EF+86h/HcYjDaJuPcIv2NYpzvn7/tFY
5BARiy5LOymJN/L/8Ik2srTHFrkvr2WUf8Vv2qg9XXf2u6HGe1BpERgWEevs
e0emYYFcIZd1DQEdDtHrIykjp25ebi2vJa5FWodY0lo/fR1LcLWPO2w0VneL
7OOOO3Df7kU9vRtXdieew9Vun4znRWrTykbddhSibj+Gx3E6R0ZgUoi5p02d
Xceebu628JNlT/8j2MKzJHfubY845Y3b27Yf5WbkN8Wou1rEPyjzXEe5NQDm
KwA0dwDA9sCV8tZ1ZjpIulikeXNwxsQsa90OjfG7rgIdXpHHrpHN7fm1uu1n
tXcg72yLjQKS5uE7IermZETDPpT0uMfbISI67IOITocECbcdh+g76DgB0Xem
Q9SdGRYagpZs1IuG5g40HCExIFL+JnVB+SknlihQLCRgkCo/QjavKREEFI0U
+LYv5mb9X+nIDcdmmgkElaLnpLJtyNsoscuR5LYhJFhGeOwCAb3VlzEQtDG3
Sh0rleQPNUWDLfd/o246NX1E+y0Q1YVk/TZb7ofvRnzsg+jbUNPfjLZdR8RG
+H6I6Jyq8HGScRF9VwZE352JxymIvieLP55E77QIFHg0HjEtDPlB59MmJjFi
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
xdBnfKlHexw0Sev9ZKtaBf59RP7fe9HmpqJavArHINkCqEWgWM15hk9lixWq
P1aVKme3aJB8FLUVliftge0TBCRHZh6As2jNXHjvsALJn8Ry6bSNqUoEJHtl
bjvZvRQ1JnD8v9quAz7K48rvuWAndhwnjn3pudwluctdcocwNsFgMMa9qiEk
mk3vvRgMNtWimiaqAIEAg2gWIEAgQAIJ9bpa7Uqrtuq9gHrZ3f+9Kd/uavUJ
I+zw++0u+ur85828eTPz3v8N1No1CQvlHKinayTV6ZBcGnpMGPVhIZ9VM+qS
SVObSWUI98upc9swc7EI41y2Q3i4MjXCvM+332RhnGYc1jf0am2mVz39KdFt
ftgnq13Hx68fiZZIDUI2kZd6HH1kUBujn57Wjk9Xd2LOAWV0+SPfeGXcpyEm
af02dqXhs9P+N6GTmom5VQRl2aMmHPJRMF3Cmki5kDGP+xEaD4c9YxAyORHR
1EZ01EYKSYmU+elQs09pI78XpgkbZdjo0i9ZKgfWHpJtpAquA9N56DpXIKx9
yKy77Fq27MtMk/FjmWVbxT3EJ09vw/y1FqzYL8rBPMOX77Xiy0Oi3WwNE/Em
319K38/h40HfZffBfFKkQwHbgLp/OxCq4nd8qW70iGJ4LgImfQ3uMb4uAtgt
+W+vOeyFptdbkEKz6KSyTlQ02mnsOhXqJZbyVKFdcMgfaa2msalSyI7GE82j
Ukewvy+S/O8sSkH6aiZ/HekHHeoPGKT8fyWsi5di4TaQ6QU5/2VpPV/RCvN0
QJotMoAnCWfZlgdlk8xNwrJ6vxyjXGvI1KjGzPlVNHg0ko7o4Iu1y/ysWHUE
Nj/ZgIwam4X5fbT3w1qTD7hy8mObpJ9xEizjF3hByPzlHvv+70QdvlOOMaxO
VtRi5j5g+UURpqLkDmUhKkGCFAdhBRYYah2dLoQTVGfbPRspgWPf55TzTOZV
CtdbrJTnkwj0EY5ZFyYlImpRKrSrtCj4Woc6fz2aAg3KKgrf5ekfT7OMFLgN
0NqWzQazdPBaEU7HevpgnrWY5XXlnoRjPAUtAiOoYHFIk6few5xl9Zj3RSON
BB2Yv8aMz7ZasPqY8CDcJBLBc9JRpZ57YTw6drwfVqHbh48nmAh/1bOgB/Qo
6N8IQY+ox9i5DZi1gSylY2asuSnCQVg80k6y7wJELALuVIjAZUcnLna8i0++
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
XleKqD21yDrZgoobbWSUtVCrp5Zfmg9LmXTCuC3WXJhfW0mrcH687lzgkT3W
9u+hzBW6F/iMrcB2NjI2OkRQge/IAqdg8XsG+Prkw392KS6sr0BcQB1yg1uo
hbTDnN1GTbyaN/F2k6Bcv0qVTr2XFzRcpVzPiiJ7q5z6Lf9WFoADnIrsOHdz
LPJ1KvItjOwnXj91aBqWfmTExrGFODi/Apc2Ua88Xo+Cq6xhdJIRTEUuLkeH
SYeW7AixRxbxMOX87X3KeVaWMwR2eqUbVM7bVE5BwzVjuA7L3XOxZXwJDi+q
xpWt9Ug52YDSW63UDszUgJvQmV+Atjyxf5ESySJ1eiqlT4+l/DWU1Qz2FLt1
2rWECjWCh0sk6WmxyjL/fT2+9DJh2+RyBH5Wh2s7GpB2hloqF7wVlrw6qkVh
EtzLuRjVc+lGqZz6TZfSHVcp3XmV0kXB52XBB7uYhr+vPi3AzulVOP55A27s
aobu23ZUxVHdmSywFNKoXSKmqDnJRx+qdL/qIll76c7J0l2SvVyYU579YzD6
FdFrF3sYsXVWAfxJsidXNuGWfxuMlztxT2uFtaidereYkjWSarpj683Sihit
UqBfywLxbV6HaYY0XyGYeO0FUjguxr4q1luWkMrxW1iEY6uqEbyxGbHH2mGK
MKPVSIIsbYK1WpDmVBovdC/QGJUCOcZkyfmBPbeMy3nZRy9DZAiJ4Lws7AWf
DEvHlLeEteW3qBRntlTj6u4WpJzrQFmcBS25HegsF/y9TaWxMCYfe4jyMAP4
tEYhWrBXDrWlF28KSjPqh+OGC2lNe0+0Yr8lFTjvV4tbR1qgv2JGrRZoym9R
tt3rC27aXhflXKaxKmX6pdMxe5melGXiiX/h9o/bgsOmXxzGvJ6KmZ5ZinP2
rs+qcWH3XcSfbUVuhAW1+k5e1IYiE+pMCSjKPK+JUXm1yN6pGady6l/lt71U
NsNTSK2foKF0ezmSx56yWKZRr2kxf2wOFviInZddy2pxYW8jUi61oTheuPJU
GopQla1DXVGMJvZhivRMD0UKkVy+1Kr7R8FjWCpPF+M9RIe5o/Pw+dRSEcH6
GCr09ajJK8LdUgOKckLvU4hPVE69IL8djsGepOSS5KtiXFVUiDfSeRyu12A9
ZvuYsGaRWMn2921C6NF26MKtqMqyoo7MkMaKMtSVp8b1XJpPVU4JR4LHnEtj
a9KsMC/G8G7l8boOHsON8HwlEzO9C7BmsVimPLy1FddPm6GPBmpMQHN1M1rv
laHIFPFQhXm+S2FEgSRBLisNI1vqG03y0WHERwVwH5SD6V5FWLVQLFQc29OB
iBDAkATUkVHZ2dKG6kqDJr7nooxXOSWWvR9XKcoV2beeEUVxSYDH0Ax4uRbz
YJOpPuX4cr6Irzh52IJbZG5n6oDaaguaGmtRUBhzn5JMUDn1nMoxvp2rMHXw
AP3+aXAfYoDXxyXwcqvClHG1+GJJI/y2Cv+/yyGNCA8vRWJyNrLyUjUJ4gH0
zGcf+s1PC369AZk8xciID0vgPaYBkyY2YvnyDvjtAn/zTbLwE3QVyCzOS3R+
6USVF/xc5ZjiOGvjFn05E26DczHigwp6ZxMmTuvA8tWA/3HxznhjCwwV1Ugv
1mmSVJ4nIro1k1RO/UzlmHBtklPr/ka4DiqA5/vV8B7dgglzgNU7gCMh4tX6
unaklRdoknv32mdVjgmHnCf5Y91eLYa3ew0+md6CKatYcqAWfH2iFoFhJVwY
93ndZJVTP1U59oRdsn0wc2UjFuwxY/XpduwOv4sgLVc8KT2/ZkqPp7oee1Ie
G7HMikkBZjnm0Vfq9392Xs+PmKpy6ie9e8Q0lVNP9+4R01VOPfXPeUR+j4A1
M1RO/bh3j5ipcupHKse07PsnDl3+QW+8Y7tRTDA1s1QuelLlWKjtRuEmpJmt
ctETKsdO224c0LsbD9luFO54mjkqF/VRObbddqNYXdbMVbnocZVja203juvd
jUtsNwo5aOapXPSoyrEZthuXihvnq1zkzE/L/hpru/Gr3t3Iq+RpdminuHGB
ROU8ItPfwkuMvyVAXLyQ/3Q1a6bI6GN+3Zn7Xvc323VXxXWLnErIXvoH20XR
4qLF7Me+XsJPpTufetx2yiROcZn0YQdqxAH+AtHNNZp/+X8F0UVg\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other calculations", "Subsubsection",
 CellChangeTimes->{{3.5145671597726173`*^9, 3.5145671619604607`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "16"], "-", "b"}], ")"}], "3"], "]"}]], "Input",
 CellChangeTimes->{{3.514564730663316*^9, 3.51456476629385*^9}, 
   3.514564868686247*^9, {3.514564969836095*^9, 3.514564973790535*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4096"], "-", 
  FractionBox[
   RowBox[{"3", " ", "b"}], "256"], "+", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["b", "2"]}], "16"], "-", 
  SuperscriptBox["b", "3"]}]], "Output",
 CellChangeTimes->{{3.514564743366994*^9, 3.514564766756473*^9}, 
   3.514564869310514*^9, 3.514564974572008*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "/", "16"}], "-", "b"}], ")"}], "3"], "-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "/", "16"}], "-", "b"}], ")"}], "3"]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.514565025240954*^9, 3.514565053340536*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2048"], "+", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["b", "2"]}], "8"]}]], "Output",
 CellChangeTimes->{3.514565053969347*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"12", "-", 
    RowBox[{"3072", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"m", "+", "b"}], ")"}], "2"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "/", "16"}], "-", "b"}], ",", 
     RowBox[{
      RowBox[{"1", "/", "16"}], "-", "b"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514565959912403*^9, 3.514566031514909*^9}, {
  3.5145660778125267`*^9, 3.5145661336211*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.5145661349828587`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"12", "-", 
    RowBox[{"3072", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"m", "+", "b"}], ")"}], "2"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{
      RowBox[{"1", "/", "16"}], "-", "b"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514565959912403*^9, 3.514566031514909*^9}, {
  3.5145660778125267`*^9, 3.5145661336211*^9}, {3.514566237876067*^9, 
  3.514566238590538*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["2023", "2"]}], "+", 
  RowBox[{"3060", " ", "b"}], "-", 
  RowBox[{"3072", " ", 
   SuperscriptBox["b", "2"]}], "+", 
  RowBox[{"1024", " ", 
   SuperscriptBox["b", "3"]}]}]], "Output",
 CellChangeTimes->{3.5145661349828587`*^9, 3.514566241947489*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Getting ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to do the work for me (but using \[Alpha]=1/4 rather than 1/2 as I stated \
in the hand-written draft)"
}], "Subsubsection",
 CellChangeTimes->{{3.514567521291195*^9, 3.514567529408424*^9}, {
  3.514568507124333*^9, 3.5145685490409727`*^9}}],

Cell[CellGroupData[{

Cell["First Iteration", "Subsubsubsection",
 CellChangeTimes->{{3.5145693916172123`*^9, 3.5145693939485903`*^9}}],

Cell["Votes in whole potential region", "Text",
 CellChangeTimes->{{3.514567624141995*^9, 3.514567638826641*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
  3.5145676463089867`*^9, 3.514567657873371*^9}}],

Cell[BoxData[
 FractionBox["509", "256"]], "Output",
 CellChangeTimes->{{3.514567591749001*^9, 3.514567610833736*^9}, {
  3.514567648866208*^9, 3.514567659534903*^9}}]
}, Open  ]],

Cell["Votes in original region with smaller maximum m", "Text",
 CellChangeTimes->{{3.514567665891932*^9, 3.514567685248757*^9}, {
  3.5145678445316467`*^9, 3.514567844673024*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "mx"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1"}], "<", "mx", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
  3.5145676463089867`*^9, 3.514567657873371*^9}, {3.514567711439807*^9, 
  3.5145677115808496`*^9}, {3.514567797416033*^9, 3.514567854465218*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{
      FractionBox["3", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"127", "+", 
        RowBox[{"128", " ", "mx"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"-", 
       FractionBox["15", "16"]}], "<", "mx", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"381", "+", 
        RowBox[{"128", " ", "mx"}]}], ")"}]}], 
     RowBox[{
      FractionBox["1", "16"], "<", "mx", "<", "1"}]},
    {
     RowBox[{
      RowBox[{"-", "249"}], "-", 
      RowBox[{"1011", " ", "mx"}], "-", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mx", "3"]}], "-", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}]}], 
     RowBox[{
      RowBox[{"-", "1"}], "<", "mx", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["15", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "128"], " ", 
      RowBox[{"(", 
       RowBox[{"189", "+", 
        RowBox[{"128", " ", "mx"}], "-", 
        RowBox[{"768", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514567715781971*^9, {3.514567836308359*^9, 3.514567865558774*^9}, 
   3.514568065022209*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "[", 
   RowBox[{"%37", "\[Equal]", 
    RowBox[{
     RowBox[{"3", "/", "4"}], 
     RowBox[{"(", 
      RowBox[{"509", "/", "256"}], ")"}]}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.514568067296658*^9, 3.514568084722733*^9}, {
  3.514568470412238*^9, 3.514568470557921*^9}, {3.514568588045177*^9, 
  3.5145685916393013`*^9}}],

Cell[BoxData[
 RowBox[{"mx", "\[Equal]", "0.016206723615191782`"}]], "Output",
 CellChangeTimes->{
  3.514568085574321*^9, 3.5145684733732977`*^9, {3.514568588666603*^9, 
   3.514568592282379*^9}}]
}, Open  ]],

Cell["Vote density in region with smaller maximum m", "Text",
 CellChangeTimes->{{3.5145683475960293`*^9, 3.514568358496806*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", "0.016206723615191782`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"0.016206723615191782`", "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{"1", "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5145683962127657`*^9, 3.514568433610898*^9}, {
  3.514568482261956*^9, 3.5145684847911654`*^9}, {3.514568600532785*^9, 
  3.5145686032501917`*^9}}],

Cell[BoxData["1.4674287257173064`"], "Output",
 CellChangeTimes->{{3.51456841303341*^9, 3.5145684358412457`*^9}, 
   3.5145685655081987`*^9, 3.5145686123111258`*^9}]
}, Open  ]],

Cell["Votes in original region with larger minimum m", "Text",
 CellChangeTimes->{{3.514567880585348*^9, 3.5145678956244926`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "mn", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1"}], "<", "mn", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
  3.5145676463089867`*^9, 3.514567657873371*^9}, {3.514567711439807*^9, 
  3.5145677115808496`*^9}, {3.514567797416033*^9, 3.514567854465218*^9}, {
  3.514567900853138*^9, 3.514567903236125*^9}, {3.514567946020938*^9, 
  3.514567946305642*^9}, {3.514568038405254*^9, 3.514568049918542*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"3", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"-", 
       FractionBox["15", "16"]}], "<", "mn", "<", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     FractionBox[
      RowBox[{"1", "-", "mn"}], "2"], 
     RowBox[{
      RowBox[{"mn", ">", 
       FractionBox["1", "16"]}], "||", 
      RowBox[{"mn", "\[LessEqual]", 
       RowBox[{"-", "1"}]}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"131", "-", 
        RowBox[{"256", " ", "mn"}], "+", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "3"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", "0"}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"131", "-", 
        RowBox[{"256", " ", "mn"}], "+", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "16"]}], "<", "mn", "<", "0"}], "||", 
      RowBox[{"0", "<", "mn", "<", 
       FractionBox["1", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "32"], " ", 
      RowBox[{"(", 
       RowBox[{"17", "-", 
        RowBox[{"16", " ", "mn"}], "+", 
        RowBox[{"192", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mn", "3"]}], "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"123", "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", 
      FractionBox["1", "16"]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64253", "+", 
        RowBox[{"258816", " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514567715781971*^9, {3.514567836308359*^9, 3.514567865558774*^9}, 
   3.514567955971629*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"%34", "\[Equal]", 
   RowBox[{
    RowBox[{"3", "/", "4"}], 
    RowBox[{"(", 
     RowBox[{"509", "/", "256"}], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567982547263*^9, 3.514568020026978*^9}, {
  3.5145686220813723`*^9, 3.514568622958378*^9}, {3.514568677316608*^9, 
  3.5145686817384443`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mn", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["1015", "512"]}]}], "||", 
  RowBox[{"mn", "\[Equal]", 
   RowBox[{"-", 
    FractionBox["1015", "1536"]}]}]}]], "Output",
 CellChangeTimes->{{3.5145680129630632`*^9, 3.514568021346128*^9}, 
   3.514568627612714*^9, {3.514568678468893*^9, 3.514568682299019*^9}}]
}, Open  ]],

Cell["Vote density in region with larger minimum", "Text",
 CellChangeTimes->{{3.5145682606152267`*^9, 3.514568269852763*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      FractionBox[
       RowBox[{"-", "1015"}], "1536"], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"-", "1015"}], "1536"], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{"1", "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5145682965661173`*^9, 3.514568328011283*^9}, {
  3.514568710188011*^9, 3.514568720150096*^9}}],

Cell[BoxData[
 FractionBox["4581", "5102"]], "Output",
 CellChangeTimes->{3.514568332119948*^9, 3.51456872203837*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%51", "//", "N"}]], "Input",
 CellChangeTimes->{{3.514568734265972*^9, 3.5145687361519423`*^9}}],

Cell[BoxData["0.8978831830654646`"], "Output",
 CellChangeTimes->{3.5145687378503523`*^9}]
}, Open  ]],

Cell["Votes in original region with smaller maximum b", "Text",
 CellChangeTimes->{{3.514568137085004*^9, 3.514568147971141*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "bx"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"0", "\[LessEqual]", "bx", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145681669648933`*^9, 3.514568185623622*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["19", "16"], 
     RowBox[{"bx", "\[Equal]", 
      FractionBox["3", "16"]}]},
    {
     RowBox[{"1", "+", "bx"}], 
     RowBox[{
      RowBox[{
       FractionBox["1", "16"], "<", "bx", "<", 
       FractionBox["3", "16"]}], "||", 
      RowBox[{
       FractionBox["3", "16"], "<", "bx", "\[LessEqual]", 
       FractionBox["15", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"25", " ", "bx"}], "-", 
      RowBox[{"2048", " ", 
       SuperscriptBox["bx", "3"]}]}], 
     RowBox[{"0", "<", "bx", "\[LessEqual]", 
      FractionBox["1", "16"]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64381", "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}]}], ")"}]}], 
     RowBox[{
      FractionBox["15", "16"], "<", "bx", "<", "1"}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.514568200182991*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"%39", "\[Equal]", 
   RowBox[{
    RowBox[{"3", "/", "4"}], 
    RowBox[{"(", 
     RowBox[{"509", "/", "256"}], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145687690920563`*^9, 3.514568783747631*^9}}],

Cell[BoxData[
 RowBox[{"bx", "\[Equal]", 
  FractionBox["503", "1024"]}]], "Output",
 CellChangeTimes->{3.514568784396834*^9}]
}, Open  ]],

Cell["Find vote density in the region with the smaller maximum b", "Text",
 CellChangeTimes->{{3.5145689001757793`*^9, 3.5145689226679573`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", 
      FractionBox["503", "1024"]}], "}"}], ",", 
    RowBox[{"Assumptions", "\[Rule]", 
     RowBox[{"0", "\[LessEqual]", 
      FractionBox["503", "1024"], "<", "1"}]}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["503", "1024"], "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.514568794319512*^9, 3.51456885079907*^9}}],

Cell[BoxData[
 FractionBox["1527", "1006"]], "Output",
 CellChangeTimes->{3.5145688218940973`*^9, 3.514568853209399*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%55", "//", "N"}]], "Input",
 CellChangeTimes->{{3.514568859287504*^9, 3.514568863266499*^9}}],

Cell[BoxData["1.5178926441351888`"], "Output",
 CellChangeTimes->{3.514568863754839*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bn", ",", "1"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"0", "\[LessEqual]", "bn", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145681669648933`*^9, 3.514568185623622*^9}, {
  3.514568988053412*^9, 3.514569001846613*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["237", "256"], 
     RowBox[{"bn", "\[Equal]", 
      FractionBox["1", "16"]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"253", "-", 
        RowBox[{"256", " ", "bn"}]}], ")"}]}], 
     RowBox[{
      FractionBox["1", "16"], "<", "bn", "<", 
      FractionBox["15", "16"]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"509", "-", 
        RowBox[{"6400", " ", "bn"}], "+", 
        RowBox[{"524288", " ", 
         SuperscriptBox["bn", "3"]}]}], ")"}]}], 
     RowBox[{"0", "\[LessEqual]", "bn", "<", 
      FractionBox["1", "16"]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "499"}], "+", 
        RowBox[{"2023", " ", "bn"}], "-", 
        RowBox[{"3060", " ", 
         SuperscriptBox["bn", "2"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"]}], "-", 
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "4"]}]}], ")"}]}], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.5145690212713614`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "[", 
   RowBox[{"%57", "\[Equal]", 
    RowBox[{
     RowBox[{"3", "/", "4"}], 
     RowBox[{"(", 
      RowBox[{"509", "/", "256"}], ")"}]}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.514569023351838*^9, 3.514569037501439*^9}, {
  3.514569082925016*^9, 3.5145690834622393`*^9}}],

Cell[BoxData[
 RowBox[{"bn", "\[Equal]", "0.020598818895557126`"}]], "Output",
 CellChangeTimes->{3.51456903868073*^9, 3.514569084511571*^9}]
}, Open  ]],

Cell["Find vote density in the region with the larger minimum b", "Text",
 CellChangeTimes->{{3.5145691043978786`*^9, 3.514569117425888*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0.020598818895557126`", ",", "1"}], "}"}]}], "]"}], 
  "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{"1", "-", "0.020598818895557126`"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.514568794319512*^9, 3.51456885079907*^9}, {
  3.514569133296719*^9, 3.514569161652011*^9}}],

Cell[BoxData["0.7612870835107651`"], "Output",
 CellChangeTimes->{3.514569176242408*^9}]
}, Open  ]],

Cell[TextData[{
 "So, the greatest vote-density comes from lowering the maximum b to ",
 Cell[BoxData[
  FractionBox["503", "1024"]], "Output",
  CellChangeTimes->{3.514568784396834*^9}]
}], "Text",
 CellChangeTimes->{{3.5145692024095488`*^9, 3.514569213174532*^9}, 
   3.514569362301866*^9, {3.514569411802883*^9, 3.514569413382333*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Second Iteration", "Subsubsubsection",
 CellChangeTimes->{{3.5145693916172123`*^9, 3.5145693939485903`*^9}, {
  3.5145694602886972`*^9, 3.514569461153763*^9}}],

Cell["Votes in new region from previous iteration", "Text",
 CellChangeTimes->{{3.514567624141995*^9, 3.514567638826641*^9}, {
  3.514569501477826*^9, 3.5145695301904383`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", 
     FractionBox["503", "1024"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
  3.5145676463089867`*^9, 3.514567657873371*^9}, {3.514569539943487*^9, 
  3.514569540385996*^9}}],

Cell[BoxData[
 FractionBox["1527", "1024"]], "Output",
 CellChangeTimes->{{3.514567591749001*^9, 3.514567610833736*^9}, {
   3.514567648866208*^9, 3.514567659534903*^9}, 3.514569543862741*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1527", "/", "1024"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.514569552740958*^9, 3.514569558622615*^9}}],

Cell[BoxData["1.4912109375`"], "Output",
 CellChangeTimes->{3.514569559157751*^9}]
}, Open  ]],

Cell["Votes in new region with smaller maximum m", "Text",
 CellChangeTimes->{{3.514567665891932*^9, 3.514567685248757*^9}, {
  3.5145678445316467`*^9, 3.514567844673024*^9}, {3.5145696163469753`*^9, 
  3.5145696166282797`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "mx"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", 
     FractionBox["503", "1024"]}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1"}], "<", "mx", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
  3.5145676463089867`*^9, 3.514567657873371*^9}, {3.514567711439807*^9, 
  3.5145677115808496`*^9}, {3.514567797416033*^9, 3.514567854465218*^9}, {
  3.5145696290282507`*^9, 3.514569630036735*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox[
      RowBox[{"1", "+", "mx"}], "2"], 
     RowBox[{
      RowBox[{"-", "1"}], "<", "mx", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["567", "1024"]}]}]},
    {
     FractionBox[
      RowBox[{"1015", "+", 
       RowBox[{"512", " ", "mx"}]}], "1024"], 
     RowBox[{
      FractionBox["1", "16"], "<", "mx", "<", "1"}]},
    {
     FractionBox[
      RowBox[{"1015", "+", 
       RowBox[{"1536", " ", "mx"}]}], "1024"], 
     RowBox[{
      RowBox[{"-", 
       FractionBox["439", "1024"]}], "<", "mx", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     FractionBox[
      RowBox[{
       RowBox[{"-", "54542922145"}], "-", 
       RowBox[{"491659620352", " ", "mx"}], "-", 
       RowBox[{"1566025187328", " ", 
        SuperscriptBox["mx", "2"]}], "-", 
       RowBox[{"2160368549888", " ", 
        SuperscriptBox["mx", "3"]}], "-", 
       RowBox[{"1099511627776", " ", 
        SuperscriptBox["mx", "4"]}]}], "4294967296"], 
     RowBox[{
      RowBox[{"-", 
       FractionBox["567", "1024"]}], "<", "mx", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["439", "1024"]}]}]},
    {
     FractionBox[
      RowBox[{"1003", "+", 
       RowBox[{"1024", " ", "mx"}], "-", 
       RowBox[{"6144", " ", 
        SuperscriptBox["mx", "2"]}], "+", 
       RowBox[{"262144", " ", 
        SuperscriptBox["mx", "4"]}]}], "1024"], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514567715781971*^9, {3.514567836308359*^9, 3.514567865558774*^9}, 
   3.514568065022209*^9, 3.514569649408208*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"%65", "\[Equal]", 
   RowBox[{
    RowBox[{"3", "/", "4"}], 
    RowBox[{"(", 
     FractionBox["1527", "1024"], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514568067296658*^9, 3.514568084722733*^9}, {
  3.514568470412238*^9, 3.514568470557921*^9}, {3.514568588045177*^9, 
  3.5145685916393013`*^9}, {3.514569647561797*^9, 3.514569663566389*^9}}],

Cell[BoxData[
 RowBox[{"mx", "\[Equal]", 
  FractionBox["521", "2048"]}]], "Output",
 CellChangeTimes->{
  3.514568085574321*^9, 3.5145684733732977`*^9, {3.514568588666603*^9, 
   3.514568592282379*^9}, 3.514569665285796*^9}]
}, Open  ]],

Cell["Vote density in region with smaller maximum m", "Text",
 CellChangeTimes->{{3.5145683475960293`*^9, 3.514568358496806*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", 
      FractionBox["521", "2048"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", 
      FractionBox["503", "1024"]}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["521", "2048"], "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["503", "1024"], "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5145683962127657`*^9, 3.514568433610898*^9}, {
  3.514568482261956*^9, 3.5145684847911654`*^9}, {3.514568600532785*^9, 
  3.5145686032501917`*^9}, {3.514569707524671*^9, 3.514569713470272*^9}, {
  3.514569778683158*^9, 3.514569782832293*^9}}],

Cell[BoxData[
 FractionBox["2345472", "1292207"]], "Output",
 CellChangeTimes->{{3.51456841303341*^9, 3.5145684358412457`*^9}, 
   3.5145685655081987`*^9, 3.5145686123111258`*^9, 3.514569718430114*^9, 
   3.5145697856654367`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%70", "//", "N"}]], "Input",
 CellChangeTimes->{{3.514569724334704*^9, 3.514569725859521*^9}, {
  3.514569789848123*^9, 3.514569790469406*^9}}],

Cell[BoxData["1.8150899971908525`"], "Output",
 CellChangeTimes->{3.51456972639741*^9, 3.514569791104388*^9}]
}, Open  ]],

Cell["Votes in original region with larger minimum m", "Text",
 CellChangeTimes->{{3.514567880585348*^9, 3.5145678956244926`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "mn", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", 
     FractionBox["503", "1024"]}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"-", "1"}], "<", "mn", "<", "1"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567540046863*^9, 3.514567608535253*^9}, {
   3.5145676463089867`*^9, 3.514567657873371*^9}, {3.514567711439807*^9, 
   3.5145677115808496`*^9}, {3.514567797416033*^9, 3.514567854465218*^9}, {
   3.514567900853138*^9, 3.514567903236125*^9}, {3.514567946020938*^9, 
   3.514567946305642*^9}, {3.514568038405254*^9, 3.514568049918542*^9}, 
   3.5145698378130217`*^9}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox[
      RowBox[{"1015", "-", 
       RowBox[{"512", " ", "mn"}]}], "1024"], 
     RowBox[{
      RowBox[{"-", "1"}], "<", "mn", "\[LessEqual]", 
      RowBox[{"-", 
       FractionBox["567", "1024"]}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        RowBox[{"3", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"-", 
       FractionBox["439", "1024"]}], "<", "mn", "<", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     FractionBox[
      RowBox[{"1", "-", "mn"}], "2"], 
     RowBox[{
      RowBox[{"mn", ">", 
       FractionBox["1", "16"]}], "||", 
      RowBox[{"mn", "\[LessEqual]", 
       RowBox[{"-", "1"}]}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"131", "-", 
        RowBox[{"256", " ", "mn"}], "+", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "3"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", "0"}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"131", "-", 
        RowBox[{"256", " ", "mn"}], "+", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "16"]}], "<", "mn", "<", "0"}], "||", 
      RowBox[{"0", "<", "mn", "<", 
       FractionBox["1", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "32"], " ", 
      RowBox[{"(", 
       RowBox[{"17", "-", 
        RowBox[{"16", " ", "mn"}], "+", 
        RowBox[{"192", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mn", "3"]}], "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", 
      RowBox[{"-", 
       FractionBox["1", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"123", "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{"mn", "\[Equal]", 
      FractionBox["1", "16"]}]},
    {
     FractionBox[
      RowBox[{"60947624353", "+", 
       RowBox[{"491659620352", " ", "mn"}], "+", 
       RowBox[{"1566025187328", " ", 
        SuperscriptBox["mn", "2"]}], "+", 
       RowBox[{"2160368549888", " ", 
        SuperscriptBox["mn", "3"]}], "+", 
       RowBox[{"1099511627776", " ", 
        SuperscriptBox["mn", "4"]}]}], "4294967296"], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514567715781971*^9, {3.514567836308359*^9, 3.514567865558774*^9}, 
   3.514567955971629*^9, 3.514569932424747*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"%72", "\[Equal]", 
    RowBox[{
     RowBox[{"3", "/", "4"}], 
     RowBox[{"(", 
      FractionBox["1527", "1024"], ")"}]}]}], "&&", 
   RowBox[{
    RowBox[{"-", "1"}], "<", "mn", "<", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514567982547263*^9, 3.514568020026978*^9}, {
  3.5145686220813723`*^9, 3.514568622958378*^9}, {3.514568677316608*^9, 
  3.5145686817384443`*^9}, {3.514569929721661*^9, 3.514570009916212*^9}}],

Cell[BoxData[
 RowBox[{"mn", "\[Equal]", 
  RowBox[{"-", 
   FractionBox["2533", "6144"]}]}]], "Output",
 CellChangeTimes->{{3.5145680129630632`*^9, 3.514568021346128*^9}, 
   3.514568627612714*^9, {3.514568678468893*^9, 3.514568682299019*^9}, {
   3.5145699444454412`*^9, 3.514569969159462*^9}, 3.5145700108010063`*^9}]
}, Open  ]],

Cell["Vote density in region with larger minimum", "Text",
 CellChangeTimes->{{3.5145682606152267`*^9, 3.514568269852763*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", 
       FractionBox["2533", "6144"]}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", 
      FractionBox["503", "1024"]}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       RowBox[{"-", 
        FractionBox["2533", "6144"]}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["503", "1024"], "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5145682965661173`*^9, 3.514568328011283*^9}, {
  3.514568710188011*^9, 3.514568720150096*^9}, {3.514569846134392*^9, 
  3.514569849671947*^9}, {3.514570026623452*^9, 3.514570039641562*^9}}],

Cell[BoxData[
 FractionBox["7036416", "4364531"]], "Output",
 CellChangeTimes->{3.514568332119948*^9, 3.51456872203837*^9, 
  3.514570042107518*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%76", "//", "N"}]], "Input",
 CellChangeTimes->{{3.514568734265972*^9, 3.5145687361519423`*^9}, {
  3.514570045394706*^9, 3.514570046515321*^9}}],

Cell[BoxData["1.6121814692116976`"], "Output",
 CellChangeTimes->{3.5145687378503523`*^9, 3.5145700482746067`*^9}]
}, Open  ]],

Cell["Votes in original region with smaller maximum b", "Text",
 CellChangeTimes->{{3.514568137085004*^9, 3.514568147971141*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "bx"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"0", "\[LessEqual]", "bx", "<", 
     FractionBox["503", "1024"]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145681669648933`*^9, 3.514568185623622*^9}, 
   3.514569857259177*^9}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["19", "16"], 
     RowBox[{"bx", "\[Equal]", 
      FractionBox["3", "16"]}]},
    {
     RowBox[{"1", "+", "bx"}], 
     RowBox[{
      RowBox[{
       FractionBox["1", "16"], "<", "bx", "<", 
       FractionBox["3", "16"]}], "||", 
      RowBox[{
       FractionBox["3", "16"], "<", "bx", "<", 
       FractionBox["503", "1024"]}]}]},
    {
     RowBox[{
      RowBox[{"25", " ", "bx"}], "-", 
      RowBox[{"2048", " ", 
       SuperscriptBox["bx", "3"]}]}], 
     RowBox[{"0", "<", "bx", "\[LessEqual]", 
      FractionBox["1", "16"]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.514568200182991*^9, 3.514570145121179*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"%39", "\[Equal]", 
   RowBox[{
    RowBox[{"3", "/", "4"}], 
    RowBox[{"(", 
     FractionBox["1527", "1024"], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145687690920563`*^9, 3.514568783747631*^9}, 
   3.514570156392661*^9}],

Cell[BoxData[
 RowBox[{"bx", "\[Equal]", 
  FractionBox["485", "4096"]}]], "Output",
 CellChangeTimes->{3.514568784396834*^9, 3.5145701604375267`*^9}]
}, Open  ]],

Cell["Find vote density in the region with the smaller maximum b", "Text",
 CellChangeTimes->{{3.5145689001757793`*^9, 3.5145689226679573`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0", ",", 
      FractionBox["485", "4096"]}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["485", "4096"], "-", "0"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.514568794319512*^9, 3.51456885079907*^9}, 
   3.514569882530201*^9, {3.514570181826721*^9, 3.514570188166952*^9}}],

Cell[BoxData[
 FractionBox["4581", "970"]], "Output",
 CellChangeTimes->{3.5145688218940973`*^9, 3.514568853209399*^9, 
  3.514570194260927*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%80", "//", "N"}]], "Input",
 CellChangeTimes->{{3.514568859287504*^9, 3.514568863266499*^9}, {
  3.5145702024933434`*^9, 3.5145702044153843`*^9}}],

Cell[BoxData["4.722680412371134`"], "Output",
 CellChangeTimes->{3.514568863754839*^9, 3.5145702055685873`*^9}]
}, Open  ]],

Cell["Now look at a region with a larger minimum", "Text",
 CellChangeTimes->{{3.5145702918131638`*^9, 3.514570301729013*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"votes", "[", 
    RowBox[{"m", ",", "b"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bn", ",", 
     FractionBox["503", "1024"]}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"0", "\[LessEqual]", "bn", "<", 
     FractionBox["503", "1024"]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5145681669648933`*^9, 3.514568185623622*^9}, {
  3.514568988053412*^9, 3.514569001846613*^9}, {3.514569889033374*^9, 
  3.514569892722393*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["439", "1024"], 
     RowBox[{"bn", "\[Equal]", 
      FractionBox["1", "16"]}]},
    {
     FractionBox[
      RowBox[{"503", "-", 
       RowBox[{"1024", " ", "bn"}]}], "1024"], 
     RowBox[{
      RowBox[{"bn", ">", 
       FractionBox["1", "16"]}], "||", 
      RowBox[{"bn", "<", "0"}]}]},
    {
     FractionBox[
      RowBox[{"1527", "-", 
       RowBox[{"25600", " ", "bn"}], "+", 
       RowBox[{"2097152", " ", 
        SuperscriptBox["bn", "3"]}]}], "1024"], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.5145690212713614`*^9, 3.514570315582917*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "[", 
   RowBox[{
    RowBox[{"%83", "\[Equal]", 
     RowBox[{
      RowBox[{"3", "/", "4"}], 
      RowBox[{"(", 
       FractionBox["1527", "1024"], ")"}]}]}], "&&", 
    RowBox[{"0", "<", "bn", "<", 
     RowBox[{"503", "/", "1024"}]}]}], "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.514569023351838*^9, 3.514569037501439*^9}, {
  3.514569082925016*^9, 3.5145690834622393`*^9}, {3.514570320702814*^9, 
  3.514570347941456*^9}}],

Cell[BoxData[
 RowBox[{"bn", "\[Equal]", "0.015199784447371146`"}]], "Output",
 CellChangeTimes->{
  3.51456903868073*^9, 3.514569084511571*^9, {3.514570327990343*^9, 
   3.514570348536626*^9}}]
}, Open  ]],

Cell["Find vote density in the region with the larger minimum b", "Text",
 CellChangeTimes->{{3.5145691043978786`*^9, 3.514569117425888*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{"votes", "[", 
     RowBox[{"m", ",", "b"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", 
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", "0.015199784447371146`", ",", 
      FractionBox["503", "1024"]}], "}"}]}], "]"}], "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}], ")"}], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["503", "1024"], "-", "0.015199784447371146`"}], ")"}]}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.514568794319512*^9, 3.51456885079907*^9}, {
  3.514569133296719*^9, 3.514569161652011*^9}, {3.514569898160653*^9, 
  3.514569900601233*^9}, {3.514570362678447*^9, 3.514570368322144*^9}}],

Cell[BoxData["1.174771006889986`"], "Output",
 CellChangeTimes->{3.514569176242408*^9, 3.514570373940201*^9}]
}, Open  ]],

Cell[TextData[{
 "So, the greatest vote-density comes from lowering the maximum b to ",
 Cell[BoxData[
  FractionBox["4581", "970"]], "Output",
  CellChangeTimes->{3.514568784396834*^9}]
}], "Text",
 CellChangeTimes->{{3.5145692024095488`*^9, 3.514569213174532*^9}, 
   3.514569362301866*^9, {3.514569411802883*^9, 3.514569413382333*^9}, 
   3.51457038742338*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Try and solve for solution to integral of one point's votes over rectangle\
\>", "Subsection",
 CellChangeTimes->{{3.514592717950259*^9, 3.514592746961364*^9}}],

Cell["\<\
I tried integrating the votes for two fixed points on a general grid, but it \
took a long time \[LongDash] my computer locked up while it was working.  \
I'll try below for the less ambitious case of one point, but with general \
coordinates.  \
\>", "Text",
 CellChangeTimes->{{3.514592751379963*^9, 3.514592762283296*^9}, {
  3.514592810233952*^9, 3.514592811783916*^9}, {3.514592842639776*^9, 
  3.514592907089058*^9}, {3.5145946013798313`*^9, 3.514594601522338*^9}}],

Cell["\<\
The general coordinates did not work (or more precisely took a long time, so \
I aborted them).  The equation for just a box with the kernel over the \
equation 1=m+b yields a giant piecewise function for integrals over a general \
box.  It is not too big to type in, but it is quite large.  There will be \
even more special cases for a general line.\
\>", "Text",
 CellChangeTimes->{{3.514594603938682*^9, 3.514594703460849*^9}, {
  3.514594808691963*^9, 3.514594850517898*^9}}],

Cell["\<\
Solving the sum of such integrals for a specific volume (needed to decide how \
much to cut from the side of the box each time) will be very ugly.\
\>", "Text",
 CellChangeTimes->{{3.514595001141597*^9, 3.514595060688501*^9}}],

Cell["\<\
Looking at the figure, we can probably decompose the complex formulae into \
integrating the non-zero part of the volume over one or two triangular \
regions+1(the area under a cross section) \[Cross] the length of the \
intersection that takes a whole cross-section\
\>", "Text",
 CellChangeTimes->{{3.5145952213446608`*^9, 3.51459538868827*^9}, {
  3.514595951217371*^9, 3.514595955895722*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pointVotes", "[", 
   RowBox[{"m_", ",", "b_", ",", "x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"unitquadhump", "[", 
   RowBox[{
    RowBox[{"y", "-", 
     RowBox[{"m", " ", "x"}], "-", "b"}], ",", "12"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.514592911639187*^9, 3.5145929856429443`*^9}, {
  3.5145932209992447`*^9, 3.5145932214277773`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pointVotes", "[", 
  RowBox[{"m", ",", "b", ",", "x", ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.514593199754238*^9, 3.5145932050971003`*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{"12", "-", 
      RowBox[{"3072", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "b"}], "-", 
          RowBox[{"m", " ", "x"}], "+", "y"}], ")"}], "2"]}]}], 
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{
        RowBox[{"-", "b"}], "-", 
        RowBox[{"m", " ", "x"}], "+", "y"}], "]"}], "\[LessEqual]", 
      FractionBox["1", "16"]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{{3.514593205685637*^9, 3.5145932240422487`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"pointVotes", "[", 
    RowBox[{"m", ",", "b", ",", "1", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<b\>\"", ",", "\"\<m\>\"", ",", "\"\<votes\>\""}], "}"}]}], 
   ",", 
   RowBox[{"PlotPoints", "\[Rule]", "40"}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5145948739959593`*^9, 3.514594896845595*^9}, {
  3.5145955013518267`*^9, 3.514595519006699*^9}, {3.514595625454623*^9, 
  3.514595674830947*^9}, {3.514595712524124*^9, 3.514595777769792*^9}, {
  3.514595868166141*^9, 3.514595918079055*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJx0nXmcT9X/x61JlpCsFVEIWbJvHbIWlaWUJUta0EJFCpVkX0IkRSVbRQll
ydJQdrIzdjNjNjNjRqJE5ec7836em9f9Tf/0+Dy9533PfZ/zOud971nunU/3
a/9stixZskwoniVL9mv/r39kUOzVq2kR/D+L/TehWqN5cV1SQ/zk6GzP7FiZ
EuLVTm0pu/SW5BAfXnvi6en9zoT4gYnt5w7dkRDi5eKK9nq6fHyIv9HwRJlW
78WG+Papc2LuPRUT4rclPz/nlgbRIX5iROeN5+89FS5njbimP8UdC/HyMf1+
Gfvp4RDfOfnyA48/fjDEX3Ejfy6db1+IVz5easThsb+G+Ov1ar3X76/NIb5+
+kPDb+izPsRvSYzI1mDp9yE+Y9zC7POafBKOw/h07pTXzPAT4nsyrhviozLK
GeINM+4rxN/MiEOIH8iIW4hXzYhziI/LqJcQj8uoxxAvnVHvIb4ro52E+NCM
dhXiFTPaYYgfzmi34fhktPNwnDN0EeIxGToK8ckZugtx+50Zj0CvcH4rR7/K
0a9y9Ksc/SpHv8rRr3L0qxz9Kke/oXKafpWjX+XoVzn6VY5+laNf5ehXOfpV
jn5DcTD9Kke/ytGvcvSrHP0qR7+hejf9Kke/ytGvcvSrHP0qR7/K0a9y9Ksc
/YbiY/oNxdn0qxz9Kke/ytFvJjwCXcKxU85v5ehXOfpVjn6Vo1/l6Fc5+lWO
fpWj31A5Tb/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/oTiYfpWjX+XoVzn6VY5+
laPfUL2bfpWjX+XoVzn6VY5+laNf5ehXOfpVjn5D8TH9huJs+lWOfpWjX+Xo
NxMegf7g6Fc5f6+c38rRr3L0qxz9Kke/ytGvcvSrHP2Gymn6VY5+laNf5ehX
OfpVjn6Vo1/l6Fc5+g3FwfSrHP0qR7/K0a9y9Ksc/Ybq3fSrHP0qR7/K0a9y
9Ksc/SpHv8rRr3L0G4qP6TcUZ9OvcvSrHP0qR7+Z8Ah0Bke/ytGvcvwq57dy
9Ksc/SpHv8rRr3L0qxz9hspp+lWOfpWjX+XoVzn6VY5+laNf5ehXOfoNxcH0
qxz9Kke/ytGvcvSrHP2G6t30qxz9Kke/ytGvcvSrHP0qR7/K0a9y9BuKj+k3
FGfTr3L0qxz9Kke/mfAI9ARHv8rRr3L0q5zrKee3cvSrHP0qR7/K0a9y9Bsq
p+lXOfpVjn6Vo1/l6Fc5+lWOfpWjX+XoNxQH069y9Ksc/SpHv8rRr3L0G6p3
069y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvKD6m31CcTb/K0a9y9Ksc/WbCI9AN
HP0qR7/K0a9y9Kuccijnt3L0qxz9Kke/ytFvqJymX+XoVzn6VY5+laNf5ehX
OfpVjn6Vo99QHEy/ytGvcvSrHP0qR7/K0W+o3k2/ytGvcvSrHP0qR7/K0a9y
9Ksc/SpHv6H4mH5DcTb9Kke/ytGvcvSbCY9AH3D0qxz9Kke/ytGvcvSrnPIp
57dy9Ksc/SpHv6Fymn6Vo1/l6Fc5+lWOfpWjX+XoVzn6VY5+Q3Ew/SpHv8rR
r3L0qxz9Kke/oXo3/SpHv8rRr3L0qxz9Kke/ytGvcvSrHP2G4mP6DcXZ9Ksc
/SpHv8rRbyY8Ah3A0a9y9Ksc/SpHv8rRr3L0q5xyK+e3cvSrHP2Gymn6VY5+
laNf5ehXOfpVjn6Vo1/l6Fc5+g3FwfSrHP0qR7/K0a9y9Ksc/Ybq3fSrHP0q
R7/K0a9y9Ksc/SpHv8rRr3L0G4qP6TcUZ9OvcvSrHP0qR7+Z8AjaOxz9Kke/
ytGvcvSrHP0qR7/K0a9y7kc5v5Wj31A5Tb/K0a9y9Ksc/SpHv8rRr3L0qxz9
Kke/oTiYfpWjX+XoVzn6VY5+laPfUL2bfpWjX+XoVzn6VY5+laNf5ehXOfpV
jn5D8TH9huJs+lWOfpWjX+XoNxMeQbuGo1/l6Fc5+lWOfpWjX+XoVzn6VY5+
lXOfyvkdKqfpVzn6VY5+laNf5ehXOfpVjn6Vo1/l6DcUB9OvcvSrHP0qR7/K
0a9y9Buqd9OvcvSrHP0qR7/K0a9y9Ksc/SpHv8rRbyg+pt9QnE2/ytGvcvSr
HP1mwiNov3A/fyTczx8J9/NHwv38kXA/fyTczx8J9/NHwv38kXA/fyTczx9p
OZk/Eu7nj4T7+SPhfv5IuJ8/Eu7nj4T7+SPhfv5IuJ8/0jgwfyTczx8J9/NH
wv38kXA/fyTczx9pvTN/JNzPHwn380fC/fyRcD9/JNzPHwn380fC/fyRcD9/
pPFh/kjjzPyRcD9/JNzPHwn380f/P4+gncLRr3L0qxz9Kke/ytGvcvSrHP0q
R7/K0a9y9Bsqp8VFOb+Vo1/l6Fc5+lWOfpWjX+XoVzn6DcXB9Ksc/SpHv8rR
r3L0qxz9hurd9Ksc/SpHv8rRr3L0qxz9Kke/ytGvcvQbio/pNxRn069y9Ksc
/SpHv5nwCNojHP0qR7/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/oXKafpUTL+X8
Vo5+laNf5ehXOfpVjn6Vo99QHEy/ytGvcvSrHP0qR7/K0W+o3k2/ytGvcvSr
HP0qR7/K0a9y9Ksc/SpHv6H4mH5DcTb9Kke/ytGvcvSbCY+g3cHRr3L0qxz9
Kke/ytGvcvSrHP0qR7/K0a9y9Bsqp+lXOfpVThyV81s5+lWOfpWjX+XoVzn6
DcXB9Ksc/SpHv8rRr3L0qxz9hurd9Ksc/SpHv8rRr3L0qxz9Kke/ytGvcvQb
io/pNxRn069y9Ksc/SpHv5nwCNoXHP0qR7/K0a9y9Ksc/SpHv8rRr3L0qxz9
Kke/oXKafpWjX+XoVznxVc5v5ehXOfpVjn6Vo99QHEy/ytGvcvSrHP0qR7/K
0W+o3k2/ytGvcvSrHP0qR7/K0a9y9Ksc/SpHv6H4mH5DcTb9Kke/ytGvcvSb
CY+gHcHRr3L0qxz9Kke/ytGvcvSrHP0qR7/K0a9y9Bsqp+lXOfpVjn6Vo1/l
xF05v5WjX+XoVzn6DcXB9Ksc/SpHv8rRr3L0qxz9hurd9Ksc/SpHv8rRr3L0
qxz9Kke/ytGvcvQbio/pNxRn069y9Ksc/SpHv5nwCNoLHP0qR7/K0a9y9Ksc
/SpHv8rRr3L0qxz9Kke/oXKafpWjX+XoVzn6VY5+lVMfyvmtHP0qR7+hOJh+
laNf5ehXOfpVjn6Vo99QvZt+laNf5ehXOfpVjn6Vo1/l6Fc5+lWOfkPxMf2G
4mz6VY5+laNf5eg3Ex5Bu4CjX+XoVzn6VY5+laNf5ehXOfpVjn6Vo1/l6DdU
TtOvcvSrHP0qR7/K0a9y9KucelLOb+XoNxQH069y9Ksc/SpHv8rRr3L0G6p3
069y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvKD6m31CcTb/K0a9y9Ksc/WbCI6h/
OPpVjn6Vo1/l6Fc5+lWOfpWjX+XoVzn6VY5+Q+U0/SpHv8rRr3L0qxz9Kke/
ytGvcupPOb9DcTD9Kke/ytGvcvSrHP0qR7+hejf9Kke/ytGvcvSrHP0qR7/K
0a9y9Ksc/YbiY/oNxdn0qxz9Kke/ytEv/Gr39aviLpZt7NdPWj1j79dPCvfr
J4X79ZPC/fpJ4X79pHC/flK4Xz8p3K+fFO7XTwr36ye1nKyfFO7XTwr36yeF
+/WTwv36SeF+/aRwv35SuF8/Kdyvn9Q4sH5SuF8/KdyvnxTu108K9+snhfv1
k1rvrJ8U7tdPCvfrJ4X79ZPC/fpJ4X79pHC/flK4Xz8p3K+f1PiwflLjzPpJ
4X79pHC/fpJ663GdTj2/sibpUMJ/9Et94gf9Kke/ytGvcvSrHP0qR7/K0a9y
9Ksc/SpHv6Fymn6Vo1/l6Fc5+lWOfpWjX+XoVzn6VY5+Q3Gw+lbOb+XoVzn6
VY5+laPfUL2bfpWjX+XoVzn6VY5+laNf5ehXOfpVjn5D8TH9huJs+lWOfuGF
TKfo159vdL1OQ37QL/UGR7/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvqJym
X+XoVzn6VY5+laNf5ehXOfpVjn6Vo99QHEy/ymkHyvmtHP0qR7/K0W+o3k2/
ytGvcvSrHP0qR7/K0a9y9Ksc/SpHv6H4mH5DcTb9wtEp+vXnjZlO0a/6Qb+Z
8AjqB45+laNf5ehXOfpVjn6Vo1/l6Fc5+lWOfpWj31A5Tb/K0a9y9Ksc/SpH
v8rRr3L0qxz9Kke/oTiYfpWjX+W0D+X8Vo5+laPfUL2bfpWjX+XoVzn6VY5+
laNf5ehXOfpVjn5D8TH9wtEp+vXn/5lO0a/6Qb/K0W8mPIJ6gKNf5ehXOfpV
jn6Vo1/l6Fc5+lWOfpWjX+XoN1RO069y9Ksc/SpHv8rRr3L0qxz9Kke/ytFv
KA6mX+XoVzn6VU67Uc5v5eg3VO+mX+XoVzn6VY5+laNf5ehXOfpVjn6Vo194
btMp+oUnmk7Rr/pBv8rRr3L0mwmPIN5w9Ksc/SpHv8rRr3L0qxz9Kke/ytGv
cvSrHP2Gymn6VY5+laNf5ehXOfpVjn6Vo1/l6Fc5+g3FwfSrHP0qR7/K0a9y
2pNyfofq3fSrHP0qR7/K0a9y9Ksc/SpHv8rRL5z3vegXft50in5DcTb9Kke/
ytGvcvSbCY8grnB/fp1wf36dcH9+nXB/fp1wf36dcH9+nXB/fp1wf36dcH9+
nXB/fp2Wk/PrhPvz64T78+uE+/PrhPvz64T78+uE+/PrhPvz64T78+s0Dpxf
J9yfXyfcn18n3J9fJ9yfXyfcn1+n9c75dcL9+XXC/fl1wv35dcL9+XXC/fl1
wv35dcbRqT+/zjg69efXaXw4v07jzPl1wv35dcL9+XXC/fl1/z+PIH5w9Ksc
/SpHv8rRr3L0qxz9Kke/ytGvcvSrHP2Gymn6VY5+laNf5ehXOfpVjn6Vo1/l
6Fc5+g3FwfSrHP0qR7/K0a9y9Ksc/Ybq3dqfcn4rR7/K0a9y9Ksc/cLRKfqF
o1P0q37Qbyg+pt9QnE2/ytGvcvSrHP1mwiOIExz9Kke/ytGvcvSrHP0qR7/K
0a9y9Ksc/SpHv6Fymn6Vo1/l6Fc5+lWOfpWjX+XoVzn6VY5+Q3Ew/SpHv8rR
r3L0qxz9Kke/oXo3/SqnXSrnt3L0qxz9wi+aTtEvnPlT9Kt+0K9y9BuKj+k3
FGfTr3L0qxz9Kke/mfAI4gFHv8rRr3L0qxz9Kke/ytGvcvSrHP0qR7/K0W+o
nKZf5ehXOfpVjn6Vo1/l6Fc5+lWOfpWj31AcTL/K0a9y9Ksc/SpHv8rRb6je
Tb/K0a9y2qtyfvP/c6ZT9AvPuTZDp+hX/aBf5ehXOfoNxcf0G4qz6Vc5+lWO
fpWj30x4BPcNR7/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvqJymX+XoVzn6
VY5+laNf5ehXOfpVjn6Vo99QHEy/ytGvcvSrHP0qR7/K0W+o3k2/ytGvcvQL
ZzylHXt70ym/1Q/6VY5+laNf5eg3FB/TbyjOpl/l6Fc5+lWOfjPhEdwfHP0q
R7/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/oXKafpWjX+XoVzn6VY5+laNf5ehX
OfpVjn5DcTD9Kke/ytGvcvSrHP0qR7+hejf9Kke/8MumU/QLJ+9Fv+qH9q2c
38rRr3L0qxz9huJj+g3F2fSrHP0qR7/K0W8mPIL7gKNf5ehXOfpVjn6Vo1/l
6Fc5+lWOfpWjX+XoN1RO069y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvKA6mX+Xo
Vzn6VY5+laNf5eg3VO+mXzjvkdAv/A/TKfpVP+hXOfpVTrtXzm/l6Fc5+g3F
x/QbirPpVzn6VY5+laPfTHgE5YWjX+XoVzn6VY5+laNf5ehXOfpVjn6Vo1/l
6DdUTtOvcvSrHP0qR7/K0a9y9Ksc/SpHv8rRbygOpl/l6Fc5+lWOfpWjX+Xo
F57D1jmgXzjve9Gv+kG/ytGvcvSrHP0qRw/K+a0c/YbiY/oNxdn0qxz9Kke/
ytFvJjyCcsHRr3L0qxz9Kke/ytGvcvSrHP0qR7/K0a9y9Bsqp+lXOfpVjn6V
o1/l6Fc5+lWOfpWjX+XoNxQH069y9Ksc/SpHv8rRL5z1SOgXnmI6Rb/qB/0q
R7/K0a9y9Ksc/SpHv8rRiXJ+h+Jj+g3F2fSrHP0qR7/K0W8mPILrw/36Z+F+
/bNwv/5ZuF//LNyvfxbu1z8L9+ufhfv1z8L9+mfhfv2zlpP1z8L9+mfhfv2z
cL/+Wbhf/yzcr38W7tc/C/frn4X79c8aB9Y/C/frn4X79c/C/fpn4/lNp379
s3HWDfr1z1rvrH8W7tc/C/frn4X79c/C/fpn4X79s3C//lm4X/8s3K9/1viw
/lnjzPpn4X79s3C//lm4X//8//MIrgP3+weF+/2Dwv3+QeF+/6Bwv39QuN8/
KNzvHxTu9w8K9/sHhfv9g1pO9g8K9/sHhfv9g8L9/kHhfv+gcL9/ULjfPyjc
7x8U7vcPahzYPyjc7x8U7vcPGmcdvt8/aDzGdOr3D4ofv39Q6539g8L9/kHh
fv+gcL9/ULjfPyjc7x8U7vcPCvf7B4X7/YPC/f5BjTP7B4X7/YPC/f5B4X7/
4P/PI/AHR7/K0a9y9Ksc/SpHv8rRr3L0qxz9Kke/ytFvqJymX+XoVzn6VY5+
laNf5ehXOfpVjn6Vo99QHEy/ytEvvJjpFP3C2S+DftUP+lWOfkP1bvpVjn6V
o1/l6Fc5+lWOfpWjX+XoVzn6VY5+Q3GmvxPOb+XoVzn6zYRH8Hdw9Ksc/SpH
v8rRr3L0qxz9Kke/ytGvcvSrHP2Gymn6VY5+laNf5ehXOfpVjn6Vo1/l6Fc5
+g3FwfQLL8m+NtMv/IjpFP2qH/SrHP0qR7+hejf9Kke/ytGvcvSrHP0qR7/K
0a9y9Ksc/YbiY/pVjn6Vo0Pl/FaOfjPhEfw7HP0qR7/K0a9y9Ksc/SpHv8rR
r3L0qxz9Kke/oXKafpWjX+XoVzn6VY5+laNf5ehXOfpVjn7hl2xeBv3C/2Zf
m+lX/aBf5ehXOfpVjn5D9W76VY5+laNf5ehXOfpVjn6Vo1/l6Fc5+g3Fx/Sr
HP0qR7/K0adyfv//cUhzP6bX/8IIeL30ejmbYTdsSUO1h/O+cXx6nJPdlQw/
Tv3AOc8HP3Dee5xI/53kktL/v9r7wT+c5zL8w09eN7+fFvKT0U4SXaX09vtL
oGu7LryQ3Bcc/1xX/byb3s7jXXS6v+2h68KJG9eFEweuq372p7f/OLczXWd7
QteF45/rwjXO6ufu9Ps57cql/39/6Lpw5m25Lvz6+aDEkJ9B6bqOccPT/+5Q
6Lpw/HNdOP65rvrZln4/Ue54+v0dDV0XzjourgtnfQjXVT910+v9hOP/el04
/rkuHP9cV/1wPfzpdeH45zf/Z70o11U/xIt/1+vC8c914ZQfv+qH+ub+9Lpw
6pfrwvHPddUP7ZX60evC8c914bQfrqt+0BvtS68LR19cF45/rqt+6C/Qh14X
nsf8c104+uW66of+Dn3rdeEFzD/XhceZf66rfuiv6Z/0uvBbzT/XhUeZf66r
ftL/uzauXDf+/Oe68BLmn+vCj5l/rqt+GOeuG8f+c134Teaf6/rxxPxzXfVz
OuN3BP+Hkycr5+8zsQ9x7LdnXD/E9Xxa7l/Hd/KEzMb9zM7PxH5GsyU5nul2
c+Pr6u8/ecJ1z/n/4djruX/X5SXX7BumXr32X3k/jvtzLIzTLjXfIF9Sjr2e
P0YcsMc/cfDnZBinnNjvvCv7HwOuxQEdar5BXpdZHqLnKRE37LkucfPnc0h5
1D9xyyw/UU5empl96PwfizP2Wi/+vBDjxFn9E+fM8hzl5NWZ2YfOLbH4Y095
iL8/v8Q48Vf/xD+zfEm5/y5bJvZ6DoD/LpvZUx7i789TMe6/yyb+iX9meZdy
nmsys9f9zsQfe8pD/P35LsaJv/on/pnlb8r9d2kzsdd9nf67tGZPeYi/P2/G
uP8urfgn/pnlgcp5rszMXvevEX/sKQ/x9+ffGCf+6p/4Z5ZPKsdvZva6T4f4
Y095iL8/j8c48Vf/xD+zvFQ59ZSZve5HoBzYUx7K4c8HMk781T/xzyy/VU67
z8xe110Tf+wpD/H35xUZp9zqn3Jnlicrpx/JzF7XlxJ/7CkP8ffnJ103Xp8K
+Sf+meXbyumXM7MPrUe1+PtxwMpD/P15TsaJv/on/pnl7coZ5zKz1/VCxB97
ykP8/flS141Th0P+iX9m+b/y688lCNvruojrzyVI9OUh/v68K+PXn0uQGGr/
mT1HKCffysw+NO9s8cee8hB/f/6WceKv/ol/Zs8jyslHM7PXeS7ijz3lIf7+
PDDjxF/9E//MnmuUk8dnZh+aL7D4Y095iL8/n4zx3eKv/ol/Zs9Hyq/fx/2f
9/P2nKP8+n3EYXt9z8n9wtfa88v1+4vT/H1Rj/7cNYkDPNby/+v3HaeF9JXZ
e1e157faEzfilIl96Hkts+dEfe6g/jTP9+1Vz1E0/fz/54AlhvJG+i/N0+h/
NS9i/NA8hPFPx33GQR1nGXd0XKOfD+0jsH41tC7a+rHQOkbrN7RfQqfaD6AL
1Z3Ub+i5WNtJgap9Hvtreprrlt5+x/n2+cyoKoVPnT/rjqSXa4nnK078vn/j
IymueXo81nl+Y60fpy5cmOQOp9fDJs87T3i7w+Qbzrj30+tlh+ffnG56y+tP
J7gy6fHf6/m/9XPv7/JTnHsrPc4HPG/7wa4PmpRgfW+k53POTG1f/vUYVyM9
bkF+e6Fxp0L59kW599Pjc9JzfvPvcP4ef9fn85GO68MpH+WFcz/cn7+u3T/x
8P4tXsQPTnyJN5z6oH7g1B/1Cef3qoy/8/pdfbR1zZSNqa5Zejua6+3z31fw
wt7SZ92k9Pa7wvMeYw99v3Josns7XTc/e74sauZrnx4+42qm63Gr5znq9qzx
Xs1El5Te3nZ73nFSud97T453e9L1FTyHfhWfvOyRlFhXKV1HwXPW5UZLX63Z
6rTp5YjnbT58/b4S86JddLoujgfjXXo7v/b8wP/JN8yOv7v+ufKI4zp+3Ldy
UC445eY+/Phr98l9++driwtxghNH4gon7tQDnPqjPqlH6o/61Pc5tIuqZ9+p
N/ifco3zZ/x9BP/XfiAzznV4L42dlufljPKHOOWgXPdaebBTe/op8o4xzTPG
2ev6u2vj6gHj6KFjuv04X37GI39+ntnTnzIOw9Eb94sfxi/yGspDf834DEfP
1Cd+GO8YN7Hnfv1+SssHuF/8R5XN4NQ3/QT+GVcYH/BPv0O7w55xlvEae+JG
ObkuccM/nPZKf4Z/xj/Gsbrmn/4RfWDvn2csT8Ce+FNOrkv88V/Z4oau6Hfx
zzjNeIt/+nF0jD15BflJouV7/jnBysl1iT/+4eif8QH/5BPkBfhnvKG/wZ58
hrwIe+rR75e16xJ//MPppxjH8E/eQ/6Cf8ZF+kXsyaPIx7CnHv0+Xbsu8ffP
/cbpTxlv8U9+Rp7FfAHjN/039uRv/ntlZk89+v3Bdl3ij3/ew9Pvkxdc3y+d
8u+j1pt/8grGGeyx899JM3vqkXJyXeLP38EZn7gO/vl77hv/Ph+ycRB77tN/
n83sqUfKWezujOtih3844yj1cH1/cti/XyI+1Ct/hz3tgPum/XA9rs91KR/+
z1l8uE/aKf5pf8Qb/7R74oq914m1C+ypD8pJvRB///7eOO0AHeMffdIeC1j/
Q79Au8OefgTd0F9Rj35+4Lr5o8Pe/7zr+qUjPl/FP/0XesU//Sa6xJ5+ln6l
jdlTj36/u12X+OMfTj/COID/68+3THRdzT/jCv0W9oxD9Lv9zZ569Pvs7brX
n4eZ6B7judv6WcZJ/DP+0d8zPjLu0q9jzzjtvzdo9tQj5WRcIP74hzMOkUfg
n/yA8XCJ+ee5gHEPe/Ibxu21Zk89Us5itBOLP/5zGGecJj/CP3kV+cJO80++
R16Q5b//Xcvb/P5Is6ceKeeFste/D8E/4z55DHkfrq8//y3Nt89sGflcBHmT
1hfl2Ulecd25cGm+nZDPab7Ke5PM8mfyUtaTXPf31+JRPaJvxTev5cOUj/ix
PgROvGubPeXDvrpw8ti7Ld/GD+2FdSDEEXvWrcFpRw2knPDSPF9YfeOfdXpw
4oof6hV7ONcl3qyXI27Yo2v8o8sDZk97xQ/3Baf+iSd+4CXtvtAV/rkvOO2U
8qMf7OFcl/bLfeGHfg6O/rGn/HB0Q/nxA6f89FP4xw8c3VNO+iPs8c916Q9o
P/hh3KD89KfY057h9EO0W/zAaVf0+/in/P552/pRykn/jj2c69K/8jyLH8Zh
7ovxCXv0C6dfp/z4gVN+xlH8Ewc44xJ+GC+xh3NdxivKjx/yGjjjPfaUH844
Wdn848evv7Pyk5fgHz9wxnnKSf6BPf65LuM/5cQPeSKc/Al7rgsn78A/fvw6
QSs/eR7+8QMnb6L85HPY45/rkk+xzhA/5N2Un3wUe9ZDwsnjypt//Pj3ylZ+
8mb8U344eSjlJD/GHs51yU9Z54kfni+4L/J77JPtunDyYsqPHzjlJz/HP3GA
k9fjh/wfe7h/b2t/R/n5zb/D/ftf+3euC+c6+MfOrwex8nP/+OecVbg/b8b8
cP/Y45/rEifijB///GLlp/6w5zw6OPXMdfED5z0b7Q//xAHOcw3thPaHPeXn
urRTztfCD/rgvtAP9td/PyXSPzdxXfzAaT/oH//EAc5zUBXzg/6xxz/XpZ9A
p/ihf+K+6L+w5/wiOP0c18UPvIKVn/4X/8QBznMT/Q/9L/aUn+vST3MeC34Y
H7gvxg/sGXfgjDNcFz9w+k/GP/wTBzjPWTXMD+Mf9vjnuoyTjLP4YXzmvhi/
see8CzjjPNfFD7yslZ/8A//EAc5zGXkC+Qf296Ffuy55Cvv38UN+xH2RP2FP
3gInz+K6+IGTP5D/4Z84wHmOq0s7tPwP+1q0f7sueSJ5Gn7IT7kv8lfsi9t1
4eS59cw/fuB3WPnJv/Ff0PzA/T4k6tHyb+zrGOe6/n2zlRM/PDecMs5zAvZ3
2HXhPH+Q9+LHzxtY+Xkuwj/r0uF+PYP54bkIe+LDdXl+irdy4ofnmzTjPNdh
T73Dec6j/eMHfhf5pz1/4j+n+eH5E15d4qDzyNjpOgE48z9wnoczm4/W52ix
D61D0OdrOPfHOIVfnpfpx6gn4qTPodw3z03Unz9n2jjtFXt97kMH+KEd+3Op
Zf5L54nQM370uYx+Aj/o3J9vfd24Hzx/6fMR/SXx8fPT9jwFp3/HXp9TGDew
p9/35/8Z998jNnt9XmD8xA/jnz8v0DjjPfaat5NHYE8e4M8XNH79eURHQvkz
+RR5IPmQ/x6OcfI/7DWPJa/EnrzQn79i3K9/NXvNJ8kDKT/5pP/ejnHKh73m
deRj+CGvIx7kjcQLe82vyIuubyeRPh/DP/WHveY55Cf4Ic+hvZBH0Z6w13yD
PIH2T75B+8U/7Rt7HfcZr0sRZxv30RN5BXrDXsdfxs3biY+Nv/48dfJD6xew
byDjIONXCbNnHKQfwj/9FPaNZDxiHClj9oxH/lwF4/S/mc3vh/a5Wz+L/1oy
3uGnv72vk3HE++HveV/rxwW7H8Y9OPHiOnDqQ+fHqW+dp6af1/lx2pnOI9Of
6/w17VvneemfdX4ZXek8LP2wzv+iZ50npb/V+Vn6EZ3HpF/V+VP6L51npP/U
+U3+XucB/ToqmX+kfDpPx9/r/CD3r/NolE/n74ivznNx/zq/Rv3pPBTx1fkv
2ofOE1F/Oj/FuK7zOLQPnT8iL9F5Ftqfzu+Q9+g8CO1b51/Qg86D+PNTTEf0
A3eNLtbw8cfPuph0f8v9+qJHqpff2eWngGtexHXw8/rJE1fqL0125dPve4P3
M3tMyvgmJVI8x48/b9PuA7611tw1pfMluRPp9bPF+zl/amnr8q8HnH6e/pr4
4afExN5DbuiT6Kam3/cu76dZnUF58u0LuOY/1Bv8xdh7G6RsjHfz0ttzsJ5t
+vsNd5y/N8FzzX/8+Gb8pwa/X95b+lp7bfC/dhvse0qMyzr+8NiAa/5DO4UX
mLpq9cqhp619Buvl6jfa8tBPcQEnT2C8Rx/4eTrprcGfHo62dhisr5swbcJN
85rEeK75D7qE/9Ckaf33akZZ/x+sxzuZ3G772E8DrvkP/cF9xvOmt+MTrnbj
fknT+wXr93qlt/uAk7eQ/9DPUJ6l6Xo74mITv6649JZgvV+GPo96ThzIf+h/
8J/RLxxyH0yJ7btjZbA+8Nv0fiTSc/IW8h/6JfxfSe+/9rvG9UstiusSrCds
n369A57T3sh/6K/w3yS9n93tUmM6JV+9Gqw7/TM9jns8J28h/6Efw/+4dL1s
c7PGT6tUYl6wXrFuevvY4bl/vrD8h/4N/wfS29XP7qGau1+o2SpY3zg8vd1u
9Jz3A+Q/9Hv4b5ge/1Xu0vHc3zySEqyDnZFev2s8p58h/6E/xP/s9HIucPNH
NkvpPTlYJ9kxPQ7feo49+Qx5Sjl5jvbncFuew299/qWf5e/qyno/eJ8vsnYc
v+/2xpeP9Mz7+tNpbt/Y//HBfr6Yfpzx4YCs04PPMz/0z9y3zufSPzOfDiff
vGH5sCVT/uOHetD5Ssa3A7JOD0556Ofxo/Ow9POsf4CTR1Me/NC+dP6R8Zny
8LwMpzyMF/jJLfOqjBeUB87zwV1WHvygG51PJL9g3QjP3fDRVh7GHfxQ7+iT
cYf5bjjPPZQHP/QHOj9IfkQ75PkdTjtk/MKPznsyfrHuCM7zXBMrD37o53S+
j/yO8vAeAE55GAfxo/OYjIOUB85zKuXBD/23zt+Rn1Ie3ifAKQ/jKX4uyrwk
4ynlgfP83d3Kgx/GJZ2PI79OlHV68DZWHsZl/CTLPCPjMuvo4LxXoDz4YbzV
+TXy/xmyTs+/J7HyML7jR+cN+X9vKw+/8TfUyoMf8gjK49f9W7nWyzo9OPEh
T8DPZZkHJB7EB068iQ9+yI90/ot6o76obzjlId/Az1WZ16O9sL4RTntsa+XB
D3mfzmfRrgvIOj047Zm8BT/M76Ar9LTzunXFkX6eC33hh3xW56fQfV1Zpwen
POQ/+Mkt8270N6xvhNOf3WflwQ95us430S92lXV6cPpn8ij85Jd5NPpj+mc4
/T39M354/tD5I8aNMbJODz7JykM+hp9CMi/GeMW6NTjjYWErD354rtL5IMbV
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
N1H5tQzeu1arlXftTHLjG377eeOcq4L+f9PkjcuKBefAcN14Gx9Tcie9syX7
cpdjXIuj9yzN6tctf/jNgWHVpq1xXY1X3nSuaOSI4HyYaudeXNzomp9GNzSv
/OrcVNei7pmmN769Nmg/r7w2b36LM66ivcel/D9OyDfopgpnXNYmG9rmnhqs
f6t2e8cRMwYE58P4uFl/XeCvx5q823mje3JsRnmG3bYicm1Uivd/OC2jPFOe
uinliasp7vD9p8q8tHuj939sa91nxs8Jzochbnlj99U+916CW356UbtXywa6
fm9AyWZv7wnOh6E8jCtbZ7oHkpK2+/Lse23IR3MaXnv+5NwCK0/0D7sXNeqS
7KZEbyt7qHuwrq9y6X/LvvJv8F0M/HdvMOOPg6fiXN9R09sf+z5Yv3doR1T2
ZyoH58Ngz/jnSn34xdfr9vjy3LWj8RNjZgTztpSnRt4PXyi78owr90DnD0pd
Cvqrtwf9crpj5+B8GOpryQdPrVjTINZNm7b+njJlgn7snrILfnlwTHA+DPHk
uWhCzZ8+yZHzgKs2ZsuvVw5mbfxGmRuKvnwhmLcdZuUZ2atzpdy3JLrhU3cX
eqxxsC5xz64xcxuuCM6HoTzZk8q8/sVHMS4lrtbCjn2D/nPI4Bfeqxob7apZ
PkN5yCf+3PDOnEKPRPr4bH9zx6EObYPzYSjP4dWlklNfjncnY5tNHTMmWPd4
d7lHepUpFJwPg//HmyTWGv17lGtVZ1HF8cuCfnvX3mpNb20cnA+DPc+lHW65
WKbl9KO+PLfvnTy93jfBvC3lqVgobuGB7bGuXu3Vt6zbE5yffPZyuRYFjp8M
zis2/49W75J85LOTbu6Y0osiLgfrJ137lJx/1Dnh4snfzJ78bMkzfecOOXnC
l+flCh07lrox+N4H7Wdon4V9V5c77aaNrjrtt2JB/jD166Wbjk0NzofB/4VT
cX3nd7yWf5zdfuvgO4NxKjbLoJEb0o74vJH2zO9cx9IKPjn1mr2V5+d3ShbJ
+UxwPgzx2bu+X8XZw6PdwBfb3zR1yX++P/Jkw+Zftg7OhyH+M97vn9Q//2G3
+MOcHadtCsbHsd9lzTnxy+B8GMpPvrv8vYrtX60T48tz9+INiw6+E5wPk8P6
w2bV+h7Is+6Uu+vWiQ99+1iQLx29YcvGV7MH58Nwvw0aXenTcPMB1/X+xtMX
9wnG5crdJox4svt+N8TaC+2f9tS98rMfTDh22vfb27q2qfRFnePeP+WJPXmh
Q+SA427/ui3jtlwK/A9b3q7Z/Wv2+nlV4hOXPPJMrrev5WMJgw9tzRfkA3vz
Fs1xV9HgfBjiw3ulmw9+vm/BO9f8WHxezRO58MW0w26f+ae+xk18Z/+cykfc
u89l2xE9K/Dfcuuq0bfE73TDbF51vd1vvlp37lvwwk63YtLyIqeXBnlI0utN
c536dFtw7qWVh/5o3VtHC20om+Dr65bVPSvW/fKg9098qja8qcPLsQdd1Zsb
5fm7cZCXTrh716iFj2+2/iTRx6fzB7X3Njq2yfWse67jP48H+U/1A0/e8Hq+
4HyYFCs//XXvcrd2OLYl0R238izvnfJ19u7B+TCU50DStH31Zu1zx1YOal0k
LvC/NOeWPO+Ni7D+IclFmf/Gpz6a/fWHP7lC0RU/Kno5yJ/PP338phKXV/nn
IMrDeFZ096NTL76Q5PX+Y5XU9p/du8v7X2/1de4+N++mr3a5cT2Wja82Nsjr
qq7/LffSPsvcBL4zYP4PffzzZ5EDlrp1Y5+NrP5ZkO8VapC/0ORlX9r8RYov
P+P9z4PG7b+5QIqrZu357/HZ29f6dIv3T/upN/mxuV8U3erq5j6746F7g/z/
ctIrpYeW/dDVt3nVreb/1XbLXyvSdop7+b7ZRds8EOSZr7wdM+HzNwb484Tr
Wv2SJ/UvvemWij+c9fp66EyxdjvzbrD+8Kz7xsoz4myfOXVHb3BxS8vnfXZv
4L9nxdPxO7p/HkGeRfvJFrN724yPv4goeezoE8/F/+c7nhO7zt586QeH/Qzz
//WH/z7w+dnlbkrnp9u8MzDIV/m90P4dXsL85rTrwF+y+//Q4gGnno5bvcEL
WHt60NoXvJe1+ydNB/BYu/8xFg/4StNtAdMxvI7VXwOrTzj9Dv0QnPZHe4R3
sX6zsfWj8BOmH/QEp99nHPDt2fRPfwBn3PLjmP1H/0V/BmfcZRyG77P+N9H6
Yzh5A3kEnPGD8QRO3kMeBGf8YzyET7W87TvL4+BTbPx+y8ZzOHkneSic/IN8
BL7C8uZ8lkf7+Fv+RD4Fv9o4I+9fY88B8GGW/5EPwnme4fkGXt7y1/ssn4Xf
b89RRey5yt+v5d/k496/Pb/xPOfLb88Pk+x5At7WnnMa2nMPfEHzZVc+WJLq
xuy+ueL5JyZFfDXytw/7N8rW+NKsQWveyHvWJUwv9+aXL8xxf4/I4K0vNBzS
rfe1fnly75/md1zhsozK4J+2znbtOfnac1PyHVFr1mxwbc1P2pwtl+8pneji
J+aOvqvNVm/f+PKE1TcPjXefVLsQPfH4Lu9/Wrv2gy9Gxrov+/R7ZciKfY7y
JHxV9Npz/mmXfU3sb9/9e9D7qZflxF/rJ0W77nk7vxrb4ojnt37X7LWHI0+5
dU/tPl9s0nF3wPystt+F7d8pZzf7e/xxXa7H9fEz38pHeSsY/9jup6ndX2Er
D/dPPPBT2eJF/LhumsX3IYv3bOMXrD7+svpZa7yP1R/1udV483evbJreMNWl
9iz0Qc9Ja11U9N+DWn2dtfGMw+tHDp2R4hbt/31b8cMbPf+l+qjmT19Ickfe
Orl9eO8drsDsK+m84ejWOVu1PeMmToiNG/j3Hlc3JsO+6PFH+3ZYlOD+PRy5
5OIDB9yeAVv7nW+YrfG6OodG3HJjvPv7vt3xJydEuh6fZ/i5b+LMZn/1inVf
DGv2/C0Hj3o/PeJ75DgVEeO+P/hjQsvbT7pVZh/ZoNzGjSWj3aIpRWv+tCzK
27crF5nr8bSTrlP99gMOd4xxzxj/80DP0aW/POZynZ7ww/nLp11e4zPfS7kh
pdth98P4LRfyfh7n7S/VGjRqZZGD7v7a2WqVb5rgrxsblfWG93btdQVONBzY
JCHRX/edcsXzfJr3Vzdz9KDlXcYnuTfMvsvQKjfVHLrZvVhl2cWBVVPcBYtn
2+9HF5oeGeGKR6bUmrz/rI9zZP/9f25bFsznkifcs3XGyu/yB+/P4UNLdRv0
Yd/g/Tn819fL1hmyOZiH5f1GqV2Jf/QoE7w/hw+4e/GKFm8H78/xs2noa69X
PhrMn/LcVOxA3dqFagfvz+F9K/178c8pwftz+Bs5R7+w5lhwDiT8zh8KJo+a
etS/PycPWf/0rL7tW0f6/Bz7XgXLJ92e/YDPk8kzc69f2ufM6uCcQPx0PvHG
vj5xwXl98Pn139+b5fGN/v15MfLVqi2/qDp2jX9/jv3fH+8uOXt4mqtXr9OE
XX/M8/1h29+mHRt58qwr0qL5iccrjfQ6ndOq88wX6qe4vsevDH5zwne+/7nw
eaku7aYnudk1OkTkT1jr7Vv+GVuizvlEN6rhtB7nsm/y9jMeWXj0tkcSXJNT
b/fsNG2Ht0+e3++TbAvj3OX1Nav3LLTX84b/1OycmDPWdSy0cOmHnQ/4fmzy
Y5eL7+oZ45b2KnXf9jmR3j5mUcSR79dFuZuXT1v2b9K153e7bu8bbqpRo8ZJ
x/+xz292/B3lxC/XoR9rb+W438pFeSg394H/Rnaf3Hdv46MtLs0tTg2Nz7U4
Elf6t5cs7l9YPcww/pjV06NWbxuN17d6pZ7xc9Ouae998Urw/pbxcZX95t/h
+4fu/OGl2QsiLt72xKbIWWnujZez125yW7bG5ZudXLQgOc0lHGs6sc7oRRHE
7Yc3B/Wa9nlq6Ht/sZY3d76Us8CqGxZ4/suzre65oXea25w7+vcOHeZG1DT/
T93duenoX8PfCx4yc+4LE1qmum8Lffhx3U7P+OvesLdh2cFXUkLfAWQdZ+sH
P9j1XfIwz4usy3cm+Zezrk6Ocq7xj+Md1/1uaKnsL92TEvre387zvSu9OjfF
La9XcHCBv7/y9f5khWynuz+RHJo3HGfPRe1uf/TPSUMXe9678P6v9pZKcX/l
XJ378kdL/HWzHYj9uf3IJJco6ypLPVQl+YmrSa5FzIn7j372o29XC9/ZMqf5
92dC85In7fkwx4Gh/xTvHrzvXfvCjN4rhyS57q0n5dm5ap2bYNdNrn2kSbOk
1NB6zj4p3S7d3z/VLe2zat7Lsatdm/esvVVaOLxudKJ/r4v9q1/8vrBRlzPu
wNROpQ91/8XH559DE56udHNiaJ6U5+q1eb++ejEieA+c75enKnwamej6tFp2
w+4XN/n4NHz/s6wVW5wNXXdt07tW3bUzxX0Q2aLD7Gwb3aXhGdddMLzfA3c0
SvDve317u7Sqb9mVCe6D2s3udOe2+XK2rdK+TMEX4kPztryPeOu7qVm6tw3e
D3cvUTZxeI2Ea+PCrFx1/9nhyzk5rteGm+ckh65788wz1/LpZNd8cPXHck/d
7sv515Ga2XJ8HP7+cpG2b1fMfUu8m/ti0YKPNd4T9MMji8b8sTk2NI/Me6Jb
74nI8sy5/8xzvZL4Ze9JcS55c9MRe1rs9eWMaXjPuxf/ORO6bvfzi+uce++M
ezf/+xV/nLLH13vr6pc3nLkQ/o5z3y+bJqW+HOv+XTdhypgx+33/efH48S+O
lzkdmtfm/dcrg2u+O6Nu8DyYfdu3zz+SfNq1KPZjjpyTDrjjL2WUs9a01MbH
OoW/+7z0wQF/HjyV4I53z77o7JH9vpyfjYl4d3fb8PegV/9747XnohjX9eZs
hdbtORSMUzXn9Pz57eC9NPa8N9yz4+usvw4L3jN3LP1a+ZotY9ycPlVG1ouM
9PEcnfx9lg3Lw9+PzvlFvZVrGsS72kvfqFSmTKSv999OjWiy/Jsod1K+u5ev
464+q8tFu5U9Bn3wW7GjPp41i+5+oO3yU6F5f963Vrm91PCs2wI/Xw+qm1B8
bpT7e/XcnC+XOubLefSBN9cvKBj+DvUTl/699rwa66ZkS13Use9RH89RL0/L
VrvgydB399Z1Lt+hcc5TrvCylELlep7w42Pkpk4/l3zpePAe2/7j7/EH//PT
Kw9f/eeEeyJv8VFznj/pelg5K39y/7AJL4W/Z/31oxtrj/49xp3t0Kvy+GUn
fDm5f/3u3jO5l+3Ls+6YW5l16YPfPhaM728PiG2ScNeR0LoI4nLe6gc+s82o
X7cvP+qOVGn5XnJklLvRyvnOb9kbv7otOnTdKwvG/vHio9FufvsXD3V/K8rX
O+1Jv7uXe1XD9pEDDrteC5PHbrkU7YZZPMuU7bdh2fGDoXUatDPaO9xdKfDw
9Jci3ejId3/JOTTGl3Nvq21Xn7g7/H3tWX9/+uL8jqdchysLigy+M8bNtnIO
NH3qd/e+eW7L3jmVD7qCHcptj5512vefm/f+1fjtafv8+3Ds0e1D1n/A476e
ubPn3QdcjWFrs5cuHet+ML23aHz7O0OynTC9B/YNF1VI6Z//uMs6L7rjtE2n
fb3T3+l399rf2r7dy7F7XcSVHjf93TjIxw5lyf3u1Bm7QutY6Afpj+HjnyzX
5t4Te1x0hT+b1t8Y5+OZmPrlvy1WH7H+LbCP7fT9Cw03H3bftbnto8V94nw8
X7XxQ7+7lzj6xy9eq/ure2nezIeKxMX7eN7W7Y5hFW/cGvpuFOPKlza+wZ/K
//RHv92zw03aW33EY70T3DmL5/uf3vd2oVcP+ffq2I+98f7kXG8fdF0vdozc
mi/BbbVyLrfxmPfq2NeM2zX7pq82u5IPHxpXbWyij+cza2q8s2HQhtA6n3ts
nCZfgH/6wqDpYz7e6NzgFze+nPeML+e9bdb9c+Ke/aHr3rtya9/9tfa53J9N
KXp6aaIrbfV+ZX9GfkO+g/3QB2I//6Loerf9YoEdD92b5PX+ZPUP/l6ya3lo
3RH5FvkX/PCU4pVcobXubJkvc4xdkuTzpcUXJ11u/8tu/x4e+/k7FhxodOxX
t7LFzif+eTzJRVk8b7P8j/fkPv7u90av5P/eDfqsdZ5n9ya7HyyeqyLfvLiu
yxeh73yxLmGx5afwPTPGtD8a8637ZEd0s7mPpfh+PqX9/L/O3LctdN2UCmv3
H3hoi3s27YYZRS8n+34prlVGfsz7eeyHJw46N3TFR65sy1Gt3xl41j1p5bzj
uZ637dwxJfS9v3//t53+nSUNr8vfr/13qt+515flfsu1HHDbyHWXzrrSVs5a
S1ZfGjbn59B1a4/au++F1etdoRlNDlf/7Kyv99fs+YH38NiXuvdEkR07Z0Xs
TVs//uPiab59Ur8pludi32bq6m25X1nlXhrc/HC+iFR3/KnVqx64Vp7SJWen
Vb1rlYsV/7m2/Do352M/uPWNhxZr80Ca+8biFmG/s9m/0y/tsXIUtnJRnrss
jm9aXOG0g8nWLmi3W60dv2Xtmv6hhOmwtukSP8SrvsWP+qV/SbX+Bv+0gyRr
F5SffpN+FP+0b9o7/gvZeMD4gD26rWo6pj9knGPc477oj+if8M/4zXhO+ZdY
P3va+t1WZk9eQp5CebLY+NHExhPv3/It8i/yGcZFxknKTx5JXol/xnvGf/yT
H/exfBn7FMtjFlpegz15P88B5APkZ+Rr6GKyPc9ssucb4lPX8s4clofiP8qe
016x5zbsj1k+vczya/zz/Mnz6DQrD88JPDdg/7U9J/9qz80jeE9rzz88D9FP
TrXneZ7v93C/9ly3zp7zxpj99/ZcynNqZbtuarWdW7q/lepmvL19SvdC0/17
hiZjpoxufiTFXZo+bmBi/8+8rqed6tiyUq1kVyW5Tqm8637wPL72bbkKTjnj
HpkxqkBa6n++a/l+9OY/UhJcjgavFHzynS1BnhC3YNTxVvFu3YkuhTbcHMx/
HW/4Youf58W6uo3n5r61bfC8Vm1a9Ru+ynLaTZ1SbNyDM/7zXcvkPzZN7Brt
zsdMvOntqOB5ZMHIN/Ik9D/lHq2ZffyyCsH81MP2m3+H/2Z/jz841+P6cMpH
eeFr7X4m2P3BuX/i4ctj8Uqw+MErWXyJN7zIRxn14ax+4Mut/tKsPuEbEmNH
7ymZ6lrw3ckpg7/93/vMX5ovbLliUHB+SOL8N9L5rZ/2yzVrf3COB/zH1Jpb
3q0anKeBn52pf4x6fnxwrkXlbjPT35fmnRvR4uGE4HyJxgsy/Cy5MOKGGk1j
La845v0sa/fQ5mKfB+ctcN0n5t486t/LwbkHsZMz7B+9+PX4rd8G5w/0Nj8X
5tbMM+3Z4BwA/P/xVMS47rcfDvYvmP+GWR+6qdLBYF889lHfHRj7x4Rgfzo8
97qfCo0Yu9PvX6hgvF2JAwVL/hXs14ZXStt35zN7f/L7F/ob/27gk2X35lnq
ziSN+6r9ojT3pOkx4ex9rSrVOuuiq+S9ZVS3n/34Ur/5pWvtI9nN3PvHLWmp
W32/OnHWui1/pJxxHQZEF37ynd2+Pz/5+/DRx1slupF54sdF5drv+7FqrVu1
/HlevIvq2iXPrW0Pef7unHy5vsoS5xot3jP+wRlH/HUP/rVv88Sup91HV5vn
fTvquL9u+XYzRr22Ktq98dVTLToVjvL2/Obf4fw9/sifG9j13rPrwykf5aWc
I+x+uD849088uhonXsTvB+MnLL5nLN70qwO2/NMt9+k09/XqeQNenbfYzatz
94MXC1zrP9/qUrJ4njT3xKJnnlhTcIX72/gisxtof9fbOPsoHnotf+xDG9Lc
PFuX0tp+8++sVyneKNtXJ84G+8Fp5yfL911UakCa+7tT2qFR25b563Yt1vSu
+rNWumnTXxrT/EiqH0eG2D4NXedf9WLE8iP70tzJf+ovuvve4HumRaIT9j7U
Ic1Nlv1TP03YvrTRu6mupexzLxQ76ZWyJ1LC50A2eLx67nrh7wau+qDEb6nT
wt/vS6rzT4kxFxJc7wFfflJnaPBeq2uT+f1Xtwl/z27xjL7VZn8V9BvwrOeq
nhuZI/x9t8daXvzuhR7h76y1aTTw1Jw3wt87S0u+2u3lauHvjk37ZNzJeomH
Q+ci1n/w1m45Zx8MnX945M/PT+x5Ivw9rGwPP766bqldofMMWyzs++Pu97eE
zy3MNWzVc/+uD32naUSbkQMjqqS61F/ubf3p02N8Pb5UsFLuvz5MdZMLVt2a
a/sYPy9wYO5DteaPS3FJxU8t+bvCvKB+e5/bevK3FDdy82cFy9w8z78/rHDl
5ovj4pNc933NOrettdLbF16/fMzGh5Pd11/Nu6lXhZUuyvwPbn/wh/4PnHEJ
efJVKVgpWP/8TNEhrRZ+fcbl+bPhqE/u+tk/Z+38+pMBHT9LcJ8t/rPK4DXB
OpmVLze+cXLORPfLx+VHZ1++1T8/3pG1R82Gl+Ncx3YxVU+3DtYP596cc+vA
nvHuzYaFxrzYfLf33+/Juy/c2THW5R78XLFyqUH+0On2HaO7rIt1M/q9vTEp
aZ8bY/f783dJ3+daFuOe3nFsRufawXvIbwdMbtmk+Gl3Yf3vzUrVOOT9F861
5LWz+aLdT7e1Kz7p7WCdzNUdj+cqPzDatS3UZ1OHIUe8/Z61Sc8t2H/SFX95
88e/bA7ykPktar9ffM4pt6jXyeZjfjnufjD7118YGP/K+GPux1O35xuaK2i3
rS6uzxfX6bgbfvSeXidzRvn6uq1ElucaNT3snhvz5MPTFwV5y9m5rScuKXjE
VXvvmbmXvo7272FWbx0Xd+OVA65I9akTlzwa5DMftD+Ud+i2g+5kpc9PF3rk
tC//04NuffbAsr3ulyO//rr990AXtbL2nNDy3X1uwoEjZe89H+v939Sm8TZ3
cKd7ZfiN+eM+CvKfZd0ji5Z7dZdr+FbhZ1pOj/f32/Hrx7cearbZ3VGp6SNX
GwTvMa6uTSmyLnqLS7j70Xk96yf6598H8x16/1jvCLd9/1vvF48K9NWqRLYi
j7Xb4D7cNTZ2yMkzvvy/bskyMXerZW7w0FW7aowI8qjSaVUqHnp3uWs6aONd
04cne/t7ci+ufHLWNHfP3b/nf6RCoLsuHb5ve+PPs925UlefWVLurFvPe5i8
Xx7tE/95xIFf7320987U/7Tn1GfrXP0gYtbWevO3b0/1723ol9mPhf2GXU9f
KjElzS04t3vr7Kil7sZuGc/X7zeduajPY9f8/vPzkpt+D9atFS5XYVWWs2dd
3trzt7+aNcLbR33S44VHl6S4Gne26ZSaO5g/eu6ts4PiW6W4tY0aPVem4GbX
1ezvO393pVp5k93ZX2p3fuKTYD3bjweW1dk5L8m9FlX++fFf7PT+33swOalE
7zOu4/eT7+3xYdCf5678xp9Ls5xxM5rkrnl5xl7v/71++4+N2JLgDtV4/8GW
h4J+vvt7jVZ+1DXBpXzw9g9Vog94+/KXBvaNLxXv8nccUmXb3UE+v/RotkFv
rYpzD8X+XrPXPYd9eYY82qDiziGx7rkvzy3+56VgXMh239bavQrHuq9r9Vn+
0SvHvP3OBVmSlkbGuM2Xnq1634r/jBdjJ/7Rqn+Myz76ZK2dP5709qX/3fT1
RzWiXf75Z5+ocTXQ45dR7VdU2Rnlqqbc0yVL1mhvH7OwyP7Ld5xy6x6uMOPh
ucH48lu/aikV2p50J6Y9M7PE/BhXzezHdPqi/eZDx1zfP54+/HzLQF/T71jz
woVcx9z4Rp8fq/lgrPdf5cbK+6a8f9gV/fzTYsOT/zMe/do8OSIi0tWLP1Ly
0bNx3n7PihXtnmpx0G1uefjJWZOCcer0kD19xw864GLfL9y1z5QEX54BzzbZ
W+HfvW7AuUIfr6gR6GtkxS5JHavuddPqPDrrvVpn/PufWhVmfJH4wq/uzo8f
PrInMhjX2i/bsb/Zrh3ugaixxz89kuTtB4/8dvY7xza7PU3GFE8eEox3n94c
ve9Yo00ubczG21a9leLOmf2mmJ8/L9J6vRua9HOnnKUDfW07kjI3rvM6N7P6
1a777kx1X1n5W4w8k/Dio2luxYjV27NW/MqPjxN3VEi7ofC3EZXLtO438LMg
L6pov5+2f/fxNJ0+YfuxXrR9WIctf6pi+RT2K2w9QCPb77XK1usenT3nw51Z
0ly3FbMfe7NecC73jOOLv2y/6Fr/Un3YloLr+ns/b71ZoGqXy2fd9hznuxSd
+rq3573hDFvny3r7ypeef3xZ17Puu3bl1y4sPSHIr2oMeL5urhT35+RPGrbo
9I3ne/ccTG3cMcXd9lDlYk36fRm8J7f3p7faumbW57/96L23zliV7L6p2rlT
wrzgnPBG4+uVv6NXkjszsUzpgQ+v8bxMhZmLyy1LcjP6Jk989XCwb4v3yBds
HTfl37fg/IG3Cie5AgOrdvlxU5Bnrjr7dYP+61Ld94sernZoYeB/csy/8dkj
Et2XZ65MLlsnmAcf8E6Pl/PmP+MuPBHVcs7fQR7Ce/aqtp6d65b5d+W0Xv0T
XdOnhi9u/lqQx7Y4Ed1w06NnnfvphfZfXtzgddS+8Q/b/l1x1r06/p9T1dKC
9cB5m/e78njxs27iGwWLH3g2KE90vY0LzpRIcD0mxE+ZsCWY195y6O4q5/sk
uB8ub2+VZ2KwP8t/J4J9AFbO1x9/67EHd8a7v66++N3i7EH/PKPml38vXJTs
/uzRsUOBUVt9Oed99ObY2EIprmKVxKiP3wnyq26zaq5pMDDZPVDy7+KN/gjK
U2PK2Od2vx7nxn/Ue9vlRcG8dskqyWcjN8W5pbuO3rU6f8CZB2L/BOXc8s0D
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
ouNWv3uOv9rj2Tqb3OXk6V//FhuUh/WT79g5OuznqjygQMSlh9e5r6btPZNn
bOD/jMXnXjsHaI+V5zN7X3/U3t8zD8X7t6q2jg8/zAf0sfkBv1/A3qd9b+sT
sWe+oYzNP2DP+7Gutu4S+49sPuMBm9/Anvdaz9l6UuyZL2H+BHveL7FOFvv6
zMfY/Az2vOc5YOt/sWe+h/kf5qF437LB1jVjz3wS80v4570H67Wxr2rzVWk2
f4U97x9Yh479ezYf1tLmx7BnX+JxW1+P/Vc23zbP5t8oP8/jNWzfAPbtbD6P
+T3W2/NczH4I7JkvZP7Qz8Pa8yn7PLCfZfORzE9iz3Mi+1ewH2rzncx/0j55
Xmtn+3KwZz6V+VX2o/HcxH4j7PPafC3zt34e055f2EeFPfPBhWx+uDHt2fJM
9nthP8zmmyNs/hn/5PM5bF8a9iNtPvtlm98eYfbk1eyfw77RA217182V6m5d
c+/dcyv/5NeHTPr41gp39Epxbti7U1cv2OTXpcScO5qQPSLJXSzz4rSydXZ6
XrPV7C/PlLjWDz696KHNvfZ6P6M+f/b53a8nuBo/lN5xedEBz4/+UbH88n1x
7v2c01tXvRDp18lUeuRc/CdVYl1yxzw7ezU85vk785cvGDYuxj3w1bA2M0ac
9H72/j34uefioxz/Zz1PS7N7y/6OdTIp5pfr4J9yUC445eY+WDfCfXLflOeS
xYU4wZtZHCdbXPFf0OJ+v9VDonHaQxM7N5T6ivlo1Y7Xy6W5Xp0Pf/fF08F8
AeuMW9u6Y97PkIfXtHXQ2G+w57oO9pyHPeu5Wd+NPc+rPL9izzp11q1jz3M4
z+VL7PmxCt+lsvX42K+w9wsP2PsG7NnPwD4D7HPZe5NP7T0K783I89k/gT3v
gy7b+yHsyTPZF4I977l478X9kjey3wV73t/xPg//5IHs48Ge95K8p8Q/eR37
k7DnfSvvX3kPQ57Gvivsz9h75Ch7r8x7MPIu9pNhz/vxCfa+POq6+Ox37JPD
vqa9929g8wDcL3kR+/+w/9bmM5jfaMX8u+U57GvEnnka5m1uM3vylvttvyb2
TWz+ifko3lecs/3D5Ww/MevAazdN2d2hbfDdkJT1Gesbx36ydFK9b4LvhsCP
/vb6o6VuTPbfDWm2IYNXebDhzTmfOeP+sO+GYL++9e6f1qwPvhsy790Z5z+P
ztrYXdj8/p6S8bYOKtI1/OPNdPu7Hp3wyIpBwXdD8D9oQbv8s/bHuKftuyHw
OpeL7Hq3avDdEPwUnLuq5O4ip/x3Q3ob/75d05mf7Aq+G7Le+Lu5dpV4blTw
3ZBi5v/fxU9+Uv3+g/67Ifif/dTp4v9cDL4bMs34hGLH75vS5Vf/3RDs9w38
rXqFHcF3QyhPif03VI+ov95/NwTOd0M6L1je8023zl2a8sZbrldW/92E9wZu
Wnp3tU3utk8yON9NmFVsybL31+/w9nw34c2nfj0ypMJeN8DsUw7Xf2TUVwmu
9U/j5uR/8IA7/OdPvd4vn81/N6FqllVHY1dFenu+m7Cu3b1dimf93zrZDL7S
vptQfO6cYw8/eNLNM853E+pfzlNlw9Yob893ExLntHj52Isxvpx8N2F663cX
XywQ6znfTWh6YU3qzcvjPOe7CYdn/VGlYqcEX06+m/BZ8+r9mv2T6O1j7bsJ
bVJf+K7bF0meV7HvJsRMX5D2RvMUd+7jDM53Exa46KpTz5x1da38Ez7Kfa5H
mTR/zjbt8PHomkv+dx4r8/9t3dmD/zuXtXTlX04NyrvEn+ONLvjNv8OTbV3v
fFvn6/cz2vnhZ7Lt6FHguxW+3j+0dZzdbV0n4ynv6Rg/eW763c4X2GrnDZBH
sV+oRf+M/UPkhzNtv9MO2/8EZ78W+7fg7DebZ/vP/HOQ7ZfrZPvnyJ/Z78f+
P/9cY/sV2b+IPfst2X/pn1Nsv+hntn8Uzn5X9r+Sh1+2/boLbf8u9uw3Zv8x
nP3SOWz/NJz93uz/Zj1bKduv3s32r2+18ve2/fZ5bf8999XDzgtYbecHwM/b
+QV97DyDVub/fjtPgfMVKM82O99ho5330NV4iTrZ5g7dvsKdH3nbW6d+T/Xj
zi0nExOuXk1m3a9/PoVPyHh+9Twl47sOIXu42m9K2J569erpkD1c7e27GCF7
uNpnfGciMmQPV3uX8X3NkD1c7Zul84iQPVztM/6bt1bt4WpfLcOPU3u42tey
74OqPVztz2TEIWQPV/u69l0StYer/S8Z9Riyh6t9kn0XRO3hal8wox2G7OFq
T7s9mfEeJdQ+ldMOldPelNOulNN+lNNOlGf8N2+tcupdOfWrnHpUTn0pp16U
E3/lxFk5ca6W8f4pFGflxFk5cVZOnJUTZ+XEWTlxVk6clRNn5cRZOXFWTpyV
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
89FzerUd1cL76Z6/sv3mrUY0mc5fzFvt/p5LvC9p9twtzh4+q8l0/nmndT+b
1rbJdP5k205j267l/W7tr2q5yyGHNJnOq1y5809G7Ob9a9F/32Q6n9GpWfO1
3vC+pOxfNp3/ctVaBw5q1mQ6Rx93k+k8bN76N7fo1mQ6Zz+06fzQdhstGNq7
yXTmX9W5R+fXT+/cw/uSttz+0236d/b+r+OKvmTvS9ptwJfnNzvV+7/Oe+ft
b7uO8r6kXm9/9+zA4d7/lfu3mc7PDJw8aenW3peU/eOm8/R33li77wnel/RY
5IOYzh9uP+fQr4d6X1L2l5vOKw18958XTfa+pJN2ePD/Go9cbDrfes1NW7Ya
4X1JF1/9+CenDFpsOj+y4O99hs/yvqTB88d1WTJhsek8aYe7nmq71mLT+Z7O
Ey7t/fVi0zn35zCd13l30FWzBnpfUvbvm86b7njz60c+431JzSKfxXTuds0/
N5i/1PuSsl/fdP7DgpHHntBxsek85to+f5w8ZpHpzL+q8+vv9nuo55JFpnP0
0y8ynRt3/OuX09p6/9eG151yYbNTF5nO31wzsHLIId7/lfuamM4n7NRr72ca
vS8p908wnc+/7ui/7dZqkel8WOTjmM7XvXfiWxN6LjKdc/8D0/nuLmds3KP/
ItN5tfd36jiqhfd/7dp14/saj/S+pE12bujduYf3f/X622bLThnkfUldrt97
zJiLvP/r9Pe37rZkgvcl7b+w5/ddR3n/V+5raDo/9rfWq47YzfuScv8K0/nl
99sd0LGv9yXdG/lEpvP8nbcYdu+93pc0fqf9jvx6qPd/fXn9dvO3nu99SUd2
++7fQ3s3ms6Dbnj/tMljvC+pz6CfbdNqRKPpHPtAeF/SwMY1zx8+q9F0frrb
sm+mtW00nW/ruv6zbdfy/q/c39F0bvbBghcHDve+pNw/xHRuvcuin6/1hvcl
/TfyoUzn7W74pNegZo2mc+7PYTrv8+8vbmvRrdF0fuDGF0ZeNHmh6fzeon9t
MarFQtOZf1Xnb3476pzOPRaaznN3eWPH/p29/2vtwWOfHHPRQtP50xtmX9Ls
VO//6hD7D5nOh+068sreX3tfUu7fYjqfOfiB15ZuvdB07hn5XKZz/0WP/bLv
CQtN59zvxHT++2/HHfP10IWm8/cfDjj5hI7e/9W5offiob29L2mDyqAHG4/0
/q/9i/1LvC9p65uGfXHKIO//On7xxf2Gz/K+pN0/vG3XJRO8/6tv7NtkOt87
5PS9DjnE+5Jy/xzT+dnF51w/a6D3Jd0e+Wim85uVfjOPfMb7ksbG/jGmc9NN
f2kzf6n3JR20W8/NevRfYDqvVYzbvS/p1KGHnDV5zALTmX9V58s+Omp0zyUL
TOdHd+vetX/nBabzkIYTv5vW1vu/cr8r0/nr4n3E+5Jy/yLTuX3xfuF9SUsj
n8507jisMnS3VgtM59yPx3SuLNnrnQk9F5jOexfj+bdN50eK8eQ80/n8Ynz+
jun8bjHvMc90jvfKd0znNYv3mrdN59eK98R3TOcdY58w0/m2Ypw8z3Q+LvaP
Mp1fKsa980znqyMf0HT+rHhfm2c6PxH7G5nOHYr3r7dN5yXFOHOO6XxoMc6Z
bTpvVIwb55jOMf8523Tep3jf8f6vh4vx9mzTuU/x/uL9X3NjfzXTuXsxfvO+
pBgPzzGdzyzGY7NN520in9F0vqV4j5htOud+Uabzy8V7wRzT+YZi/POW6RzP
X+9Ler4Yz7xlOm9ZrIPMNJ35V3WOceBM07llMa72/q8Y1800nWNc4X1JMU57
y3RerxgneF9S9OO/ZTrH+Ham6fzT2H/LdD6rGK/ONJ13LJ7L003nO4rngvcl
xXN2huk8tVj39L6kwcX4cIbpHOOT6aZzjPe8/yv2KZ9uOl9XPO+8LynyPWeY
zrH/mfcl/TlyjU3nhcW4a7rpnPuZmc4tinHUdNN5bvG8mGo6x344r5nOaxT3
/2mm8+JiPu1103mnYtwyzXTmX9X5hGIcMs10fiX2QTSdI5/U+5Iid3Wq6Ty2
uK++Zjq3iXxY03ntYjzwuun8u9gfznQeWzzfp5rOKxX3sVdM55mFjyaZzscX
96XJpnPn4r34JdP5yeJ5+qrpPLC4n79sOse8n/d/xT79r5jODxb3h0mm8/ax
f6PpvHLh95dM5ysjn9d0Prx4Tr1sOud+e6bzE8Vz52XTeb/CXxNM56gned50
vq/wywTT+ZJifDvedF6l2w/3+Ymm8/TiPjPedD6suG97/9fmse+m6fxVcd16
X1Lkm08wnWOc/7zpPDXykU3nu4r753jTOfcvNJ1/uusP98MXTOdfF+f9KdM5
3nMfN50/LM7jONM586ZN538U959nTOeuxfU/1nTmX9X5/dhn3XTuX+j5mOkc
+dFPmc7xvB5tOneOfGrTeU7h6zGm86exH6TpfGvh0ydM5wuK47nPdJ5c3A9v
N52/Kr7/IdN5j+J6u8t03qbwxSjT+ZbivIw0nd8qrvNHTOePM39SdT6s0Ge4
6bx7wR8wnS8qfHen6Twp8spd5+J6u9t07l98zyOm8xHF9XOP6bxo4A/Hf5rp
3KbQbXBFdb6g4P1N58MKHa4uP4/Oqw774fgHmc7Ni8/3Kz9fzj8X+g81nWv/
rep8VHy+/J6yrr7oD+pnOo8r9BxUfh6dX4vjN51/Er+3/Dw6HxH6mM6rDyj0
LD9f9i+E/iVH53PjfJnO4+L8lhydx2Z+vercK66fkqNz67jeTOc14/osOfq+
mPkSqvOEuP5N53PCLyWv3XdllOkc+0DfVfLyeg7/ms4PhN9Nz6vjvmF6Lsh9
Z1XPyXFfMj07xH3M9GwZ9z3Ts1/u86x6nh33VdNzauZdqJ78q3puFvd503NA
PBdMz3jfGe16xnPHdPu2GOe/YLptlvv4qm5/j+em6fZSPGdNt93juWy69cl9
sFW3j+O5b7q1yf25VbeeMa4w3V6OcYjp9k3xfjrRdIt5vPGm210xLjLdRsW4
y3Sbl/siq24HxbjOdLskxoGm21ddinGj6fbr3CdcdRsR41LTbUbug666rRLj
XtPt0hgnm24Px7jadNsqxuGm2+Exbi8598OvOxfjf9PzsXhfMD33yf2nVc9V
433E9GwV7y+m54PxvmN6fpr7q6ueR8T7lOk5MfehVz2Pjvc105N/Vc/t433Q
9Hwv3h9Nz+bxvml6zor3VtMz1gumm54jcp9v1XN+vEebnufFe7fp+Ui8p5ue
++a+9KrngJgHMD3bZg6A6jk25hlMzy9iXsL0vD7mMUzPV2Pew3TrFPMqpttp
MQ9jun3fJfZNV926xjyP6TY15oVMt7ViHsl0G5n79qtuC2OeynS7MPMWVLcW
MQ9muh0Y82amG/+qPtfF/J7pMzHmA02fI3K/edVnSMw3mj5bxvyk6XNKzGea
Pj/J/ALVZ9eYLzV9ZmZ+hepzVszHmj73x/yt6bNHzPfaOOQPMZ9sui2K+WfT
rW3MV5tuj+f+/arbpzEfbrpdGfPnptsLMd9uuh2V+Q6q2y0xn2+6bZc5Iarb
y7FeYLo1i/UF0+2fsR5h97FzY13D9Hww1kFMz+6xbmJ6/jbWWUzP5pmToHpu
Gus4pmfc/xeYnm1incj0nJu5GKrnZ7EO5ePnzGlRPW+MdS7Tc1Ssi5meF8c6
mun5x1iPMz1Xi/U70/OAWO8zPT+K9UHTc3TmUaie02P90fS8LdYrTc+nY33T
9ByYeSKq5z2xfmp6nps5OapnQ6zPmp7HxHqu6bllrP9Wttin3TGHPfOLsp/o
F7GObHp2inVn0/N/sU5tet4S69qm54mZ+6F6/iXWzU3P/WOd3fQ8PdblTc8u
mcOievaKdX/Ts13mFKmeH0ddgek2O+oTKuPvePLzP/9vs1K38v1YdFsQdRGm
231RR2G67R11F6bbepmjorptE3UdpluM8xtNtw2jbsR0a8ycGtVtlahLMd2m
Zh6U6vaPqHuxccjIqKsx//4p6nBMtxjPeL/V4VHnY7p9HnVBpttzUUdkur0d
dUem2z1Rp2S6TYq6JtNtcOb4qG6PRN2U6XZJ5m6pbvtGXZZdbztEfZfpeXDU
g5meG0f9mOm5S9SbmZ6rRn2a6XlX1LOZnmdl/o/qeU3Uy5mevaK+zvQ8L+rx
TM/dMv9I9Twu6v1Mz60y90z1/CrqCU3PhVGXaHrGOsUi03NK1D2anvyrej4e
dZWm50FRh2l6bpQ5S6rnzlHnaXquEnWhpmf7qCM1PT/J3CjV8+dRp2p6zsnc
OdVzZNTBVlbdf+7Vv/+4bdk3dEPU05qeUQ/gfVgXRr2u6Xlz1Peanv8v6oFN
z+8HFPXDpucrmWelen4Q9cmmZ9SfeN/QtKh/Nj2HZ96W6jku6qtNt4OjTrty
U/Nt3z3zqw6lbpWo9zbdog7B+61+HfXkptteUX9uuvGv6vZA1LebbhdkPpjq
NiTq5023qHtpMt0ujfp8022/zCNT3U6L+n/TbaXoI7DxTLxHVL8HPZuiT8H0
jPqfJtPzreiDMD2jDsf7rZ6NPgvT8/DoyzA922Uel+q5e/R9mJ5rRJ+I6blV
9JWYnl9GH4rpdn/0uZhuUzLvS3W7OfpoTLeoO/K+qr9Gn47pdmf09Zhup0cf
kPFbZP4fPibnsdc77rmxjZ+3b+D7W8a6rX1+vViXrCx8avHMD5Z/vqzbkflJ
jn+xzPPU5oDMts9/K++h6Plk1P0aXyLjKPgpUY9deejsJU9cMqV12T94a44f
muXvhf8y6uQr2x5y3kfLvtm05D3y+bg4f285LyT3+fgf9WxNxnepw2P+7ZPK
PcfG8cAXJV89jxOdF/evXS+rue9c9vAuep1MyJw75etcUbtOAdd9w+Bbynw4
f/ddme8t99WU+dVyPwqZRy33VZZ5zrKfJfnYpmc3evqSjuX1+VXUfdnn19ip
dt6M623zqPsyPk/mzcp6tjr74fxV5sHK75H5H37XTjK/Ad9S5gfK90SZByjr
/OW9nr8L79x06c79/lfdb+GrqPe2z/9e3u+4nteMem/ju8r7Hbze/g+b5vvd
4tWnzm+1a8fyeDaV9z6+Z7q818Dpr3+41w5Dxi0/72U/mozn4RfK+Jb788ky
jq3dH2mR/d1zov/L+AgZh8T/RowbkDnDyq+vw+v1O1+Tnz/3zlv3PebZjuV9
5po637Oz3E94vm8QfZTGH5XnlOTi2ffDOy+/Wr//vmND7T4//jyqtx9XvX1X
6vWtt476lspZ3Qfte8by8Ru8d/79XfJ48NEzUedZGbr6tmetOD+wNK8LPl/W
CbNfnfyuDdmvLnlZzxD1eJVvNztu3tLlzwX4Qfk7+Dy/t7zfCG/If/k8OvyH
98Xk/N75c2vXx/m73G+vkXmk0bI+wucflvWX8jjzvvSffD6izwsybwafKfNv
fM8ImX+TPgL7Hvz+1pK2C5/ap1WpA77+Tb7vcF7I5f7uiGPWPrWxWcnXl/ep
ch/I3Efiv+2f/8W/n/tl+f2t5b2P65w+9Bf3eHiVE49Zu/x+/NXmyON7rLNT
iwY+z/U/+9ja5/JJuf6+Sp6X8nmd6+9jv9xiyCtjqtfznrnu/2neJzlfn+d6
7loyHts812HPzfNVzjPk/op//duQPz305+r12SvXMZty3AL/JNcfd85xDtfP
urlOtEbqX44/83l3YMef9LypW9Vfs/K5eU7er+Bn5HrKowfv0HzU8uPhergx
1xE+T92kPr/ypHD29Wr57Glb/HmF59oXOX/+s3Hxu6SforJh8jJ3IOctv8vv
L3NMcv7z/LzPlPto5Xzd0qdqv2fbnPe7sjJo20OW68N19WzOd63cMe4P5fpO
zmtdnucFfmbO59xzxenrX7HCuJTn0T9SN67D8fmeu35eD/D/5fv4TXnfg9+X
75utrh096djl1yHXbZe8n2+U9xl49stXNkyduT6zDrPcxwnO+HClj4+9/ofz
Xs7P5DryA/m8rt0HZnbl0NzHA8746tymje9rvcI4Id/PKl3kvp39a5Un0kfo
lv2wlcdzfIgO2fddOTKvW46zInUm8HOkPoTj6SLrhtLvYOO6l2VdjOOfIvOZ
Ze6nzIty/G3kOQ4/VN5/y/tM1rFMSB3gJ2Y9zK9yfMjvbZd1CyPyeuP4e+T6
5tYynvws/bW++OvAHE9+1xTXA+flo/w7W8tzdnTO//TO885xZj1q5ZTHzn7w
zK3alnx81k399OYFo4b03qTk3aPeuDI6/Vj2NWR9zrL2P/3i3OX3czjvL+Pb
N2zw3CPtSj4s64smpA7oc2vWpRy3ZzwXynF7vkese9GBjz+9/Hvge+S6/Dd5
n4Gfkuv7ffI+AN8w+oAqB6RP4b/L9d9XO8Txw3m/aLNs8bCzt6ren29nvTvP
C3x8rptfe82QQ29erluZhxX9XJWe3eN3lffb5Dfnc7DMucj1Ao6H89s957f3
TX3g2TddefTdre5/Z/nzl/vM4HzOzsrPw5/MeY8N7lip1zVv/Kr8u9lfXLms
QzzHuX4m5bzQf/P8ln0uu0adxsEdann2oVQ65vfwe/eNPs3Kgk3j82WfaXJ+
Lzz7Oiu98vMcZ/YvV57I6wod/pnzqy3zezj+3Pej8tnSOI98D+s+j8r9/+yc
r5uXzyP4ZTnvd26eX34v+wP3Ef6P6N+pfPj4ZQ/fsFxn+P3JOyTn97IP5CDh
7ZIfm7ysV78p6jMHiF+GZZ3M/XJdtcp1zztl3HV6zj9flt9T9uX96+4JF17s
49g7ZZxZ7ieW+3jPmbLf9f2Wjxtr94OaV2kux/PIstPOPOH/fL31W6lHLfcx
q7N/+P5fT7x51sAZlZ/tceMGu362aqnDzP/csVq3UfPs+G+sM34+Kq+3vdvW
+u61L//TY8kEf1+eJ+sI+Ou69N1j3Wt/73e5Xtkwe49Cn7K+MeeNj3ovePkc
iXp4+7ufHNTyiw2m+Hri1ZuP6bPprdMrt005vsO8TVcu/+7kHU46/u1O71U+
2mP01X3arlzq0+2h+79qvHW6fc8TA5rGPnrSDNO5y5lDztjz1rmV087s8Na5
y78H3b77cuuDn+7k75sP3/HoMU2d/l15Ytc/tp+7afXzO5z2t5uuuNX39R3c
cHiH6zr5c7lD36kftnutqfL4/Z2ufPHllUp93jy28x0Xbj+psuTZD+Yf2WXl
8rpdZeSyGw+a/FJl7tbXrvXHX61c6nxUly97HzrF11+Gtf927EGv329/d/Cg
/ff65fY/Mt/7yR1D2g8bVek0dcCyae2qf7fvXa2HvtF5kn1+/EYbj7vzlZfs
997xs0tf+vBV34d2es+NOm2y/eLKXpN/cekPvws9V1/9pke2XH78y05q0e+U
X1X5AY9vdcHkTn4dHrfpEd2vmuLrAkv23uSerU72uqDBp7c/6bNOH1fmn3PF
7F02r56vtr8779MpJ82rHHhhi6UPtq9eV/+cNnDOO682Vlr99c5C/zLv483N
22445d3K0IkLV3q4ffV6u6vtJQu6njyjcsyoYbPX3XHlBnLodd8hcuuVk6eu
nPxv5eRVKydfWTl5wMrJr1VO3qpy8kGVk2dpx5n5i8rJC1ROvp1y8tiUkx+m
nLwr5eQzKSdPSDn5N6ZD5rUoJ19EOe85yrnvK+c9XDnPYzvvOV+mnPci5ewb
rpz3ZOU8v5UzH6ec+Vzl7BurnPlZ0yfnX0znnO9TznyocuZl6vjROP7V/ZTw
r3L8qxz/Kse/yvGvcvyrHP8qx7/K8a9y/GvHmf5Vjn+V41/l+Fc5/lWOf5Xj
X+X4Vzn+NR3Sv8rxr3L8qxz/Kse/yvGvnff0r3L8qxz/Kse/yvGvcvyrHP8q
x7/K8a/pk/41ndO/yvGvcvxbx4/G8a/uX4R/leNf5fhXOf5Vjn+V41/l+Fc5
/lWOf5XjXzvO9K9y/Ksc/yrHv8rxr3L8qxz/Kse/yvGv6ZD+VY5/leNf5fjX
9rlK/yrHv3be07/K8a9y/Ksc/yrHv8rxr3L8qxz/Kse/pk/613RO/yrHv8rx
bx0/Gse/ui8T/lWOf5XjX+X4Vzn+VY5/leNf5fhXOf5Vjn/tONO/yvGvcvyr
HP8qx7/K8a9y/Ksc/yrHv6ZD+lc5/lWOf5XjX+X4Vzn+tfOe/lWOf5XjX+X4
Vzn+VY5/leNf5fhXOf41fdK/pnP6Vzn+VY5/6/jROP7VfZDwr3L8qxz/Kse/
yvGvcvyrHP8qx7/K8a9y/GvHmf5Vjn+V41/l+Fc5/lWOf5XjX+X4Vzn+NR3S
v8rxr3L8qxz/Kse/yvGvnff0r3L8qxz/Kse/yvGvcvyrHP8qx7/K8a/pk/41
ndO/yvGvcvxbx4/G8a/u74R/leNf5fhXOf5Vjn+V41/l+Fc5/lWOf5XjXzvO
9K9y/Ksc/yrHv8rxr3L8qxz/Kse/yvGv6ZD+VY5/leNf5fhXOf5Vjn/tvKd/
leNf5fhXOf5Vjn+V41/l+Fc5/lWOf02f9K/pnP5Vjn+V4986fjSOf3U/Jfyr
HP8qx7/K8a9y/Ksc/yrHv8rxr3L8qxz/2nGmf5XjX+X4Vzn+VY5/leNf5fhX
Of5Vjn9Nh/SvcvyrHP8qx7/K8a9y/GvnPf2rHP8qx7/K8a9y/Ksc/yrHv8rx
r3L8a/qkf03n9K9y/Ksc/9bxo3H8G/9V3ScK/yrHv8rxr3L8qxz/Kse/yvGv
cvyrHP8qx792nOlf5fhXOf5Vjn+V41/l+Fc5/lWOf5XjX9Mh/au8Nre+ymv7
KKq8tm6gymtzsqu8Nu95hfNeU29d5bV9C1Vemztb5bX5qVVemwNa5bX13FVe
2w9Q5bW5g1Vem5+3gj41OXAr6FxTL17ltfX0VY4fdZ8r/KgcPyrHj8rxo3L8
qBw/KsePyvGjcvyoHD/acaYfleNH5fhROX5Ujh+V40fl+FE5flSOH02H9KNy
/KgcPyrHj8rxo3L8aOc9/agcPyrHj8rxo3L8qBw/KsePyvGjcvyoHB/pvlL4
SDk+Uo6PlOMj5fhIOT5Sjo+U4yPl+Eg5PrLjTB8px0fK8ZFyfKQcHynHR8rx
kXJ8pBwfmQ7pI+X4SDk+Uo6PlOMj5fjIznv6SDk+Uo6PlOMj5fhIOT5Sjo9M
n3weKed5pJzxZB0fGcd3ul8WvlOO75TjO+X4Tjm+U47vlOM75fhOOb5Tju/s
ONN3yvGdcnynHN8px3fK8Z1yfKcc3ynHd6ZD+k45vlOO75TjO+X4Tjm+s/Oe
vlOO75TjO+X4zo4zx3X2e9NHyvGRcnxUxxfG8RH1gPJ54/hIOT5Sjo+U4yPl
+Eg5PlKOj5TjI+X4yI4zfaQcHynHR8rxkXJ8pBwfKcdHyvGRcnxkOqSPlOMj
5fhIOT5Sjo+U4yM77+kj5fhIOX6Bt84+LJ5TZe5u1tvznNLv4TmlnPGecsZ7
pkP61PRMnyrHp8rxaR3fGcenuq8XPlWOT5XjU+X4VDk+VY5PleNT5fhUOT5V
jk/tONOnyvGpcnyqHJ8qx6fK8alyfKocnyrHp6ZD+lQ5PlWOT5XjU+X4VDk+
Uo6PlOMj5fhIOT6y40wf2e9NHynHR8rxUR1fGMdHul8WPlKOj5TjI+X4SDk+
Uo6PlOMj5fhIOT5Sjo/sONNHyvGRcnykHB8px0fK8ZFyfKQcHynHR6ZD+kg5
PlKOj5TjI+X4qNzvJPsWed7Bz8j+Mp53+j0875QzblTOc1A5/lWOf5XjX+X4
Vzn+NX3Sv6Zz+lc5/lWOf+v40Tj+1f3E8K9y/Ksc/yrHv8rxr3L8qxz/Kse/
yvGvcvxrx5n+VY5/leNf5fhXOf5Vjn+V41/b5y39qxz/KsdHpn/6SDk+Uo6P
lOMj5fhIOT5Sjo+U4yPl+Eg5PlKOj5TjI+X4qI4vjPeOfdCsD+j56B82Tg66
cvKklZN/rJy8XuXkyyonp9Py7jNXUvmNmYOonNw+5eSfKSevy/qzMl/K+s4y
D8n6nnJfOeXkfCgnx0I5eQzKyRVQzr7w1veU+54rZ/9u5exDbecl9wVWzr63
ytm/VTn7kNp1kvt0KGd/Q+WRt+r9TV/E/onGe8Q+lcZvjb504+SjWx9H5nlb
30fmT1ufSOYlK18z832Vk0ernPxU5eR9Kief8sf7Sl4zTv7fj/fdPG98euar
KScPTHnrzK9STt7Sj/eLeV8S+S7KySlRTt6GcvIklJOjoJycAOXsd6+cfduV
s/+4cvbXtn6x3E9HOfsgW19Y7utk/XS5L6313+W+q8rZP1T5VbH/pvWzzI79
TI1fHPvtGt8k9ok23if21zBOvrhycpqtvyZzhZWPzxxc5eS2Kif/Ujl5jcqX
ZL6gcvLwlJMrppycJ+XkGCknP0Y5+R/KybdQTk6DcvIGrD8o94Gyfq7cx0c5
+3QrZ79pO/7c/1c5+9ianrF/ivVr5D4jxnNfJOOPxP7RxnM/F+O574nx3KfJ
eO6fYpx88R/vg5htnPxm6zfJvGHlH2U+rvVTZJ6rcvJHlV+feZnKyXdUfmLm
ESonP085eWZ2PJnXpZzcKeXkJ5luuV+V6Zz7ryknp0Q5eRt2fnMfKLsecp8R
u35yfzS73nL/euXsw27Xbe4nZdd57petnH2flQ+PfZmtb+KT2Ofa+ODYh914
l8gPMD6wcc3zh89qNL515IIYj/HeO8bJg7fjyVxt5eQTKydPVzn5r9aXkXml
ysl9VE4On3Jy5pST76WcfCbl5A8pJ/dFOTkcysmZUE5egnL2/VfOPuzW75P7
iSufFvuDW51/+9hv3fh5sS+t8UnFe9Bi46fH/tfGI0+90Xi8Zy00fnzk2RiP
fd7fNh45BLONx3NkpnFy35WTn62cvGerq898YuXk6SpfJfNflZNXqpz8SOXk
Iypnn03l5NUpJ29MOXlaysmFMt0y38j6LHKfdOXkqSgnF8R+V+57rpycBuXk
EChnP33lj8Q+xVY/v0rkExi/J3IyjO8f+S7Gb4u8HOO7R56T8dcih8x4n8h1
Mx7+8n4Ect+Vk1OunLxn5eTmKifHVDk5ncrJR1ROvp1y8ttM/8zNsvOV+9kp
J6fH9Mn9fJWTV6H837EPb/53te439jVuMh7zpV5Xn/umGY9cW6+fj5z1RuMd
Yn9z45Hz6nX1kRPwtvG5sc9jneOZaTz2VZ9u/J3YJ9r45rEPpvHavPYqr80X
r/LanOYqr83NXaFevSYnoMpr801XqD+vyems8tqcxSqvzRFc4Thr9s2v8tpc
txXq9mv2o6/y2hypFfoRavaRr/LaXJ8qbxX7ulo98xlxnRt/Jvb/Nb5O+MX4
CbHfvfHHwnfGm4VPjR8W+W3G7w2/G/868giN3xb3DePd4z5jfFHkjxq/Lu5X
xk+M3FzjD8Z9z/hXcZ803j/273Yd4n5rnNx35eSUKyc3Wjm5yMrJ91VOTq3V
z2cOq3LyR5WTr6mcnEjl5B0qJ7dPObl0yslds/OS+WHKycGCr5b7k5PzBCfv
iRwj/R5yepT/N8YhVhed+2AaXxrjH+NDYxxlPK7nRuM7R66G8Wtj/GY83mff
Nt4sxo3G7418X+OxX/MM49vHONb4xTHuNR75Fk8Z3z3Gz8bPiXG41TmTm66c
XHDl5DErJ0/X9Mm8WOXknionv9PqxjMHSzk5T1avHu99Vvf7l3hPND498s+M
bxrvm8ZfjvdW463jPdf4mbEPvvFn433ZePvIoTH+Urx3+/fHe7rxmOf3euwx
8b5vfGzkphuPvMCXjMe84vNe113ME442flHMVxh/shgnDLL64ahbGGU85rUm
Gie3Xjn568rJEVdODrRyco6Vk9ernNxZ+FaZT0GuKvz5zFcl/1K/hxxH5eQR
KidvTzm5cVYnn7loyjOfwOp+T4j5PeNxP1xsPO6HXo8d64mNxjO/xHjmVRjP
PIA6deBvGf9zzNMavzLme43HuHSi8c6RI2J8Uswze/15zFdb/W3fzHuwuu6Y
JzdOzr1ycmeVk5+qnBxQ5eRZKidfUDn5ecr3jHUTq0cdFussxj+M3Erj3WK9
xvj8WPcxvl2sExnvH7kjxt+M9SbjkY84z/gtsc5lPNbxZxpfGOtlxteOPDbj
h8e6m/G7Yp3O+NzIaTA+J9b7jC/74IfrsL/Vr86JdUPjd8X6o/HDY73SeKxT
TzNOHrxycs2Vk89t9dWZi6CcPGDl5NoqJ59VOfmjysnRtLrxzIlUvnmsa1sd
ab9YBzfeJtbTjcc6stf3rh/r+MbHRj2A8fDpO8Yjh9XrdWOdcYbx96Muwvhv
oo7C+GfFdfWs8f5Rj2H8gajrsPrMP0RdivEHo47FODnuysnbtvrbzNWweuDM
k7DflfmpyskHVX501BdZXeJDUY9kfKWBRc6Q8T9EXZPxL6M+yvg+UU9l/O+R
W2+8KeqyjHeI+i7jL0c9mPGzIn/F6zajrsz4E1GfZjzyRV7w44/8VONHRF2c
8dUHFPmdVq/4deeiTs/rKot5/qnGO0W9n/FFUTdovHvUGRo/YLeem/Xov8D4
/6Je0Th58MrJNVdOPrdycqaVk/urnFxb5bV5q7qfhnPyVuHkri4SvlrmbZE7
q+935M4qJ3cWPjLz2siXhZMzS47sj/fFz7bxDHm6ep/fM/OHyhzd/F3kA5U8
c2TI2dXvIfdX7xvkB5tfMj8YTk5Zi8wJhi/Iv0tOsH4PuZU6z09upfKd65zf
2jzOKr++Dqc++cf3bVhknDxOOHmd1CHr58k7tPmQzBlVTg6rcnJYlZN7qu9N
1HvbvEHOh9s8Q+azwslvpa5bP08elV6ffD+cXFryaPXz5PIqJ5dXObm5et1S
V2/9cbm+oJy6enjfzCOjfl4/T36Y9Q3l98PJKSafWD9PHrNy8pitbyjroq2f
IvuAlBf/u+zhXZTTBwQnv49+nx/vI/Drmetfr0PyO+tdV3oeyR+1cWzmTaoO
5J7qcZLbynGSo0rOK8cDJy+Wv0tuLLmzfP/ZmQtJPiu/l+8hz7XMLUxOXizH
T24s/Q5lDtjMKZtsdE67hndynQje68jIOSX/T/Un/08590P4qmsftcmU0euV
/cLocNvl0z5Y9802DeQR2j4SWcdo85N5Hytzz5qve9bSiS0bOI/osGrmuJGb
WGeepG7fNOel69GrXvvR8u+fmHU+ep1w/4H/ZuUXn9xg+e/iOkH/GzKHjtxH
va7IfazXT8f1sGyH3247cbme9M3BB+1+zPQN3mvWwP0B/urFT/dvs/z8krsZ
3zpiHPmb5G7Cyd8k743zODefm+R6wltmbiD5oPBf5POXfFD4kLzOycUsc6gy
H5NcUq7zBzOflHzT0u+Zc0q+KZw+QfI44eRybpz1V1w/5KuSqwrvn3mO5LbC
v8/xDLmtcPJbyQeFP5k5obuIT8kVJUcWTp7sUuHtkpNfCyfH9mrh5NiSg8v1
eWeuT5GbCyc/l5xUOHmp5PLCm+f6F/dJOPm85LByPT+YeazkCsPXyOuEXGE4
+cKLsp6E63lGzg+TWwz/OMcJ5MXCl94eubHkIsPXy/lncpHhnK+u4hfyx8kN
5bolP5RxGtfb8MxPZNwCfyh1IK+U6+R/mVv6mZx3ck7JSUUf8lLJn9b7MDnT
+nwkV1vvq+RqKydXu868tHHyv/U+Sf633t/IF6/Xf8fv2iOvQ/oBOc6P8/xO
kvHezjnemyx8m+Tkppf51Xl+qZeDd8nPfy+8fXLyRLlOZmReZKO8xy1IP64l
99uf5P2WPFF+74LMFT0i65A5j3/Mfue9sy4Ozn1sN+Ft8vohJxW+Ux4n4yV4
18y3vSXr8eDc9wYLfzw5+aycl7GZN0rOK/r3zfzHRuHPZQ4mebRcP0fn82X/
XIeCr5L5p9vncxx+Ueakk5vL+Totfy95vVxvY/I+Pyvr3sv7SebC98n3fauT
yToKPt8uf+/SXI+Dv5x5r+SwottW+Xne+8oc6fw8ubDoQz5sT+Hkw5I7y+8l
f7aN7N8yPvdvIZedzy/K62cv4e3z+iEvFh2WZW4subOc9zGZP7u/HCd5te3k
eMhvJR+Xv0tOLnmxcHJj7xdObiy5rRwnObDkvHKc5MCSC8v180pycmQ5j/fk
91z9Q/38YT4eHiT3gfH5Pd98MuvuFk9VffFKs0kb7PfZqg131rl/nrrORmd1
7Ov3yevk+x9OH5HDqvd5cliVky/74/tcVf24bR7/UXIeyYG9sc7xkzuLnm0z
f3ZG5s7qc4FcW73/5zx89f1ovw1bvje/WcPxmf+qnyc3VH8X+aDo8G7mhJ6a
eaV8zw6ZW1qbD1qdn9l3nYvvbj2lev3P2KJh/enLP7/O0Dltfnmy/y7yVjmP
UzJ39bnMPdXjJ4dVr6s2mTOKzk39Im90yqPd77ink78fkTPK58kbHdnlXyut
sb1ft+TRos9VmUvbOfNo9fx+f/jCf733avV6HtD2tN+vt+PKDTdmTiq69c+8
VHJ59Tokf5fvIYeX3Fz9uztnLq/qTL4vOo/MnN9BmV+rOg/9sv3M/3SeVPKn
R994wdgNVm54I/Nl0efFVyJndk7T+r+bepL7kVxb5eTO6u9dY+ai904cXr2e
D1h33wk73LJSA/mv8LMzB3ZMzFdbn/tBMU9uPOrwp3oObOGv04xfnfOlyk/N
nHjlt8T6iPHv8/1O+YJY57I+1i1jPdH6MV+PdUnjp8Z6qPE1Yl3V+OXF+29/
z8WLdWHrW1wt1p09XyznsZX/Jd/7lH8Q6/XG8z3U+vI65PuL9Q/me5ny3aOO
xfqeGqMexvi8qKsxflnU5xjfKeqCjDcfVtQjGW8ZdU3WT/Rg1E0ZXyvfH5W3
ifou46fne7f1K0V9mvdVxbqG9dc8GvV1xvtF3aD1fYyMekXjXXLe2/qJov7T
+iO+iTpS459GnarxIVHvarxl1NMaPyHqcr0PJeqBjZ+d77/Kj4i6ZeMLo/7Z
+GdRX228V9RpGz8u6sCNj8v5IuW/iffo/O/q8zfn842/EvPexqfme73yC3O+
Qnm7nB9Wfnv0E1kd6R7xnuX7Tkc/lPHP4/3ReEMxf97P95eOPjJ7jhwY/WvG
z4/1F6snHBB9lDZOeCzmMawu67B43zTeM+YrjOc8lfF475jm9WPRj2w8+kpG
23P/3ZxHUn5Mzh8qvy763H3fwlivMT479g3w9ZrYt8HqMc6O+UnjsY+B7yO3
euxTYTyeC77/2+/i/cv4UbGPh/HmsZ+JjUMWxL4oxveK/ViM3x37xlidQCX2
qzE+JtaDjF8X+wLZuOu+2I/I+Ml5f9Bx6Yjs49PrfMt8Xuj1/PucT9PrYZN8
vuv5XSP0Nx22vTzGS3qcy/Lv8T3MF52dx83n4dvJ/NLmyRkf6HiJ55ly7o/K
0UU5v185x2H59fnfOk7jOC2fOsclyjl+5TwvlfO7lOfZH6ec36uc60A5Oijn
/ClHH+Wc13q/V8d7/C7lHI9y/q7lGud50XEgn1PO8ShHf9svIo9TOforL9cd
hZfrjsJLnwgv51uFl/6pc5w63uN7LI8yddNxGrop5/9fOX/X+qNTH+Xooxx9
lHP8ytHBcvpqfLtC32LNdbNCv2SNLlVeO96q8tr77Ap9rDX30yqvvW+ukGeU
x6n3c/yjnOO33JO8DqzPK3+XcvRSzu9VznErL+uihHOfUV7Olwnn+leObvV0
0Ocdv9fGn/m7lHM8lseR50Wfm/xd27c/9VfO8VifRepv/SN5nMrRXznHrZzf
pRy/1DtOHQ9wPFbPlufF9oFP3XT8gG7K+bvK0Uc5x6McfZSjj3KOXzn61Pu7
tg9w/l4d//B7lfN7lfP9P1oXtPx3KUd35Ryfcu4ntg9kXrfK0V85x2PzZulP
5VxnytFXOcdd7/t1XMHnbH+z/Jxyfq9yfq9yfq9yjkc515tydFCODsrRod7v
0ud+WUclvKyjEo5uOh7g+5VzHJYfnd+rHD2Vo6flj+fxK0dP5eV6ts7LpS9s
36HUWXm5fllHB8vbzd9r+ct5/Mo5TuUcT71xi87zcDzKOS+WK5rHafuN5O9U
znEo53xZXm3+XuWcL+XooJzzpRx9lHN/U855rKcbv0P1UV57PlbI96wZf1R5
7XO0ymufHz7es7r0PE7L4crjVM5xKufvWY5bHr9yjl95uc5X5zgtryq/3/KV
8vfqOIHvUc71bHkuqYNydFCODpYHlMepvKzzEM55VI4+9X6X5Vzk8VvuSR6P
5XSkbjre4PuVo5v1JeXfVc59QDl6KkdP5WXduXB0Uc7vVI6e9X6vjmf4XTb/
lsevnONUzvHU+3z5XpLzUZwvPs88Ve3/v98H1EdlfYb4hf+2uuv873rXj+rG
39PfxX/z//frPH6+l7+/XXK+l+/bMjn/zf8d/v8B6RhXdw==
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxMnXXYVFXXxp+cZmbOzAMDtoKkHYiFoogt2I0idovYLYqKgqIiYmKgIAYG
ii0WKILYnSgGYhcg+t0/7vVc7/fHutZ99tlnzz777Fw1qx5ywm7HN9TV1b3X
tq6uUfzKVF0d191Fr9bX1d0mul30imh8XL8lukc0WfRZua7uVvFbi3V1X5Wd
dqfwp8I3C98i/HnZZYwXnic8SfgO4S+E76RM4ddIq/f1DJ6rd7lviCbW+5l3
RPeK7uN3RY+KHhN9rXLuF5+gcuYLTxG+S/gj8YdED4veFz1Q73ufx3PTRO9G
eTz/rZ6dyu/p2S/FHxc9IfpE9Ei9782LtCdF35Rd9t3KPxcedf1S6XfRbkqf
Q73qff236PV65/2j7DpNVZ4GNfgHwh+K0sKfxvs1NjiN9/il7LIeVP4fhJ+n
LYS/FX9W9Jzoe9H0et/7QfSC6EXRz2W37xTl/7Ps8h4Vblb5H8f78dHfi3b6
Xnme5hsrz9fiT9X7+ruy33uS0r8RfyZ++7ey+8TDSl8q/nZ8qyWiN6O//F52
Wz9S9Ds9GN/m38jLvUXRNnzzX8vmDyn/grLfb7LwX2XX9zHhycJV4WOEpwn3
FD5d+DjxvqJtRCeI+om25bspz6biZxbdRuNEN/B+St9a/GylHy3eR7RVtN2N
optoo7Lz3qw8T5dd9jnCx0Renn8p8tLvT4zf3I7fE+0q2o02KzvtXD37rPAO
wucJnyK+k2hn0RDR9vW+d4ZoQDz/XNn3z1f+6cL9hS/gXcou+0Lhs8V3F+3B
9y+bD1P6aeK71PuZf5X+K3VR+j/CC2kD4T7qA+1FHUTri3KivGg9UTaumxP3
y5eUP534/gzhTcQTUYW8Si+Lv6L0jcSLohLPJ77/qtI3FC+I2ogyiflMpfeK
vDy/magqahFtHrytqJ9oRdFK1C9x2iw9WxCuCb8mvFW8x3KiLUTtGnyvTeK0
2crTV3x50QrUMTGfo/RS4rJfF840eCwyZ2wnvLJoFeqnPKuKz1We7SON64XR
b+gLC8vm9ynPT+Iv13tuG6D0VTTkVlD6duIr1/l6W6XnxHNK30F8VdFqog1E
eVFBtGOkdRQdItpYtInoIFFP0UaivVXOhuJtVM4+ZaeVhAeJ94pn9i37uaTo
vJTdJp4vkl+0jfI0i6d4x7LTikU/X+ZZ0drcF6VF25VdRkF51hRvqvPzfcte
W5qUvp54ts7v2U/pGfGM0teJMrju4elo2TOHijYVbSbar2xeVf4DhPsI13jH
qAdl7Fk2zyp997LLahbeW3ytyLd7rG/c26PsuqaVZ6+y65dnvAiPoD2EHxS/
VHQZ7a+KrSbqKNpT12vU+fndRN2i3J1FnUSri3Yt+1utpHL2F+4t3Fb4SPEt
RFuKjgrO+xwu2rzO+Q6Mb8/3OZA5SrwD7y6+ftzbrezfWaUY31NUoUw15tX6
MKNF++l63Tq/W39RZ1EXvi99ULSiaBeVs7x4e5XTL9JWEh1cdp9bWekn0kfr
3GcHlp1veeYu8Z3ivQ8q+/6K9Ley01YVPj1+e4DobtG5ovNEQ5TnHOpGm1OP
yHdI2d9pNaWfXOfxQD2GiLaP6yPLHgNdi57P2KOwZ/mpbP6A0n8Xn1Xv9e8X
0czI92PZY/F+1kTx2fVeX1kfKvVeVw4v+xt0Vp4J4mfXua6Hlt3nOtHmypfE
M/covSx+tNKHiu8Yc/odynum6CzRxHjv8+Mba9tV1y6+f432py3LTmspRn8H
i44RbVXnfrBj2WmVovsNz3XgG5TN2ym9f9nfcLmin1muzt94h7L7SJm1Urxv
9IVTlX6JeE+ln1B2u68t/ID48Drfu0d0gehC0cllv8f69AHhi+mrwveJX1Tn
63tFw+J6aNnPbcDvCh8vvKbwSWW3zbqsp2WPhx7Ct4ufEW13fNSRPvcA8ydr
u/LcK9xW+FjhzcVb6n19ntJfpj8p/RbxGXW+voB9FP1Q6ecKv0ibCd8qPjPy
nan0J+hnSr9K/HHRNL6f0p+i/ZR+ZaQ9Rh3L5tsp/WrxJ+v8/LWip+v8zEjR
o6KpostFj4gejjafwrsV3ca09f11nm+Yd6ZEv6P/3Sk6vewyto12I21L4eOF
xwlvHnMXZfdjzJb9/lsU3Za06W3RpnfE9RjRM1HXG0QviJ6vc3nw6aIXVc55
atdrYr9xlvBo5lX2I/W+x37jHPGri96DsBch357sd+p9b/vY35wU+yz2W0eJ
ntSzh4uPKHqPxP2RsUc6WXhU0XugM2NPxNhijJ0c+6JTxa9k/yP8LONDeKz4
c3W+Pqfs99hJ6TeJv1Tnb/+eJszdtVDdpMXtFuVZQeUcR39g7AgfX/QYPiV+
j358X/Rr9lPsq/ht9mOni19V9H6NOnLNmvFQfEvGCN+2b9FjgjImi76p87xR
ou2UZ4muBynPG+KLRYtEN5Y9zzC3jC477WDhG8p+7ij26korCrdhH1r2WGBv
/H2d5zPmqO/qzCnrqzrnLYheF/5b9Bd9T89+Jr63nn1N/A/R76LuWvN2F+0m
6hZ8V/ZlasM9xOcp/1rie4v2Eq0t2ieua8ozUHy+8ryqsn4T/Sq6suyyByr9
F/HlVJcOtKPS/9T1QUWPV+rF9SvxHHnZdx8TfegnXbcXr4luZv6MOeF69lTC
Rwh/pDxNwo2i69jbiB9WdHnL1/u3PxFO1fse8xzz3aQ6z3XwrYpes+4S7lP0
XM6c3rqmwbnHXMe33Zp+KJxmPSm6XTP1vh5Tdl0OVfqXSs/Xu67jyv4mRyr9
hzrPZ3zLz4Wz9X7+XeH/RP8yz7AZU9pg5b+m7LRDhD8Qb1B6PetdnduGdnm/
zmk885bYP3Xuc2+LlsZ1m+gf9CnOMZxnOEtx9jle/AqVf7H4AaIDGXv1Hr9H
8O2CHykaHvcH0sfKHkeM05eF9+c+Y0F8v3pfz1T6weKXKv1S8YPqfT2j7DIu
UfpLwvsKX0xfEj4s5o05Zc8tzBWzyu4bl7MelX0e5Hz3UNnjk3PTo2X/LuXQ
NluKthDNLvt9mX/uL/v8yFmPdYf5i7PbGZozBoh2Fb2bmN+oOeQs8d2aPKdM
KXue4nw3ku9c77q+ovTBzA1Kv1z8kHpfv1t2e12n9LeFLxC+VvjNsudS5lXm
WubcfUTvld1GY4uen/difhJ+WLg7c2PR79Ou/n/vB2ecPMi+Ufykoudm5mie
5zx/HWWKPlKeMeI3Fn3+Ju36eteL3+cbzC17DmTeGyE+KN7njbLnatYI5CWj
qb/og7LbYpzS3y/7/a8X/lD4GuEbhB8ru1/RNz4u+zdvKlr2QBnkQx5xbb3r
N7XsNuHdHyn7XTjztovv2Tv6Jn101P/ro1fGt7gi6kBfGhV14x2o24j4btSZ
fI+X/Y70z7s5LwifKjxReAPh04oew+vX+x5z24r1XlcGRXmXxZjgW7eOIfhF
0a60L98ZucSx0Yfpv8g1uKb/Xxh9g/7L+OGaMUUZY2IsILtAXsHYuST6FfPO
OqK1Y6xdFv3ntbK/O9+aMUe/4hn6PuOeMc+8s248z/y0Yb3f+U492yP62+3C
naNfMY/QxzrVe76hT3ar91xDWsd6z0Gkda33vNWl3s+zr+O7nVX03MfebrN6
y3zgyHDuKPu5IUWvD+wJV673OgFn/R6vPKvWe6/InNYz6s0ayF6f/fsk5dmo
3rKjJNI2rve62qve99jbk3ZG0WvDWqI1RbeV/R4nKv2ustv1lKLX59Xq/dsT
ys47tOj5fo16txdrNfPr/DrP+fPE94016wvhfYTX09xyltbNX4XXFz5H+Dfh
CeJnN/h6suhC0TDR3aJzReeJ7hNdJLpYtEHi+78zj4kPF10i2jDx/T+UPiXS
LhX1TMz/pJ3Fz2xwPe4RXRC/d7AO6BuJeokeV/6/xM/SHPiY8K/CZwgvp3nw
l0Zfryz8Z6PzTYw6ni+apvx/KO1M5V9BeX4T/l00KMremLIS842VZzXlWSS8
WLRik/Py/O0q64yo67rKf7r4L6r/msIIuReyLjQ4H+/0qui2uJ4qukI0UrSl
8o9HAKHfekT88ri3hdJvEf9P5fRJXEa98syNduedtkr8bRqUPlv8zgZfzxTd
2uByN1KeEeJ/sR6JX9bg67WVfrL4T0q/VvwY0bGi60THNfgdrhedIDpRtEbi
+z8o/7hIO0m0VmL+o9JvFB/S4HJvFg0VnSJ6VHl+VpudXvI7kXZq1O+0Brfd
OonTflY5bdXOPyj/QtEjSl8gfqqenZo47TThw5RnM9HmojmJ+TVKP0K8t2gL
0Wylbyp+tdIPEd9YtIlocHDuDVZ5m4g2FT2g/B+In6T8fbLaJ2f0bFrrVErj
WXk3FL2uPFuKX6s8b+j+a7o3ULSt8rfX9fXKn9dB+wD6lg7W7yj/LsI3KP/p
4v1jLX9L6TuIX6/0U8V3bnK+t5W+k/g4pQ8V37HJ13OVvpX4GKW/lrguo4Uf
FP5UdT5Z+Mh4b+r3XOI6D1P60eJ9mvz862rju6IPDaupv+lwPkyH+FeEc6r/
TPG1lK9ZlBI9m5hfoHKm6z2fE2V0vaaoKfJV9VxF9ILuddL1EtXnH9ETicfN
2Xq2vdJ/anQ/qAn/2OjrVYX/bvQYe11lvIQMSfQMsl/dO1/P9hBvaPL100qv
Fz9P6fcIz9ZzxwpPFJ4pfLTwUr1DRmXNEL9X6W8q/XilV/Tcd8Lfi6pN5vSt
rsL/LRMaaj0QLRX+V/RQe82X5G/RfiDxO52jcro1OS/1eCpx3nOVPkTX2zf5
u74cY4D+/pLoprg+QHnXF21AP07MN9KzA8U3FPWkryt9PTB9JnFaL+HdxLuJ
uouGKL2r+HrsA/Wew/QdL9R3PF7pyyt9LaX3F+8s6iI6SOm/6fdX5jsq/5fq
p8+J76d76zb6905RnrWph/IMEl6i/KsKH8ycKbyK8IrMlw2+HowAUNcdlb6v
+DpR1rFKbye+htL3pi6NLncPUQ/S6a+J32N95dkz0tYUDU3MN1D6ScKrU6bw
zuKdGn19otI78ntKP1D4R9VlRfoYfYo5RFTlu4kvaHBdFjY43/7K/5348srf
Vuk/NPjePkr/Urw9dRb+jHOkcE55vmjwveWEf2F95DsmLnsF5UmU/m2Dy91X
6V+Jd1B6QenzGnw9IL4D32wH+r1oNdGOwXkfvhtl850GJn6PlVTO9sJPCGfp
DzWvAeeqTxaV/2vh+czbGjNjRH8Jl5X+TYPrtFj0huhN0X6J8y7H/CncTHsy
PyR+h+7MIYnr3ZX2TKwjeV9zcnfhI4S/R+4kfpToaMpKrC/5UOm9E68B/wov
n1gX8lHxf2d4zvQVpXemPkqv0oeF3yr6rM/9HrRpYp3Kx8hnxMfEurRZYv4P
ZwTxsbFG0TajG1yvx0VXxfULohsaXKeN9eyV4ov0bK/Ea+/f7P/FRzX43iaJ
y1is9OlRNmvdAFGXBtd188RpS5XnKfFrGrx+bpqYL1F6j8Rts6BoeQXv9Dbr
Gn1b+J2i9zT78k0oV+mH8L2KXvsHiw6Ndzgy2npkpB0m6qT8e9KvlH9V1hfh
L4SPSNxfuzBeyCdaXdQxcfsiM1k5sQ7pM+Fuicv7ruj3P7zB35j9waAG1wl5
CnKWVvkKfB3GVGK93bt6dsXE+q1PhDsLH9hg2Qv7O+QwBzV433dAg+91UZ6D
xb8p+j3WaHC7XBp5uTcs2mZ/3iEx/zracK9495M0z24Xc+6xoq1FfZssIx2l
qWnjomVx14es8vmQMyJ3RJ6KXPWqkEGSdmOd5abIT3ke+ecV4r2KlrMib72m
zjLb0eKbFC2vpQyukbMib70iZIHIBPlt5MATQoZzYdkyHGQ7yOqQ2aH76Rbn
k/rY5y8OuRxnDWRSyMzOL1uOigwWORnystl1liMjd0WujJyZ9+hdtFz65jrL
Y5FBIovkembkHV9nGeZ14psVLZdFPss18tlr4zpJrIN6I8bOo8Jp9bERZbcL
Mupdoq8xti8ru12Qad+jOel69cnnRK9oTZ6i611E94omi65hbdDe6W+tR+eL
logWi+7Xved1b5zoBtElZbcvsujhZbcdMueLypaRIue8oux2R+46rGx5GjIx
ZOl8t02RgZT9nshsR5b97ZHJjyq7jZDhIyecJdwfuVPZcnJk5p3iPMlZE5kh
bY9sH/kickaeQb73SlxzHv0n5FycVZeGrKxLnD+RqSFDe0d896K/OXLYN+ss
d50rvmvR+ZDBvVdnmS33dytaFkfaHkXLGpE5fhzyNuRurTI5+Id1lgHC9yxa
JknevYquF/K4d+Ld3oprZJPIKD+ts+yXs+N+RcsFP6/zuRE54pd1Pk8iN/5W
fP+i5YjIExfWWd6M3Jl7yIoXiB9QtKySspH9Ikcl74FFn/2RXfIbrXLkVrky
nOdfiH5xY6PlTD/WWS6LXPWX+A7I1RknB8X5nXZEbtk9xlnD/zvDM87+jnFG
u68Y8hSeR1bPN0ZuzDmb8zbfivM+zyAbRx7QWgbyXX6fZ5BX8DuHhtyG9kLW
umHINdrE+Z5zfirkHemQf3DGJw1ZLud4zvNNccaHI09eN/LyTZARwZE/94yy
Ofcjg6Ntfq6z/IE0ZPjIjZAf5UP2gAyCb3VczKPbiF5S+94kull0feL23l9j
/wrhU4T7l3xvaKOvL068x+2n9Ms5YwrvInxR4r3mNiV/t5PYw4puZb/LXlh0
JTIH8d2UZyRnauEBwuPj/unxvXmOcidwtmj0M+co/9bimyv/95o/vhPdpjnk
SKVtIdpSdJby9BbfVHnOTbz32kL4cJ5r9L1b9cwtom2Ez0x8LtxEec5OXMZm
wuWc1neVf4fyHaO0rRr920eL+sT1YeSNcu/kt6Ouo1TOmeK7qpzbxc9o9HUv
tXVJVBZtJCrG9fTEZ5WLlP/FxDKOS4RfSiyPuFT4hcTnq+HCy2uOXU70qur2
RuJveJ3S3xTeVnis8Ani/Zp8PVP5ZojWFn418dlmpPLMSnzuGiX8cmJ5ymXC
E5T3TtGxqvNEzdvdRD+pLcaIj9LvTtK9SxLLU7ZT/uGJzzbbCl+a+Ly9PWtH
4m+zo/CMxHKWEcLDEp8Z+grPTHyevFz4ssTfaQfh3/R7v4ru1m9dmPj8sLXS
z0t8TthS+PzEe+4+wmOELxfeBxmC+BWikaJHg48SPSwa0eh81yVO21f5XxW/
rdHf6sbEfKDSG/WuDaKpqsPDoodETzT6PHpn9M17RBeILhRdq2cvE9+bM7v4
pY2+nsLaFtczRLfEmBiXeFwdUPK5ljTGAb8xWnS1aKzyXCW+n/JMY/w0+vp+
xqFouOhe0TDRRdQrcb4jlH904nrtIXxN4rx7CV+dOO+ejNPEv3mg8B2J2+vw
kuUNU6P93hc9EO/xQXDe77bE/FDGb+I6DRa+NXGdDhF+V/y+qO8k0fnRXhck
PutupTx3i58rOo93S8x3RwYifke09duiyfGutyRu90HK87r4XY0u4zKdj3fT
Nxoq/qD4s0r7RrQhBkL6jsPVn75tdDp7lU9Ej8R73p64fxymMj8Sfyj6y02J
v/NBSv9c/LFGt+/NiX/zYGREjJN4vzeDUz/2vOx90WV2SLznZ/+/UmKZG/LD
l6uWOf/aVn2j6j3ib8JvVi0LXyz8YtUy7F+E36p6XVki/ErVct8/hOdWrR9Y
JPxl1XL9dDv11aplyH8pfU7Va8/fwrOqliH/KfxVNeTxyv951frzJuHPqtaF
Ngs/X/Xe6Cfl31jn0k1V/+2VvoFwT+FthDPCXyhPF+FPqtaVNAo3tVgPsrrw
e1XLvf9VOR9XLZNvUPqHVcvh65GnVS0jX6o871ctP/9P+OuqdQdZ5VlctW5i
eeElVes7VmjnveX6We8vz23WNxLdJfqxav15ojy/6fpV0SzRT1Xr1itK37Pi
tOW1fu4h/JLwcsL7CL8pvJLwX+JzRK+L/hC9Jpot+lX0SpT7S9V2Ci0q84eq
9fkl4W+qtkPICze0WP/TUXhp1bqRlYT/rlr3stwygx3rd1YV/q9q3coqwn9W
rc9pL9zcYr1TZ+Hvq7YpaCO8YYttJfsJf1e1XUNB+I+qbStqtEPVNhTthDdS
/o2Vfzvh9YQ3EO4rvHaL7TW3Ej5S+XdVtSboWxxRtY3aXcL9hMsFzQN8c/pS
XnOI+PKiJVpHB4uvLpqi77Ku+Ioq8y/0Jiqzg/BvwusLLy/8h/AGwiu12L65
p/D0qnUiP+q3+gpPVfkHiW8j+lH4EPH/9I0+1W8NEh5StU3bfcp/kvD+wvcK
z1aeR5XnQPqRaF+lT1b6UOGBwg8InyE8WPhh4dOqtnF8UPho4T2E7xZeXXX7
D72O6nas0vdS+kSlnyp8sPAU4eOqthGcJLxXxX1kBfWfVfTsYnRAerZji+2b
Nxbu12J70D2EtxPeQXgv4a2FtxHeTXgb4W2FdxfuI7w1cgvhdIvty7sKr9li
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
Ly6ueJ5n3kbPdnTMUefUHHP4Me09joj90k1Rxq1RDnoi9EromkgfH3Nd38jD
73ydti0OZZ7NOze6zGtibGPnw/zCfEEM2B9U3pZp67Bertke4qWa9Vp7RDp2
DsM534qfo7S7Ui6XuXZC1OHHjPWYf8dcMjnmk22VtoPSftT1eTXHyX+ynefa
e2K+Iu+9kZ/9A/tYZBfsI7hGv4nMYmjsc5DJIZvry/mM+UXp39YsE0L2iJxl
A9X3SvbRZctOF6csP8V+/r+UZQgbVrznJv4hz5APOQt5wUdG2qLAt9d8vh5T
szznt/gt9MvIqZABTgmZFrh3xmch9kXscTgnss+ZF/g34btjP8vZ6ruKZV23
i6ez3lORTv6vo68yb/HbyJE2TFuOtCJnW+W/K2N78YfTzk/5z6Zdzz7N5r8E
hv8aeHjN8bF/aud9ATo79gYXK33vJqffGPtobDjRu41WHTMdfGbAthA7Z2Js
gPdrsv3nyyn/P9RVFdsYoK+8tGa7aPbYr9es55sjvkR8myj/RvFXUv7tpqz3
G+jGdslY1sZcfV+cb5C/tcl6Dgczx9M/kNP2jL5CP6Gd/oy2OjUw8re/VLcD
lO+5ittsXrRbz4x1eOxzSuyFMrY32CbKwhdiLWLWoBuqeb+D/o89D/sfzs6v
N1kmhjwRt/YuWZ+v0CcPz/j/iZCXlnL2PcJmgLE7P8bvqSGfRE6JPchLWccS
LIneS3s//UfYTrA+ETMPOR/2MG1yHj+MHeZ+9kP9Up5vvonyWSPYN6KzZg19
I9bR1fR95wo/rd+dq3Z5nXWlYvs+6odOfH5g7P2Yq+bFfNUp6/mXd2O/9W38
Ln5U70d9esc7bh3v+3WUuXtg6jYKPYXa7xHxv8KO6IO05ZafxLpTUPq97EdF
j7OuKW05vfvVNfvss0+7J+Zj4i9kq56LnlSZ/fiWGc9LnDmQd3DuaB2fyHa4
5jvin5jlHJpxjIYvIz/fFznGzSqvqrFwA3IG0pCrVSznQf6DXc+MrOMVIk/+
KG2ZclHt87HwGsKri38uGsUcpLz5jPXgbThv6l0+K/n3mRP+aLJc6LuUY0dw
/vs0+s9VNceOWB3765rbA8xatyDmEGygXsg6Pio6TXSL6zT5XPBc4BvifLRe
k/sA+7BHK5Zrss9gj/F4xfr5T8RfifSrm/1faTyLTcjY2DfmVc74OKef32Qf
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
wbCe0WfIjx0ne36+HfvIdePMhdyE8+PSjDHvwx6TPJx9kB3yjVrlkHcFRm4J
RiaJ3oryl8QemPZh7824QKfLmEd+Rp+cH+OfNMYO/wGHzcgbqv+GWfu6oN/p
prPbZjnPtxeJn5a3/v1U8e1z9mu6WPylgr5l2veH5ZznUvEP89bBnym+OG/b
iUuUPqNgPf0ZSptZsOxhFHZreft+nC/+esF6xAuEl+S9ZztX/LKcdcqXi79W
sF75GqXfmHNM49OFXy7YBuAc4R1y1jtfkXO5lDki57Io5zzx2QXrOkcqfU7B
us/hOdePum1Z9Z6T+NtXKf3ivHWp8CtzxsOF3y7YF+VqpV2StwzyOuEr8tZ3
XyS+Y8462WvE31H+u5U+WvitgvW11wp/mrc+lTLeLbica4W/LFhHNpa2LVj/
Stljci7/emwt8pbX3iD8ed425KR9UnD6LUofk7fObKT4RwXrSvpUrV97Ff2w
0pfmvQe+Kef2pW2vFt85Zx0cbXZh3u32oNL+1vVLzJdKW1SwDmyC0r8v2E7l
JqUvKPjse5fSv8pbz3q7+M8F692uE/43b/vC8crzZd76P+r7VcF1vlH4u4Lt
Xm7HniRv/d2dOf8G5d8jfEfeOsJJwj8VrP+bKHxb3jrBk6ln3nPZhUp/P287
ksnCvxSsC9y66jkH3/zxut8/Zx3izcL/5T0X8Tu/FvxblH13zuVvq33mB0pf
q73reFvO9RwnvEvOesr7xSfmrR98QPjPgnWEdyttQM66wlvF5xWsHyXvfTnn
nyT8V8H+JFNybnfa/CF03HnrKSeL1xd8Jlqnve2lpmm8P6I8D+Stc5zGN8rb
/2UK7V/wHv9O/nSk4D3tvcozP2+/l4fEGwre91LGwzmXM1V8acG6yfuVvmvO
e+oHKaeN/cMfU9p/BetWhyh9esHxmNZsb5uQqvjlSt8pZ7uCzQv+fny711VG
wvyAzKNq//8VxXvofu+czyEd6Rt560n5n1Bs/zljdtf9zXO28VtN97/JW3fR
XmXOynlvuo741jnL4mpKb1fweXhQwf2bvn1Qwf2DvtG74G/G93qy5nY6SXP/
4ILfk3c8ivbIeW++RcFtRPtwruT/RTq393pKTKsewmvo/hY5n7PWFN8y5/Ng
J8ZO3vrgq1S3E+lXzNO6f1LBdqcPih+etx3JaOUZUvA8fg9zYd72LVcrfWjB
vokbojss+By6tX77dOHVxaeJH5e3Hd8bFdtXE8NhLeXvk/NZo6v4pjnvvTuL
b5zzObmL+CY5n6NXVRlf522Ttrr4wrztyVcS/yxvOetmVetqsXVcWWlf5K0X
WkV8Xt56LWL04LN1OfI/1W1GzjahRzBWcj7n9RGenrPt56HCDXn7Lx0p3JR3
rIqD+dOdvON9HC3cnHd8isOFG/P2AdtF+K+c/UIHCP+ds58kMgT+t6aL2mcn
pf+Zs9/jOmWfmThrH6L0epVzhtJ3E16Usw8wa9FZea9HvVhTCpZdjNG3OFN4
J+UZKP5fzn5i+wkvzdnvcXP93j/CzeIHKP3fnP2Clq/ax3lT8T2UvjhnP+dL
9Tv/5C332EHpf+S8v+4n/FvOOpheVdvXYW88Q3XIssYp/SXhdN578JeFM8Lj
hGcK51hfke1Vra/Fbj+jOt3G3l18S5X/ZM42/Ycx1+Z8Pt5O+Peczw+vqJw8
+wHh2cIl1mLhF4VTeeuv5gt31TNVxqr4rznrol5VekF5bha+r2bZUkf97mtK
Lyr9VqXPEm7Dmi68caxl2HnOUXo577puxB6mYJnPgcKz89aL9WXuL9gO6dOs
7cnuy9pWCZulGTWnY9OCXgm5ITJG9jlfZm1fiG3ih1nrx9kLfp61nSI2jshG
kZ1enbZM8J4443yctR0bdmlg7GTQAXHuI5YfskH8Lei/6AXgVwTmtz7I2mau
Xc72AciFOD/xDZkf0AHRrujb0BVRPvZv7PHGxT7vK9G8rG31KGNi1nKky8Tv
zjouy4HsKQq2yTtBvzW5YJu5bpEfneNqVc/NzMkH5D3vMOccn/PzPLu/+DE5
v/uJ4m/mbc93nPCkgm0BkXPyjvic8P8sd2Qdy+cc9sBZ+01um3U/6pf1/7Dw
zfHp578V6COMKf7r5M6s/R03zbqPM+/xH0/0F3yR+2Tdr/FXpj8fKp5t7//I
oG/iU45eBX0M9aJN+C7IGd6s2PeiY9W6L85mnMvYd7P/bu0jYPbh9J1Z0X/e
CFtxbMbRZXFG4nzEWQeMvol9Pft7bAk481E++jPOYcSf5VyGvu/V+Lac+V6L
voZfzzKZcsgiwMg6iAf7ftYyYXSL1Ad9JWcazjnoL9BvgDnv0Dceifei/1I+
Z0xsJagb544h7K/z7lfUj/zsq5EPo99h/cDHlji8xNjl246MPoy+DLkzMmfW
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
eKvgeGZsulsE23X5X7Pg/xctdiVYjz2bOXxwrqPZat8yOFb5ffGmwfHJH4g3
D45nRqvYNliviOZls2Ddy3zsncExvdgmdwy2Ty5T++HBMcnozQ8L1pyj80bv
vUL/+9fq0ys4hpnYl72C41/Q7x8RrOFHN3RqsHYILe3gYD0t2qWBwfolNFCD
gnVQ6HxPCdb6YlvdJ9i+SkxJx+C4Euy1uwbbbInR2S04Tmeh9u0QHOf8mXjf
4DhqYiN2Do6P+FjtuwfHTn/EezA4tvkT8Z7B8dXYhvcItg+j9d4/WO+NnndA
sKYXDfXQYB31SnEf8eIm1rkfG6x1R8t/VLCe/2BdtyODNdg8c8cFP3erte+J
wbHWa8R9g2OqV4mPD46pRnt+QrD+HE30acG66OWs5YLjq4mBOCZYQ4hG74xg
nR66oSHB2iH04GcGa8JXiHsHx2n/oD7DguMNsLWfHGxvR0t+erCeHPt6v2Ab
+7dq7x8cp40tbhp5sHLbmt4Qj8lt+5ouHptb+3phtPOw5Xfi16g3Tt1xcnjS
dn5snxT7weNjf/JyYx+htgd5O2f887v4jBprbYllYzssMvkqyFtB/gpyXPSv
cWwjtgZyTJFbg5iiEyOjSx1TY21qTdTTUiOMXE3kdSL+jP36xv7kt+D4xMX+
8zfuzyT3OoB6mpzv6Hie5B2FidvDtoLGl9gTttR3J8aTeE+YvHVnsX6ucT7S
c2J/2rEHjYjXjbazYztxVtheyB9F/SGexTlVx96RF4wYSXKcckzi7bhWXDvi
TMmnRf4sYjrJrcr3Qvwf58r/wLPMPpwTcy3qxzC3+ljbEWWfI7VtieE5N57b
vfF7Id6HWMMz4veCPvm4eD7k6+oTz5lzPD62b59YE4kesjb4eeBZSIOfE56R
+uB7kfvw62AbHPa3zom1iegS90usm0Qz2Smx3hGtIzpI9JDk3iSnHv4Z1koN
g5+Nv5+LxO843m/kPkLrjr59t8QxbMSvdUgc/0bs2+/YJWoda/FV4nkhc8LP
E89Zma+uSjwf/SSOx4zLxFj9VXaMHrF62EHQdqMJJD8kYz7zN3T36OZZJxIn
dlq8t4mNJhcV8de0DYntaNoHi98uO3735Hj/3xOfBeK52NKOdpprz3eAZvvu
+F0QNzez7Odtlzrf6xyfuTGfOTh+LnlryE1DDhfOD20/49eCeM7EFNCXfcjn
Ag+K+2LjGxj3JbcNxyEHDvFyA2I7v9OHtcCRieMPiT3kOpHDBd04jH2XXChr
apy/knjYDXPnoGyZ+15/Od6TvI9ei++WH2tcN+L1+By+Gp/Nn2tcawFb1toa
9ycOF/6+xvbGMzPHbW+Qe86EXRm9N3ZAci6R94mYaJgxCHsZWn905gOj3p05
CbGah8T+zVm31zjfFDG1MDG2vJ94Tw2Mx+sR+3P+HAfNPP87OTqxYa6qcS5R
8vxQi4YciP/EcLwVvxf+R+oxkG/lmxrr49HGE28xI97z9bn/R/5XYovnxPcG
x54dj891nROvOefP/5iz7q9xXlRs3TAaffT5S2scP0DsAPEE5FYmDrR5jKcr
5//T9HOv0p+cv9jrWuTuv03meAOOQxwr/y/5xF+M9/Fz8R6ur/P143ywmVLj
kPxdaIW7REbLgKaBeARspvyOtpZ8ZbSjc2C8J1ctOWDJVwszj2LbIbaTIxbm
79gxid9A1/pn1fEKf2i7R2wnh8k6ucfYQVXnqaW2H/M0xmnyEZEXiBxFHeO9
vW7ufm+pf4PcOYfYl7gS/CHE1LNfp7jv1fFYMLmIaCe2nh/6Mdfl2PvG43Ne
u8Vzwz7LcYkVIp8Y8SrEuROHgi+CWHhyDx4d+a7ID8exiPc773ZypHGv8hxw
jJ7xOHwPXeP1J8cRTJ6iA+Pn9omfxWdwj5AXjfxo5LxCR3BEZGLxD4z92Q8m
hoV4/WP+Obcm/h/4XM4B5t65M/5f3D/kVOP45ANoGz+PuWWj6NfAv0E9Ta4z
8Ya7Jo7lJo6bfqzFyRvQKvdanJzw65Sdg4Fcs7w3eZ+TN4NxlLUdMfXMG1gf
k2+BeSHrOfIIsU5inUduIsZz1vTkU8C+z/qSPGnM1Vi/kvcDezexH8R9MBbi
kyKnCfkoyGUGdyw7nxO5gSuxH+3sQ8wIcVj18TjYHslTS65W8r4SF1If25kT
sJb9O1dwY69ZyR1Abtc89t8hsf0d2/u/E8dFEBPxYOL1CWuTJsFzaObP7yWe
izMP31HXcEGt1xpvJZ7fM7fn+C3jZ7SIjC8A3wbnSW7dxxOvqVhPNQieKzNP
pu/6sT/5hTgGvhWeAdbx5JdoFjwvZ07+fWKbEfaiTxOvq1lT/5p4jcT6aF7i
9QZrjSWJbUnYkb6O1/SfnLdp/Ny6+P3wuWgkPtFn3pVb87CIOKrcukfqI98j
/ryZa3pQ85iY7hX6jC7YXfC/q/1+7O3iY8TjxceiixD/V3yi+Cjxfdjt0TYQ
8y3ukbmGD/WW0UTN1Fz94tw6MXLBX5pbG0Yu+Mtya6LeVp9x4ilaCzxb63ET
7Rn5cC/JreNqiqYrtwYsEQ9MrSWrQ1eWW8eVi6/M//f9cR0GouvQuT2ATSlz
7W9qcaPTuEfneUduPcME8Z25fd93Et+f2999u/i23BqPK8Q34S+o9blynsR3
rhcc4/lqfBaImeIer4v382natx/PYm5/+r+JZ8rtr79OfGvuemSHs96i7o7a
h6j/Q1wf8TDyZuTWn1yl/jeL72jmOi3XlK3H3ozY2dzala3Eb6f29d9M7F1u
zXkmviH3fdr8/93bzeP9fWNifyG+QnLurY5j7tQ43r8Yx9gVccxdHpkx96U4
N2AtT84c5kWD4hzpuxrPYfj7mnjMlyOzHzlkmPMw/yF34Mo47r8Yx1zscjzn
v9Q4Tu3vPK01znuPvxN7G/nGV8bzZF/mHcw/mF9NSWxzmRk/Z238LOZinBu+
2lkxr3jbOs/L2Jd5y4uJbRnYMd5OvM5njd8ncR4Hcjj0TpyPgFwE5IkgxpZY
216J83qQ04Mc7OQZIN/A9LLju4nz7qDf7611/oHDE+faIM9Gu8SxQ8QNvZbY
poA9YZfEuUXIK7Jj4rgjYo56JI7RIj5rp8QxMMS/HJI4DocYnN3qbNdpVufa
CtQBJXamS+I4ImKIDhYPr/XfuiaOayWmtX3ieFRiUZmrzo3XkOvL9WL9Tm4o
5rrMFYmdJU6SGEnygDK/Yj7Gdmlk5lv8jh1mUuyP/3RK7DM5/s6xsJmQf5Ra
C+QCYl1FvnXs9u3qPK8kTzJxTNg7qV/AXAfbLbngn09sF8Mmdkdi2xl2s1sT
+9HxoTPfwm5KTYFJie132O7uT2z/wvY1IbFdDJtYKb7zGY/uSWyzw15H/bSf
4v3D+X4dz5n4S+Iw0UiQU3d5fHY2i+tEcrHjayc+GlvZ9nWOK92u7n/PG/4L
5uPMy1lT/BCZa/5avLen/b+/YdthTss5MO8lryNx2e3icTk+dQrwzxHf/U+N
BZiY3C/iOdOf8+Z37GPM4YnNxje3MDLz+X9+5z4jtpf48H+O/Wk85jLGFb2f
Ruo7unJ959t6jnNkXFH7eWp/S3x5yb62N8WXlOz/aqX+A0q22zPuXKD/u53u
5en6/bKS/WjkQyenErmhGLPOU58dqs4XSg7T+doekrm+Y5uqx6xW5G8ghxPv
UvJMiF/XMceV7IN7A19Cyf4+8raTU6yg895I59O/ZJ8FY80lMbZoA7X3om5a
jD8aqfb2VefiI+fet1Vr4BdErTvj7EUxpum/FdcvvQG9lo7Tt2R/AfFKY2Os
E/FKl8V4KMbiUTG+ibF7XIxpIicA74/HtB2MnzLGNz1Z9fvjqTjPZ13QMPf8
f+/ID6N3JZ+izmGafh9Tsv/0QbWfpfZb1D5BfK74DvSK6jO2ZP/mTPHVJftn
J6HNU5/70O+xptI5bKfPzakHr+vTDd0j9qyS/a31am+n9t3RnokPJC+p+Cj9
bXPtuy26NbWfUrKv5ykd/0Id/786/uNoTYlbRZun/puo/5bq/w5zjpJ9xG+L
ryzZL9w9c23P1uozA79Ryb7jd8VPlqzZOEw/rdWnLTZ51oYl6wFmiSeWrN94
nzlBydqGY/T7CPXfvup1Geuxv7RtqXPuwf3IOKDzHKPzfAB9hdpnl+zLIy8r
eX6pKXSAjlPScVqqrYu4TrxR1XWlyatNjab91d6UNXHVNdzx1V+mz5hWdl6B
su7PHjr+oannV13VP1P/jdX/7LJzb9ygbU/OLfU8rbv44NR212t1nu0bWlPX
S+0npZ6PvVF2vii01tQWR399qbanlO1/nsh8Uv1bpfYFdxLvl1rjQX03ar/d
oj7X46eOc7kO6vNXyX7JQ8WHpLbxHi4+OfVccXHZ+fDJiz80dS3nsWo7QH32
T60VOUTcPbWtmLqQ1GekZiT1Iql/djfzLF2HNroOW+k6HKz+3VJrSPZWe43a
66uum4KdiHdFXbQbYD+YXLV9CL3xTtr3l5L91DuKfy7ZH/1K1TX/fqu6BgQ1
Mqj3S55/7KDYTskFTa5v6rIuQ6+ic/sGba2O82HJ/lzyOTMfmqdtT53bxgXP
q7upT9fU+pa/64bq+J9XnW+HfDwvVF0LHg3Fjeq/m/ZdT/uW0V1r3wNSa29G
lu1De6zsmt1osu7VtpJHPbu2ndW/U2pNzlien4LjWKnTQS5F6lBR45v4+3u0
7cMzE9/JXXnGU2sVDuJZTq3hoV4wteXu17Y53xd1VNT/WV2HcbofHqp3vDDz
Na7JpuozrGR/7lbiSSX7x4eLdyh7bo/fkHUe79Wz1L592euXIVWvmVZrezwa
2vge7qnPOl/riz7EAqj/hJK1DawRbis4zne0+O6C42GJ//1PwbHAh/HO0b7H
ox/WvtuVvT46XvxEak0RNZLJL1cVL6za5o1NG83VBzF2iTyD2BHWcs5V54Dl
ezxDx9m27LVVH84ttY7oJPFbqef51P6gTgP7Hqf2x1LrmrZjTadrOEb7n6j2
V1PP+YdXPS/5jC3aiaiV2kx9Li3ZJ4726Y6CY5avRuMd47ZYj9xUcIzzgdr3
DOpuobvmPZx6XUYNd2o5c++dz/1Ztq6M+OgbC44jHqn2nmVrn65X+0cx/ou4
47sKjkG+gPdP2ZqoC3l3la3JIYZ6RsHxzkeqfXDqdd9+Op/TdD490OqLB0Zd
Sltql5asqWANdUvB8drnqn2XstdTW3DdSta3nCPeuew113niLmVr5NBozYux
bFvy/ZasM9lXnzVYn3UIemy1ty97fXeYuF/qde4IcYeytWQHq/+/1P9otHm8
c9R+KPMU8SOptWFo82bGmOWX9PtpJWuEpooHl6wpelk8tGSt0fM65iVRt/a8
2vuVrDXaWsecXLLu5UXmJSXrl14Qn1yyhqqiPs3KfgfuIH6nZG3JJvrbNM31
1uMZ57qXrI86Qj+b6ty2Vnum/qWy50jbi58vWVO0rfjpknVE03Ru1+jcnkI3
rvZTS9ZvvK72a5lf17teBjWMeU9uoj6DStZ7TFWfy9VngvpswP+v81mn6lx8
X2iefYi226n/syXrl8iTNl/te2vbTv3nqH/CsdVnSMnaj5d1zCvR7+mYq8uO
M9hKxxmkPt+mtgNMaeb6kzeXHZ87q+DY877q83Xqtf/QzHmciTHvr/ZvUq/l
+4mXpV6bDxUnZdtYLmM+GuN8e6v9odS6wcVV18ZgbnCM2h9IrSH8umw/Bvnp
j1b7/an1hEeJT0tt36CmGzllqSU0RO2Ny7btnCr+IbUdYxvyOJesgyKvDnlU
M/EAta9MbRPAxv1MbD9F7WtS2z2Gibcu284zULw6tQ3kZPHy1PaK08XblG3z
wb5xZYyXRxc9J+i5jrpotO3N6KP+hbLtUUtjzQJqF3RRe+fUek5qYx3RxGsB
7Opoz6valtWnWPa8hTrL1FbmfX6JvtMtG3odEdRnvbLHuJQ1RdnzJerOU0ee
esbN1N6k7PnSs7nzD5OH+Ctxm9Tv8zvQtqHVJCZI/RuVPR8gR8GKgufz+CXR
qm9U59or5CdtXOf8OWj8Nxb/R/2XFpwbgRwIq6IG9T7xmoJzICQ6/trU92pj
8Qzx8nrXVqAmA/VYSmqvKXse2Eg8XX2+wvYrfkU8r965Jm6Pdq0Gap+m9oXo
eMWvUWdR/Bdz2tS5TMlvcEXBc+wfGNdTz0V/aeYar+N1nDlqn1WydrehjvO6
+nwu/lPtj4rfEv/BOkH8Otpg9XlDvIg1na7htg0dZ11Q+5tqXyL+Vf0vT/3s
/8Kzkfr98JP4ktTP++/iB8WvoH8WX5r6mSWvMvEZ2C5qeF+p/QfijNRnZsl6
afJRLCk4N0VRfValfo9dpPNp09DrSvLi3hG/r7vUf3nBeSq+1HE2SD2OoBle
WXA+Cuo7UyN5Qtl1uMivTp70Beo/t2TdNXktVhec44LY57kFv9vx14+J9/8S
/Wyc+v2/inlJ6vXdCvEgnmvxUnHr1HOSxeKNUo+z34lHp17XfCselXrNtZJn
PvW9uob5XOr12mrGztRrtI/E80rWZhOjTY5z5lrzeY+UrC3/UTwu9bxrLeec
er32ofi9krXc3zMWpF5noWH+uuBcH+TZeKfgNRo1elbFdTF62i8Lzu9Rq+9i
Rep3+Kc6TiG1Rv0znvPU2vLPxXnq+N+FvM9L1p/PE39Qsu59Lu+ykjXqH4sX
lKxFJ9/INwXnJ/lE7X+WrHv/Qtw8dXwxMePvF7zeXKT2lqnHbvKWfFXwuowa
mcRG7FjnuPU5Bedq2F/nv0lq3enO4l9L1qPuLm6QWrO3h3jd1Fo+6olTT26u
truq/Y+StZfUCGbttrbseu7UcflU24Vl1x6gbuTVZdftvl7bcbwvxBeX7Sf9
sMbzSXIV7qzx7mBtb8ycv564+/uq/lxqj0/UuTzTyLXbqROMLozcR9S4J2d6
jXgXndtvJWtuqeFLvQDqBpCrnzz05K6/BT1wQ9+fe6p/w9S61vFVnz/15PdR
ezW13vgpbZ/V517JukPt66TWl64qOx/Zr9ruq/b1U2uM/7bR6Dg/lV03nNri
1L2mxiL1Dn7h/PXzJu9DbffiPZ9aP9xRvGFq7fEH+nm75BiKvXlvp9Yb/x+R
9P4D
         "]], Polygon3DBox[CompressedData["
1:eJxFnXfc1fP//8911rVO55zrXOe8z/syi8hoISIpZCYipISMZDU0lJaRChUy
klEoIiRpaBEiK3slKjN7z0R8H/fP4/27/f543c7reV7jvV/j+Xw8H88mZw/s
NiAei8XuqonFkvo9KxeLPZSIxcYq3VgnORuL/a3/d66IxWbmY7F4ORZ7RhWf
VtqxFIu1Vv2mqttF6WLVT6h8VdJ1Gqv8TJU/oLLLlaao/NkwFuumPt9Sn7fV
x2LvKN9cJ3CSUlHl56j+PNWdoHSz5LdVvrvKTlCql9xb8h9qu4PO526dz5NB
LPat6n6j9GIxFvtYx+9fFYttTKlM+bPV31yVjVO6Se1fUvs69XWAUrXktyQ3
U76rUkHyi5Kzyu+nVCX5P/X/pK7lCaVtdT3HqL/z1dfBSqNVfpjkU5RvpXSJ
5FPU/iOdX6XOb5rO7w6dU3uVXURZg/qQvL36/k9lB0g+XO1PVfneSsNUZ3uV
78gDUb6dynuqv88lZtTf7WrznO7fifrvXf13p+5fJ7U/WW1bKA1Vm1zR17dF
dfdT++aSW0pOq6yj5M26ngW6lseU6nQ9R6v9OWp7oNJI1QlUP1T9rWq/v+p3
UflFKuukNEblZ+rYf+nYTXQ+96jOA6p/jMouU9mPOrcHJR/L85b8k+S5ko+X
fIXknyV3Vn99JXdQGqX/MkXf77/U1746Xp3kesl/S24r+SjVP0t1D1AaofpJ
PdNnef/0f63Kc5Lfl7xWaV9dzztq/6rqPqS6W3W8KpW/pLIXlZqpfLHOf53O
vULH+F3HuEfyvZLXKH0suVr116juy0q7q353lW/Q9aZUfqvKUyp/Lulz2Enl
acnPK79aqankyrKP9YLSrpJPU/vv1L6o9tPVvkblb6nsTaVWKu+j63hM53ut
0i0653MlL1R+ktJUyY+r/Xq1Tep8/1D7mZJnS35V6RPJGfX3jvp6Xu0yuh+z
VP6Ayl5X+lTl90meq/w7Sp9LvlPyrcqvVPpQ8nTJtyv/jNJ6ybMlP6r8WqVN
kntJ/prXUfKdkk+V/KXknOQ7eL8l36L8E0ofSG6s8/hD57qDzv9Mnf84PY9d
lT9b+RN1fner/j2q+6LSR6pfq/N/O+l70lr34wK1X636M5RuV5u7VP8u1X1e
aaPqz5B8p/LPKm2QfK/kh5R/S+kzye9m/b53Vyqp/RLJG1WWlvwn91/nk1F+
s/JtdD575Xx+xykNUv3Xs/7+jlTKSV6n+m+pbK7y/+p9ukr1G+lcl6b1nPTf
PpL3VPmJSkMkr1adk9THWt2jGfo+31B+J/XVWSmv8o90vf00Po1X+0uUf139
v6i2c1T2j9quUjpBbd5Q+1vV/onAY9vXSi+p7psqa6q+uijVqU227Hf/PaU2
un+bVGej6j7G2KW+Gqn83aTfkb1V/rz+O1l9fKD+71H/n3H9GiuPU9q+oLFN
8rNqf6fSberjPMlLGbuVpknuK/lx5a9XulXyq+prW51LJ6VGkl/Lenw7XCkr
eZDqr0v4HZ9Z52N/qGMn9Eym6hm8kvV4c7BSRuVrJAfKd1CqlTxU7T9O+Bzu
k/xy1uPDgUo1kg9VeTeV7RHd/yE5Xz/neK/kvSXvrvwJSoMlb9L9PEb34jb9
n9LzP1v9/avz2VXnM0vnc4bk3yRvJ/kuyVm+Cd2bMUoH6v48rfY/qa8flV7T
vW7EO6iyUUrtVP6Jyo9U/0cobVH5RVl/++2VHlbdp4oeb6/RuWzWs3hb9XOq
m1X6RmXjVP8U1b1c6TnGYJ1nW9XvrXSp2ryj+vmk23yr+pep/tGqO4hvWvU/
VflRKpumdkld33I948NU9ojKmkleVfT4e636+kvH/zjwud6q+gmVr5XcXvJN
kmOSX5VcwcJA6SO1fUb9HaP+5qu/3VX+eNHz1zj197v6e1/1D0q6j59U9lzR
8+VElW9R+Q8q766yk5Wq9T72zXqubKV0v/o8T3KN8nsrPcD8XvT4f7Xa/6n2
SyWfJnm85D8kP63UgTFBp3itzu2pwM/mB6VXVffcrMfuFkqz1d9bKq/SsSuV
vlD55VlfzxClp1R+heTjlB+m9LTkfryPyndQmsvz0/HaM4bqeOP4ftTf0Unf
83/U3zeST1D+eKWkrq+N7mNLnUv3aH7+PvC1n6RUpfLXJaeoq/QZ33fgc7sy
5+/3S8nHSr5dclr3+xnJP/Mu5DxefC65c9LnsFXtv5DcJel3/D/JX0k+Luk+
KnS8NySnkz7m5yqfoGs5Tdc2jjFW13d+1muNNkpzJG+p9/zxrvL76PhfB762
rkoJ9TdW9U9U+SilVarzrcq7qexOnV+l6l+p8uNVdilzjMpfU3lC5XGlT3T8
7ySfmHSbtPobo/pHqO4ApSdZw6iffXS9vaL10eis3+d+zDkqv0ryycqPYU6Q
vFbne5byy5RvpeO/IflUyY9LbiH5rXpf7xLJLSWvl9xX8grJrSWPz7r+WKXV
+u9IHf8MHXu/6Pt7Tuf7u/K/Kb2t8++V81g5hDlb5ftKbq18j2g92Fbyvsqf
rjRc8mNFr9fGKv+rnt8uRa8/E5IP0vH/Uv8Lk16j5XU/mhW9/k2qvIPKr9X5
9dG5TVZ6Sef3RL3v1zzld1P5P2q/VG2XKAVqv0XyYuUXKdVLblz0fFSh/g5U
/Z2Knk/ikttLvlr991Z/Vyu9oD4nZn1/rld6WfKr9R6fFivfXPXX1Pv+L5K8
p+Qeqv9pzN/wbfrviJy/1zbR9T9f7/dhgcr2UP3TVf+HmL+xGfpvpc73e9X9
TmmNzu3fwGvvFUrb6Pxjms9WKr9S/dao/VaVL5e8TClU+QH6vx3rjWi92Cfr
uWZPpfvUf4XaP5V0H9ur/jkqj6lsN6V7VT6v6PnkSrX9Rc/n78D38nGlkuq/
kPX6oY1Spepck/X7di1rGrXPKc3RXHCFUnvNB7/Xez32tv7fW+f7vPr7U/3/
ofSujnVB1muptkoPMv/o/GexFmeOVf8vqP5fym9WWqv6F2a9FjtA6SHVH6Pr
uV9riat1rL91vu+qfjud6wFKP6h+b/U3m7W70g3q7z2VH5h0ne9V/mzgd/lX
pbckr5L8S8JjzBuSV6rPdjrmjbpNl+ta1qm8o9p2UPpF5asDX8vInNfbH0g+
OOk6vzJW57yWu0Rpso6/XuWHquwQpd9VvkFyJ+Wnql5c9+fDwGW3SK6Q/Hm9
16uv6Fr3ktwu5/1Un2i/8krguek/yRtZS0nekvA9e1/yS5L/Zq+W8/pto+TD
kj7mnypfWPT+7Sr19ZvK16j8X8lbldar7G6lQ5Tvr/IeOv7LKv8n4T4/UNlH
kg9Pus/Nkk/Xce5hrFC6Tm12Zh7lXNjjSr5I8ssJP+M7JY+VXK22N1RqbNEz
XK10s/KtlBYpf0nBZcsyGtd1LzaEXnNto/5CHW+tyj9jPFGd95VPq87vWl8+
oXfiQ8kd1P8RzD0qX8U7ovelabW+UcnPKP9a6DnvWMZPtY0rVaptU5UnlE8p
/aD+Nkv+Re0P0nPYRfnrVecCyW8qPVejOrW6D6p7iY7XQuXdVD6bNW3ea7oS
+3ed79Gqs0n116vPTsqfzXNV+SjdpgskH6q0TOe3o673XOWn6xwL6u8RHeca
3f+H9ZuTfLX6v1z5bZgjVf9B/Vev/O36r4363kvpc+XvVuqk/KFKXyg/SOko
tW2uNo3U/+esSXT8Qaz5iy5vobJf1d+7ymfqXfcSye9I3kvyx5IfVdpF+X2U
vlH+NdbXyi9QncaSx+h4P/FsCi5L6r8qlX+i432t453LGlbHq9R/W1V3jc7p
j4LvMfe6terXqWxIwflWSnnJDWr/mfI91eca3Zsi6zHJnZXqlf9C938vjT09
lRpzfNX/Tsfrp+Mdyt4gtM5lT8m7S/5U8reSL2QNXvT1/lLpe8D92VbP8BuV
n6fyg4o+B86lpVJW+Wd0jDrlH9M1/KX8FQU/m2f0Ppyp8sclH6D+MkoPKP+Y
zm+azn0g60n1vVTyw8pfxXpM8p5qc7H6ep9jKN9bqZvel7Hq8zDlW9S7bIXq
7KR3Z4Ha36G2g5U+VvtWKv+o2s+otfK/6ZhTq/yNPKn8QtWfrrpDWX+o/iLJ
dyk/TOlTyYslz1R+BOsxyQ9LHq/86UrrJD8i+Trlz1X6UPJcyZOUP0fpA8kb
dIxtdbzD+WaVf1Dlo5Je46xV+TzJU5Q/X2m95IdyvvZeSu9Lni95qvL9lTZK
flTyTcpfqLSB/an6/JXnr2N8q/wUnjdzo+T1ktcxBih/SqWv90k937Z6fhP1
fV2q+1FW6qL2I/V9Haf8vkoVNe6DvtpL7qmy2/Xfi2r/sdL9KrtH/X2i/BLV
2Vv5vnoem3Q+1apfo/620/vWSOVb2K+ofKTKm0lezPco+WvJdxQ8pjG2PS/5
euWf0Pntq/Mbr/Mbor5WSN5H8hWSB/D89I7H1f861Z9Y9jfEt/RR2t8341+q
ytfMtb+g9Ij636jy5xhrJc/QtXyiazpEbfdQelXlpzXSXKv8ByqvrvI7w7tz
Hd98lf9j/OT74t7yTEvKl9iD8G5JflPn80fZ73+NyiZrfPpI5Zt0/r30veyl
7+UDHXeSvoULdT4P67ijJe9Q6/Gqm9q9InmM5LNVfrf+G6VjXqr8Ker/G+W/
UzpN+bNoW3D5yZJXSn6FsUXtL1f7c9Rmpv4boeu6Rtc7XfmT1f8s1ele5TZf
832qfmPVX6zyM1T+vf67UGWvSC7pe1qv8utUflHa9/EyyTtKflT5Hqo/tuCx
bb3kt5V/P7QO5kHNH3/qHlyu49+h489T+Xmq/5na36L2A9GX6L+5anNRlY/5
g/LfqPxOlQ9R+TKVX6n296j9IuX7V/sd3V7l91b63f1R9/sDtd1G79sNyo9R
/VtUf47Kz1L93yWPlHx9pd/rXySfr9/Rkv9lXJc8oMbz5X+S75PcT/IVkh+U
/IfkKyTfIjmu38465mX6vUlyU+U3q3xyjb+HpH7nSh6n39skP6b28yRPlHyX
5IWSX9D1Xarz763ru1P/3a/ywSqfoPzDKv9N8lDJ11SyaNY9Vf1xtf6+Zuu/
MQV/67wDvAvvqnyCys9T+QMq31f3/1K1m6x8Xvl1oXV48/Q8/uH9lny/5PmS
/5X8dMHfzn3q70/mR8YB9Xek/huuPvpJbqG0rfr8qdLj2WlpzzG8/6tVNkz1
z9B/t6t8kM7/YtUdp/xBqhOy/1LZccpvo/x2Ov7P3AeVF5U/UP91Vx9/q822
yr8VWod4M/pMyWt4P1T/KJ3fV8q/EXpPcgY6zHqvgS7U8U9Je23E91ub9JqH
tU9DvY89XfLvlPEf44Xel66Sd5C8XOcylDVGvc/32GqPiYHyXxZ87LlKzSW3
UfpHZQM0fxyr8WSzyh9S2fdpryc+Zv2h8zsTm0HR5/+E+p+lNjupbWPmK8k3
Sm6i/Juh93Dn6HrWcf2qf22157wfWe/pfo7WvZmiNkfr/yW6V+frervreNfp
v8GSGyRPUr4N37fkEyV3VvmoSs/BzMVj0h4v7lP5ySo/RvIYle+v45clX678
P2WvL45V2eQqrzd+lXxdldd8SckPqv2pqn+c6lypNpvKnk+ZVydpvJuv8rNq
vd67mnda8mmSu0q+im9Wx1vA9677H4QePyar7DL997Pyw3jXVH+a6h6s61kp
eaDkU9NeBw+VvI3kG5Vvp/KBuj8X6v5cJrmt5GMZc2pcd3/eb9UfpPq91H6q
/huu+mNVfqvyXVX/9dA6i27s11hfqXyYyieqvJPKH9czvjfpOftzzW/LJD+S
9BrgS/SP6COT3mNvltxE8t969m8rdZO8C3pFvSsb0EFL3hU9iOSPJJ8iuRn7
VsmfSu4hubnkAH2V5NOxP4XeQ3+i4eCBet8j7tVOlV5P7qn69ar/reqfpvo7
se9S/l2lEyU3ZR/F3kTyyXX+9h+rsM3jC/RfOY/NaV1zTP1NL/r4/dBN6dgv
hLZ5rFfxLOZL1a9D/6z+eqnOtKLlC5X/TnUPztnes0ukP7+y6PtxlvJfqbyF
ykOV/aT/zmB9Jnl7yb/HbR/YXXJW8heST5W8G3YMyZ9L7im5peRt2Z9K7k2f
6FNYayiVdP5fsh5RvkapKPlr1h/K53jfJG9iP6J8SqkgubP28N/p2dUqX8D+
JvlLdJGS89ibJH8juYZ1reTX9b7voPvfQ/+9qvwb6u+HpG0+/+p8ZhZ9fgOU
/0HX+w36B46lVFYfn2MfUD6hVCf5JPX/N/pb1hboW1S+TdJ77iXqY7zkUtI6
kMV1Xs+3VtsqpXrmcrXfim5I+ZLaT9E5fad3/S7J9Q0e34boPb5K7/Xxyr/E
eFDpNRhrsZdD23C+0POdy3ik/n9O2kb2n453gP47MOM1E2unCUXvX89R2deh
72dLnUt3pR1V/mpoHc73qrZQbfMqX6Nnda/SIWpTJ/lV5Wez/8A+KflF5e9h
v1Hn+9NcfZ2ktEPB67Nnq73GZa3LHoy92MFKS5TvmLO9ceeE7c2H5Gxf3C3S
74/j+0jaJrxI8vLQ6x/WQazPBqr8nYRtwner/GLJ7yVsc76nzvtdxsI5aY9/
A3K2/2ATv0vl/SW/nrBNe0ad12is1f5Je301WOUfJmzDm6XyfjnbI9HBTGc9
n7fO/ij09dH+aJmu/XVd3xvKZ1X/ed2bu5Q6qn6l5MXKX6e0v+QqyUuUvwEb
NutvycuVv0mpneQayU8ofwv7S/QjoW2Q3+r5PKbjTSp6fDqXcw+95mPtV6vn
fSjrSaU1rJ2UKtm7h7YBfqX289R+StHj13lq/63KanW8lTrWrUrtuX+S5yt/
DfOh5HjOz36M0j7YeyU/o/zt7CclN8LepPyd2HwkpyUvUH6iUlvJCfaHyl+F
zg2bVtb3ZphSa8kVOb9ro5T2lpxkvFZ+vNK+dRgq/a5dynqc/VPO3z823K3Y
r3L+/tEJ/i15o65/xyqvedi//Yu+VGUv1Nle9Df2eb7/OttX/sKeL3l1ne0n
k9Rf06R1RCv032Tsa0nrlJ6QPCvnvRw6sDfQH+bcHp3yUskTcz4eOqzljC85
7xXRqb0u+d6c94bonN6UfHfOe090eq9yvSUf/8U62wtSkneX/HKd9fGsZ9Bl
7KTxoafy1+Z8Pegkl/F8VH9fya/wbmEP0vhymO7HIN2Pi5W/J+e9Lzae11Tn
ff13OPsjvcNLlL8v5709NrC3VH5dzsfHhvSk5OsZD5O2AayUfAPjSdI2iaeY
//h+ktaB/yH5o5z3lm9Xez3G+oz8SqXdJTcpef//Q53xAOgHWOu9GOkPVqv9
G+zVdf6/qs5eJesbfquzvbyZ6szX/Viu+rvVO5FHp7Or8leX/T7wXkxU/UK9
9w5zWVcpPydnXQE2n/fU59BCpPvS/e3F/hU8hcqerbM+84+ix/vn6qzv3K7k
/f53ddZn/1j0+PVMne1vs3PWbWDjeVv/3Zjz88EG/bTkB3LWXWDjeZf5Pmfd
BjagdyRPAP+g87lJ51Wl/l5S+YakbQJ/qnyN5E+T1qH/JflZ1Ts+7T01+sRN
BevOWDOwdvgefSJjtdI2rE3U/58qe491bIPX342rvKZm/Y/+oIXklkqfKv+8
Up+0/0Of0Bo7DWOP0mms/XU/zlbfeysfNHg8ukHyNbqf3dXfdzp+B+Z2pQZ0
SyW/L0nlG6n+OznPr2AK4rwrrNmTfgcqGN9ynt/BKP3DGIbOg7WDUsh8k/P8
is08UfCan7X/L5H+rxM2dpVVKZ/jfobG6Hymx/Wgzq9DyevDNGO5yi/M2b6P
TvgOHe8g1Tla69M79P4cVe/9HWt1dBLoc/5S/b4pX+OuBesP0WV+XW394iu6
3w2ST2c/rfzvqn96ymuinVR3s+Q+KV/TLpL/kNw75TXRzpL/zPn+skZpyvye
8/uJTftx9LWSL1bZUUq7887o+dys/L863r6Sf1P5qSmvuZpI/pH5mL6VtpO8
VfKQlP/bQ/IrOd8vMFRb1P+/ki9R2bFKezK3S+6R8hoHfeXf3O+U37HdJP8i
+eSU13CsN36WfGLKayrWCz/kfK6NlbaV/FPOfe8S4Rke0LNZVGEMzZfYCwPb
Y7HLMv89ljVW5k+ln/PWkR6muWL7OutOV6j8G2ybSt/lbfPE9vmSys/me856
rmP/10z/rcoZ+/NjtD78BHuyynaN8GUfY29WfucIv7Eh6+NtF+ElPsKer3yT
CC+yEXsoeJoIj/Jn1nPj2Uq7Sf4r67UA+tk96qzDpv2OddZtdyn6+E0kbwJb
IvlEjs/aUvLmrNcW6KN35/vPGfv0S7Qe/C3ruRd91i6ST8R+qXxT5b9U+y1Z
rz3QH++p/37Peu49nWuWvF7yoXHbK8CHfIo9mHOPG8/3edb9tYjwOuyJD9S9
Xp73XnmSyi+S3Cmy9x4AfkJ1G1j76f5PVnl/lR0e2YtvkHxJhe0Z2O+ncv7K
94rs2zdKHlnh/R/26lskX6l8z8jeO0XycOW7Rvbqz7K+X+jLwSdeL3mwyjpH
eIGlfPvYj5W+zlsHsD+2mTrrBph/wHr9FY0/6PwP4n7U2RZwndpfXBGtB9X+
hZyxPP9G4w86ee7fdnXW1aNT3EdyUGdd43LWZlyr0rd5z6etWK/oe52i9h+q
vKPqlyN8zQdZH78U4WvWSW7HuxnhabZnbaqxrLHS8epvR95X8J9KJ0hugq1I
+V2UukkuSz7EU1XsWMnb8r6Cz1TqKnlnnq/yLZROktwguZPy2yodJ3m45H10
7rUR3mCY5L2Ur47wH5dK3k/5bGQfLUnugL1YqQv4Mcl7W3UWO1JyU8k9lG+t
dLLkS8CDgf+K8CW7YN+PuU13yfWS24PPUzpG8k48b+X3VDpRch33x1vlWGfs
u5LbelkZOxq8YNbH0pAcO0JyI8n7Kq/pKnZU3jgIsA0jo/XBHTmPH8Oj+Rob
3i/o5vK27a1S+7+xFyv9qv+ekfyX8m8q/QIeRvKP2OaVfsD+z96Ld1fpe8nP
gmdS/j2l3yQ/D/5Fz3ZDhfFv7cEssh/WBfXXQ3sO+7fK368wHnI19nLJH1YY
b7gy6/N7WelHyU9L/kP516Lx8inJv2GfVfpJ8vtZv//5uPG12JjoL1Vn2xPr
1T669smRvWQt94uxIW68LTZlbMurlD9L5/de1u97bWRvR+eH7m9F2vZScDLg
ZVpF60fweWCp9ovWRzep/Wid20kRPqQl31vM73hv5jbJl6mse4XxVugYed+W
5q17fF/9VadsU2P/jY7kwJzxq+hO1ilfq7J9Iv3D2pzvb8tI3/BMztjQ76P9
xvl1xoSAh7hJ7a9Rnbnouti/FoxrBVv6bbQ+wSZ9Ys74aWzVT+WMvf4q2q9c
qzZL0EUmbG99T+XJlPfU6BvQSRyUM34XXcUnyjdR2dHRfPkx63/lj4zWc5OV
lqdtk17AmMN+RmVdovkdnQ8YC/C46ILWs98GGxfpOz7g/iu/X6Sf+VByXvn9
I33M31nvTbFHNq8zjgMsxhfR+gAMwwT0lmljG8CUnZQzHh2sGZivk3PGc4MF
m6A23XPGiy8ven80QH3dGtnP2G9dpPzNkf2M9fElys9I2v7HfuVi5W9L2h4J
Jq5nzvhGsHJgzk7JGZ8LFu1gdLZau23UgPNfwetvvuW7k7Yfsh/gW5+V/P/2
wwnKz0taf4i9b5zyc5O2d67mGiu9hmYtDUbu1JzxlmDnwOyA3flKdc9pMOYL
7BfrNbCjZ+l8OmqwebfK54O9cbTq35e0/hLMCtiVr5Xvo/YJtbkOfSC2ntAY
lxNyxpuAfcGGw3z4Tt62ndv0vCZVWF8N3mga6x3lz4zwLrdKnlBh/Tx4oQ3q
q6RnfVC0nr496+OdG+GHHs16LJlVYbz1vKzHsrsrjAd+OOu57LYK45EfyXps
m1Fh/O/crNdid1QY/4sOdw/lF+at2wWDflzOeCyw6eCiwb7+E+0HwKR3zRmP
AlYdmw62nfmRPZ/99gWqe2PS9tlRzJfqv1Rh/N/IrNcn9RXGc45gvFM+H+Fx
wFDsovxjeWMrjtX9L+teZHTsgejLsx4r76swfpv1J2Pp/RXGay/IeqzHngae
+ft6r0feUP7d0Bj643PGl4Ctx2bC+mhN3raUL+q9nnhV8tuSf6r3eudNye+F
tgHx/NbmbRv6pd7j41tg58DH5Hy+HaP9FTYknu97eduWvq33+up1xsrQGLZu
OeOLwLZVFP2+vK/yD0Pj7Zlb5kf6Z/DszC0Lo/U4+GzmpsVKX0lelPXchf0K
/PnCrOfChyuMX39I8pPKT60wfn2czvGOtDEuA/W8Hsx6LYY9CTz6MsmbKtzm
G9YjOv8Hqm1zwfbC/nqInvWdyQg/oPpDYl7znKn603PGavJNYb8fqvLm6itZ
YTxpO32zE3WvrlW6UM/6QMmTmF/z3r8eUHbZNUoXqHyg2jdW280x+0+cpfLv
Vfad0j0qH5L1+xyvMF7tdJV/pbIvle7En6Ds/C4q2079D8r6fdsaM355f5Vf
rfIJSuep/gCVb8/cHrO/DHhk3l30gfgj9Je8LWuNmPHObdV+vNqOUzpX7S9W
+U4q3xKz/w94NdZi6I/B/4MXZe3G/hf/FPBpfAvoC/EXaK/+Jqd8T/qpv4Mk
X6/8dUoDJO9X9rGuUuoj+QzJ3yj/tdIMyb0kf6H8JqXbS95jr1DfE/Pee2Mj
WQb2N2/bCTrtlZIn5a3rRuf5rOTr8taFoqNeLfn6vHXX+BNxb15VmpI3/pt7
sUbphrzxgf/FjOe/JW88Ic8G/Dz49d46v29TPue70F1I/lH5H5RmlYw/5l3B
noL/CP5Jb2i8Gad3dqjyg1XerMLHAH94atnX+rnSbSXrXJ9W2eRIF/uzyrNq
f5XaD1G+p9Jnqvup0q0l46dZO38SM/7yzLLfrWbKb99gvDVr4Y0x+yeBb2Zs
Q38P/nJ4ztjpIGn7Q2u1H6n2I5R6lexz9AjY57x9kW6UfK/kK1irSj5U9e9U
3TuURqn+sVnff/DZl6nOcVnf/xngCSXfpeOdkfQcCb4Gn7CHVHZV3r5iR6j+
gpjxK8Pz9omYo/zYvH0lDlf5o5KvVhqm/w4p+9i3K43U8Y9k/8/9A/+i8i5Z
38/blMZIPibr9wU892jJh6PjVNu7la5Q+4Ml36b8NKVLJXfO+v27WWmU6h9W
dt27lC5X+VEqf5z3S2mEyjupfIbKpiuNwd8q6/f1RqWRtM/6fo5XuiRvjOUF
yl+UN/YSfWtf3Zvrk8Yb7V22L8JopdPR1Uoeq/yVSmdzvlk/D/B0g9RHm7Kx
qJcrnVny2gFsZ0PS+h58VLh/4/P2XdmrbF8GnvmpJfuIcP8n5O07Ao4S7OPO
Seun9ym778uUeqv+ITr+bO6t0mC1OTTr5wWeZ0jeGE2wmvPU9owGY5LOVtn5
eWOVwMCDhZ+v8t4NxtgPUHn/vLH3w3LGBheTtu+A+We8HpiPfAGwT+tcblG6
ROfTUfKtKf83THKnrN+vsUpD+b5V/lPK3+y9+DOiP4h5j3tW3v4hjK34292c
t/8bY/cbPMO89d8L9D1erO9xIPc65/NvHum3d9d/O6W85u6m/vcoW1fGfyeW
jHsFi8oaFXvAbmXrsliTH1+yXwb+GQMifX9Q9n6EfQn6xXLZtk/+66j6pbJt
hZWswSTvWfb6nXU89sZWkndjPFDqAd4+Z6zrLknbK3ZWeZjyGoC1yzZlr+dZ
16PvvDxn7P4ekT7/spyfZ7Ok7RvNy9a9ccyTS8brfJs2/meA8i3LPjY+R6eo
vEXZefyQsGduW7btlmMepvJi2dfCnoq9K34p+Jawh8TeUSh7v8O+B/1vc/RF
MesYTtfz2TPr7wkdxWmSm0nuHfMevgf7+7Jts3GltpxP1u8bOowz0A+UbTvm
GO1Uni+7bgV7mpIxJmBNwHB+VDBuGfwya0jsNbuqv9Nj1gmcov72kNw3Zh1G
r7z9kPDVGBLp9/HbwZeEPQn2k5tz3g8zBmBv2S3r7wWdRM+8/ULw7bgk0ven
stZd6JHEDlP5DJWflvSeA3zh7irvE7PO41SVV2atm9HlxA6X3FC2bT2jdGjJ
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
yTtofXwx61PJ20s+pNZz+XPsuyUfUeu5bTW8YJJfqrVuGp30CehWJZ+v/jeq
fB/JO6m/DPg8ePok36DyX8HHSW4reWeV7wPessq+NbtIvjJpH5tD4FdT/Vck
v4efO7p3yYekzGl5jOTd2DeA15XchPVUrefu5yUfKbkZOn/wzpKPlnxrrfnM
4DXbU3Jjla9U/TWSd4enrtZz58uSm0neUeXTJL9UZZ/4czLm7MBX/lvlz8iY
O22p/hur+qdnzK3GMcCPf652G5S/nfWtynoo9WK9w3wN/hcDDphWPY9DGQMz
5hpbDJY1tC4NI/B++A7hX6Lzu0zXsxUnSR2vD5x06u9l9G1q0wnuCHTJyrfn
G6j13uBrya1Uv4n62yT5VZ3X5Q22WT2TMv7/sgbbhJ5IGQ//i/o+M2OOGzjw
/lL+bKURkp9DP6w+D03bJ+Q+vX/j1H9vlT9V6Wd0kOQrdfzZ4CV1vAMlN9Xx
TwV/iU1DdZvVWtd5Deu/srkjPlFqWTLeDd+7r5PGx4Gfw7cPTqAukt8om+sA
zkLsDwfqep+ote5wWNn4Vnzd4BxBP9JIx19Za87MtTrmZB1/11rrtlmDgufD
FxDOEvRp94Tma2COZK6cyFqt1rpK1phDJO+bMVcY73gH1W+bMVfbY2Xjvxjb
4EjpVTR+GF00fR4M3g5/Kt2PwwCEKp/W+S2ptb/Bm+pjEucb6VIn6XhdJe8u
eXswiFUeX1boPegMJ4T6vkbHblprfgPGiP8kz4d/LO13lv3czWljNsbofLaq
fB7vk/57iTVn2fcODli4YCeofOda88ldrP6u1vEXYDOp9Du3WeUP1vodXq3/
iuhy4UuTvEFyQfKztbYVfIj9TPLSGnPgjK82Pvo/DNrYO3U/flZ/s1R/eNrv
0DjJO0l+ptI6NfB8D+rcH4ob7wf+jzycNT0ljwidZ05hbuH9JDYGe0z2mn/w
bdWaL5MxEvwl7xYcFehD2+HTovN7WmU1ocf/J3R/u0reiD5R/51bbXthlfIb
4GvLmAtxrup01H87SF4iuUVo/udC0hwj6JPhL94uaQ4a8IfELwAbu2OE54PP
frekOVzAF8IvXZd0H/BHTw3NbwPPDXwI8LmDDd8zsu/vFth3t0apsuj4AGD3
4bj6uWg+aXxNyknzRV/FXlHpyUq/gyPRFWfMbckYQ/yAFklzxtSUzKfP2o3/
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
Q6m7rnem/t8rY64C1pzg4TrHHfP76KJ13ui++1c5/ht4sKPijtlN7G7048SG
w0aHrQ68Spu4Y+TuUzQfCdwVx8bNN3IL/qS11s00rrT9G11XP+yXkT6f2O3Y
3LC9YX9Al9wdnVbZNnxs+ejssSfg/8/eZkukHx8e+tzhzIA7g/hNxKbGR5r4
UR107CkZ65rwsR4DNgL9dqU5DgbxrJWurrSOBRsStqS6atuL4LSB2wafOtaz
2JuwJS2osv0Imwi2EWLeryk7vhSxPLcmzT/3ru53KmMbBJy9J0t+uNb7d9bk
4IX2AusT4XveU3la9VtWm9P3A8k1Gevb4dQlPs5P+CYrdWU9qbJ9lK6sNCcD
eCH6IiYxsbjB4x0ed4z2wyQPC52HQwMuDfhqEtXGOIB1IB4Ya2feMeJ/bdTx
s3A2VJsT+sqMsSJgRvCp7wmGt9a6xTbKb1D9RnA2VJvjGR3HDQVjGtB9zAzN
RcAamLXwHaHXlnASwU00UXXWpX1O8Occqb5vz5g7A50X+E64P46K8IkJxgew
HEnzl8bL5jbiv8Yl26iwVWETxN5LPK0P+K6S5huGMwHuhLWq833ZfDhwm3SL
m39nZGguAjiI4CIi3gRjCWuUM4qOh8Zac3PSfIiddf231RoftajS4we8FmAI
4CeEb6h73N8k/EOXho43D6cK3CrHqf3dtdZFYiOB3x2u6UzC8ZjBU23NWUdH
vD720PcV/A2xtyb+FdxEjFHEx4IPvlptaxLm/70Wm2zCnHpw6xFPBm496sAX
30XH/yJj3fbiSuPDDojb5rW/yher/MuMuUPAHRF/Bu5c9oS3q/yvwGtbxuBC
yfHJ4CJmDXtgyfiytnHH4CYW/cTQYzGcgHADgunalDHXCFivLYG5iK5TKqLr
Cp2H4wiuo78Dcx2xpwhKjmcD1zPXeF3R/raMxWuj9Tnx49h78Q0RXwqdGbpA
9Cfo0pbo+n7ImCsCG+nQ0GMbPiXYR7GH9kwag/FF2fg+fE3aRng58Oxw1RwS
Nz79ePX3fca6Zmyw8FF1jfuZH1c0VxaxlY9irRLpWNDFor9C94JODN0k+iB0
ZfBJncS7EzefMnh4jnWo0sHgm/XeNMuY6/HetO1pKwvG6DAf7wDOvda2CHTQ
xItbl/Q3QXw58IKdGCvos2j7HnMTmAawDeDdO3BtYNDAJ6qvqRlz3aADh2+K
sf+4uPluwYvBRVqD7Ypj6fjVqn9wtTm+4bviWzsxbj7s/wO3OEU1
         "]], 
        Polygon3DBox[CompressedData["
1:eJwV2He8z/UewPEvjpNNZkfH6hhdQpEVLuXYIiNyjeIY2URGp2yOdaxkxFFJ
Quax6ZJyEtkyIiVKSoorlZb7/PzxeRyf1+/1Hp/PdyvVfVCbgZmjKPrVyGqU
KhJFOfNH0dG8UXQ9JoqaF4qiAoWj6Hi+KJqTJ4qSM0XRzQJR1O++KPoTO4jl
lyBfwSjqg93BPsFyYzmxvtgf2AEsH5YHyyffMWw2NlK+n+TLgx3FZmHDsR+x
wfoYdk8ULc4VRU1zRlFdrL98f/MO8YrIV0i+SOxO7CWsjthzvFjsU2w61h+7
hL0gNubeKDqJPSi2rNjnsd95+7GcWHbsNewA73V70NIeZLYHfxnbeSN5NeQ7
Jd+32EysJfaxNjZjvcWewpZj7/HuYMOwIvJdwbqoUVWNW/rrLHeaGrOsc6J9
z/C3Kvai9VY3aootxDsh31yxr8h3C4vDPsPmYeOx37EDYn8VO0ZcbaMWVjkc
o9xRtDRHFKXbx1LmD4g9K3ah2BliM+ulCvYPthu7hcVhxcQvyx5FF8Xnk6+R
eTHead58Xgrvb6yHnLuwaVhP7DxWl5fVejOwGOstL19n62utxyLcPU60xfZu
hNiSvJ95Q3lNed2xbZzJWCf5jstXQr4z2AJsKnYXa4AVFnsae1RsFbGZ8avZ
9KHnytb8sJhe8p30dxlvhdhfOH/q4xNeGV4H59W/sa68dN44XiteBnZRjzOw
Fthex3c9to73pPiS+BnrmM0pj70r11b7dFje/tbaijtX7oGxUbTR3j9u/hxv
i7iJ8rVX4xDWDduKTcI6YkexK+LT5PlVnZ3GO+Y9eYd4i3mv8S7zhmPF7cF1
LFzEifbgsn5SeU9i+/ScHuqKbytPHL5Pz29yDmK51EjFdxsrzYfKFyvfKbEV
5asgX2n7/Lm4RdhMdWOwHNhhLBUbgn2nxg05N2JDsLLYPuxLbDrWHNujl7XY
i2rEqXEV665GTfl+4W3iDcUqiD3Ae5a3GZuAtcMOYknYDmwK9hx2GluOVdJ/
JnystXWTawiWRY0ToRc1SqtRFmvgGJV1Xqx0nVy33pHheuDdDPchXktehrWt
xvq7Lo9ksRfYDO7bYrZiC9RKNT/AW8MbiJ3kneNVkK+aGkMd9w78a7yF2A+8
93nbsSL6ewlLxApgp9TtJDYX9xdsO7aGV4U3KvSM5Q81eB15r6s7Bqsf7k3q
rsbixWbX12HsqthGoQZWzO+VsQl+SzYfHe7rzsUYPW7RY6L9K4eXsG8XeYv9
PtO8qJHNvw9hV+RLlG+sXpqrWzQwvfRX95peDmKpWHleLK8Tb61j8bI9beAY
7VAjv3wx4ZrjfcF7jFeO10EfFRyPfurf4OyVb6V8fXkH9H5MjXRsKtYM6419
hK3CJmGNsC7YDuxdbCLWEOuEbcOekrOFuvfqZ50as9T9V7jOXadJ1t/WtdmH
c1FshtgpYovr7w+xb2DjsCewtvKtxy5g+7AU7H7eb9hu8Xus4aS1rHC/zCN/
Gm8s73Fea7FrefOwgVglLB5bhr3JvUd/n2M59Fdff8lYQ15B7Kx97sobgzXD
4rBvsL7YaKwJVgT7CuuJbVZjGtYc66NGBraTl8Mx2KtON8f+nH7fwnKZf8kr
rG4LdV/GGokthJ2T7zmxXbAN9m6MY9nMsfxAnlewxrzCvAu8JN5iOeOsPaff
35d3ByfF6M57hFdGLxN4U7AeWNVwvmBTwrMH+8re5XVMesiRzbyzsU7dV9Rt
qO6ucN/Q4zy9VpN/ubGV84aR1b/PyJfVb7U5ze1BUTXOif23/uqokca7iX0U
zivH7UHefryfHiaJn2xsDPuEV/L7bPM5xiZsqXFb7P5wrfqtKmcx9jO2F9uH
JWCt1S2GXQg9q9tA/lZYPPZFuBawx7H59qqXXu+IfUeNBeZL5LvB+xD7WL4y
8q0Vm4I1wbrrc7fYRbxr2H+xnbw4XgI2wN5VMZId37Xy/cDN4/dN3GlqpHNe
425Wd5X5amMb9rpxnbNHvj384pzKxnH/voXP523mrNfLFPOmvB56+SC8c6nz
I7YBm88vJq4jrxT2dXiGWu+TvPHheYnF865hQ7BxWAvsfux7bBB2W+whbA5W
Xb7c8s3G+mMPYUXUTeNNFdsLq4ZVxlKxhbzRWD2sBbYSK6y/WP0fxL6Wr558
JZ1Hs51jqc63fa7Z436/JPZjsVN5JXl/iZ2gRkusGPaT/oZhE7FWWHHsBjYc
m4WtwkZh/1P3OPa0fCWwr8I1w2sSzgO1b8q9RL00Y4u48eG+I2aY2OnYBPMu
YhPEXg7PPLFtxE7iPoWV4N3CRmHP8kpj34T3CKwdNpnXGivJu40lYzFy/oSl
h3u7+g/o4zKW6rl/S83t4VoyXybfeF4DXns9pYudGd5psBHhOwA7hL2H1RKT
y7WZ5lwaLV8Ne5rTXt4N7z/+Hg7vEryq/sbyZvAG8N7BKmOZsfFYEvYfbIp5
B+v40im1XK5VWHVe9vCeyRvBW4E9jGUJ70lYL6ydvltiBbBN2DxsNa8GliO8
32KjsPnYVevYaR2b7EH+cI1jZ+xB3/Bupu/G5suMh8Te5SWL7cyrrUYV7Dcs
CeuPZYRnofz19bxcz3P1/IjYnZ4n2eT6Rt6h4ioa+cSeEvuPuh3EHTDGi31C
7CqxC8R+ik3AGoTvBWwR9oSxWa4l9nODa7qceQX58sr3mXx/yfe0uNLqLnTd
JxoPOK/vcDpig+WrJ1+afNPFjhI31FqX6vFHbgNsA68NXpZ71dqWyDcQi+zV
UbHFnUPxjvkA7C7nCBaPFcUGYZl4x7BSWAlsMJYZO44lYKWwDlh/sbWxV6Ue
p+7a8B6hbnH8hLrT1c2LV9L/YL3dp8fHzNeH855XmneZt4DXBksyrxK+heTr
x0swztmjDHv1WTiW5k/z+vBqhm8c3ktYO6w3Vj18u2AvYm2xntij4TsKG4w9
gw3E6mILsclYe6wvViu8A2MvY+9ij+gvBk/R3/PhOzncD/SSqI+z1lLRfI3R
lBfPO8ybzFvjOJXmtLHWv627BOcIPpGTqMY6NZao8Tk2FWuK7cRWYvHGm2oc
lb99+NYznxGeAfa+jnOjvmt1qb1/Ro1L6iWIX6n+QvNXw/OcN5aXxTl0iTcd
64c9htUWuwibFvYPqxnuxdg87Ix7xF5sIlZQ7A1sNu89LBn7jXcaG6FWL+fa
eus7ob/6+pvH+5D3Kq+u2JvhnVq+vlh5LL/YheG+i/XEymCx2AzsPPYRNhmL
E3sbS5VvBTY8PFN4B7FvefvD8w5L4N3FSlhzDv0cCR7W1H4uEPs9bxe2BSuI
jRGbhCVgmeRLEbscm4AlYs9gm7FkrBtWKlyDzvHx2HFsIzY0vIfxrmCNsfuw
s45bLV4NbJs6/RyLClhfx3KsfZkT3pV5r4R8Ys/zTvIm8xrxNvHe4p3CUrDG
2BbsbWwPNgirjA3DpmFNrLeJ9eYO///g2E/iHDMmmTfkbeAt5Z3HpmHNsPex
1djbeqkoNgrvXWK7hnek8A1gj0Y7lh0dyzq8auEZ6vyrgg10/tYz/856P7GO
6eFdj59J7Dqjl1xl1egq7TDeQ2oki5vpWl0mR6z53PCuJ3Z0uE/agwv2YEjY
A143NTN4u6wrRY3evHK8nLw5vIfDvZ2zSB8vOOeG8HaJHaBuRXUHqTtJ3dVY
D6x0+MbGBmHp2PPYg1gSNgprIb6ZNefFV9mDaZwyaoxUI16NtPDtZD4nnFeu
2+xidoXnKPZ/vByldg==
         "]]}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwV0ClMw3AcR/HfOEeCYBxi3AXGKQDFBjNI5FAcChQYyOQcl8ENiZwhQc6B
AmQlEsckhmQSx2fi5b1v2rT9Nzm93L/IRMQR7rIRnW71R9T7IlZ0BWcjETVu
oK5TbiPv5hd7l8/xrR/4FS1kRyMGuiI2saEP+RrPOLA/+Q9XOumO2MOTrvIj
PpDaP5zrifjVJT7BPXJjEU3+QlFnen0zKji2a9zArU65jUlne3POvPPdcNke
1xPYGnKdp1DU0zyDWZTshOewred5AQXs2Iu8hLJe7vw7rKI57Bne8e5da/b6
YMQ/ofEoDA==
       "]], Line3DBox[{3, 2, 1832, 2180}], 
      Line3DBox[CompressedData["
1:eJwV0D1OAlEUhuGLyICKiP+KM+LgD2pBWIJLMCQaaysrbK0Mja0xrsDSFRCX
QMkKjEuwtPQ5ybx5v+/e4p455f3jaFxJKd2gisUWuIZMzriORqAv8XIgr3AT
q2Hdl9bQEtq8jg209U3eii5v8050eZf3sB9neocP4kzOucAhOnqXj5DLJfdw
HPf6CZ/GvXzGfVwYfGLwc/mF3/3MtfyEVwN98AxT+TfetIgrfOsP/IbM0F/8
g8ZCSgN9yHe4lSf8iTme9Utvlpb0pxcW9Q8ePBbI
       "]], 
      Line3DBox[{2182, 800, 1688, 3218}], 
      Line3DBox[{1699, 840, 1895, 1692, 6114, 2182}], 
      Line3DBox[{2553, 880, 3179}], Line3DBox[{960, 920, 6015, 1705, 2553}], 
      Line3DBox[{960, 1000, 5356, 1040, 1080, 5391, 1120, 1160, 1200, 5430, 
       1240, 1280, 5465, 1320, 1360, 1400, 5505, 1440, 1480, 5540, 1520, 1560,
        1853, 2179, 1600, 2243, 1831, 1599, 1598, 4163, 1597, 1596, 4162, 
       1595, 1594, 1593, 4161, 1592, 1591, 4160, 1590, 1589, 1588, 4159, 1587,
        1586, 4158, 1585, 1584, 1583, 4157, 1829, 2175, 1582, 2608}], 
      Line3DBox[{1824, 1580, 2336, 4786, 1826, 1901, 1581, 1827, 3559}], 
      Line3DBox[{1699, 2646}], Line3DBox[{1824, 2647}]}, {}, {
      Line3DBox[CompressedData["
1:eJwVzkdOgmEUhtHrDkyMiU5ULBv6sQ6cMLED9t6w113Yu2JFRV2Z5x+Q8/B+
N4RMrpDkayKi32ewLuKkPmKApxxirjZimGe+jzBpiGhqjBjV57YxXjDPirdL
XdBXLDJra3Y/rq9tE7zhJD+93eopfcdpdtpa3M/oe9ssHzjHL2+Pel4/cYFd
toz7RV22LbHb1mpb1s+2Fb5wld/eXvWafuM6e2xt7kv63bbBD26y6q2it9L/
y2322trd76T/ybab/i73+OOtqvfT5gH7bB3uD/Wv7Yh/POY/FSA6Xw==
       "]], 
      Line3DBox[CompressedData["
1:eJwVzzdOA1EUQNHHDpAQEpQ0LIgSiYYFwBpYgckZG5NzMtATDBiTk8k5bIPz
i9G5895oZn5Da3tTW1VEtLg6ayL2aiMy3GcXd+oiirpbH7CHHdURvTx038cj
9nPXsyU9oI85mN5nVtZD+oTDPOVI+obdmR7V5xxj0exCZ/Ulc7ziePq+3bXO
6xtOpH8wu9WT+o5TbDZrrI+Y1hWzGd5zNv2r3YOe04+cZ8nsSS/oZy7yhUvp
HHavelm/cYVls3e9qj+4xk+upzPafekN/c1COq/Zj97Uv9ziH7f5D1BzTNQ=

       "]], Line3DBox[CompressedData["
1:eJwNyrVSQ2EUhdETeAFmGBgoqbAgz0ILl0CghkdLibtbBPcad4LLKu6sfb//
NGSHu4ZSEZH4RqsjLmoiRnjJMXbXRTTWR4zbV9oEe7QmbdK+1qZ4w2nmqiJm
eOt/lonbZrdz9p02z3suMO/twV60H7nEXq3F/bL9pK3wmasseHux1+xXrjOj
tbrfsMvaJvu0tLZlv2l5vrPAfm9t3or2h1ZiVmvXtu1PbYdf3GXR27e9Z/9w
nwNah/sD+1c75B+PWPIWtRHHdoonHNQ63Z/aFdoZK3nOf4BrSYw=
       "]], 
      Line3DBox[CompressedData["
1:eJwNzrdSAgEUhtGLAmZFQQQzGHr1TextnFE7fVMLVDDNmMUcMGdPsXO+/e8W
W1pcm19NRMSC5zAbkcxHHDDFI1YKEWl9rFt4wiXbTDHiVLfaztjGc264teu6
7uAF1zMRl+z0fsUuXnPTt936Rvfwllu2jL7TvbxnHx9YdcvqR51jgzVbv37S
eT5z2Tbr/170gO2VBb5x262o3/UgP7him/P9px6yfXGY39xxG9E/epS/3LWN
6T89zshFlJjgnltZN+kJNnPfNqmTeoopTjPNfyuwN1M=
       "]], 
      Line3DBox[CompressedData["
1:eJwVysc6Q2EUhtFtpBNEJEoK0ouWXl2DuYmRmijXy5UYWAbnWd959194WNzN
lyLi3reSjCinIpZZ4Sof0xHtTMSaXdXW+aR1tA27pm2yzi0+u3Xdtu2GluCL
1tN27Ka2yxb3+JuISPLC/z5fve17m7IvtQNeMc1vt2s7Y9/wkG/awPsju60d
c64NtRO7o2XZZY4Lt5Fb3u5pBb5rY+3U7mtnHPCcH24Tt6I91Er81KZa2R5p
FY5Z5c//e7tmT1nnlzbzvmHPtCZv2eIfOhMd4w==
       "]], Line3DBox[CompressedData["
1:eJwVz8dNA2EUhdFHCUgIgVhRAdlk8IzHOY8D0aQCYEPqFkxsg8PCOp/v+yXL
y3cP+f1MREx8VucikvmIFaZc49tCREmv64wbfLQVFyM2ddm2xQoLfHer6m1d
4w6fbIn3u7pu22OD+5y6NfWBbvGQS7MRR2z7fswOi/zwtqsT3WPKT1tfl3TO
jM+21O+V9cBW4ZBVfrmNdE2PWefL/3/0vqFPbE2essVvtzPd1ufs8NWWed/V
F7YeL9nnj9tE5/qKA/7arvVQ33DEW475ByqSKmg=
       "]], Line3DBox[CompressedData["
1:eJwVy0dSQkEYReHfJVhlqQxdjAHFxMQM+ogS3iNnMLtuPwdd5/S53QdJVky3
IqLk3O5EJLsRN1jBO5zvRxzmIu55VXvAhXakPfKa9oR1LOHSdmwr84b2jCvt
RHvhTS3BV6zg2pa3VXlLq+FGO9XqvK01sINNzG/7i133Fr55e+Ztm6daB9+1
gtblmZZiDzP8sJ3beryv9fFTu9AGfKANcYgj/LJd2sZ8pE3wW7vSpnyszXCC
c/yxXdsWfKot8Vcrais+09b/2x53NvwPjiIw2g==
       "]], Line3DBox[CompressedData["
1:eJwV0EdOA0EURdHPEpAQ4CGrYB9EjxggkBjB2CTb7dAO7WyTk4HFkdfA6cHX
vfXerxrU2v7JxvFCROyZylJEaTmijKdYxY/ViDOe8HOsYSrbLETU+YWsgZfY
xE9dmae8gi1sybbst3lV1sEEu/ilq/GM17GHbdm2/T5vyAbYxCF+61I+yt/F
MR4tRkzye85T7NjZcX+Wu+wKu3iNP7qM3/Ae3uadbNf+He/L7nGAD/irG/JH
PsInzGRF+898LHvBCc7xTzflr3yGb/lfrvhDk7jz7nzAS+bQrNv/BxqBPe4=

       "]], Line3DBox[CompressedData["
1:eJwVzjdSAmAUhdHHEpxh1NZ9uAorahegG9DWJWDCLDlnc0bXQmVERBqPxT/n
4z6YYWF5dWklEREpL5eMSM9GZLnJPF/nI7Z0QW+zyDfbji7pXZaZYYXvbnu6
qvdZ44ftQNf1IRs8YpOfbse6pU/Y5pftVHd0ll3m2OPILa/7usAzftuK+lyX
eMGNmYhLln2+YoXXHPtuVd/oGm/5Y6vrO93gPZt84MStpR91m0/8tXX0QHf5
zB5f/n/nNvXW5/xH2xqH3qLtDw6sSDc=
       "]], Line3DBox[CompressedData["
1:eJwVy0kyA2AQQOF2BFVKWFo6iAuwIkSVFZu4gpI1Eg7iAsQcmUdDTDEl5BCm
z6Lrvf91/1Mr67PpkYiYM6WxiIPxiCIeYhm3JiLmJyMqPK9VcVtb0Gr8SKvj
MTbwy+6EN/kptnBHS7pv8zOtg+d4hd92F/yaF/AGs9qi+1t+qXWxiHf4Y1fi
97yMD5jTltw/8or2hLtaSuvxqvaMNXzB/dGIV6x7v+Ge22W377yh9bGJA/y1
a/EP3sZP3ExEZP7Hn6H3Kt8wa2ba/Yz5A3SURTI=
       "]], 
      Line3DBox[{5356, 5844, 5355, 5843, 5354, 6322, 6496, 6046, 6017, 5353, 
       6122, 5996, 6186, 6223}], Line3DBox[CompressedData["
1:eJwN0LdRw2AAhuFPztBxhwkltVvmoGADPABMARPAJB6DmmxyxoGcTXgK3fPq
+3U6nebaK4vLRZIF13Ay2ZpKBtzmPTOb7OgHvctHrs8kS/YnvWd75j5fWNgP
9Kvu8o0l26F+10f84DE/WXZ2or/0Kb9ZsZ3pkT7nDy/4y6qzS/2nr5hmUrNd
60LfsMQN39i2l/WtrcI7Vlm393RN91nn5kTS4MD9GIccZ8d7Gp5fm/Y/bKvs
uVr2Puf5D28IOc0=
       "]], 
      Line3DBox[{5391, 5879, 5390, 5878, 5389, 5877, 6409, 5388, 5876, 5387, 
       5875, 6020, 6532, 6024, 5874, 6047, 6066, 6065, 6206}], 
      Line3DBox[{5393, 5880, 5392, 5881, 5394, 6294, 6499, 5395, 5882, 5396, 
       6295, 6500, 5397, 5883, 5398, 5884, 5399, 6296, 6501, 5400, 5885, 5401,
        6297, 6502, 5402, 5886, 5403, 5887, 5404, 6410, 5888, 5405, 5889, 
       5406, 6298, 6503, 5407, 5890, 5408, 5891, 5409, 6411, 5892, 5410, 5893,
        5411, 6299, 6504, 5412, 5894, 5413, 6300, 6505, 5414, 5895, 5415, 
       5896, 5416, 6301, 6506, 5417, 5897, 5418, 6028, 6029, 6533, 5419, 5997,
        6025, 6070, 6069, 6210}], 
      Line3DBox[{5430, 5903, 5429, 5902, 5428, 6508, 6302, 5427, 5901, 5426, 
       5900, 6412, 5425, 5899, 5424, 5898, 5423, 6324, 6507, 6048, 6027, 5422,
        6125, 6182, 6126, 6190, 6215}], 
      Line3DBox[{5432, 5904, 5431, 5905, 5433, 6413, 5906, 5434, 5907, 5435, 
       6303, 6509, 5436, 5908, 5437, 5909, 5438, 6414, 5910, 5439, 5911, 5440,
        6304, 6510, 5441, 5912, 5442, 5913, 5443, 6415, 5914, 5444, 5915, 
       5445, 6416, 5916, 5446, 5917, 5447, 5918, 5448, 6417, 5919, 5449, 5920,
        5450, 6418, 5921, 5451, 5922, 5452, 6305, 6511, 5453, 5923, 5454, 
       5924, 5455, 6325, 6419, 6032, 5925, 6031, 6127, 5998, 6216}], 
      Line3DBox[{5465, 5935, 5464, 5934, 5463, 5933, 6421, 5462, 5932, 5461, 
       5931, 6420, 5460, 5930, 5459, 5929, 5458, 4622, 5457, 5928, 5456, 5927,
        6030, 6534, 6034, 5926, 6049, 6001, 6192, 6072, 6201}], 
      Line3DBox[{5467, 5936, 5466, 5937, 5468, 6306, 6512, 5469, 5938, 5470, 
       6307, 6513, 5471, 5939, 5472, 5940, 5473, 6308, 6514, 5474, 5941, 5475,
        6309, 6515, 5476, 5942, 5477, 5943, 5478, 6310, 6516, 5479, 5944, 
       5480, 6311, 6517, 5481, 5945, 5482, 5946, 5483, 6422, 5947, 5484, 5948,
        5485, 6312, 6518, 5486, 5949, 5487, 6038, 6039, 6535, 5488, 6002, 
       6035, 6076, 6075, 5489, 6222}], 
      Line3DBox[{5505, 5957, 5504, 5956, 5503, 6522, 6315, 5502, 5955, 5501, 
       4664, 5500, 5954, 5499, 5953, 5498, 6521, 6314, 5497, 5952, 5496, 6520,
        6313, 5495, 5951, 5494, 5950, 5493, 6326, 6519, 6050, 6037, 5492, 
       6128, 6183, 6221}], 
      Line3DBox[{5507, 5958, 5506, 5959, 5508, 6423, 5960, 5509, 5961, 5510, 
       6316, 6523, 5511, 5962, 5512, 5963, 5513, 6424, 5964, 5514, 5965, 5515,
        6317, 6524, 5516, 5966, 5517, 5967, 5518, 6425, 5968, 5519, 5969, 
       5520, 6318, 6525, 5521, 5970, 5522, 5971, 5523, 6426, 5972, 5524, 5973,
        5525, 6327, 6427, 6042, 5974, 6041, 6129, 6003, 6193, 6195, 6218}], 
      Line3DBox[{5540, 5987, 5539, 5986, 5538, 4692, 5537, 5985, 5536, 5984, 
       6429, 5535, 5983, 5534, 5982, 5533, 6527, 6320, 5532, 5981, 5531, 5980,
        6428, 5530, 5979, 5529, 5978, 5528, 6526, 6319, 5527, 5977, 5526, 
       5976, 6040, 6536, 6044, 5975, 6051, 6006, 6203}], 
      Line3DBox[{6015, 5819, 6157, 6045, 6062, 6061, 6179, 5818, 6208}], 
      Line3DBox[{6114, 6080, 6081, 6139, 5991, 6138, 5990, 6137, 6180, 6184, 
       6212}], Line3DBox[{6197, 6160, 6161, 6087, 6141, 6142, 6143, 6116, 
       5995, 6090, 6056, 6539, 6117, 6088, 6089, 6146, 6147, 6145, 5994, 6144,
        6209}], 
      Line3DBox[{6198, 6178, 6077, 6112, 6004, 6113, 6055, 6110, 6529, 6329, 
       6043, 6109, 6111, 6005, 6079, 6155, 6156, 6159, 6158, 6078, 6219}], 
      Line3DBox[{6200, 6140, 6063, 6083, 6168, 6082, 6130, 5817, 6115, 6052, 
       6537, 6014, 6085, 6086, 6084, 6059, 5816, 6175, 6060, 6220}], 
      Line3DBox[{6202, 6154, 6074, 6108, 6107, 5490, 6058, 6106, 6330, 6540, 
       6134, 6036, 6135, 6136, 6120, 6167, 6166, 5491, 6173, 6174, 6172, 6164,
        6217}], 
      Line3DBox[{6205, 6149, 6188, 6150, 6068, 6100, 6099, 5420, 4799, 6096, 
       6057, 6132, 6026, 6133, 6098, 6119, 6097, 6165, 5421, 6171, 6162, 6170,
        6163, 6189, 6207}], 
      Line3DBox[{6211, 6181, 6148, 6067, 6092, 6169, 6091, 6131, 5873, 6118, 
       6053, 6538, 6023, 6094, 6095, 6093, 6064, 5872, 6176, 6214}], 
      Line3DBox[{6224, 6194, 6152, 6153, 6151, 6073, 6000, 6103, 6101, 6033, 
       6328, 6528, 6102, 6054, 6105, 5999, 6104, 6071, 6177, 6191, 6225}]}, {
      Line3DBox[CompressedData["
1:eJwVzz0ohAEcx/G/nEycu8FLSp2SlIFSykKhTNTpBolyt1i8LSbJcNsNyiQD
m1JsBslyEyWL4YZbLNSZdCXZ+DzD0+fbv19Pz5Mr7uS3WyJizZPqjJjrimjj
MgdZ5Dj3OMMjVnsjlvSxXuc5tzjcF3GjD/QDK3zmq/2ZrusrfvKOE/a/+lG3
ZyJq7Oab/Yce0t/Jjq3piHn7WZ3Veea4wYb9mN7V0zzkl9uiruhVnnKTK95x
qff1LcusMtxP9Iu+YJ3XLLk39L3+4RNT2YgO95rO6HcOsJl8g/uo/tNTyc7/
LbDHvV8X9AhLnOQ/e+wzqw==
       "]], Line3DBox[CompressedData["
1:eJwVzz8ohHEYwPFH+TcdzoC6CCUpwymlLKecMtGdDCI5txicWAySDLYbrkwy
sCnFZpAsJkpWw80Uk5Rk83mHt8+353mG39tf2ipUGiJixdecisi3R7RwgYPs
7YlY12N6h1M85DxrXOUZKxx2e6339T2rzJo961Nd5yU/ectxuz/9qFs7Il6Z
M+vS73qIP8kdG9siZuymdacuciDRrKSzeps5HvCrO2JOV/UyT7jBJfcXelff
8IhrZg/6WL/wnHVesWz3oe/0L5+4adaU9l6d5hv7+J28wW5Uh/+aZIp7ZrM6
oxc5wjIn+A9hsTG1
       "]], Line3DBox[CompressedData["
1:eJwVzz8ohAEcx+HfO5Bb7vwbXoMiyqAMlFIWVygTItOVcIvBFYtJMthuUCYZ
zqYUmwEZmCgZLDfcYCJMUpIMnhvenk/f+/X2XvdSaXYtiYiCpykbMdEckeE8
e7nCyzRiSG/oPHd4Y5vRe3qRFZZ4xi1es8wHPrk91DV9wg9ecLgj4lff6UxL
RJUpn92/6j79Xb9jQy5i0v24btdz7OEy39wP6nU9xm1+2qZ1WRd4wFUe889v
m/pc7/KWiXfv60d9xBpPWbS/6yv9w3s2tkZk7VXdpl/Yxa/6N9gHdOJ/jTLH
Kab2Tr2g+1nkCP8B8Sg0lA==
       "]], Line3DBox[CompressedData["
1:eJwVzzEohHEYwOHXDdSpc0S55XRFUcpAKWVwCmVyISWKuEUdxaKUdIPtBmWS
gU0pNoNkYKJkNdxMMUlJlntu+Hp+vf93eL/c6mah1BARS75kKmIyHdHMefaw
KxOxrof0DsdZ5kNnREEf6RWecYt99q/1vr5nhS88ZZWX/OIth+3+6yedbI14
45hZRn/oXv7W99jYEjHlbUJ36Dl2c9ZsTQ/qbeZ5wG/3zeiKXuYJN7ho/0Lv
6hse8pEJ82P9qs9Z5RWL5p/6Tv/xmSWzpjb36na+M8ef+g3eBnTCf40yzT2z
aZ3VC+xnkSOsAWt5Mpo=
       "]], Line3DBox[CompressedData["
1:eJwVzz8oxGEYwPFHN5z8O6fIWURRBmWglLJQKNMpMkhdYREpFpNksN1wZboM
bEqxGSQDE5Ey3XBlQ0xSEnWfG359vj3P29v768qtZ9dqImLB19AUMdkc0cg5
9nKZl+0RQ3pLj3OPN2YzuqBzPOIGz/lgt6OvdZ6PfDY71GV9ys/qvfzjHevT
ESV28MXZN92nfzjMZCpiKhMxodv0LHu4xHfnB/WmHuMuv8yyOq8XWeQqT/hv
t60v9D5vmXD3gX7SxyzzjB+ss7vSv/qetS0RKbOSbtWv7OZ39Q3mAzrhv0aZ
5jQz5p16XvdzhSOsAPbINYM=
       "]], Line3DBox[CompressedData["
1:eJwVzz8ohAEcx+GfuoHS3bnBnywnRRmUgSh1C4WyOCJRopwFpVhkkAy2G5RJ
Bjal2AyS4UyUlOmGmykmKUndc8P1fPr267337VjenNqoi4hFv2QyYjwdkeIc
u5ltiyjoAb3DUR6y1BoxrY/1Cs+5xR73N3pfP7DIF765P9MVfcUv3nHQ/b9+
0o1NEWW286P2LP5yiPWpiAm3Y7pFz7KLM7ZV3a+3OcIDfvu/vC7qJZ5ynQvu
L/WuvuURH5mwn+hXfcEKr1mwf+p7/cdnNmQi0vaybtbv7ORP7R3sfTrhm3LM
cM82qbN6nr1c4zCrZ0Uzgg==
       "]], Line3DBox[CompressedData["
1:eJwV0D8oxHEYwOHXcMMR7iiOLFeKMigDZbqFYjCIIqVIMZ1BsZgkg+0GZboM
blP+bYpkYEJSplOX0RWTlHR5DG/Pp/f9Lb9vdnF1Ml8XEfMm1RQxnopIc5a9
XOFlJmJIb+hR7vDWblrv6SUeco3nfHTb0je6wCe+2B3oij7mJ69Y46vbvW5M
R5TZxTe7qu7TPxxmsjlijBnOsIfLrPp2UK/rEW7zy25KF/QCi8zziDW3TX2h
d3nHREfEvn7WJVZ4xg82uF3rX/3A+hZvZFfW7fqd3fzmANvcEv4rp1s5wU67
rJ7T/f9vwBNzav4A2yc36g==
       "]], Line3DBox[CompressedData["
1:eJwV0DEoRHEcwPGf5YZThzvDXTLcoIjNgEwWV2yKokhXisUtwiJKMthuUCbd
4AqRYjNIBiZKynTDZaSYpCQ+hl+fb//3e6/3Xr5YGltsiIgZk05FjDZHZDjF
LuZzEQu6X6+ywG3eZiMm9K6e4wGX2G3/Qm/qG5b5yGf7FV3XZ/zgFQfs/+p7
nWqJqLGdL/bfdI/+5iCTTd7P/ojO6Ul2cp59XOEwt/jp/nFd1kXus8Rp95/o
NX3JHd4x4XxPP+kq6zz/f7bzd32tf/jAxrR/5byms/qVHfzisvNenfBNQ2zl
IY9Mm2vHXDenZsPMZiL+AGRLNuA=
       "]], Line3DBox[CompressedData["
1:eJwNzy1Ig1EUgOFjMiibv2EGQcNAmWUYVEwWB5oMn6JgmCBswa0IWkziFmwL
gkkEZxMEbQtDLBYVxGpYnqBREPEJl+flnBvunShW1vZ6ImLDGUlFrA5EjHKL
05zMRJT1vD5kgVmzul7XZ9xlk/vM2d3rY/3IBvNmb/pSd3jLb7a5YBeDES86
zQ8umY3rTz3DXy6yL+19dit6TG9yiolZSc/pAy7zhAkb3OEFq9x290Yf6RZP
WTR70uf6ndfs8I4luy/9oP/4yopZ/5C36gy7zPKHV6zZNznr9PrnM5PhiH+x
5zH0
       "]], Line3DBox[CompressedData["
1:eJwV0D8oxGEYwPHnJos4rg4ZZCX2I5PlrljcQDFJKcpluZzFJN1gu0H5U5fh
bEq5jZKUTK4k2w1n1BXLTXIfw9Pn2/t7env7ja8XlnYSEZE36b6IxWTEENc4
yW3eD0fM6H2dY5nPzlb0id5kjUVOjUTU9aF+YoVv/LB/qVv6hj984Kz9xEDE
q06yyTF+2m/raf3LOfb2e5/9BT2qVznBLX7Zz+iSzvKIHWfLuqI3WOUur3nA
Ox7zhT3uPdXv+oot3v7f7fxbP+o/Nng2GHFuUr5dcM9UTcnMp/wj0wUWljKN

       "]], Line3DBox[CompressedData["
1:eJwNziFIg1EUgNE7u5vT8g8MilFxwabDYlKYwaLCRBAEYWODFUGLZSIG29DB
khi0CcJsBhGdmAxjdWFd0GIST3icj3tveNN7tY1qKiLWvSTNsYgcdzjHmVxE
RS/pY67xnO9JxLZu6QPe8pDz7h/1qX5lkwtmPX2jh3zgD59ZsBvJRnzqLAdc
MZvSXzrPPy5zNON/dkU9qUuc5aZZWS/qI67yjL/+uKWbep/XrHPX/b0+0U+8
4Afb7POOQ3Z4OR7RcH/Fb7MXszddmIjossR/cPkt7g==
       "]], 
      Line3DBox[{3610, 4175, 3611, 4190, 3629, 4205, 6335, 3644, 4220, 3659, 
       4235, 6346, 3674, 4250, 3689, 4265, 3704, 4280, 6352, 3719, 4295, 3734,
        4310, 6361, 3749, 4325, 3764, 4340, 3779, 6461, 4355, 3794, 4370, 
       3809, 4385, 6373, 3824, 4400, 3839, 4415, 3854, 6479, 4430, 3869, 4445,
        3884, 4460, 6381, 3899, 4475, 3914, 4489, 6393, 3929, 4502, 3942, 
       4515, 3955, 4529, 6399, 3969, 4543, 3983, 4752, 4753, 6408, 4754, 4726,
        4756, 4862, 4861, 4945}], 
      Line3DBox[{3612, 4176, 3613, 4191, 3630, 6436, 4206, 3645, 4221, 3660, 
       4236, 6347, 3675, 4251, 3690, 4266, 3705, 6447, 4281, 3720, 4296, 3735,
        4311, 6362, 3750, 4326, 3765, 4341, 3780, 6462, 4356, 3795, 4371, 
       3810, 6468, 4386, 3825, 4401, 3840, 4416, 3855, 6480, 4431, 3870, 4446,
        3885, 6488, 4461, 3900, 4476, 3915, 4490, 6394, 3930, 4503, 3943, 
       4516, 3956, 4747, 6531, 4748, 4530, 3970, 4804, 4725, 4940}], 
      Line3DBox[{3614, 4177, 3615, 4192, 3631, 4207, 6336, 3646, 4222, 3661, 
       4237, 6348, 3676, 4252, 3691, 4267, 3706, 4282, 6353, 3721, 4297, 3736,
        4312, 6363, 3751, 4327, 3766, 4342, 3781, 4357, 6366, 3796, 4372, 
       3811, 4387, 6374, 3826, 4402, 3841, 4417, 3856, 6481, 4432, 3871, 4447,
        3886, 4462, 6382, 3901, 4477, 3916, 4741, 4742, 6395, 4743, 4722, 
       4744, 4860, 4859, 4926, 4954}], 
      Line3DBox[{3616, 4178, 3617, 4193, 3632, 6437, 4208, 3647, 4223, 3662, 
       4238, 6349, 3677, 4253, 3692, 4268, 3707, 6448, 4283, 3722, 4298, 3737,
        4313, 6364, 3752, 4328, 3767, 4343, 3782, 6463, 4358, 3797, 4373, 
       3812, 4388, 6375, 3827, 4403, 3842, 4418, 3857, 6482, 4433, 3872, 4448,
        3887, 4739, 6530, 4740, 4463, 3902, 4802, 4720, 4925, 4936, 4951}], 
      Line3DBox[{4157, 4713, 4787, 4867, 4866, 4144, 4700, 4952}], 
      Line3DBox[{4158, 4714, 4145, 4701, 4131, 4776, 6536, 4781, 4775, 4790, 
       4816, 4734, 4932, 4959}], 
      Line3DBox[{4159, 4715, 4146, 4702, 4132, 4688, 6526, 4118, 4675, 4104, 
       4661, 4772, 6519, 4090, 4647, 4771, 4865, 4864, 4946}], 
      Line3DBox[{4160, 4716, 4147, 4703, 4133, 6428, 4689, 4119, 4676, 4105, 
       4662, 6520, 4091, 4648, 4077, 4634, 4064, 4763, 6534, 4768, 4762, 4789,
        4809, 4921, 4810, 4929, 4943}], 
      Line3DBox[{4161, 4717, 4148, 4704, 4134, 4690, 6527, 4120, 4677, 4106, 
       4663, 6521, 4092, 4649, 4078, 4635, 4065, 4622, 4051, 4609, 4037, 4595,
        4758, 6507, 4023, 4581, 4757, 4727, 4928, 4863, 4961}], 
      Line3DBox[{4162, 4718, 4149, 4705, 4135, 6429, 4691, 4121, 4678, 4107, 
       4664, 4093, 4650, 4079, 4636, 4066, 6420, 4623, 4052, 4610, 4038, 6412,
        4596, 4024, 4582, 4010, 4568, 3997, 4751, 6532, 4755, 4750, 4788, 
       4805, 4920, 4941}], 
      Line3DBox[{4163, 4719, 4150, 4706, 4136, 4692, 4122, 4679, 4108, 4665, 
       6522, 4094, 4651, 4080, 4637, 4067, 6421, 4624, 4053, 4611, 4039, 4597,
        6508, 4025, 4583, 4011, 4569, 3998, 6409, 4556, 3985, 4544, 3971, 
       4531, 4746, 6496, 3957, 4517, 4745, 4724, 4955}], 
      Line3DBox[{4786, 4848, 4849, 4738, 4819, 4737, 4897, 4896, 4817, 4933, 
       4962}], Line3DBox[{4938, 4900, 4901, 4913, 4912, 4911, 4826, 4870, 
       4827, 4749, 4798, 6539, 4852, 4797, 4825, 4823, 4824, 4803, 4882, 
       4949}], Line3DBox[{4939, 4918, 4608, 4050, 4837, 4856, 4838, 4767, 
       6528, 4795, 4873, 4621, 4063, 4908, 4839, 4905, 4840, 4811, 4898, 4893,
        4934, 4964}], 
      Line3DBox[{4942, 4887, 4886, 4888, 4890, 4889, 4853, 4831, 4871, 4854, 
       4794, 6538, 4830, 4793, 4829, 4885, 4884, 4883, 4828, 3984, 4917, 4927,
        4966}], 
      Line3DBox[{4944, 4894, 4895, 4730, 4812, 4731, 4842, 4841, 4770, 6540, 
       4874, 4801, 4857, 4732, 4844, 4733, 4843, 4815, 4906, 4958}], 
      Line3DBox[{4947, 4935, 4899, 4818, 4847, 4907, 4910, 4909, 4130, 4687, 
       4875, 4796, 6529, 4780, 4846, 4858, 4845, 4117, 4674, 4919, 4813, 
       4957}], Line3DBox[{4948, 4922, 4879, 4878, 4880, 4723, 4881, 4850, 
       4869, 4868, 4851, 4792, 6537, 4822, 4791, 4821, 4721, 4877, 4876, 4820,
        3917, 4916, 4953}], 
      Line3DBox[{4963, 4891, 4923, 4892, 4806, 4833, 4832, 4834, 4799, 4855, 
       4800, 4761, 4836, 4872, 4835, 4914, 4915, 4902, 4904, 4903, 4930, 
       4965}]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJztnXl8DWf7xkkJqtYsKkpQJaXUWksxtUSKRGwVQSsLKiKSoKlKxC5KkZAS
GmsTVFNRUrH2pKnYaqd2Yj12oa3tlTS/OTPXk9/beT1nTHpOM9HbP9fn+bpz
zzXPPpNz8tTwC+452KZIkSJfVC5S5KUief8m/FXvCcSJEydOnDhx4sSJEydO
nDhx4sSJEydOnDhx4sSJEydOnDhx4sSJEydOnDhx4sSJEydOnDhx4sSJEydO
nDhx4sSJEydOnDhx4sSJEydOnDhx4sSJ/x1+aMP0sDnLjAam5YdfjB7pN1J3
PokT/zdz3jh1t5lkKufpxjr9ksNo/BInXiC8UYo8PpmGJiXSOCVOXGecxilx
4vrnNE6JE9c/p+dT4sT1z3nj9DuMT6bZH1ejcUqceAFxGqfEieuf0zglTlz/
nJ5PiRPXP6dxSpy4/jmNU+LE9c9pnBInrn9O45Q4cf1zet9LnLj+Oa2nxInr
n9M4JU5c/5z3OfxbReXxyTTk2pc0TokTLyBO6ylx4vrnNE6JE9c/p3FK/Hm4
1r+jZal+Ze3vR1s7v7XHV0Hlt9Tvgwoqf2Gvf8pvPj/1T8r/PPlDkJdpcr2q
MbT/+X++eWjkmkVivTAt+Xvq+gg/P4vlT3aMupmb2MjAdFfpCqdyc7O4vKCu
GzV3nOn+8zR74KOfIl+AeiCf5JN8kk/yST7JJ/kkn+RTzz61ct7zi972/8SJ
Pw/X2m+JFy5O7f5icK3t6DmiwSo/cV1huizSu09vv0ma5wdLvZf2CpV9MD1R
9NIH5vwkYX1lWuLor9I6q/X9IS9eax6eHx7Xmoe3H9C6T9CbH0u1F/khP+TH
en7CcT2mNu85pEea4f82P3prrxfVTwbyMi1lt6hA/WhdT3n+C8qP1vFl7f7D
q595uB7TB+NP/SP92VLtwuO8zxs0fuJv2gcbmL70OK6yu7gf1hrP47z9P+9z
CLzPrWnNbyn/PJ+8dins92Vt/1rzWMq/1nqztn/e86y1/Vuq//D88zj5/2fG
r1b/72bLeZmuDK+hy/nH2v55eXhcb/559Wxt/7zr8t6zFRb/luo/1p7/ede1
VP1be/4pqPq39vi1dv/nfX+/oPaflqp/3n1Zav7h1QPN//+Mf631r/U5t6C4
1nrQOu6snYd3X3rzSXnM59HaD/V2X7x5u6Duq7D74cUXVD/k+dH6e3mt87DW
39cQJ078n+e8+UTr54soD+X5O3l46xEvj9Z1lvyQn7+TR+vzMu/30cMr3k9f
IJaZ2p+Z2Mtj8lDu877WPLznfd7vTxMds0w/n6fNu2dldxfz8N5LFHY/vHrm
+fkBPpi+lH5M8sN778r7nMZH8MG0fUD8P+LH2vXDay+9+Smo/mMpP1r7D+/5
q6D8UP1Y1g+NL9nPAvhgGnS+VI45P7zPoVl7fub9nkXreqF1PdVaPzw/eus/
1m4va/spqHrg7Ve1fu6R51/r5yoLC9f6uXS9+dHaXtaO5427gorXW/1YO563
LliqPrXmL6j60fp7ea2fw9H6uSNrc7355LVLQXFeP7c211s9FBTnzRuWqmde
fh639v1qfX+o9fvIWr9PTdyyXGv9874PZe39j6XW66f1jk9dKJaZFr09vuop
m8Ga573ib8k/z3RQwHApD88PL77IM//dI06cOHHiKjyn14yaY5YbDY09m5/Y
vtRomLD1ase2032FPf2rraqy3Sg4RNwPeTjZKFxp4z/2jR6+QtUa0+82X2E0
vHUn7kHOEqNhmZ/Ta2U+99V83Vd6y9etiet+h+uehJ++4FHgvDw7ED8c8RGI
v9VT5q7dZb5zi/k8/eDneDc5fh/y9ET+88h/UiWPE/I4In4a8iQ7r66QHm8U
fr4Y1GVUglEIbhd8cPk0X+HP6jIffUHmHu1lfvWiobKYRzj2RdELYh7hk8b9
hghmrtsUPrNx3UkqPtPgMxj3W3ObHL8IPk/AZyJ8+l6S/XjDT5Em5v0sg59o
+Cmi0o7HED8A8fGIL4X6CYCfdfCTCT+nZsp+9qvUjw3utwHyT1XxsxR+YhB/
EPXpAD8fws9p1o5or62on7dU/BSBn4bIP0jFTxL8TFH2qwmtog6LfiouHnba
X/TTY8hryxuIfoaifnrAzyMVP4uRfy7yN1Xx0wzxTxFvg/i7r8v1M+WcXD9X
XOX62Qo/f6K9Wqr0nwzkH4b8jVT8nEN8T8R3RPwA9GeHS7KfE2ivbPjZBj+V
VOpnC/KHPWf9+CH+AOJLIn4G/FxH/1kMP1Hw0xjttULFzzbkH438tip+hiF+
B+LXIz4V7bUN7XUD7eUKP6Ph57dG5v3cQn5X5L+i4kdZn5MQX72W7Kcn/Lza
SfbzO8ZXBvw0U6mfcORPQX53FT8/Ij4U8TsQfwn1Ew0/1eDnC9RPffiJUvHj
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
7q1DdedTb/yxV3y5KHH9YBp3/4it7dMw3fkkTpw4ceLEiRMnTpw4ceLEiRMn
Tpw4ceLEiRMnTpw4ceLEiRMnTpw4ceLEiRMnTpz4i8f3XzJEx5m+RwRdNmra
lEpPh+jOp9547Xg7tw2z9uVp6L6z6Ws+vKs7n8SJEyduKd7y7I6Hc8V1gmnq
jnY2tR1DdOdTb7xt5qNhp4Kv5mmDY1W+9Y04pjufxInrgTdOmR42R5xfmI5M
Sowe6TeSG+9uM8kUl6cb6/RLDjMTX1D8zT8n5n4p3g/TWv1Hl1k/L1A4vEG+
T6YVhl+U7rdyhOFxiduZeXo5VBiQstZo9fsNgQ+mg+tVjTH5UfJkcEtdt7Dw
BXdqPYg9lZmnl1s/GbB6q1F3PguKdxvRYJWf2C+Znkz07tPbb1KB+UmqsKPV
Z0OvGpimetZ6vHmz9vW3fvfVnVLPZhqYZrr+WCVs84vb7qUPHc5KnbvPwHT5
3UUpdgX4nDtr9xc3cxMbGZjuKl3hVG5ultWve3nttIc5wVcNTIftcFj/dvgx
IdkxSvLBlPnp/ODuL2nx+wxMt+0c63G1/11uvFZe5sTM0S5ZmQamQRFvnZ+Q
ZOTGfzB9hlRmmt/r8upH+R5pYz7fI1XHush0fNfJ0vpoqXbk8Uzv7SbfeRqZ
EDjpNdH/kzPycw7T+NgR0vPOyoymG1yWGw3tH39QtozI3TdNvjbtuC83/76p
HXssFPMynW9Ienxt5GBufMbQyDWLxLxMH1VctD7Cz09wWjilmFjO081x7/ht
uOn/P+vyDKzLh9EeTPs/jZTaZUz2GtPfLzAw7bdwyOE//xMm3MP8yHS6hzxP
FsU+jGn7L36W9icd0U55OtNNaq9iXqf2RohlpldzX8r6fF64MA77Faan3FpL
+5Zx4fL+hmn3kfI+R1n/M1D/WScdVoeIZaY7Jjz1K+U4QTh/QJ6nmGZgvkpr
k2bykac7NpZ8N1b0w9t3KfmVQJm/m+1vWs8MTD8Lr1HZXVzXePsxJe/3icx5
1+01X55fmNaY6yjNM2vx80xzPq4m5SnulGaqlzxNTC7W/02xfkKPy/MC09OY
H5TtUqFIMaldrp+ONLVfno7ZFN8kVWzHy23l+mLasWVMK1O9OaEfMO0XnyL5
H/VQnu+YLsS8177sj9K4YlrmaWPnKmI/nI15fLZiPlfW8wDUsx3+fhPTHPwd
pyFlPf3XTt6Xp3a1bxU9+dFdIcNnlbROM025I6/Xyr/jEYK/45GZ8NnxXkOv
5ulsQ8zNu1uOcefP+Rg/TO+s8ZLGUcO78r6Q6SfYHyr77Tr0W2vPbwXFZ9+U
75+pjSDXgyf2hUyXRcr7Q9445cUrx1d5F3l8BcfK/YCpt6PcH4qExkjtx5S1
Ywbam6l/mtzuD1+S5zWmDwJKr94gjovhxj9sTX9/janfy232Vk4YIeyoLI9D
pknjG0njMWruONM8nqfZAx/9FCnO5/7j3E7FiGWmHXPCPupwOuR/6iEhVa6H
DVgPmJa4vFNaF55kuJt+3sA0efqII4KYhzfP8OZn5Ti98h95nPL813OU5wum
qZXHhG0S64c3H94/f89UX3n6+p7V253FetuM+2H6+2+p0n0pecnfZc7zY0Ac
05IvfSPF377galp3DUy/8XB77aq4/irX2VJ28jr7UcX76aa/x8q0fEB8L4/J
Q4UjWL+Zxo1ZKq3jE+GDaa6nbXqkGZ+n8PNMRzSaK+VRxrfwkeN5eZTcCfHL
0J+YOo73kPrV87bjYbRjKcz7TOufuCnN/8/bvkPQvjUz5TLTjukDJf6DY5ap
fvP0t/Rj2d3Felbyl8BXosx0dPesZ/KW4N+hXZmWPPqr2X7F4+tQZlqy/wGJ
a50Pp6WdThL3jcKhBWvty5jG/aelKn4u7huV132I/m+pebjeoKvvOIv71c6J
v0U4mt6nLYqZHnydv1/lcWX/CUL/0ZpHOe6M2N9uOtjQZdMKo3Dj+qrAcUtE
vTGvTuoxX+G3Fm72pnPlmbb7rMvosD7a/W+5vq+Fu1j/TWbsvXRjqdhfGp07
6e7jK1Sx7Z943XTO/cEog4eoixo93vp1ce35d7VJWyHmETY51Uz3MM0HTaaM
TTCTJ2W8iyD6MUxPDT4r+jE8yYrz6uqj/br7g4pPLvOV+PzXenK3OiuNQuP3
lpxo5+krNC+fFHRa9HHjke+8/qJWqfbw5pHpvkLXhfU9xHo0MA0ZscxloMHH
Yv1tbbHgerbifdnenu7SUMw/a+xHPY86ab8vHj/768pQ8b4MIx5/PEe8L4Nv
k08OHBbvq/dK6X7ydFvTgOKWvK9XGhjcTfXFNDq38bjP03yEXfaBrU3lFGiH
rh5uw2/7CEKm0XuW2N9mJrz58jdif3M/8Mm7X//HR2jkJsUJHaC1o7qlBYrx
OfOaxBwUf971q5IhQ0zr8uCFzTKnW67eiBMnTpw4ceLEiRMnTpw4ceLEiRMn
Tpw4ceLEiRMnTpw4ceLEiRMnTpw4ceLEib/YvMkT+ftXTE88ipO+h8X7HL7e
/BMnTpw48ReD8763eB3fN2PauvxG6ftlevNPnDhx4sSJEydOnDhx4sSJEydO
nDhx4sSJEydOnDhx4sT1yZviHCymP0xwlf4+OZ33RJw4ceLmOe/82enb5HNV
ma7YTeerEidOnDhx4sSJE3/xuPK8nl2Bzz6PjJ3jozW/8ny9Gjhfj3fOrLXu
i/m39jm2N3A9pm9GHJGu2xTXY5pQKUCX5wVr5Xo7r9NS3FLnt+rtXFoer19i
rHQOGdNR82ZL55FpzVNYzinmnd+nN59audbzVXnnxn6J8yCZ3pvjaPb8Wa3n
xi5OmO9qOjeOaT8/f2/31qHCt4+l85YMTFfXPjt+dD7OXYrcNSvJdM4Z01c9
az7Yt3aQsKeH3QzT+XlM93933zk3M0hz/qIBZb1M30Nm+s7AS+8EuAX8zzlu
tXCOm9b8htPlTXkNTBvWTTo+SMzPi68WUM50P3lay/+n0sUvBAlXcf4c0wVt
+kjn0Gn1s7PiHFM9GpgeCutUfa9Yn+5Di5xpvsQoNO++e2XOCqOQvsKjtMNp
X2HCH9Gmds3TBocaOXQX25d3/qbye99b8L1v3nrNO99T6zmhvPMxy5yRz6Vj
mvTYRzqfVOs5p7xzObWer6r1/NaqOB+UaVDAPOmcUN65os97nmyAi/nzZHnn
2PbF76WYeh+Vfz/FOz+Xd16q1vN5d+PcdKYjcX46z79yv/pHF3m/umaM/F6Y
6ZJD8vth3vnFxj3yebFM7b1fkc6N5Z2PrDzXdTLOdeWdP847P1R5jmcczjOt
h/Nomda8K9dDZAV5/WOa+oa8DvLOOeWdl6p1PiksXNkP49AP2+I8YKbnbb2k
9vXAPo/p+n3yfo93nixv3ewdKscxTVh86QNTfF+UmZ4sKnPeOZLKfp6J8aic
b4Mx3/LO61Sep1kb52ny5jElfzlA5jyfHXGuLdP0vWOk822fd55JxX3x/Gs9
7/UdrCtMr/l1ltaXcORlavOeg3Tuahmcj860TUIv6Zx03vm5vHN7lefCL8e5
8Lz+yTsH9hec88r0+NC1zzzvlXc+7EALnQ/LuPLvt6zD32953nXntTdlzjs3
dg3OnWU640ynZ54/y86r5Z3fyjsnV+u5sQV1DqwyjxH9vMXTD0uYzn1k6jl3
UZtSY7Tvq5X5r1r43FjeubRaz4EtH/WR6T4NTNfP7Hm0RD7u16HVTjtTfTGt
dbFHlV1e2vP4L/l+1Drx5+cOGPzqNFFtbZffGH/ER/DJ+sPdfrnR0CL848c1
RJ8/rV/qNrA+P3+FU/fcxHjBd1xgTg3TfuyLW6vNxae9mzVavK6hS1idStNM
82TV2PcnHNF+PunPOGd0N/SbMq2k80Z58TVxzmhPaGmcN8qNH31COt+U6aod
W2+4pfHjq5VtbIrL09/GxX5jm+4jnOw1o+YYsT77ejY/sX2p0RC19WrHtmbO
M7086f6VpmJ8reL3uxUVr9ttWtlEj/ba23f0VMl3ngbF3t1izv9Wn/jgDvFG
4VenntvvJ4j7xODKdT8WfQ7bedfRdP9JGbLO6vBa9yhPy53H6lrXK+f0IqMQ
ffbAFu+VRuFAdMKn48X8v9wqX9F0vQ9uy5o86quEdwfQObDEiRMnTpw4ceIF
zbX+/uWDC7Hy+14o43q7L+LEiRMnTpw4ceLEiRMnTpw4ceIvBk9/HCO9h2LK
3ke5jY2TykwL23uqxi1l30yZf5fz0VKZad77Ons5jinjlc/Ok8pMGf8/j/BS
QQ==
    "]],
  Axes->True,
  AxesLabel->{
    FormBox["\"b\"", TraditionalForm], 
    FormBox["\"m\"", TraditionalForm], 
    FormBox["\"votes\"", TraditionalForm]},
  BoxRatios->{1, 1, 0.4},
  ImageSize->{360., 269.6042354974973},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {0., 11.999999999991921`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{1.4969353171996236`, -0.08182785251400636, 3.0335604260791325`},
  
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{
  3.514594899918112*^9, 3.514595520804974*^9, {3.514595638009782*^9, 
   3.51459576919175*^9}, 3.514595805206955*^9, {3.514595871475024*^9, 
   3.514595921667474*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
EMLqF6eTUyu24XnmU9B8pleBO4SYHVNQMgWjWLj0UbKpjZmGOpzZsgW4z3h+
FlZG9m3/Bl2wVbPn+ZhE5L68Om7F9NsWVQY4/3HFxZXV2Wlrw9so20YDpXMb
ZSpCCV/wzZasLKJQppHGoX1EOK2u2QzLMho+MnJouRWFylNRxYndbOlcr7lL
gBRrimCYdDXLShxQDnu7loX8COWnVhWRstlvqIyVsqUQlkGRYyfg5k2OlOiw
i1GymmldkwkzPzsDZaWLPyZfrvoc/bGAWeW4cfJFjZRnRUcQ++WqqDwvSeph
5pTarljWawgDrNYDhWfJ4XWHSePY5xDC0jnvCmz3jKDDZKjw4zqMbG26zxtT
dFLjqDSZxCVkmtqeM8jBgjJy5s0PyLkxA8ipBcsNeVkzpD/wnhjSziwwTO9M
l4a0V/YWjGQ2jYblLnXTUZ2roUkCmFOeiyIKRCLRdS3u0KelpOyN98jJt9eQ
2vGjEL/qUcMsshPu4045ZuXkOQJCFpZodCaoxWyibuYAKq9TJtxMZ9cc+lsJ
ObH0b6R04QpybmgvUjV+HHfTGXYzn6CeWBTMPhy1NPti7dBYaWX4qAvZ2EyR
cqVVIqLMCXRw/XHSqIvKyqnTSONzkvVbVv+qDxELmqF/ZsiR5j5U2i14soHt
7gsHPHV96eRAQQUupT07a7ZlRVDN4GdVy7hyDSBtuVd9YRVPdzbQFiBd1UdD
Ao+s3U8q5r1hrBUCMKtHDlWvXfAb8Q6GQDWXRYvx1AqCtWAVxb1mzoKjH+1F
r+zZma/oI2BvHAHhHF/bJQQUMU96wB7xZwaomMkpMFt6MAZocLafmUBAmhbM
LLGM+mHf30gaxgzWR7cX8VzDQBYwW2v1AtVYo/Qs+WMEf6wyLtrpbBXBTKNN
CIVOZsKMyGkhJkysXuZqTF1g21iAhW9xYTWpmjmTVMyai+dAQiKnDTBzAwVY
uHuV6R+S6yzKBCFOo2zdTg2iFJ9mZF5TxUi7qy87BLbVSyvJ8ZVFpPzVt/Ac
d9HWDBtsDG6GMTPTYn62eNrNCGnpvM6pQTpBuCmlrCDgkwk3yZQBathN0DEL
57hj1ljErPDqUVmqdtPKw5BsyHmhXP7SY+ScynqcajVVzLuf1bp31z+xnCNX
OXkqqRw3XnQChSBn2sVM555hz3SY3jip4XECADxDGTzr9XDKDZhQdmL9QVI3
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
\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The large solution", "Subsubsection",
 CellChangeTimes->{{3.5145947660181932`*^9, 3.514594803927454*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"pointVotes", "[", 
    RowBox[{"m", ",", "b", ",", "1", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "mn", ",", "mx"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bn", ",", "bx"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "1"}], "<=", "mn", "<", "mx", "<=", "1"}], "&&", 
     RowBox[{
      RowBox[{"-", "1"}], "\[LessEqual]", "bn", "\[LessEqual]", "bx", 
      "\[LessEqual]", "1"}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51459304945129*^9, 3.514593100760634*^9}, {
  3.514593188256424*^9, 3.514593190894606*^9}, {3.5145932982906303`*^9, 
  3.514593346272119*^9}, {3.51459344751991*^9, 3.5145935363300543`*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["1", "16"], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}]}], ")"}]}]},
    {
     FractionBox["1", "8"], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[LessEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{
      RowBox[{"-", "bn"}], "+", "bx"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "16"], " ", 
      RowBox[{"(", 
       RowBox[{"15", "-", 
        RowBox[{"16", " ", "bn"}], "-", 
        RowBox[{"16", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{"1", "-", "bn", "-", "mn"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[GreaterEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "17"}], "+", 
         RowBox[{"16", " ", "bn"}], "+", 
         RowBox[{"16", " ", "mn"}]}], ")"}], "3"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "13"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[GreaterEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "19"}], "+", 
         RowBox[{"16", " ", "bx"}], "+", 
         RowBox[{"16", " ", "mn"}]}], ")"}], "3"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2023", " ", "bn"}], "-", 
        RowBox[{"3060", " ", 
         SuperscriptBox["bn", "2"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"]}], "-", 
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"2023", " ", "bx"}], "+", 
        RowBox[{"3060", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"6120", " ", "bn", " ", "mn"}], "+", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bn", "2"], " ", "mn"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"], " ", "mn"}], "+", 
        RowBox[{"6120", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"6144", " ", "bn", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"6144", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"2048", " ", "bn", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"2048", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64157", "-", 
        RowBox[{"259200", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"259200", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64125", "-", 
        RowBox[{"256", " ", "bn"}], "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"259200", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"63885", "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"258944", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}]}]},
    {
     RowBox[{
      RowBox[{"-", "64"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"4", " ", "mn"}], "-", 
        RowBox[{"4", " ", "mx"}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"mn", "-", "mx"}], ")"}], "3"]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", "1"}], "+", "bx", "+", "mx"}], 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[LessEqual]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      RowBox[{"-", "mn"}], "+", "mx"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"mn", "-", "mx"}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "19"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "15"}], "+", 
         RowBox[{"16", " ", "bx"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}], "3"]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"63869", "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"259200", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}], "+", 
        RowBox[{"256", " ", "mx"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"135", "-", 
        RowBox[{"264", " ", "bx"}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"60", " ", "mn"}], "+", 
        RowBox[{"64", " ", "bx", " ", "mn"}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"204", " ", "mx"}], "+", 
        RowBox[{"192", " ", "bx", " ", "mx"}], "-", 
        RowBox[{"64", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mx", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      RowBox[{"-", "4"}], " ", 
      RowBox[{"(", 
       RowBox[{"bn", "-", "bx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"765", "-", 
        RowBox[{"768", " ", "bn"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"768", " ", "bx"}], "+", 
        RowBox[{"256", " ", "bn", " ", "bx"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"768", " ", "mn"}], "+", 
        RowBox[{"384", " ", "bn", " ", "mn"}], "+", 
        RowBox[{"384", " ", "bx", " ", "mn"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"768", " ", "mx"}], "+", 
        RowBox[{"384", " ", "bn", " ", "mx"}], "+", 
        RowBox[{"384", " ", "bx", " ", "mx"}], "+", 
        RowBox[{"256", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mx", "2"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"mn", "-", "mx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mn", "3"]}], "-", 
        RowBox[{"128", " ", "mn", " ", "mx"}], "-", 
        RowBox[{"768", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"768", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"256", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "722"}], "+", 
        RowBox[{"1938", " ", "bx"}], "-", 
        RowBox[{"1728", " ", 
         SuperscriptBox["bx", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"969", " ", "mn"}], "-", 
        RowBox[{"1728", " ", "bx", " ", "mn"}], "+", 
        RowBox[{"768", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "-", 
        RowBox[{"576", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"512", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"969", " ", "mx"}], "-", 
        RowBox[{"1728", " ", "bx", " ", "mx"}], "+", 
        RowBox[{"768", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "-", 
        RowBox[{"576", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"512", " ", "bx", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "-", 
        RowBox[{"576", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"128", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"mn", "-", "mx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2023"}], "+", 
        RowBox[{"6120", " ", "bn"}], "-", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bn", "2"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"3060", " ", "mn"}], "-", 
        RowBox[{"6144", " ", "bn", " ", "mn"}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bn", "2"], " ", "mn"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"2048", " ", "bn", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"3060", " ", "mx"}], "-", 
        RowBox[{"6144", " ", "bn", " ", "mx"}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "-", 
        RowBox[{"2048", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"2048", " ", "bn", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"2048", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"mn", "-", "mx"}], "<", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"mn", "-", "mx"}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2025"}], "+", 
        RowBox[{"6120", " ", "bx"}], "-", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bx", "2"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"3060", " ", "mn"}], "-", 
        RowBox[{"6144", " ", "bx", " ", "mn"}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"2048", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"3060", " ", "mx"}], "-", 
        RowBox[{"6144", " ", "bx", " ", "mx"}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "-", 
        RowBox[{"2048", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"2048", " ", "bx", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"2048", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"mn", "-", "mx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"mn", "-", "mx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64125", "-", 
        RowBox[{"259200", " ", "bn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"259200", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "-", 
        RowBox[{"783360", " ", "bx", " ", "mx"}], "+", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mx"}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "-", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2025"}], " ", "bn"}], "+", 
        RowBox[{"3060", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "4"]}], "+", 
        RowBox[{"2025", " ", "bx"}], "-", 
        RowBox[{"3060", " ", 
         SuperscriptBox["bx", "2"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"]}], "-", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "4"]}], "+", 
        RowBox[{"6120", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "-", 
        RowBox[{"6120", " ", "bx", " ", "mx"}], "+", 
        RowBox[{"6144", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"], " ", "mx"}], "-", 
        RowBox[{"6144", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"6144", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"2048", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "-", 
        RowBox[{"2048", " ", "bx", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64125", "-", 
        RowBox[{"259200", " ", "bn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mn", "3"]}], "-", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mn", "4"]}], "-", 
        RowBox[{"259200", " ", "mx"}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"49152", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"], " ", "mx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"49152", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["mn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"245760", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "mn", " ", 
         SuperscriptBox["mx", "3"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "8"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"32", " ", "mn"}], "+", 
        RowBox[{"384", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mn", "4"]}], "-", 
        RowBox[{"32", " ", "mx"}], "-", 
        RowBox[{"768", " ", "mn", " ", "mx"}], "-", 
        RowBox[{"4608", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "-", 
        RowBox[{"8192", " ", 
         SuperscriptBox["mn", "3"], " ", "mx"}], "+", 
        RowBox[{"384", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"4608", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"12288", " ", 
         SuperscriptBox["mn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"1536", " ", 
         SuperscriptBox["mx", "3"]}], "-", 
        RowBox[{"8192", " ", "mn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "128"], " ", 
      RowBox[{"(", 
       RowBox[{"63997", "-", 
        RowBox[{"129600", " ", "bn"}], "+", 
        RowBox[{"195840", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"129472", " ", "bx"}], "+", 
        RowBox[{"195840", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"129600", " ", "mn"}], "+", 
        RowBox[{"391680", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"195840", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"393216", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"196608", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"131072", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"131072", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["mn", "4"]}], "-", 
        RowBox[{"129472", " ", "mx"}], "+", 
        RowBox[{"391680", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"195840", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"393216", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"196608", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"131072", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"131072", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "128"], " ", 
      RowBox[{"(", 
       RowBox[{"83521", "-", 
        RowBox[{"314432", " ", "bx"}], "+", 
        RowBox[{"443904", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"278528", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"129600", " ", "mn"}], "+", 
        RowBox[{"391680", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"195840", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"393216", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"196608", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"131072", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"131072", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["mn", "4"]}], "-", 
        RowBox[{"184832", " ", "mx"}], "+", 
        RowBox[{"496128", " ", "bx", " ", "mx"}], "-", 
        RowBox[{"442368", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "+", 
        RowBox[{"131072", " ", 
         SuperscriptBox["bx", "3"], " ", "mx"}], "+", 
        RowBox[{"248064", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"442368", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"196608", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"147456", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"131072", " ", "bx", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"32768", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"63869", "-", 
        RowBox[{"259200", " ", "bn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bn", "4"]}], "+", 
        RowBox[{"256", " ", "bx"}], "-", 
        RowBox[{"258944", " ", "mx"}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64109", "-", 
        RowBox[{"259200", " ", "bn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"256", " ", "mn"}], "-", 
        RowBox[{"258944", " ", "mx"}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"64125", "-", 
        RowBox[{"259200", " ", "bn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bn", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bn", "4"]}], "-", 
        RowBox[{"256", " ", "mn"}], "-", 
        RowBox[{"258944", " ", "mx"}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bx"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "\[GreaterEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"8", " ", "bn"}], "-", 
          RowBox[{"8", " ", "bx"}]}], "<", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}], "&&", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "bn"}], "+", 
          RowBox[{"16", " ", "mn"}]}], "<", "0"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"63869", "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"783360", " ", "bn", " ", "mn"}], "+", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mn"}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "-", 
        RowBox[{"258944", " ", "mx"}], "+", 
        RowBox[{"783360", " ", "bn", " ", "mx"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bn", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bn", "3"], " ", "mx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"786432", " ", "bn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"102917", "-", 
        RowBox[{"369664", " ", "bx"}], "+", 
        RowBox[{"496128", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"294912", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"369664", " ", "mx"}], "+", 
        RowBox[{"992256", " ", "bx", " ", "mx"}], "-", 
        RowBox[{"884736", " ", 
         SuperscriptBox["bx", "2"], " ", "mx"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mx"}], "+", 
        RowBox[{"496128", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"884736", " ", "bx", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"294912", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {
     RowBox[{
      FractionBox["1", "256"], " ", 
      RowBox[{"(", 
       RowBox[{"63869", "-", 
        RowBox[{"258944", " ", "bx"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["bx", "4"]}], "-", 
        RowBox[{"259200", " ", "mn"}], "+", 
        RowBox[{"783360", " ", "bx", " ", "mn"}], "-", 
        RowBox[{"786432", " ", 
         SuperscriptBox["bx", "2"], " ", "mn"}], "+", 
        RowBox[{"262144", " ", 
         SuperscriptBox["bx", "3"], " ", "mn"}], "+", 
        RowBox[{"391680", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"786432", " ", "bx", " ", 
         SuperscriptBox["mn", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["bx", "2"], " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"245760", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"262144", " ", "bx", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"131072", " ", 
         SuperscriptBox["mn", "4"]}], "+", 
        RowBox[{"256", " ", "mx"}], "-", 
        RowBox[{"49152", " ", 
         SuperscriptBox["mn", "2"], " ", "mx"}], "-", 
        RowBox[{"262144", " ", 
         SuperscriptBox["mn", "3"], " ", "mx"}], "+", 
        RowBox[{"49152", " ", "mn", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"393216", " ", 
         SuperscriptBox["mn", "2"], " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"16384", " ", 
         SuperscriptBox["mx", "3"]}], "-", 
        RowBox[{"262144", " ", "mn", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"65536", " ", 
         SuperscriptBox["mx", "4"]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "-", "bx"}], "<", "0"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "bn"}], "-", 
        RowBox[{"8", " ", "bx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], "\[Equal]", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ">", "0"}], "&&", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "17"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mx"}]}], "\[LessEqual]", "0"}]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{
  3.514593192055109*^9, {3.514593280570406*^9, 3.514593313096596*^9}, 
   3.5145934345764637`*^9, {3.514593500818787*^9, 3.5145935169867992`*^9}, 
   3.514593835756369*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "%15", "]"}]], "Input",
 CellChangeTimes->{{3.514594205903129*^9, 3.514594220163988*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["1", "16"], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[Equal]", 
           FractionBox["17", "16"]}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "\[Equal]", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}]}], ")"}]}], 
       ")"}]}]},
    {
     FractionBox["1", "8"], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[LessEqual]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", "bn"}], "+", "bx"}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[LessEqual]", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["15", "16"], "-", "bn", "-", "mn"}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{"1", "-", "bn", "-", "mn"}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"bx", "+", "mn"}], "\[Equal]", 
         FractionBox["17", "16"]}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[GreaterEqual]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "17"}], "+", 
         RowBox[{"16", " ", "bn"}], "+", 
         RowBox[{"16", " ", "mn"}]}], ")"}], "3"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "13"}], "+", 
        RowBox[{"16", " ", "bn"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], ">", "bx"}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"bx", "+", "mn"}], "\[Equal]", 
             FractionBox["17", "16"]}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bx", "+", "mn"}], "\[GreaterEqual]", 
               FractionBox["17", "16"]}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", "mn"}], "<", 
               FractionBox["17", "16"]}]}], ")"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["17", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "19"}], "+", 
         RowBox[{"16", " ", "bx"}], "+", 
         RowBox[{"16", " ", "mn"}]}], ")"}], "3"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], " ", 
      RowBox[{"(", 
       RowBox[{"bn", "-", "bx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "+", "bx", "+", 
           RowBox[{"4", " ", "mn"}]}], ")"}]}], "+", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"17", "-", 
            RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "7"}], "+", 
           RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
        RowBox[{"12", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{"255", "-", 
           RowBox[{"512", " ", "mn"}], "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mn", "2"]}]}], ")"}]}], "+", 
        RowBox[{"4", " ", "bn", " ", 
         RowBox[{"(", 
          RowBox[{"765", "+", 
           RowBox[{"128", " ", 
            SuperscriptBox["bx", "2"]}], "+", 
           RowBox[{"512", " ", "bx", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "-", 
           RowBox[{"1536", " ", "mn"}], "+", 
           RowBox[{"768", " ", 
            SuperscriptBox["mn", "2"]}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["64157", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2025", " ", "mn"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mn", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       FractionBox["15", "16"], "<", 
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", "bn"}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "256"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "19"}], "+", 
         RowBox[{"16", " ", "mn"}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "15"}], "+", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "3"]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bx", "+", "mn"}], "<", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["63885", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2023", " ", "mn"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mn", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", "64"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"4", " ", "mn"}], "-", 
        RowBox[{"4", " ", "mx"}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"mn", "-", "mx"}], ")"}], "3"]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "\[LessEqual]", "bx"}]}], 
         ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", "1"}], "+", "bx", "+", "mx"}], 
     RowBox[{
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[LessEqual]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["15", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", "mn"}], "+", "mx"}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[Equal]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["17", "16"]}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], ">", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{"mn", "<", "mx"}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "256"]}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "19"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mx"}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "15"}], "+", 
         RowBox[{"16", " ", "bx"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}], "3"]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "\[LessEqual]", "bx"}]}], 
         ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["63869", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2025", " ", "mn"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mn", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}], "+", "mx"}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
      RowBox[{
       FractionBox["15", "16"], "<", 
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["15", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "15"}], "+", 
        RowBox[{"16", " ", "bx"}], "+", 
        RowBox[{"16", " ", "mn"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"135", "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["bx", "2"]}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"204", " ", "mx"}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"4", " ", "mn", " ", 
         RowBox[{"(", 
          RowBox[{"15", "+", 
           RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{"8", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "33"}], "+", 
           RowBox[{"8", " ", "mn"}], "+", 
           RowBox[{"24", " ", "mx"}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", "4"}], " ", 
      RowBox[{"(", 
       RowBox[{"bn", "-", "bx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"765", "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["bn", "2"]}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["bx", "2"]}], "-", 
        RowBox[{"768", " ", "mn"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mn", "2"]}], "-", 
        RowBox[{"768", " ", "mx"}], "+", 
        RowBox[{"256", " ", "mn", " ", "mx"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"384", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "2"}], "+", "mn", "+", "mx"}], ")"}]}], "+", 
        RowBox[{"128", " ", "bn", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "bx"}], "+", 
           RowBox[{"3", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "2"}], "+", "mn", "+", "mx"}], ")"}]}]}], 
          ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"mn", "<", "mx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"256", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{
         SuperscriptBox["mn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"64", "-", 
           RowBox[{"768", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mx", "2"]}], "-", 
        RowBox[{"256", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"128", " ", "mn", " ", "mx", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           RowBox[{"6", " ", "mx"}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[Equal]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["17", "16"]}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "\[Equal]", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mx"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}]}], ")"}]}], 
       ")"}]}]},
    {
     RowBox[{
      RowBox[{"-", "2"}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "722"}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"969", " ", "mx"}], "-", 
        RowBox[{"576", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"128", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"64", " ", 
         SuperscriptBox["mn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "9"}], "+", 
           RowBox[{"2", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{"192", " ", 
         SuperscriptBox["bx", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "9"}], "+", 
           RowBox[{"4", " ", "mn"}], "+", 
           RowBox[{"4", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{"mn", " ", 
         RowBox[{"(", 
          RowBox[{"969", "-", 
           RowBox[{"576", " ", "mx"}], "+", 
           RowBox[{"128", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
        RowBox[{"2", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{"969", "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mn", "2"]}], "-", 
           RowBox[{"864", " ", "mx"}], "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mx", "2"]}], "+", 
           RowBox[{"32", " ", "mn", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "27"}], "+", 
              RowBox[{"8", " ", "mx"}]}], ")"}]}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"mn", "<", "mx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "2"]}], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2023"}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "+", "mx"}], ")"}]}], "+", 
        RowBox[{"3060", " ", "mx"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "2"}], "+", "mn", "+", "mx"}], ")"}]}], "+", 
        RowBox[{"4", " ", "mn", " ", 
         RowBox[{"(", 
          RowBox[{"765", "-", 
           RowBox[{"512", " ", "mx"}], "+", 
           RowBox[{"128", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
        RowBox[{"8", " ", "bn", " ", 
         RowBox[{"(", 
          RowBox[{"765", "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mn", "2"]}], "+", 
           RowBox[{"256", " ", "mn", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "3"}], "+", "mx"}], ")"}]}], "-", 
           RowBox[{"768", " ", "mx"}], "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bx", "+", "mn"}], "\[Equal]", 
               FractionBox["17", "16"]}], "&&", 
              RowBox[{
               RowBox[{"bx", "+", "mx"}], ">", 
               FractionBox["17", "16"]}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bx", "+", "mn"}], ">", 
               FractionBox["17", "16"]}], "&&", 
              RowBox[{"mn", "<", "mx"}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", "mn"}], "<", 
               FractionBox["17", "16"]}]}], ")"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
          RowBox[{"mn", "<", "mx"}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"mn", "-", "mx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "2025"}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "+", "mx"}], ")"}]}], "+", 
        RowBox[{"3060", " ", "mx"}], "-", 
        RowBox[{"2048", " ", 
         SuperscriptBox["mx", "2"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["mx", "3"]}], "+", 
        RowBox[{"3072", " ", 
         SuperscriptBox["bx", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "2"}], "+", "mn", "+", "mx"}], ")"}]}], "+", 
        RowBox[{"4", " ", "mn", " ", 
         RowBox[{"(", 
          RowBox[{"765", "-", 
           RowBox[{"512", " ", "mx"}], "+", 
           RowBox[{"128", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
        RowBox[{"8", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{"765", "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mn", "2"]}], "+", 
           RowBox[{"256", " ", "mn", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "3"}], "+", "mx"}], ")"}]}], "-", 
           RowBox[{"768", " ", "mx"}], "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"bx", "<", 
         RowBox[{
          FractionBox["1", "8"], "+", "bn"}]}], "&&", 
        RowBox[{"bn", "<", "bx"}], "&&", 
        RowBox[{
         RowBox[{"bn", "+", "mn"}], "<", 
         FractionBox["15", "16"]}], "&&", 
        RowBox[{"mn", "<", "mx"}], "&&", 
        RowBox[{
         RowBox[{"bx", "+", "mn"}], ">", 
         FractionBox["15", "16"]}], "&&", 
        RowBox[{
         RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
         FractionBox["15", "16"]}]}], ")"}], "||", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          FractionBox["1", "8"], "+", "bn"}], "\[LessEqual]", "bx"}], "&&", 
        RowBox[{"mn", "<", "mx"}], "&&", 
        RowBox[{
         FractionBox["15", "16"], "<", 
         RowBox[{"bx", "+", "mn"}], "<", 
         FractionBox["17", "16"]}], "&&", 
        RowBox[{
         RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
         FractionBox["17", "16"]}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["64125", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "bx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "bx"}]}], ")"}], " ", "mn"}], "+", 
      RowBox[{"6", " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "bx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["bx", "2"]}]}], ")"}], " ", 
       SuperscriptBox["mn", "2"]}], "+", 
      RowBox[{"1024", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "bx"}], ")"}], " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      RowBox[{"3060", " ", "bx", " ", "mx"}], "+", 
      RowBox[{"3072", " ", 
       SuperscriptBox["bx", "2"], " ", "mx"}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", "mx"}], "+", 
      RowBox[{"3072", " ", "bx", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1536", " ", 
       SuperscriptBox["bx", "2"], " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1024", " ", "bx", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "<", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"bn", "-", "bx"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "3"]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bx", "3"]}], "+", 
        RowBox[{"2048", " ", 
         SuperscriptBox["bx", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "+", 
        RowBox[{"512", " ", 
         SuperscriptBox["bn", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "4"}], "+", "bx", "+", 
           RowBox[{"4", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"15", "-", 
            RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "9"}], "+", 
           RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
        RowBox[{"12", " ", "bx", " ", 
         RowBox[{"(", 
          RowBox[{"255", "-", 
           RowBox[{"512", " ", "mx"}], "+", 
           RowBox[{"256", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
        RowBox[{"4", " ", "bn", " ", 
         RowBox[{"(", 
          RowBox[{"765", "+", 
           RowBox[{"128", " ", 
            SuperscriptBox["bx", "2"]}], "+", 
           RowBox[{"512", " ", "bx", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
           RowBox[{"1536", " ", "mx"}], "+", 
           RowBox[{"768", " ", 
            SuperscriptBox["mx", "2"]}]}], ")"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["64125", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "-", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2025", " ", "mx"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"960", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "-", 
      RowBox[{"192", " ", 
       SuperscriptBox["mn", "2"], " ", "mx", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"64", " ", "mn", " ", 
       SuperscriptBox["mx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "3"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"64", " ", 
       SuperscriptBox["mn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["1", "8"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "-", 
      RowBox[{"4", " ", "mx"}], "+", 
      RowBox[{"48", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"192", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "-", 
      RowBox[{"64", " ", 
       SuperscriptBox["mn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "3"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "-", 
      RowBox[{"4", " ", "mn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"4", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"48", " ", 
       SuperscriptBox["mn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"12", " ", "mx"}], "+", 
         RowBox[{"32", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["63997", "128"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2025", " ", "mn"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mn", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2023", " ", "mx"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           FractionBox["15", "16"], "<", 
           RowBox[{"bx", "+", "mn"}], "<", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mx"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["83521", "128"], "+", 
      RowBox[{"512", " ", 
       SuperscriptBox["bx", "4"]}], "-", 
      FractionBox[
       RowBox[{"2025", " ", "mn"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mn", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mn", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mn", "4"]}], "-", 
      RowBox[{"1444", " ", "mx"}], "+", 
      RowBox[{"1938", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1152", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "+", 
      RowBox[{"128", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "17"}], "+", 
         RowBox[{"8", " ", "mn"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"12", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"289", "-", 
         RowBox[{"256", " ", "mn"}], "+", 
         RowBox[{"128", " ", 
          SuperscriptBox["mn", "2"]}], "-", 
         RowBox[{"288", " ", "mx"}], "+", 
         RowBox[{"128", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
      RowBox[{"bx", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["4913", "2"]}], "+", 
         RowBox[{"3060", " ", "mn"}], "-", 
         RowBox[{"3072", " ", 
          SuperscriptBox["mn", "2"]}], "+", 
         RowBox[{"1024", " ", 
          SuperscriptBox["mn", "3"]}], "+", 
         RowBox[{"3876", " ", "mx"}], "-", 
         RowBox[{"3456", " ", 
          SuperscriptBox["mx", "2"]}], "+", 
         RowBox[{"1024", " ", 
          SuperscriptBox["mx", "3"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       FractionBox["15", "16"], "<", 
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "+", "bx", "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "256"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "13"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bn", "+", "mx"}], ">", 
           FractionBox["15", "16"]}], "&&", 
          RowBox[{
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[LessEqual]", 
           FractionBox["15", "16"]}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mx"}], ">", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{"bn", "<", "bx"}], "&&", 
          RowBox[{"bx", "<", 
           RowBox[{
            FractionBox["1", "8"], "+", "bn"}]}], "&&", 
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      FractionBox["64109", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "-", "mn", "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2023", " ", "mx"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["64125", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bn", "4"]}], "-", "mn", "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"2023", " ", "mx"}], "2"], "+", 
      RowBox[{"1530", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bn", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"15", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"bn", "+", "mx"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"bx", "+", "mn"}], "\[Equal]", 
         FractionBox["17", "16"]}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", "mn"}], "\[GreaterEqual]", 
           FractionBox["17", "16"]}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", "mn"}], "<", 
           FractionBox["15", "16"]}]}], ")"}]}], ")"}]}]},
    {
     RowBox[{
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}], "-", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{"mn", "-", "mx"}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "256"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "17"}], "+", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "13"}], "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "-", 
      RowBox[{"1536", " ", 
       SuperscriptBox["bn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], " ", "mn"}], "+", 
         SuperscriptBox["mn", "2"], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "2"}], "+", "mx"}], ")"}], " ", "mx"}]}], ")"}]}], 
      "-", 
      RowBox[{"4", " ", "bn", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"765", " ", "mn"}], "-", 
         RowBox[{"768", " ", 
          SuperscriptBox["mn", "2"]}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "3"]}], "+", 
         RowBox[{"mx", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "765"}], "+", 
            RowBox[{"768", " ", "mx"}], "-", 
            RowBox[{"256", " ", 
             SuperscriptBox["mx", "2"]}]}], ")"}]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], ">", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["102917", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"4", " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"19", "-", 
          RowBox[{"16", " ", "mx"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mx"}], ")"}]}], "-", 
      RowBox[{"1444", " ", "mx"}], "+", 
      RowBox[{"1938", " ", 
       SuperscriptBox["mx", "2"]}], "-", 
      RowBox[{"1152", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "+", 
      RowBox[{"128", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", 
         RowBox[{"8", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"323", "-", 
         RowBox[{"576", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}], "\[Equal]", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mn"}], "<", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {
     RowBox[{
      FractionBox["63869", "256"], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["bx", "4"]}], "+", 
      RowBox[{"1024", " ", 
       SuperscriptBox["bx", "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "mn"}], ")"}]}], "+", 
      RowBox[{"512", " ", 
       SuperscriptBox["mn", "4"]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", "bx", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"17", "-", 
          RowBox[{"16", " ", "mn"}]}], ")"}], "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "7"}], "+", 
         RowBox[{"8", " ", "mn"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["bx", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"512", " ", "mn"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mn", "2"]}]}], ")"}]}], "+", "mx", "-", 
      RowBox[{"64", " ", 
       SuperscriptBox["mx", "3"]}], "+", 
      RowBox[{"256", " ", 
       SuperscriptBox["mx", "4"]}], "-", 
      RowBox[{"64", " ", 
       SuperscriptBox["mn", "3"], " ", 
       RowBox[{"(", 
        RowBox[{"15", "+", 
         RowBox[{"16", " ", "mx"}]}], ")"}]}], "+", 
      RowBox[{"6", " ", 
       SuperscriptBox["mn", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"255", "-", 
         RowBox[{"32", " ", "mx"}], "+", 
         RowBox[{"256", " ", 
          SuperscriptBox["mx", "2"]}]}], ")"}]}], "+", 
      RowBox[{"mn", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["2025", "2"]}], "+", 
         RowBox[{"192", " ", 
          SuperscriptBox["mx", "2"]}], "-", 
         RowBox[{"1024", " ", 
          SuperscriptBox["mx", "3"]}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"bx", "<", 
       RowBox[{
        FractionBox["1", "8"], "+", "bn"}]}], "&&", 
      RowBox[{"bn", "<", "bx"}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mn"}], "\[Equal]", 
       FractionBox["15", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", "mx"}], ">", 
       FractionBox["17", "16"]}], "&&", 
      RowBox[{
       RowBox[{"bn", "+", "mx"}], "\[LessEqual]", 
       FractionBox["17", "16"]}]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.514594227083942*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["17 May 2011", "Section",
 CellChangeTimes->{{3.5147185654153357`*^9, 3.5147185672052183`*^9}}],

Cell["\<\
Coded parts of equivalent_db in hough peak match code and added new test cases\
\>", "Subsection",
 CellChangeTimes->{{3.5147185699813766`*^9, 3.5147186085694*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["18 May 2011", "Section",
 CellChangeTimes->{{3.51471851816208*^9, 3.514718519736309*^9}}],

Cell[CellGroupData[{

Cell["\<\
Hough analytical integrals can be simplified if I use dirac delta\
\>", "Subsection",
 CellChangeTimes->{{3.514718634833028*^9, 3.51471866272244*^9}, {
  3.514718761279228*^9, 3.5147187627900248`*^9}}],

Cell["\<\
The complexity of the integrals comes from the number of special cases \
created by intersecting a hyper-rectangle with a region between hyperplanes.  \
If I use a dirac delta function, the hyper-rectangle only needs to be \
intersected with a hyper-plane and the integral is (I think) the \
length/area/volume of the intersection.  This has many fewer special cases.  \
Further, the change in the length/area/volume when changing only one \
coordinate will be a piecewise linear function: easy to compute.  Then, the \
sum of the piecewise linear functions for all points will be another \
piecewise linear function.\
\>", "Text",
 CellChangeTimes->{{3.514718863942189*^9, 3.514719046521019*^9}, {
  3.514719110722415*^9, 3.5147191380132637`*^9}, {3.5147202938894176`*^9, 
  3.514720367116674*^9}}],

Cell[CellGroupData[{

Cell["Show that the integrals are much nicer", "Subsubsection",
 CellChangeTimes->{{3.514726852532099*^9, 3.514726859737767*^9}}],

Cell["\<\
Below, I verify that in 3 dimensions, the dirac delta is the area of the \
plane intersecting the integration rectangular prism.  (I use the plane z=0 \
and the prism consisting of the 2-d box (0,0)..(a,b) extended 1 unit above \
and below the origin.\
\>", "Text",
 CellChangeTimes->{{3.514719716665204*^9, 3.514719858861751*^9}, {
  3.514720198810773*^9, 3.514720256383773*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"DiracDelta", "[", "z", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.514719154594612*^9, 3.5147191598845797`*^9}, {
  3.514719607302401*^9, 3.514719609321142*^9}, {3.514719664170207*^9, 
  3.514719696023048*^9}, {3.514719728817622*^9, 3.5147197351089973`*^9}}],

Cell[BoxData[
 RowBox[{"a", " ", "b"}]], "Output",
 CellChangeTimes->{3.514719700222527*^9, 3.514719742608706*^9}]
}, Open  ]],

Cell["\<\
Now, I calculate the box integral for the transform in two dimensions of a \
single point (x,y).  The box goes from (mn,bn) to (mx,bx).  I do the integral \
in two parts, the first excludes the line x==0 and the second is only that \
line.\
\>", "Text",
 CellChangeTimes->{{3.514720474432686*^9, 3.514720538790895*^9}, {
  3.514721680050663*^9, 3.5147217079524317`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pointVotes", "[", 
   RowBox[{"m_", ",", "b_", ",", "x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"DiracDelta", "[", 
   RowBox[{
    RowBox[{"m", " ", "x"}], "+", "b", "-", "y"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "is", " ", "the", " ", "votes", " ", "from", " ", "the", " ",
      "point", " ", "at", " ", "x"}], ",", "y", ",", " ", 
    RowBox[{
    "as", " ", "a", " ", "function", " ", "of", " ", "m", " ", "and", " ", 
     "b"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.514720545423729*^9, 3.51472056023997*^9}, {
  3.514720646560807*^9, 3.514720649765663*^9}, {3.5147206888392897`*^9, 
  3.514720709620623*^9}, {3.514721529528537*^9, 3.5147215561903*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"pointVotes", "[", 
    RowBox[{"m", ",", "b", ",", "x", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "mn", ",", "mx"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bn", ",", "bx"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"mn", "<", "mx"}], "&&", 
     RowBox[{"bn", "<", "bx"}], "&&", 
     RowBox[{"0", "<", "x", "\[LessEqual]", "1"}], "&&", 
     RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "1"}]}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.514720727137169*^9, 3.514720754084565*^9}, {
  3.5147208206771603`*^9, 3.5147208717587757`*^9}, {3.514721453380888*^9, 
  3.514721483289597*^9}, {3.514721626570342*^9, 3.51472162733384*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "x"], 
  RowBox[{
   RowBox[{"HeavisideTheta", "[", 
    RowBox[{"mx", "+", 
     FractionBox[
      RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"HeavisideTheta", "[", 
       RowBox[{"mn", "+", 
        FractionBox[
         RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"HeavisideTheta", "[", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"bn", "+", 
          RowBox[{"mn", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "bn"}], "-", 
        RowBox[{"mn", " ", "x"}], "+", "y", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bn", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], ")"}]}],
      "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{"mn", "+", 
          FractionBox[
           RowBox[{"bx", "-", "y"}], "x"]}], "]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"mx", "+", 
           FractionBox[
            RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "bn"}], "+", "bx", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"bn", "+", 
              RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"-", 
              FractionBox[
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
          ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bx", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bx", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
       ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{
  3.514720817459196*^9, {3.514720856557542*^9, 3.514720880374899*^9}, {
   3.514721623260681*^9, 3.514721632883732*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"pointVotes", "[", 
    RowBox[{"m", ",", "b", ",", "0", ",", "y"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "mn", ",", "mx"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "bn", ",", "bx"}], "}"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{
     RowBox[{"mn", "<", "mx"}], "&&", 
     RowBox[{"bn", "<", "bx"}], "&&", 
     RowBox[{"0", "\[LessEqual]", "y", "\[LessEqual]", "1"}]}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.514720727137169*^9, 3.514720754084565*^9}, {
  3.5147208206771603`*^9, 3.5147208717587757`*^9}, {3.514721453380888*^9, 
  3.514721483289597*^9}, {3.514721626570342*^9, 3.514721652853109*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "mn"}], "+", "mx"}], ")"}], " ", 
  RowBox[{"HeavisideTheta", "[", 
   RowBox[{"bx", "-", "y"}], "]"}], " ", 
  RowBox[{"HeavisideTheta", "[", 
   RowBox[{
    RowBox[{"-", "bn"}], "+", "y"}], "]"}]}]], "Output",
 CellChangeTimes->{
  3.514720817459196*^9, {3.514720856557542*^9, 3.514720880374899*^9}, {
   3.514721623260681*^9, 3.5147216539564543`*^9}}]
}, Open  ]],

Cell["\<\
Now, I'll take those results and solve for the amount one must change bx to \
get a certain area.  Note that I need to change HeavisideTheta to UnitStep \
because Reduce doesn't understand their equivalence.  First, I solve the \
equation where x\[NotEqual]0.\
\>", "Text",
 CellChangeTimes->{{3.514721420335745*^9, 3.5147214209875593`*^9}, {
  3.514721499838151*^9, 3.514721504987651*^9}, {3.514721718624633*^9, 
  3.51472183925972*^9}, {3.514721896400217*^9, 3.514721896966345*^9}, {
  3.514722025245577*^9, 3.514722028778735*^9}, {3.5147220861066847`*^9, 
  3.514722111073091*^9}, {3.514722178741431*^9, 3.514722181723267*^9}, {
  3.514722214812868*^9, 3.514722238923409*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "x"], 
   RowBox[{"HeavisideTheta", "[", 
    RowBox[{"mx", "+", 
     FractionBox[
      RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"HeavisideTheta", "[", 
       RowBox[{"mn", "+", 
        FractionBox[
         RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"HeavisideTheta", "[", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"bn", "+", 
          RowBox[{"mn", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "bn"}], "-", 
        RowBox[{"mn", " ", "x"}], "+", "y", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bn", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], ")"}]}],
      "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{"mn", "+", 
          FractionBox[
           RowBox[{"bx", "-", "y"}], "x"]}], "]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"mx", "+", 
           FractionBox[
            RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "bn"}], "+", "bx", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"bn", "+", 
              RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
            RowBox[{"HeavisideTheta", "[", 
             RowBox[{"-", 
              FractionBox[
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
          ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bx", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"HeavisideTheta", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bx", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
       ")"}]}]}], ")"}]}], "/.", " ", 
  RowBox[{"HeavisideTheta", "\[Rule]", "UnitStep"}]}]], "Input",
 CellChangeTimes->{{3.514721956150753*^9, 3.514721971162277*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "x"], 
  RowBox[{
   RowBox[{"UnitStep", "[", 
    RowBox[{"mx", "+", 
     FractionBox[
      RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"UnitStep", "[", 
       RowBox[{"mn", "+", 
        FractionBox[
         RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"UnitStep", "[", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"bn", "+", 
          RowBox[{"mn", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "bn"}], "-", 
        RowBox[{"mn", " ", "x"}], "+", "y", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bn", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"UnitStep", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], ")"}]}],
      "-", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"UnitStep", "[", 
         RowBox[{"mn", "+", 
          FractionBox[
           RowBox[{"bx", "-", "y"}], "x"]}], "]"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"UnitStep", "[", 
          RowBox[{"mx", "+", 
           FractionBox[
            RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "bn"}], "+", "bx", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"bn", "+", 
              RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
            RowBox[{"UnitStep", "[", 
             RowBox[{"-", 
              FractionBox[
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
          ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"bx", "+", 
           RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
         RowBox[{"UnitStep", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bn", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
         RowBox[{"UnitStep", "[", 
          RowBox[{"-", 
           FractionBox[
            RowBox[{"bx", "+", 
             RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
       ")"}]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.514721972531461*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"Reduce", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox["1", "x"], 
       RowBox[{"UnitStep", "[", 
        RowBox[{"mx", "+", 
         FractionBox[
          RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"UnitStep", "[", 
           RowBox[{"mn", "+", 
            FractionBox[
             RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
          RowBox[{"UnitStep", "[", 
           RowBox[{"-", 
            FractionBox[
             RowBox[{"bn", "+", 
              RowBox[{"mn", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "bn"}], "-", 
            RowBox[{"mn", " ", "x"}], "+", "y", "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"bn", "+", 
               RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
             RowBox[{"UnitStep", "[", 
              RowBox[{"-", 
               FractionBox[
                RowBox[{"bn", "+", 
                 RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
           ")"}]}], "-", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"UnitStep", "[", 
             RowBox[{"mn", "+", 
              FractionBox[
               RowBox[{"bx", "-", "y"}], "x"]}], "]"}]}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"UnitStep", "[", 
              RowBox[{"mx", "+", 
               FractionBox[
                RowBox[{"bx", "-", "y"}], "x"]}], "]"}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "bn"}], "+", "bx", "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"bn", "+", 
                  RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
                RowBox[{"UnitStep", "[", 
                 RowBox[{"-", 
                  FractionBox[
                   RowBox[{"bn", "+", 
                    RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
              ")"}]}], "+", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"bx", "+", 
               RowBox[{"mx", " ", "x"}], "-", "y"}], ")"}], " ", 
             RowBox[{"UnitStep", "[", 
              RowBox[{"-", 
               FractionBox[
                RowBox[{"bn", "+", 
                 RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}], " ", 
             RowBox[{"UnitStep", "[", 
              RowBox[{"-", 
               FractionBox[
                RowBox[{"bx", "+", 
                 RowBox[{"mx", " ", "x"}], "-", "y"}], "x"]}], "]"}]}]}], 
           ")"}]}]}], ")"}]}], "\[Equal]", "a"}], "&&", 
     RowBox[{"a", ">", "0"}], "&&", 
     RowBox[{"0", "<", "x"}], "&&", 
     RowBox[{"0", "\[LessEqual]", "y"}], "&&", 
     RowBox[{"mn", "<", "mx"}], "&&", 
     RowBox[{"bn", "<", "bx"}]}], ",", 
    RowBox[{"{", "bx", "}"}], ",", "Reals"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.514721906473414*^9, 3.514721934892395*^9}, 
   3.514721984227777*^9, {3.5147224618141403`*^9, 3.514722479849*^9}, {
   3.514722682746282*^9, 3.514722726188198*^9}, {3.514722970592073*^9, 
   3.514722992016797*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mn", "<", "mx"}], "&&", 
  RowBox[{"x", ">", "0"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"a", ">", "0"}], "&&", 
      RowBox[{
       RowBox[{"a", "+", "mn"}], "<", "mx"}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bx", "+", 
            RowBox[{"mx", " ", "x"}]}], "\[Equal]", 
           RowBox[{
            RowBox[{"a", " ", "x"}], "+", "y"}]}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}]}], "\[LessEqual]", "y"}], "&&", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"bn", "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], 
                 "\[GreaterEqual]", "0"}], "||", 
                RowBox[{"y", "\[GreaterEqual]", "0"}], "||", 
                RowBox[{
                 RowBox[{"bn", "+", 
                  RowBox[{"mx", " ", "x"}]}], ">", "0"}]}], ")"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"y", "\[GreaterEqual]", "0"}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}]}], "\[LessEqual]", "0"}]}], ")"}]}], 
           ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"bx", "\[GreaterEqual]", 
           RowBox[{"bn", "+", 
            RowBox[{"a", " ", "x"}]}]}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], "\[Equal]", 
               "y"}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], ">", "0"}]}],
              ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], "\[Equal]", 
               "0"}], "&&", 
              RowBox[{"y", "\[Equal]", "0"}]}], ")"}]}], ")"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bn", "+", 
            RowBox[{"a", " ", "x"}]}], "\[Equal]", "bx"}], "&&", 
          RowBox[{"y", "<", 
           RowBox[{"bn", "+", 
            RowBox[{"mx", " ", "x"}]}]}], "&&", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], ">", "0"}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], "<", "y"}]}],
              ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], "\[Equal]", 
               "0"}], "&&", 
              RowBox[{"y", ">", "0"}]}], ")"}], "||", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"a", "+", "mn"}], ")"}], " ", "x"}]}], "<", "0"}], "&&", 
              RowBox[{
               RowBox[{"bn", "+", 
                RowBox[{"mx", " ", "x"}]}], ">", "0"}], "&&", 
              RowBox[{"y", "\[GreaterEqual]", "0"}]}], ")"}]}], ")"}]}], 
         ")"}]}], ")"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"a", "+", "mn"}], "\[Equal]", "mx"}], "&&", 
      RowBox[{
       RowBox[{"bx", "+", 
        RowBox[{"mx", " ", "x"}]}], "\[GreaterEqual]", 
       RowBox[{
        RowBox[{"a", " ", "x"}], "+", "y"}]}], "&&", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "\[GreaterEqual]", "0"}], "&&", 
          RowBox[{
           RowBox[{"bn", "+", 
            RowBox[{"mx", " ", "x"}]}], "\[LessEqual]", "0"}]}], ")"}], "||", 
        
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"bn", "+", 
            RowBox[{"mx", " ", "x"}]}], ">", "0"}], "&&", 
          RowBox[{"y", "\[GreaterEqual]", 
           RowBox[{"bn", "+", 
            RowBox[{"mx", " ", "x"}]}]}]}], ")"}]}], ")"}]}], ")"}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{{3.514721929146879*^9, 3.514721936359976*^9}, 
   3.514721987397046*^9, {3.514722676540513*^9, 3.514722728651704*^9}, {
   3.514722976985208*^9, 3.514722994408944*^9}}]
}, Open  ]],

Cell["Now, the equation where x=0", "Text",
 CellChangeTimes->{{3.514722244571863*^9, 3.514722248833446*^9}, {
  3.514722361031835*^9, 3.514722361597678*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "mn"}], "+", "mx"}], ")"}], " ", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{"bx", "-", "y"}], "]"}], " ", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{
          RowBox[{"-", "bn"}], "+", "y"}], "]"}]}], "/.", 
       RowBox[{"HeavisideTheta", "\[Rule]", "UnitStep"}]}], ")"}], "\[Equal]",
      "a"}], "&&", 
    RowBox[{"a", ">", "0"}], "&&", 
    RowBox[{"0", "\[LessEqual]", "y"}], "&&", 
    RowBox[{"mn", "<", "mx"}], "&&", 
    RowBox[{"bn", "<", "bx"}]}], ",", 
   RowBox[{"{", "bx", "}"}], ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.51472237465555*^9, 3.51472240541539*^9}, {
  3.514722744259869*^9, 3.5147227533863*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mn", "<", "mx"}], "&&", 
  RowBox[{"y", "\[GreaterEqual]", "0"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bn", "<", "y"}], "&&", 
      RowBox[{"a", "\[Equal]", 
       RowBox[{
        RowBox[{"-", "mn"}], "+", "mx"}]}], "&&", 
      RowBox[{"bx", "\[GreaterEqual]", "y"}]}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bn", "\[Equal]", "y"}], "&&", 
      RowBox[{"a", "\[Equal]", 
       RowBox[{
        RowBox[{"-", "mn"}], "+", "mx"}]}], "&&", 
      RowBox[{"bx", ">", "y"}]}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.514722405919817*^9, 3.514722754673864*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Doing solving the equations resulting from the integrals to find specific \
areas\
\>", "Subsubsection",
 CellChangeTimes->{{3.514726834044333*^9, 3.5147268365846863`*^9}, {
  3.514726867270178*^9, 3.5147268873620777`*^9}}],

Cell["\<\
Unfortunately, this gets me almost but not quite there.  What I really want \
is the sum of many points' votes over the same box to equal a.  I'm going to \
try making the bounds of integration (except for bx) be the unit square.  \
Further, we can look only at points whose transform intersects the bx face \
(that is, the line segment from m=0..1 of b=bx) and decreasing bx.  No other \
point's vote contribution will change by changing bx.  Further, the points \
that intersecting the bx face will only have their votes decrease.  We can do \
this in steps, stopping at each point where the number of points intersecting \
the face changes until we get to one which bounds the target number of votes.\
\
\>", "Text",
 CellChangeTimes->{{3.514723100530695*^9, 3.514723132127678*^9}, {
  3.5147238626885443`*^9, 3.514723885845237*^9}, {3.5147239263847017`*^9, 
  3.5147240628028727`*^9}, {3.51472413565327*^9, 3.5147241583953*^9}, {
  3.514724197366309*^9, 3.5147242281552753`*^9}, {3.51472427121406*^9, 
  3.514724347382968*^9}, {3.514725286094048*^9, 3.514725291721664*^9}}],

Cell["\<\
Each point's transform, being linear, will intersect the bx face on exactly \
one closed interval of bx.  The edges of these intervals define the places \
where the number of points intersecting bx can change.  In the intervals \
where no edge points lie, the votes should change nicely.  Here we can follow \
one of two paths.  We could just use the standard PRIM algorithm and find the \
bx that gives us the next votes in the sequence.  Or, we could be very greedy \
and find the bx that will give us maximum density and votes greater than some \
minimum.  Very greedy could lead to significant problems of grabbing a long \
line-segment which is from only one point.  This could be mitigated by making \
it not only the number of votes that must be above some minimum but also the \
number of line-segments.\
\>", "Text",
 CellChangeTimes->{{3.5147246796098547`*^9, 3.514724755236889*^9}, {
   3.514724847482718*^9, 3.51472486836784*^9}, {3.514725035810779*^9, 
   3.514725145418642*^9}, {3.514725176157432*^9, 3.5147252271163883`*^9}, {
   3.514725310314047*^9, 3.5147253199485807`*^9}, {3.514725406390943*^9, 
   3.514725424890993*^9}, {3.514725507065205*^9, 3.514725561704563*^9}, 
   3.5147256028982487`*^9, {3.514725802741579*^9, 3.514725810697772*^9}, 
   3.514726152090723*^9}],

Cell["\<\
Note: an entire point should be deleted when it is part of an accepted \
window.  That is because we are interpreting the windows as peaks.  Removing \
an entire line might be a bad idea because it makes the maximum search \
sensitive to the order in which the maxima are found.  A compromise between \
removing rectangles and removing whole lines is to remove rectangles until \
finished, then choose the best rectangle and remove all its lines from the \
other rectangles.  Re-estimate those rectangles using them as starting \
positions in the new space.  Repeat until no lines remain.\
\>", "Text",
 CellChangeTimes->{{3.5147261576300592`*^9, 3.514726264951624*^9}, {
  3.514726608411852*^9, 3.5147267023770943`*^9}, {3.514726737001471*^9, 
  3.514726784079856*^9}, {3.514726814708576*^9, 3.514726819339562*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parallelizing", "Subsubsection",
 CellChangeTimes->{{3.5147300426914*^9, 3.51473004456784*^9}}],

Cell["\<\
Dan Wlodarski suggested that this algorithm could be parallelized by first \
dividing the initial region into (me: overlapping) hyper-rectangular \
subregions, one for each processor and having the processor run the algorithm \
on the reduced region.\
\>", "Text",
 CellChangeTimes->{{3.51472995004595*^9, 3.5147300327758713`*^9}, {
  3.514743083521199*^9, 3.514743085656416*^9}}],

Cell["\<\
I think we might seed the regions by finding all the hyperplane intersections \
and choosing the regions based on that density.  Or maybe after shrinking the \
parent regions we could send the rejected region to a child processor for \
potential maximum identification.\
\>", "Text",
 CellChangeTimes->{{3.5147300860797377`*^9, 3.514730163211149*^9}, {
  3.514743093791779*^9, 3.514743164011366*^9}, {3.514743497124652*^9, 
  3.514743521573183*^9}}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["19 May 2011-1 June 2011 ", "Section",
 CellChangeTimes->{{3.516028983919635*^9, 3.516028994092867*^9}}],

Cell["Worked on writing hough transform prototype", "Subsection",
 CellChangeTimes->{{3.516029004269311*^9, 3.5160290139548607`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["2 June 2011", "Section",
 CellChangeTimes->{{3.516029016884025*^9, 3.516029019259252*^9}}],

Cell["Worked on hough_sample_params", "Subsection",
 CellChangeTimes->{{3.516029031627007*^9, 3.5160290367869263`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Idea auto-scale peak positions before extracting sample parameters?\
\>", "Subsection",
 CellChangeTimes->{{3.516029042464944*^9, 3.5160290845293427`*^9}}],

Cell["\<\
Would it be a good idea to scale the peak positions to unit standard \
deviation within each peak group before extracting the sample parameters?\
\>", "Text",
 CellChangeTimes->{{3.516029099201688*^9, 3.51602914929803*^9}}],

Cell["\<\
If the known peaks are a representative sample, then I'd think not - since by \
not scaling them, the PCA will emphasize the parameters that most affect \
peaks motion.  What we care about is not finding all the parameters but \
moving the peaks back to some mean value.  If a parameter does not affect \
motion very much, then we don't care about it.\
\>", "Text",
 CellChangeTimes->{{3.516029185181179*^9, 3.516029227866644*^9}, {
  3.516029279145493*^9, 3.51602929350522*^9}, {3.5160294226862392`*^9, 
  3.516029460788666*^9}}],

Cell["\<\
If the known peaks are not a representative sample (as might be likely since \
we'd choose the easy peaks) then scaling the motion might give less-visible \
parameters more visibility.  It might also emphasize noise :)  This sounds \
like something I need to experiment on.\
\>", "Text",
 CellChangeTimes->{{3.516029295160523*^9, 3.516029401109044*^9}, {
  3.5160295138230953`*^9, 3.5160295523435783`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
\"Hand calculate\" what the sample parameters should be for my test example\
\>", "Subsection",
 CellChangeTimes->{{3.516048319543613*^9, 3.516048332654097*^9}, {
  3.516048486690727*^9, 3.516048487832843*^9}}],

Cell["\<\
Here are the peak positions:  each row is a sample, each column is a \
peak-group\
\>", "Text",
 CellChangeTimes->{{3.5160485127677317`*^9, 3.516048532342188*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"samples", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "9.52753628070724", ",", "4.61857463763488", ",", "9.40080747857003"}],
        "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "10.2806995840334", ",", "4.13439995472008", ",", "9.30068635414814"}],
        "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "9.94867180566561", ",", "4.34784562261201", ",", "9.34482418503114"}],
        "}"}]}], "}"}]}], ")"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.516048366182414*^9, 3.5160484161585484`*^9}, {
  3.516048492990081*^9, 3.516048501223057*^9}, {3.516048535720147*^9, 
  3.516048544061617*^9}, {3.516048583886683*^9, 3.516048587656933*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"9.52753628070724`", "4.61857463763488`", "9.40080747857003`"},
     {"10.2806995840334`", "4.13439995472008`", "9.30068635414814`"},
     {"9.94867180566561`", "4.34784562261201`", "9.34482418503114`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5160485493025723`*^9, 3.51604858832467*^9, 
  3.51606107882873*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use estimator for sample mean", "Subsubsection",
 CellChangeTimes->{{3.516054430697801*^9, 3.516054441038625*^9}}],

Cell["\<\
When I use the estimated mean, the estimated sample parameters are relatively \
far off from the true values (the ratio between the largest and smallest \
parameters in the true values is: 3.33062, the estimated sample parameters \
have a ratio of -13.1784).\
\>", "Text",
 CellChangeTimes->{{3.5160548502658978`*^9, 3.516054897095147*^9}, {
  3.51605496044779*^9, 3.516054989737626*^9}, {3.516055021611966*^9, 
  3.5160550256605*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "samples", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.91896922346875`", ",", "4.366940071655656`", ",", "9.348772672583104`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.5160538007635193`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"centeredSamples", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "-", 
      RowBox[{"Mean", "[", "samples", "]"}]}], "&"}], ",", "samples"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5160491475945663`*^9, 3.516049217901689*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.39143294276150975`"}], ",", "0.2516345659792236`", ",", 
     "0.052034805986926`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.3617303605646498`", ",", 
     RowBox[{"-", "0.23254011693557608`"}], ",", 
     RowBox[{"-", "0.04808631843496336`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02970258219685995`", ",", 
     RowBox[{"-", "0.019094449043645767`"}], ",", 
     RowBox[{"-", "0.003948487551964419`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516049158654311*^9, 3.516049179174368*^9}, 
   3.516049218967173*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "centeredSamples", "]"}]], "Input",
 CellChangeTimes->{{3.5160492210035553`*^9, 3.51604922517966*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "5.921189464667501`*^-16", ",", 
   RowBox[{"-", "5.921189464667501`*^-16"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5160492259834127`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"u", ",", "\[CapitalSigma]", ",", "v"}], "}"}], "=", 
  RowBox[{"SingularValueDecomposition", "[", 
   RowBox[{"centeredSamples", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.516048560063908*^9, 3.516048633618897*^9}, {
   3.5160489731562767`*^9, 3.516048974241309*^9}, {3.516049028819962*^9, 
   3.516049032149395*^9}, {3.516049238166086*^9, 3.516049268700284*^9}, {
   3.5160532810892344`*^9, 3.5160532821143293`*^9}, 3.5160540819126387`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0.733284318545081`", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.6776414858504402`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"-", "0.05564283269463954`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "0.6385497711183099`", "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.8359690938047322`"}], "}"}], ",", 
     RowBox[{"{", "0.537406786990254`", "}"}], ",", 
     RowBox[{"{", "0.11112884189132018`", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516048574083125*^9, 3.516048599142563*^9}, 
   3.516048635235124*^9, 3.5160489752130003`*^9, 3.516049033166252*^9, {
   3.516049240819216*^9, 3.5160492691457853`*^9}, 3.516053282745596*^9, 
   3.516054083522838*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"MatrixForm", "[", "u", "]"}], ",", 
   RowBox[{"MatrixForm", "[", "\[CapitalSigma]", "]"}], ",", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"Transpose", "[", "v", "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.5160486386522303`*^9, 3.516048660203018*^9}, {
   3.5160486982554283`*^9, 3.516048716150373*^9}, 3.516054094959972*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.733284318545081`"},
       {
        RowBox[{"-", "0.6776414858504402`"}]},
       {
        RowBox[{"-", "0.05564283269463954`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.6385497711183099`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "0.8359690938047322`"}], "0.537406786990254`", 
        "0.11112884189132018`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.516048650669428*^9, {3.516048705529797*^9, 3.5160487168155317`*^9}, 
   3.5160489765163507`*^9, 3.516049034692965*^9, 3.516049242468774*^9, 
   3.516049273224852*^9, 3.51605328447974*^9, 3.5160540990376596`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.733284318545081`", "/", 
  RowBox[{"-", "0.05564283269463954`"}]}]], "Input",
 CellChangeTimes->{{3.51605355370582*^9, 3.51605355892596*^9}}],

Cell[BoxData[
 RowBox[{"-", "13.178414595986652`"}]], "Output",
 CellChangeTimes->{3.516053560164246*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.6385497711183099`", "/", 
  RowBox[{"(", 
   RowBox[{"0.6385497711183099`", "+", "1.4312652204810502`*^-14"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.516049298502689*^9, 3.5160493196008244`*^9}}],

Cell[BoxData["0.9999999999999776`"], "Output",
 CellChangeTimes->{3.516049320249292*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Real sample mean", "Subsubsection",
 CellChangeTimes->{{3.516054415635844*^9, 3.516054417936493*^9}}],

Cell["\<\
When I use the real sample mean, the calculated vectors are off by a \
scale-factor from the true values used in calculating the data set\
\>", "Text",
 CellChangeTimes->{{3.516054407116889*^9, 3.5160544135440083`*^9}, {
  3.516054447409374*^9, 3.516054456840427*^9}, {3.516054509400486*^9, 
  3.5160545334347963`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"realMeanCenteredSamples", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "-", 
      RowBox[{"{", 
       RowBox[{
       "10.603859674475", ",", "3.92665492302606", ",", "9.25772734183249"}], 
       "}"}]}], "&"}], ",", "samples"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.516053831480307*^9, 3.516053886341963*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.07632339376776`"}], ",", "0.6919197146088196`", ",", 
     "0.14308013673753983`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.32316009044160054`"}], ",", "0.20774503169401992`", ",", 
     "0.04295901231565047`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6551878688093904`"}], ",", "0.42119069958595023`", ",", 
     "0.08709684319864941`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5160538873626213`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"u", ",", "\[CapitalSigma]", ",", "v"}], "}"}], "=", 
  RowBox[{"SingularValueDecomposition", "[", 
   RowBox[{"realMeanCenteredSamples", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.516053910331025*^9, 3.5160539253141603`*^9}, 
   3.516054125342855*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "0.8274086577405969`", "}"}], ",", 
     RowBox[{"{", "0.24842483050712483`", "}"}], ",", 
     RowBox[{"{", "0.5036665729263858`", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "1.5560820649630611`", "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"-", "0.8359690938047379`"}], "}"}], ",", 
     RowBox[{"{", "0.5374067869902466`", "}"}], ",", 
     RowBox[{"{", "0.1111288418913133`", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516053913008252*^9, 3.5160539259196663`*^9}, 
   3.51605412617492*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"u", ".", "\[CapitalSigma]"}]], "Input",
 CellChangeTimes->{{3.5160541787057734`*^9, 3.5160541825073*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1.2875157727053028`", "}"}], ",", 
   RowBox[{"{", "0.38656942324362525`", "}"}], ",", 
   RowBox[{"{", "0.7837465208521587`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516054183084976*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[CapitalSigma]", ".", 
  RowBox[{"Transpose", "[", "v", "]"}]}]], "Input",
 CellChangeTimes->{{3.516054151635923*^9, 3.516054158496592*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "1.3008365137329756`"}], ",", "0.8362490628249468`", ",", 
    "0.17292559776718835`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.516054159139738*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"u", ".", "\[CapitalSigma]", ".", 
  RowBox[{"Transpose", "[", "v", "]"}]}]], "Input",
 CellChangeTimes->{{3.516054037725594*^9, 3.5160540750549*^9}, 
   3.5160541319764233`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.076323393767759`"}], ",", "0.6919197146088214`", ",", 
     "0.14308013673753966`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.3231600904415936`"}], ",", "0.2077450316940294`", ",", 
     "0.042959012315657005`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6551878688093953`"}], ",", "0.4211906995859429`", ",", 
     "0.08709684319864643`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516054041083685*^9, 3.5160540756496477`*^9}, 
   3.516054132395076*^9}]
}, Open  ]],

Cell["\<\
Here, I massage the sample (u) and peak (v) parameters back to the originals \
by multiplying by a scale factor\
\>", "Text",
 CellChangeTimes->{{3.516054539236721*^9, 3.516054573802717*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"u", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1.60562958936764"}], "/", "0.8274086577405969`"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.516048423542918*^9, 3.516048425268808*^9}, {
  3.5160484591636477`*^9, 3.516048497730774*^9}, {3.516054191197399*^9, 
  3.5160541974138193`*^9}, {3.516054238085499*^9, 3.516054256579969*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"-", "1.60562958936764`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.48208132083739175`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.9773912142451109`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516054257656941*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1.60562958936764"}], "/", 
  RowBox[{"-", "0.482081320837365"}]}]], "Input",
 CellChangeTimes->{{3.516054916994791*^9, 3.516054942732006*^9}}],

Cell[BoxData["3.33061979372836`"], "Output",
 CellChangeTimes->{3.5160549432655077`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v", 
  RowBox[{"(", 
   RowBox[{"0.670343521877728", "/", 
    RowBox[{"-", "0.8359690938047379`"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5160542862738047`*^9, 3.516054325107277*^9}, 
   3.516054361210186*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "0.6703435218777282`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.43093358467649395`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "0.08911154707474901`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516054326481903*^9, 3.5160543619019613`*^9}]
}, Open  ]],

Cell["\<\
The product of the scale factors should be the singular value\
\>", "Text",
 CellChangeTimes->{{3.516054689319891*^9, 3.516054700668458*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1.60562958936764"}], "/", "0.8274086577405969`"}], ")"}], 
  RowBox[{"(", 
   RowBox[{"0.670343521877728", "/", 
    RowBox[{"-", "0.8359690938047379`"}]}], ")"}]}]], "Input",
 CellChangeTimes->{3.5160547156333523`*^9}],

Cell[BoxData["1.5560820649631122`"], "Output",
 CellChangeTimes->{3.516054717014082*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
What happens if I know the number of parameters and estimate the means and \
parameters simultaneously\
\>", "Subsubsection",
 CellChangeTimes->{{3.516055258443626*^9, 3.516055276408196*^9}}],

Cell["\<\
I tried minimizing L1 and L2 error, both have lots of minima that are very \
far from the true values.  It looks like one needs to do some further \
regularization to break the ambiguity.  Maybe more peaks could help?\
\>", "Text",
 CellChangeTimes->{{3.516059230138981*^9, 3.516059310054634*^9}, {
  3.516059364837178*^9, 3.5160593736439657`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"um", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "u1", "}"}], ",", 
    RowBox[{"{", "u2", "}"}], ",", 
    RowBox[{"{", "u3", "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5160554435267277`*^9, 3.516055490363432*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "u1", "}"}], ",", 
   RowBox[{"{", "u2", "}"}], ",", 
   RowBox[{"{", "u3", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.51605546953692*^9, 3.516055502256917*^9, 
  3.516061484842111*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vm", "=", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2", ",", "v3"}], "}"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5160554717444267`*^9, 3.516055498534884*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"v1", ",", "v2", ",", "v3"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.516055499313855*^9, 3.5160614855537643`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mm", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.51605550456653*^9, 3.5160555213018417`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516055521910749*^9, 3.5160614863369207`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"um", ".", "vm"}], "+", "mm"}]], "Input",
 CellChangeTimes->{{3.5160555239485598`*^9, 3.5160555328366337`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u1", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u1", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u1", " ", "v3"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u2", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u2", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u2", " ", "v3"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u3", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u3", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u3", " ", "v3"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516055525870001*^9, 3.516055533515459*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["samples"], "Input",
 CellChangeTimes->{{3.516055581277811*^9, 3.5160555823064327`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9.52753628070724`", ",", "4.61857463763488`", ",", "9.40080747857003`"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10.2806995840334`", ",", "4.13439995472008`", ",", "9.30068635414814`"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.94867180566561`", ",", "4.34784562261201`", ",", "9.34482418503114`"}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516055582817149*^9}]
}, Open  ]],

Cell["Minimizing the sum-of-squared error:", "Text",
 CellChangeTimes->{{3.516056093528582*^9, 3.51605610265593*^9}}],

Cell["\<\
Doesn't produce good estimates of either the parameters or the means\
\>", "Text",
 CellChangeTimes->{{3.5160583669018593`*^9, 3.516058391770303*^9}, {
  3.516058444898946*^9, 3.516058445705924*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "2"}], "&"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.516055662081067*^9, 3.516055680352915*^9}, {
  3.5160557144127274`*^9, 3.516055770456299*^9}, {3.516055905712864*^9, 
  3.516055915311533*^9}, {3.516055951085696*^9, 3.516055983631639*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"]}]], "Output",
 CellChangeTimes->{{3.516055671825543*^9, 3.516055681324745*^9}, {
   3.516055718376042*^9, 3.516055770992712*^9}, 3.516055916055737*^9, {
   3.516055959902102*^9, 3.516055984470379*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
  3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
  3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
  3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
  3.516056035585326*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.0382193638647893`*^-28", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "1.8255493985750226`"}], ",", 
     RowBox[{"u2", "\[Rule]", "1.9268825292605896`"}], ",", 
     RowBox[{"u3", "\[Rule]", "1.8822103922778186`"}], ",", 
     RowBox[{"v1", "\[Rule]", "7.432547462322074`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "4.77804918923479`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.9880393879526043`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", 
      RowBox[{"-", "4.040946269015134`"}]}], ",", 
     RowBox[{"m2", "\[Rule]", "13.341139461404328`"}], ",", 
     RowBox[{"m3", "\[Rule]", "11.204522189015343`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.51605557342763*^9, 3.516055596997998*^9}, 
   3.516055701011448*^9, 3.5160557945142612`*^9, 3.516055862275813*^9, 
   3.516056036452951*^9}]
}, Open  ]],

Cell["Minimize L1 error", "Text",
 CellChangeTimes->{{3.516056999756809*^9, 3.516057014791753*^9}}],

Cell["\<\
With multi-start nelder-mead, found a minimum near the true values, but also \
some equally deep minima with nothing like the true values.\
\>", "Text",
 CellChangeTimes->{{3.516058620698511*^9, 3.516058632305512*^9}, {
  3.516058677832128*^9, 3.5160587297735558`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{"Abs", ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
    RowBox[{"u1", " ", "v1"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
    RowBox[{"u2", " ", "v1"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
    RowBox[{"u3", " ", "v1"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
    RowBox[{"u1", " ", "v2"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
    RowBox[{"u2", " ", "v2"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
    RowBox[{"u3", " ", "v2"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
    RowBox[{"u1", " ", "v3"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
    RowBox[{"u2", " ", "v3"}]}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
    RowBox[{"u3", " ", "v3"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.516056891492463*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{"Abs", ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
  3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
  3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
  3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
  3.516056035585326*^9}, {3.5160573796235237`*^9, 3.5160573830538073`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5251319917247761`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "4.781605130872899`"}], ",", 
     RowBox[{"u2", "\[Rule]", "5.823555992696849`"}], ",", 
     RowBox[{"u3", "\[Rule]", "5.364238887432632`"}], ",", 
     RowBox[{"v1", "\[Rule]", "0.7228735492846473`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.13904118984268724`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", "0.0822253065314287`"}], ",", 
     RowBox[{"m1", "\[Rule]", "6.071005368809781`"}], ",", 
     RowBox[{"m2", "\[Rule]", "5.093695745566378`"}], ",", 
     RowBox[{"m3", "\[Rule]", "8.903747937216709`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5160573847572107`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinimize", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{"Abs", ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<DifferentialEvolution\>\""}], ",", 
   RowBox[{"MaxIterations", "\[Rule]", "10000"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
   3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
   3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
   3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
   3.516056035585326*^9}, {3.5160573796235237`*^9, 3.5160573830538073`*^9}, 
   3.516057499937415*^9, {3.516057570100711*^9, 3.5160576308506413`*^9}, {
   3.51605784969936*^9, 3.516057858402152*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00024496230581233513`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "1.9849847264564304`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", 
      RowBox[{"-", "2.4552358083352095`"}]}], ",", 
     RowBox[{"u3", "\[Rule]", 
      RowBox[{"-", "2.247928306375252`"}]}], ",", 
     RowBox[{"v1", "\[Rule]", 
      RowBox[{"-", "1.6016194837381685`"}]}], ",", 
     RowBox[{"v2", "\[Rule]", "1.0301180796479972`"}], ",", 
     RowBox[{"v3", "\[Rule]", "0.21289838634997152`"}], ",", 
     RowBox[{"m1", "\[Rule]", "6.3483460761576715`"}], ",", 
     RowBox[{"m2", "\[Rule]", "6.663477215472061`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.823404473275938`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.516057501475168*^9, {3.516057588731333*^9, 3.516057617109178*^9}, 
   3.516057738809634*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"NMinimize", "[", 
    RowBox[{
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{"Abs", ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{
      "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
       ",", "m2", ",", "m3"}], "}"}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<NelderMead\>\"", ",", 
        RowBox[{"\"\<RandomSeed\>\"", "\[Rule]", "i"}]}], "}"}]}], ",", 
     RowBox[{"MaxIterations", "\[Rule]", "100"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "30"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
   3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
   3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
   3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
   3.516056035585326*^9}, {3.5160573796235237`*^9, 3.5160573830538073`*^9}, 
   3.516057499937415*^9, {3.516057570100711*^9, 3.5160576308506413`*^9}, {
   3.516057798330896*^9, 3.51605780015473*^9}, {3.5160578610131197`*^9, 
   3.516057879419063*^9}, {3.516057921359996*^9, 3.516057953470696*^9}, {
   3.5160580106131153`*^9, 3.516058012510015*^9}, {3.516058772523097*^9, 
   3.516058773950205*^9}, {3.516059122292075*^9, 3.516059123317255*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.2508467567413588`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "3.694544407055816`"}], ",", 
       RowBox[{"u2", "\[Rule]", "3.6570121045626234`"}], ",", 
       RowBox[{"u3", "\[Rule]", "3.6735579985628073`"}], ",", 
       RowBox[{"v1", "\[Rule]", "0.4795083317300291`"}], ",", 
       RowBox[{"v2", "\[Rule]", "0.11958840562297363`"}], ",", 
       RowBox[{"v3", "\[Rule]", "2.6675990921767143`"}], ",", 
       RowBox[{"m1", "\[Rule]", "8.187170056195963`"}], ",", 
       RowBox[{"m2", "\[Rule]", "3.9085306669208824`"}], ",", 
       RowBox[{"m3", "\[Rule]", 
        RowBox[{"-", "0.45475583132338593`"}]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.14063205617280672`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "3.515835305888647`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "4.0880550745294615`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "3.8357949710271027`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "1.3162143636334462`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "0.7084028806618256`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.28300316263908376`"}], ",", 
       RowBox[{"m1", "\[Rule]", "4.899943372878778`"}], ",", 
       RowBox[{"m2", "\[Rule]", "7.06513382810407`"}], ",", 
       RowBox[{"m3", "\[Rule]", "10.430366294112558`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1.3051463890744575`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.3867306861385014`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.359251664425084`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.3713636362833501`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "3.5891935673012707`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "1.1220975764618333`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "3.643009610393755`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "5.026582263888757`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.809041597430215`"}], ",", 
       RowBox[{"m3", "\[Rule]", "4.348933300540227`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.291163912039667`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.7742605868757433`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.7561705433422365`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.7641454145149338`"}], ",", 
       RowBox[{"v1", "\[Rule]", "4.122501880547437`"}], ",", 
       RowBox[{"v2", "\[Rule]", "1.148123549732479`"}], ",", 
       RowBox[{"v3", "\[Rule]", "5.53458058770478`"}], ",", 
       RowBox[{"m1", "\[Rule]", "2.675978928230646`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.3224076073045485`"}], ",", 
       RowBox[{"m3", "\[Rule]", 
        RowBox[{"-", "0.4189807829024415`"}]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.274130007628742`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "2.1666943722330774`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "2.1434570850355117`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "2.1537011188125903`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "2.3601361217273387`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.7768271592698116`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "4.308637120322059`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "4.865644028708864`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.674792122150552`"}], ",", 
       RowBox[{"m3", "\[Rule]", "0.06530767797396086`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1.0336575872669673`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.7206298657467394`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.5925167818242263`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.6489931747732134`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", "1.927629353329611`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "3.779195421047233`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "4.8984813054832275`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "13.127319411285262`"}], ",", 
       RowBox[{"m2", "\[Rule]", 
        RowBox[{"-", "1.8840218908785715`"}]}], ",", 
       RowBox[{"m3", "\[Rule]", "1.2672619460887047`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.00001704027911814121`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "2.0776519144875576`"}], ",", 
       RowBox[{"u2", "\[Rule]", "2.805387446999323`"}], ",", 
       RowBox[{"u3", "\[Rule]", "2.48457322385277`"}], ",", 
       RowBox[{"v1", "\[Rule]", "1.0349566481283894`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.6653102950455951`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "0.1375781948201641`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "7.377246229290863`"}], ",", 
       RowBox[{"m2", "\[Rule]", "6.000857715300293`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.686647045053137`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5016187089300521`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "2.062358150967551`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.9875417700928635`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "2.0205241419756623`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", "4.128598178148242`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "6.471508070564453`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "2.1046548802520153`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "18.290604071221136`"}], ",", 
       RowBox[{"m2", "\[Rule]", 
        RowBox[{"-", "8.727992654658845`"}]}], ",", 
       RowBox[{"m3", "\[Rule]", "5.092318661694141`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.23688753472937`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "3.792809112016619`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "4.171175107446797`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "4.0030732480655224`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "1.9750098607021407`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.6264336342902999`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "1.0827709888544708`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "2.042562720334798`"}], ",", 
       RowBox[{"m2", "\[Rule]", "1.8401859095323068`"}], ",", 
       RowBox[{"m3", "\[Rule]", "5.010412630384028`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7700085436825146`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.739870104051648`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.6802285813090634`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.7065212047657978`"}], ",", 
       RowBox[{"v1", "\[Rule]", "0.27705409453729973`"}], ",", 
       RowBox[{"v2", "\[Rule]", "8.118078640644304`"}], ",", 
       RowBox[{"v3", "\[Rule]", "1.684096601422646`"}], ",", 
       RowBox[{"m1", "\[Rule]", "9.475873073221582`"}], ",", 
       RowBox[{"m2", "\[Rule]", 
        RowBox[{"-", "9.505827802609478`"}]}], ",", 
       RowBox[{"m3", "\[Rule]", "6.470877512191943`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.3105693714343196`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.6885112574821097`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.6726193495693669`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.6796252031301266`"}], ",", 
       RowBox[{"v1", "\[Rule]", "3.812495806423158`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.7955790169481504`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", "6.3001228765188175`"}], ",", 
       RowBox[{"m1", "\[Rule]", "3.5451077526897365`"}], ",", 
       RowBox[{"m2", "\[Rule]", "5.684120143728952`"}], ",", 
       RowBox[{"m3", "\[Rule]", 
        RowBox[{"-", "1.237021057292283`"}]}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.20004109264943357`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "0.03368610854559026`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", "0.10126068253194835`"}], ",", 
       RowBox[{"u3", "\[Rule]", "0.048403554335516595`"}], ",", 
       RowBox[{"v1", "\[Rule]", "5.116391642276556`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "4.203186628021254`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "0.6032529489852538`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "9.701020247059288`"}], ",", 
       RowBox[{"m2", "\[Rule]", "4.521995618690288`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.380297061683814`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.2099207388535924`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "6.009554567590627`"}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.5171515640272681`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", "0.7198834352833696`"}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "0.0922170640249934`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "0.06421162817418002`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.0133019423053597`"}], ",", 
       RowBox[{"m1", "\[Rule]", "10.081719736517659`"}], ",", 
       RowBox[{"m2", "\[Rule]", "4.232694150602689`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.320868717743474`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5384924483952211`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.2966258560240755`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.2380291857448267`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.263861152808445`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", "8.835406863959948`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "8.26283667747211`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "6.880510801337149`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "21.115399233616348`"}], ",", 
       RowBox[{"m2", "\[Rule]", 
        RowBox[{"-", "6.095232944591295`"}]}], ",", 
       RowBox[{"m3", "\[Rule]", "0.6488140237039045`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.10567078334873276`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.28637808725425`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.057223032213217`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.1582447398970521`"}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "3.2866976143881725`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "1.8373913027493343`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.2512606042496276`"}], ",", 
       RowBox[{"m1", "\[Rule]", "13.755472025224034`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.219696801172681`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.053802876332085`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.9313508624409512`*^-6", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.3646129115986132`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", "4.727201648345653`"}], ",", 
       RowBox[{"u3", "\[Rule]", "2.041647534373483`"}], ",", 
       RowBox[{"v1", "\[Rule]", "0.1236353037458628`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.07947955201963217`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "0.01643533163953756`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "9.696250565949233`"}], ",", 
       RowBox[{"m2", "\[Rule]", "4.5101157713983016`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.378379416091235`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.3052349608090341`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.2032376344655027`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.1799861260473938`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.1902364242236216`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "2.9887690211116067`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.06866900938925703`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "4.306005516976231`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "6.391330055685901`"}], ",", 
       RowBox[{"m2", "\[Rule]", "4.266113435584974`"}], ",", 
       RowBox[{"m3", "\[Rule]", "4.219659606813614`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.1181439199454999`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "3.902209581834339`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "4.334123855800595`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "4.143704239151313`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "1.7436562715186334`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.07786788460047135`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "1.1580131959647793`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "2.7234759411594207`"}], ",", 
       RowBox[{"m2", "\[Rule]", "4.025184150481825`"}], ",", 
       RowBox[{"m3", "\[Rule]", "4.546359864488243`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4.157388046099886`*^-6", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "0.6655088638926813`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "0.8824719507340105`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "0.7868249766839187`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "3.4713883415416618`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "2.2316003216923357`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.4614490089904165`"}], ",", 
       RowBox[{"m1", "\[Rule]", "7.217296755465467`"}], ",", 
       RowBox[{"m2", "\[Rule]", "6.103724476954386`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.707903784320706`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.06327576219066633`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "2.9776933144514977`"}], ",", 
       RowBox[{"u2", "\[Rule]", "3.652348310147542`"}], ",", 
       RowBox[{"u3", "\[Rule]", "3.35493044461094`"}], ",", 
       RowBox[{"v1", "\[Rule]", "1.116368155318894`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.6706519650918465`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "0.19518242060590546`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "6.203334253697825`"}], ",", 
       RowBox[{"m2", "\[Rule]", "6.5978363049806985`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.999647626034314`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.16170785726116166`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "7.2056159976067615`"}], ",", 
       RowBox[{"u2", "\[Rule]", "7.978015833624321`"}], ",", 
       RowBox[{"u3", "\[Rule]", "7.615088901199035`"}], ",", 
       RowBox[{"v1", "\[Rule]", "0.8167817273886366`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "0.6656478511930318`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "0.14186441617683368`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "3.7288062782450524`"}], ",", 
       RowBox[{"m2", "\[Rule]", "9.41681316938328`"}], ",", 
       RowBox[{"m3", "\[Rule]", "10.425134312901214`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1.1856306416251188`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.5874126718875294`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.5618657957226203`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.5731283381504861`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", "0.8720673851400317`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "1.1521605089975027`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "3.919278262824276`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "11.320544835456028`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.5353490062505264`"}], ",", 
       RowBox[{"m3", "\[Rule]", "3.1792964912862223`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1.2443541686743456`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.6506106935558713`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.7921094400901763`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.7338652671944494`"}], ",", 
       RowBox[{"v1", "\[Rule]", "5.042564555426039`"}], ",", 
       RowBox[{"v2", "\[Rule]", "2.090953259061761`"}], ",", 
       RowBox[{"v3", "\[Rule]", "2.2935428473907136`"}], ",", 
       RowBox[{"m1", "\[Rule]", "1.2055442589934466`"}], ",", 
       RowBox[{"m2", "\[Rule]", "0.7224052866292379`"}], ",", 
       RowBox[{"m3", "\[Rule]", "5.368131710591472`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.45701702563268043`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.5402643378977403`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.5135589705172805`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.5259885369919175`"}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "17.984752084371706`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "20.87333576574242`"}], ",", 
       RowBox[{"v3", "\[Rule]", "5.159195555395632`"}], ",", 
       RowBox[{"m1", "\[Rule]", "37.41827062120879`"}], ",", 
       RowBox[{"m2", "\[Rule]", 
        RowBox[{"-", "27.458624697622316`"}]}], ",", 
       RowBox[{"m3", "\[Rule]", "1.4697943600917058`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.9852647114407125`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "3.516030152787354`"}], ",", 
       RowBox[{"u2", "\[Rule]", "3.848783389776763`"}], ",", 
       RowBox[{"u3", "\[Rule]", "3.702091010731024`"}], ",", 
       RowBox[{"v1", "\[Rule]", "2.26342884193344`"}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "1.1860422425049368`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", "2.391045117514043`"}], ",", 
       RowBox[{"m1", "\[Rule]", "1.5692522279152732`"}], ",", 
       RowBox[{"m2", "\[Rule]", "8.73868180989403`"}], ",", 
       RowBox[{"m3", "\[Rule]", "0.49295742748650484`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.08928092666007226`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "3.862902647270946`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "4.159947395304447`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "4.028996933907862`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "2.535522049542755`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "1.3324717294774715`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.3339953676433874`"}], ",", 
       RowBox[{"m1", "\[Rule]", 
        RowBox[{"-", "0.26693873776239296`"}]}], ",", 
       RowBox[{"m2", "\[Rule]", "9.716370152690324`"}], ",", 
       RowBox[{"m3", "\[Rule]", "10.690490321455872`"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1.630070120259286`*^-6", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "4.4848698058646`"}], ",", 
       RowBox[{"u2", "\[Rule]", "2.0969249818023337`"}], ",", 
       RowBox[{"u3", "\[Rule]", "3.1496365098380483`"}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "0.31540217996400083`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "0.2027577749089601`"}], ",", 
       RowBox[{"v3", "\[Rule]", "0.04192734361031297`"}], ",", 
       RowBox[{"m1", "\[Rule]", "10.942073993368176`"}], ",", 
       RowBox[{"m2", "\[Rule]", "3.709232355365282`"}], ",", 
       RowBox[{"m3", "\[Rule]", "9.212768318897409`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.2037537625661134`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", "1.5711233970911895`"}], ",", 
       RowBox[{"u2", "\[Rule]", "1.5473763309975865`"}], ",", 
       RowBox[{"u3", "\[Rule]", "1.5578450893047995`"}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "0.015552427315161344`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", "1.3986984731986978`"}], ",", 
       RowBox[{"v3", "\[Rule]", "4.2161477752164`"}], ",", 
       RowBox[{"m1", "\[Rule]", "9.972900063208332`"}], ",", 
       RowBox[{"m2", "\[Rule]", "2.1688900770307904`"}], ",", 
       RowBox[{"m3", "\[Rule]", "2.776719050368172`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.2413850092954752`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "2.5793251560099995`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "2.78616575670441`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "2.694981268541049`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "3.641273414113672`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "1.3782268177894774`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "1.7985622482091355`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "0.13550827487631606`"}], ",", 
       RowBox[{"m2", "\[Rule]", "0.6335501711947603`"}], ",", 
       RowBox[{"m3", "\[Rule]", "4.497732615802447`"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.098056193441065`", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"u1", "\[Rule]", 
        RowBox[{"-", "1.3343443018182426`"}]}], ",", 
       RowBox[{"u2", "\[Rule]", 
        RowBox[{"-", "1.1891692368095534`"}]}], ",", 
       RowBox[{"u3", "\[Rule]", 
        RowBox[{"-", "1.2501408351066985`"}]}], ",", 
       RowBox[{"v1", "\[Rule]", 
        RowBox[{"-", "1.473160319253808`"}]}], ",", 
       RowBox[{"v2", "\[Rule]", 
        RowBox[{"-", "3.21516989804852`"}]}], ",", 
       RowBox[{"v3", "\[Rule]", 
        RowBox[{"-", "1.4722615404601553`"}]}], ",", 
       RowBox[{"m1", "\[Rule]", "8.107013932104376`"}], ",", 
       RowBox[{"m2", "\[Rule]", "0.32843045423044537`"}], ",", 
       RowBox[{"m3", "\[Rule]", "7.504289907499584`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.516057501475168*^9, {3.516057588731333*^9, 3.516057617109178*^9}, 
   3.516057738809634*^9, 3.516057812171599*^9, 3.516057967219903*^9, 
   3.516058048154378*^9, 3.516058997003605*^9, 3.51605916182266*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{"Abs", ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"u1", "\[Rule]", "4.781605130872899`"}], ",", 
      RowBox[{"u2", "\[Rule]", "5.823555992696849`"}], ",", 
      RowBox[{"u3", "\[Rule]", "5.364238887432632`"}], ",", 
      RowBox[{"v1", "\[Rule]", "0.7228735492846473`"}], ",", 
      RowBox[{"v2", "\[Rule]", 
       RowBox[{"-", "0.13904118984268724`"}]}], ",", 
      RowBox[{"v3", "\[Rule]", "0.0822253065314287`"}], ",", 
      RowBox[{"m1", "\[Rule]", "6.071005368809781`"}], ",", 
      RowBox[{"m2", "\[Rule]", "5.093695745566378`"}], ",", 
      RowBox[{"m3", "\[Rule]", "8.903747937216709`"}]}], "}"}], "/.", 
    RowBox[{"Rule", "\[Rule]", "List"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5160574246217527`*^9, 3.516057456227635*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lstol\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The line search decreased \
the step size to within the tolerance specified by AccuracyGoal and \
PrecisionGoal but was unable to find a sufficient decrease in the function. \
You may need more than \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(MachinePrecision\\), \\\"MT\\\
\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" digits of working precision to \
meet these tolerances.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/lstol\\\", ButtonNote -> \
\\\"FindMinimum::lstol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.516057459071827*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5251319917247761`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "4.781605130872899`"}], ",", 
     RowBox[{"u2", "\[Rule]", "5.823555992696849`"}], ",", 
     RowBox[{"u3", "\[Rule]", "5.364238887432632`"}], ",", 
     RowBox[{"v1", "\[Rule]", "0.7228735492846473`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.13904118984268724`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", "0.0822253065314287`"}], ",", 
     RowBox[{"m1", "\[Rule]", "6.071005368809781`"}], ",", 
     RowBox[{"m2", "\[Rule]", "5.093695745566378`"}], ",", 
     RowBox[{"m3", "\[Rule]", "8.903747937216709`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516057459163509*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{"Abs", ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u1", ",", "1.8255493985750226`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"u2", ",", "1.9268825292605896`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"u3", ",", "1.8822103922778186`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"v1", ",", "7.432547462322074`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"v2", ",", 
       RowBox[{"-", "4.77804918923479`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"v3", ",", 
       RowBox[{"-", "0.9880393879526043`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m1", ",", 
       RowBox[{"-", "4.040946269015134`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m2", ",", "13.341139461404328`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m3", ",", "11.204522189015343`"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
   3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
   3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
   3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
   3.516056035585326*^9}, {3.5160561235210133`*^9, 3.516056134737843*^9}, 
   3.516057095657186*^9, {3.516057138823492*^9, 3.516057140634015*^9}, {
   3.516057187150292*^9, 3.5160572918073807`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindMinimum", "::", "\<\"lstol\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"\\!\\(\\*StyleBox[\\\"\\\\\\\"The line search decreased \
the step size to within the tolerance specified by AccuracyGoal and \
PrecisionGoal but was unable to find a sufficient decrease in the function. \
You may need more than \\\\\\\"\\\", \
\\\"MT\\\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\!\\(MachinePrecision\\), \\\"MT\\\
\"]\\)\[NoBreak]\\!\\(\\*StyleBox[\\\"\\\\\\\" digits of working precision to \
meet these tolerances.\\\\\\\"\\\", \\\"MT\\\"]\\) \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/FindMinimum/lstol\\\", ButtonNote -> \
\\\"FindMinimum::lstol\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.516057260216117*^9, 3.516057293259864*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.597122599785507`*^-14", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "1.8255493985750226`"}], ",", 
     RowBox[{"u2", "\[Rule]", "1.9268825292605896`"}], ",", 
     RowBox[{"u3", "\[Rule]", "1.8822103922778186`"}], ",", 
     RowBox[{"v1", "\[Rule]", "7.432547462322074`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "4.77804918923479`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.9880393879526043`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", 
      RowBox[{"-", "4.040946269015134`"}]}], ",", 
     RowBox[{"m2", "\[Rule]", "13.341139461404328`"}], ",", 
     RowBox[{"m3", "\[Rule]", "11.204522189015343`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.51605557342763*^9, 3.516055596997998*^9}, 
   3.516055701011448*^9, 3.5160557945142612`*^9, 3.516055862275813*^9, 
   3.516056036452951*^9, 3.516056136736376*^9, 3.516057065432213*^9, 
   3.516057111914816*^9, 3.5160572602252083`*^9, 3.516057293270265*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Try minimizing the ssq error with means parameter as estimate of peak-group \
mean\
\>", "Subsubsection",
 CellChangeTimes->{{3.516061149246255*^9, 3.51606119135902*^9}, 
   3.516061756929763*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"Plus", "@@", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "^", "2"}], "&"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
      RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.516061324208914*^9, 3.516061411821031*^9}, 
   3.5160614466088257`*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], ")"}], 
   "2"]}]], "Output",
 CellChangeTimes->{{3.5160613301657457`*^9, 3.5160613445503073`*^9}, 
   3.516061406117321*^9, 3.5160614472468233`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
       RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5160612208878098`*^9, 3.5160612635768223`*^9}, 
   3.516061322995812*^9, {3.5160614137860947`*^9, 3.516061434416237*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"]}]], "Output",
 CellChangeTimes->{{3.51606141568018*^9, 3.516061435205076*^9}, 
   3.516061497310253*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
         RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.516061603976131*^9, 3.516061643890709*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.0645323892531437`*^-28", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.9537939965501835`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "0.8814185230360423`"}], ",", 
     RowBox[{"u3", "\[Rule]", "0.07237547351413967`"}], ",", 
     RowBox[{"v1", "\[Rule]", "0.41039568730490744`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.2638248582915958`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.05455560233670514`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "9.91896922346875`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.366940071655656`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.348772672583104`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516061644963677*^9}]
}, Open  ]],

Cell["\<\
For comparison, the result without the information about the estimate of the \
mean was\
\>", "Text",
 CellChangeTimes->{{3.516061729927771*^9, 3.516061772044854*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.0382193638647893`*^-28", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "1.8255493985750226`"}], ",", 
     RowBox[{"u2", "\[Rule]", "1.9268825292605896`"}], ",", 
     RowBox[{"u3", "\[Rule]", "1.8822103922778186`"}], ",", 
     RowBox[{"v1", "\[Rule]", "7.432547462322074`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "4.77804918923479`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.9880393879526043`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", 
      RowBox[{"-", "4.040946269015134`"}]}], ",", 
     RowBox[{"m2", "\[Rule]", "13.341139461404328`"}], ",", 
     RowBox[{"m3", "\[Rule]", "11.204522189015343`"}]}], "}"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{3.516061727527068*^9}],

Cell["\<\
The mean information did drive the mean matrix estimate closer to the true \
values - but only by driving them straight to the MLE estimates.\
\>", "Text",
 CellChangeTimes->{{3.516062831640203*^9, 3.516062849104076*^9}, {
  3.5160628942744513`*^9, 3.516062942926071*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Try minimizing the ssq error with L1 difference from means parameter as \
estimate of peak-group mean\
\>", "Subsubsection",
 CellChangeTimes->{{3.516061149246255*^9, 3.51606119135902*^9}, 
   3.516061756929763*^9, {3.516063066148844*^9, 3.516063071296431*^9}}],

Cell["\<\
This still drives the estimate of the means straight to the MLE.\
\>", "Text",
 CellChangeTimes->{{3.516063266737403*^9, 3.516063289231906*^9}, {
  3.516063319813398*^9, 3.516063320637609*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"Plus", "@@", 
   RowBox[{"Map", "[", 
    RowBox[{"Abs", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
      RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.516061324208914*^9, 3.516061411821031*^9}, 
   3.5160614466088257`*^9, {3.516063081614132*^9, 3.5160630868156147`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.5160613301657457`*^9, 3.5160613445503073`*^9}, 
   3.516061406117321*^9, 3.5160614472468233`*^9, {3.5160630834528723`*^9, 
   3.5160630874592752`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{"Abs", ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
       RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5160612208878098`*^9, 3.5160612635768223`*^9}, 
   3.516061322995812*^9, {3.5160614137860947`*^9, 3.516061434416237*^9}, {
   3.516063096456991*^9, 3.516063105449185*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], "]"}], "+", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.51606141568018*^9, 3.516061435205076*^9}, 
   3.516061497310253*^9, {3.5160630989334583`*^9, 3.5160631059889603`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Abs", "[", "#", "]"}], "^", 
          RowBox[{"(", "1", ")"}]}], "&"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
         RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.516061603976131*^9, 3.516061643890709*^9}, {
  3.516063117029701*^9, 3.5160631804827137`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0007569832644572388`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "0.07402388580226717`"}], ",", 
     RowBox[{"u2", "\[Rule]", 
      RowBox[{"-", "0.06841649290063664`"}]}], ",", 
     RowBox[{"u3", "\[Rule]", 
      RowBox[{"-", "0.0056224583519989876`"}]}], ",", 
     RowBox[{"v1", "\[Rule]", 
      RowBox[{"-", "5.159480632206402`"}]}], ",", 
     RowBox[{"v2", "\[Rule]", "3.6001260636721635`"}], ",", 
     RowBox[{"v3", "\[Rule]", "0.599421613067869`"}], ",", 
     RowBox[{"m1", "\[Rule]", "9.918940896084356`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.366926005353395`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.348746145563737`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5160631744625397`*^9, 3.516063181937821*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Try a robustified error on the mean estimator", "Subsubsection",
 CellChangeTimes->{{3.516063658425617*^9, 3.516063676550592*^9}}],

Cell["No better.", "Text",
 CellChangeTimes->{{3.516063947965308*^9, 3.516063954874937*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"1", ",", 
           RowBox[{"#", "^", "2"}]}], "]"}], "&"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
         RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.516061603976131*^9, 3.516061643890709*^9}, {
  3.516063117029701*^9, 3.5160631804827137`*^9}, {3.516063331525387*^9, 
  3.516063396590057*^9}, {3.5160634396819353`*^9, 3.51606345916621*^9}, {
  3.516063543027731*^9, 3.5160636508274107`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.053134621701967`*^-14", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.05775080377616024`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "0.0533685552011092`"}], ",", 
     RowBox[{"u3", "\[Rule]", "0.004382215202219453`"}], ",", 
     RowBox[{"v1", "\[Rule]", "6.777966561776268`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "4.357248785169547`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.9010232213870157`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "9.91896920635496`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.366940002852418`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.348772597134705`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5160631744625397`*^9, 3.516063181937821*^9}, {
   3.5160633350634737`*^9, 3.5160633645355873`*^9}, 3.51606339834105*^9, 
   3.5160634610807858`*^9, {3.516063544831068*^9, 3.516063651749022*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Try minimizing the ssq error with a prior on the sample parameters\
\>", "Subsubsection",
 CellChangeTimes->{{3.516061820770599*^9, 3.5160618587133083`*^9}}],

Cell["\<\
I believe a zero-mean Gaussian prior would minimize the squares of the \
(non-mean) parameters.  That is easy to put into the minimization.\
\>", "Text",
 CellChangeTimes->{{3.516061853770214*^9, 3.516061880222782*^9}, 
   3.516061995157524*^9, {3.516062083175527*^9, 3.5160621249494753`*^9}, {
   3.516062284954399*^9, 3.516062289751033*^9}}],

Cell["\<\
It worked out poorly.  I don't really expect the parameters to be 0 and more \
importantly a bit off from 0 for the parameter is not nearly as important as \
the same amount off from one of the peak locations.\
\>", "Text",
 CellChangeTimes->{{3.5160622969111156`*^9, 3.516062304235756*^9}, {
  3.5160623718617477`*^9, 3.5160623802188807`*^9}, {3.5160627164879093`*^9, 
  3.5160627504359293`*^9}, {3.5160627898667603`*^9, 3.516062816713125*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
       RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3"}], 
       "}"}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5160612208878098`*^9, 3.5160612635768223`*^9}, 
   3.516061322995812*^9, {3.5160614137860947`*^9, 3.516061434416237*^9}, {
   3.516062139918281*^9, 3.516062157146138*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], ")"}], "2"], "+", 
  SuperscriptBox["u1", "2"], "+", 
  SuperscriptBox["u2", "2"], "+", 
  SuperscriptBox["u3", "2"], "+", 
  SuperscriptBox["v1", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox["v2", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox["v3", "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"]}]], "Output",
 CellChangeTimes->{{3.51606141568018*^9, 3.516061435205076*^9}, 
   3.516061497310253*^9, 3.516062162281521*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
         RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
         "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3"}], 
         "}"}]}], "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.516062196684169*^9, 3.51606220707374*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.4077458101952459`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "3.745489943662054`*^-18"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "2.982316980498686`*^-18"}], ",", 
     RowBox[{"u3", "\[Rule]", "1.6401337185701433`*^-20"}], ",", 
     RowBox[{"v1", "\[Rule]", "6.393807264339831`*^-18"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "3.765144297853591`*^-18"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "8.913047780867836`*^-19"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "9.91896922346875`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.366940071655657`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.348772672583104`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516062209425047*^9, 3.516062315315332*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Try minimizing the ssq error with a robust prior on the sample parameters\
\>", "Subsubsection",
 CellChangeTimes->{{3.516061820770599*^9, 3.5160618587133083`*^9}, {
  3.516063695530446*^9, 3.51606369647099*^9}}],

Cell["\<\
I'll try a truncated quadratic.  After a bit of playing around, it doesn't \
help -- too many free parameters to be set heuristically.\
\>", "Text",
 CellChangeTimes->{{3.516063705615759*^9, 3.5160637117581997`*^9}, {
  3.516063909234632*^9, 3.516063936707477*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"1", ",", 
         RowBox[{"#", "^", "2"}]}], "]"}], "&"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
       RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}], "+", 
  RowBox[{"(", 
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"1", ",", 
         RowBox[{"#", "^", "2"}]}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3"}], 
       "}"}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.5160612208878098`*^9, 3.5160612635768223`*^9}, 
   3.516061322995812*^9, {3.5160614137860947`*^9, 3.516061434416237*^9}, {
   3.516062139918281*^9, 3.516062157146138*^9}, {3.51606371981775*^9, 
   3.516063767186952*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "9.91896922346875`"}], "+", "m1"}], ")"}], "2"]}], "]"}], 
  "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "4.366940071655656`"}], "+", "m2"}], ")"}], "2"]}], "]"}],
   "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "9.348772672583104`"}], "+", "m3"}], ")"}], "2"]}], "]"}],
   "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["u1", "2"]}], "]"}], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["u2", "2"]}], "]"}], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["u3", "2"]}], "]"}], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["v1", "2"]}], "]"}], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["v2", "2"]}], "]"}], "+", 
  RowBox[{"Min", "[", 
   RowBox[{"1", ",", 
    SuperscriptBox["v3", "2"]}], "]"}]}]], "Output",
 CellChangeTimes->{{3.51606141568018*^9, 3.516061435205076*^9}, 
   3.516061497310253*^9, 3.516062162281521*^9, {3.51606375120457*^9, 
   3.5160637679796467`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "^", "2"}], "&"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
       "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"0.1", ",", 
           RowBox[{"#", "^", "2"}]}], "]"}], "&"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], "-", 
         RowBox[{"Mean", "[", "samples", "]"}]}]}], "]"}]}], ")"}], "+", 
    RowBox[{"(", 
     RowBox[{"Plus", "@@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Min", "[", 
          RowBox[{"0.2", ",", 
           RowBox[{"#", "^", "2"}]}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{
         "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3"}], 
         "}"}]}], "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.516062196684169*^9, 3.51606220707374*^9}, {
  3.516063788409708*^9, 3.516063820272243*^9}, {3.5160638555444403`*^9, 
  3.516063898685358*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5348679084499216`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.0002284469489816484`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "212.34259383751598`"}], ",", 
     RowBox[{"u3", "\[Rule]", "112.23077192587603`"}], ",", 
     RowBox[{"v1", "\[Rule]", "0.003550873809163479`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.0016434757297393954`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.00033986086391752984`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "9.534796401869956`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.5002970719553534`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.376350120007986`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.516062209425047*^9, 3.516062315315332*^9, {3.5160637906453533`*^9, 
   3.516063821567767*^9}, {3.5160638576552277`*^9, 3.516063900307083*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
One last before bed: try minimizing using the range of the mean in \
constraints and otherwise, just straight L2 minimization\
\>", "Subsubsection",
 CellChangeTimes->{{3.516064043595141*^9, 3.5160640853783712`*^9}}],

Cell["\<\
Using the range for the mean in the constraints results in better numbers\
\>", "Text",
 CellChangeTimes->{{3.516065678576021*^9, 3.516065692060865*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"Thread", "[", 
   RowBox[{"Less", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{"Max", ",", 
       RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.516064196978608*^9, 3.516064263154291*^9}, {
  3.516064303283737*^9, 3.5160643052494707`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"m1", "<", "10.2806995840334`"}], "&&", 
  RowBox[{"m2", "<", "4.61857463763488`"}], "&&", 
  RowBox[{"m3", "<", "9.40080747857003`"}]}]], "Output",
 CellChangeTimes->{{3.516064198496345*^9, 3.516064264554039*^9}, 
   3.516064306161322*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"And", "@@", 
  RowBox[{"Thread", "[", 
   RowBox[{"Greater", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{"Min", ",", 
       RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.516064292021469*^9, 3.516064316323264*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"m1", ">", "9.52753628070724`"}], "&&", 
  RowBox[{"m2", ">", "4.13439995472008`"}], "&&", 
  RowBox[{"m3", ">", "9.30068635414814`"}]}]], "Output",
 CellChangeTimes->{{3.5160642973574457`*^9, 3.516064316963367*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Plus", "@@", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "^", "2"}], "&"}], ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
      "]"}]}], ")"}], ",", 
   RowBox[{
    RowBox[{"And", "@@", 
     RowBox[{"Thread", "[", 
      RowBox[{"Less", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"Max", ",", 
          RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
      "]"}]}], "&&", 
    RowBox[{"And", "@@", 
     RowBox[{"Thread", "[", 
      RowBox[{"Greater", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"Min", ",", 
          RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
      "]"}]}]}]}], "}"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Plus", "@@", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "^", "2"}], "&"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
        "]"}]}], ")"}], ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{"Less", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{"Max", ",", 
            RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
        "]"}]}], "&&", 
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{"Greater", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{"Min", ",", 
            RowBox[{"Transpose", "[", "samples", "]"}]}], "]"}]}], "]"}], 
        "]"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.516064128238282*^9, {3.516064160255396*^9, 3.516064160753838*^9}, {
   3.516064342659541*^9, 3.5160644035186653`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.0716202356844`*^-28", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.6057605455902463`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "0.46621535001342335`"}], ",", 
     RowBox[{"u3", "\[Rule]", 
      RowBox[{"-", "0.006359154757667`"}]}], ",", 
     RowBox[{"v1", "\[Rule]", "0.7025935064538237`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.45166564369634626`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.09339867139970243`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "9.953139706504876`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.344973410885015`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.344230248425545`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516064546717656*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
One more last before bed: try minimizing using a 3 standard deviation of the \
mean in constraints and otherwise, just straight L2 minimization\
\>", "Subsubsection",
 CellChangeTimes->{{3.516064043595141*^9, 3.5160640853783712`*^9}, {
  3.516064831180295*^9, 3.5160648393934793`*^9}, {3.516065009903878*^9, 
  3.5160650421957903`*^9}}],

Cell["\<\
Nice, now lets use a wide confidence interval for the mean.  With this, the \
mean estimates are even better.  The ratios don't come out perfect but \
they're improved.  The lower param values are 0.68 and 0.32 where they should \
be 0.97 and 0.48\
\>", "Text",
 CellChangeTimes->{{3.5160646750575447`*^9, 3.516064686541585*^9}, {
  3.516064754462261*^9, 3.516064755700224*^9}, {3.516065131091549*^9, 
  3.5160651799229*^9}, {3.516065278218402*^9, 3.516065282447875*^9}, {
  3.516065392357078*^9, 3.516065394394503*^9}, {3.5160655232531347`*^9, 
  3.5160655860811996`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "samples", "]"}]], "Input",
 CellChangeTimes->{{3.516064708605937*^9, 3.51606471060163*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.91896922346875`", ",", "4.366940071655656`", ",", "9.348772672583104`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.51606471104963*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StandardDeviation", "[", "samples", "]"}]], "Input",
 CellChangeTimes->{{3.5160647253433943`*^9, 3.5160647293777313`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.37745916721039385`", ",", "0.24265145658355736`", ",", 
   "0.05017721399536718`"}], "}"}]], "Output",
 CellChangeTimes->{3.5160647298288507`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", "samples", "]"}], "+", 
  RowBox[{"3", "*", 
   RowBox[{"StandardDeviation", "[", "samples", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.516064957740068*^9, 3.5160649964013033`*^9}, {
  3.516065026577427*^9, 3.516065046650373*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11.05134672509993`", ",", "5.094894441406328`", ",", 
   "9.499304314569205`"}], "}"}]], "Output",
 CellChangeTimes->{{3.516064987079013*^9, 3.516064997075262*^9}, {
  3.51606502710728*^9, 3.5160650470513897`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", "samples", "]"}], "-", 
  RowBox[{"3", "*", 
   RowBox[{"StandardDeviation", "[", "samples", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.516064957740068*^9, 3.5160649964013033`*^9}, {
  3.516065026577427*^9, 3.516065046650373*^9}, {3.51606516366033*^9, 
  3.516065163927311*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8.786591721837569`", ",", "3.638985701904984`", ",", 
   "9.198241030597003`"}], "}"}]], "Output",
 CellChangeTimes->{{3.516064987079013*^9, 3.516064997075262*^9}, {
   3.51606502710728*^9, 3.5160650470513897`*^9}, 3.5160651646648684`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Plus", "@@", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "^", "2"}], "&"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
        "]"}]}], ")"}], ",", 
     RowBox[{
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{"Less", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Mean", "[", "samples", "]"}], "+", 
           RowBox[{"3", " ", 
            RowBox[{"StandardDeviation", "[", "samples", "]"}]}]}]}], "]"}], 
        "]"}]}], "&&", 
      RowBox[{"And", "@@", 
       RowBox[{"Thread", "[", 
        RowBox[{"Greater", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m1", ",", "m2", ",", "m3"}], "}"}], ",", 
          RowBox[{
           RowBox[{"Mean", "[", "samples", "]"}], "-", 
           RowBox[{"3", " ", 
            RowBox[{"StandardDeviation", "[", "samples", "]"}]}]}]}], "]"}], 
        "]"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "m1", 
     ",", "m2", ",", "m3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.516064128238282*^9, {3.516064160255396*^9, 3.516064160753838*^9}, {
   3.516064342659541*^9, 3.5160644035186653`*^9}, {3.5160650647412977`*^9, 
   3.516065116161933*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.0519411633287176`*^-28", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.7246688091154485`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "0.3098820673579107`"}], ",", 
     RowBox[{"u3", "\[Rule]", 
      RowBox[{"-", "0.14619382960484328`"}]}], ",", 
     RowBox[{"v1", "\[Rule]", "0.7280099224250718`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.468004709990951`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.09677738108268576`"}]}], ",", 
     RowBox[{"m1", "\[Rule]", "10.05510236421525`"}], ",", 
     RowBox[{"m2", "\[Rule]", "4.279426221785321`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.33067592907153`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516065119730715*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"u", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"u1", ",", "u2", ",", "u3"}], "}"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", 
      RowBox[{"-", "0.7246688091154485`"}]}], ",", 
     RowBox[{"u2", "\[Rule]", "0.3098820673579107`"}], ",", 
     RowBox[{"u3", "\[Rule]", 
      RowBox[{"-", "0.14619382960484328`"}]}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.5160653230413837`*^9, 3.516065335050192*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.7246688091154485`"}], ",", "0.3098820673579107`", ",", 
   RowBox[{"-", "0.14619382960484328`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516065335917829*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"u", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1.605"}], "/", 
    RowBox[{"u", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.516065340339279*^9, 3.5160653683610897`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.605`"}], ",", "0.6863283086746059`", ",", 
   RowBox[{"-", "0.32379080424640205`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.516065369797274*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
\"Hand calculate\" my test example with more peaks -- can we get accurate \
sample parameters?\
\>", "Subsection",
 CellChangeTimes->{{3.516048319543613*^9, 3.516048332654097*^9}, {
  3.516048486690727*^9, 3.516048487832843*^9}, {3.516059446989162*^9, 
  3.516059459320045*^9}}],

Cell["\<\
Here are the peak positions:  each row is a sample, each column is a \
peak-group.  This time I am using all the peaks in the sample (since I know \
beforehand which are in which groups due to the ordering in the example file.)\
\>", "Text",
 CellChangeTimes->{{3.5160485127677317`*^9, 3.516048532342188*^9}, {
  3.51606001693158*^9, 3.516060048858728*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"samples", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "9.52753628070724", ",", "4.61857463763488", ",", "9.40080747857003", 
        ",", "4.15541097289017", ",", "1.69454810656872"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "10.2806995840334", ",", "4.13439995472008", ",", "9.30068635414814", 
        ",", "4.7369316735453904", ",", "1.9163383851987199"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "9.94867180566561", ",", "4.34784562261201", ",", "9.34482418503114", 
        ",", "5.4745176271919602", ",", "2.1976514906281999"}], "}"}]}], 
     "}"}]}], ")"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.516048366182414*^9, 3.5160484161585484`*^9}, {
  3.516048492990081*^9, 3.516048501223057*^9}, {3.516048535720147*^9, 
  3.516048544061617*^9}, {3.516048583886683*^9, 3.516048587656933*^9}, {
  3.516059493137206*^9, 3.516059555371139*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"9.52753628070724`", "4.61857463763488`", "9.40080747857003`", 
      "4.15541097289017`", "1.69454810656872`"},
     {"10.2806995840334`", "4.13439995472008`", "9.30068635414814`", 
      "4.73693167354539`", "1.91633838519872`"},
     {"9.94867180566561`", "4.34784562261201`", "9.34482418503114`", 
      "5.47451762719196`", "2.1976514906282`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5160485493025723`*^9, 3.51604858832467*^9, 
  3.5160595578349543`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use estimator for sample mean", "Subsubsection",
 CellChangeTimes->{{3.516054430697801*^9, 3.516054441038625*^9}}],

Cell["\<\
When I use the estimated mean, the estimated sample parameters are still \
relatively far off from the true values. Note that this would mistakenly \
require 2 parameters due to the noise in the mean estimate.  The ratio of the \
largest first factor is closer to reality - but that is probably coincidence\
\>", "Text",
 CellChangeTimes->{{3.5160548502658978`*^9, 3.516054897095147*^9}, {
  3.51605496044779*^9, 3.516054989737626*^9}, {3.516055021611966*^9, 
  3.5160550256605*^9}, {3.516060004278426*^9, 3.516060010710369*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "samples", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.91896922346875`", ",", "4.366940071655656`", ",", "9.348772672583104`", 
   ",", "4.788953424542506`", ",", "1.9361793274652133`"}], "}"}]], "Output",
 CellChangeTimes->{3.5160538007635193`*^9, 3.516059563087983*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"centeredSamples", "=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "-", 
      RowBox[{"Mean", "[", "samples", "]"}]}], "&"}], ",", "samples"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5160491475945663`*^9, 3.516049217901689*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.39143294276150975`"}], ",", "0.2516345659792236`", ",", 
     "0.052034805986926`", ",", 
     RowBox[{"-", "0.6335424516523362`"}], ",", 
     RowBox[{"-", "0.24163122089649325`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.3617303605646498`", ",", 
     RowBox[{"-", "0.23254011693557608`"}], ",", 
     RowBox[{"-", "0.04808631843496336`"}], ",", 
     RowBox[{"-", "0.05202175099711592`"}], ",", 
     RowBox[{"-", "0.019840942266493355`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02970258219685995`", ",", 
     RowBox[{"-", "0.019094449043645767`"}], ",", 
     RowBox[{"-", "0.003948487551964419`"}], ",", "0.685564202649454`", ",", 
     "0.2614721631629866`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516049158654311*^9, 3.516049179174368*^9}, 
   3.516049218967173*^9, 3.516059567235283*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "centeredSamples", "]"}]], "Input",
 CellChangeTimes->{{3.5160492210035553`*^9, 3.51604922517966*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "5.921189464667501`*^-16", ",", 
   RowBox[{"-", "5.921189464667501`*^-16"}], ",", "5.921189464667501`*^-16", 
   ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{3.5160492259834127`*^9, 3.516059570217502*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"u", ",", "\[CapitalSigma]", ",", "v"}], "}"}], "=", 
  RowBox[{"SingularValueDecomposition", "[", 
   RowBox[{"centeredSamples", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.516048560063908*^9, 3.516048633618897*^9}, {
   3.5160489731562767`*^9, 3.516048974241309*^9}, {3.516049028819962*^9, 
   3.516049032149395*^9}, {3.516049238166086*^9, 3.516049268700284*^9}, {
   3.5160532810892344`*^9, 3.5160532821143293`*^9}, 3.5160540819126387`*^9, {
   3.516059875641554*^9, 3.516059875733392*^9}, {3.516059937895287*^9, 
   3.516059937998584*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.7572330580440316`", ",", "0.305392800294884`", ",", 
       "0.577350269189626`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.11413860583377966`"}], ",", 
       RowBox[{"-", "0.8084794649989491`"}], ",", "0.5773502691896267`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.6430944522102531`"}], ",", "0.5030866647040672`", ",", 
       "0.5773502691896248`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.0679468516935264`", ",", "0.`", ",", "0.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.5181340663776651`", ",", "0.`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.`", ",", "0.`", ",", "0.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.3340942749823121`"}], ",", 
       RowBox[{"-", "0.7663062972602649`"}], ",", "0.263769206675245`"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.21477412526450648`", ",", "0.49262372031811974`", ",", 
       "0.5625444591497579`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.04441253885633869`", ",", "0.10186827716439166`", ",", 
       RowBox[{"-", "0.7361932713467582`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.8564884402635695`"}], ",", "0.37341189222068255`", ",",
        "0.09561361617191157`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.32666216283512434`"}], ",", "0.14241819341266015`", 
       ",", 
       RowBox[{"-", "0.2506931205998831`"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.516048574083125*^9, 3.516048599142563*^9}, 
   3.516048635235124*^9, 3.5160489752130003`*^9, 3.516049033166252*^9, {
   3.516049240819216*^9, 3.5160492691457853`*^9}, 3.516053282745596*^9, 
   3.516054083522838*^9, 3.516059576594596*^9, 3.5160598762092*^9, 
   3.516059938403936*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"MatrixForm", "[", "u", "]"}], ",", 
   RowBox[{"MatrixForm", "[", "\[CapitalSigma]", "]"}], ",", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"Transpose", "[", "v", "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.5160486386522303`*^9, 3.516048660203018*^9}, {
   3.5160486982554283`*^9, 3.516048716150373*^9}, 3.516054094959972*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0.7572330580440316`", "0.305392800294884`", "0.577350269189626`"},
       {
        RowBox[{"-", "0.11413860583377966`"}], 
        RowBox[{"-", "0.8084794649989491`"}], "0.5773502691896267`"},
       {
        RowBox[{"-", "0.6430944522102531`"}], "0.5030866647040672`", 
        "0.5773502691896248`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"1.0679468516935264`", "0.`", "0.`"},
       {"0.`", "0.5181340663776651`", "0.`"},
       {"0.`", "0.`", "0.`"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"-", "0.3340942749823121`"}], "0.21477412526450648`", 
        "0.04441253885633869`", 
        RowBox[{"-", "0.8564884402635695`"}], 
        RowBox[{"-", "0.32666216283512434`"}]},
       {
        RowBox[{"-", "0.7663062972602649`"}], "0.49262372031811974`", 
        "0.10186827716439166`", "0.37341189222068255`", 
        "0.14241819341266015`"},
       {"0.263769206675245`", "0.5625444591497579`", 
        RowBox[{"-", "0.7361932713467582`"}], "0.09561361617191157`", 
        RowBox[{"-", "0.2506931205998831`"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.516048650669428*^9, {3.516048705529797*^9, 3.5160487168155317`*^9}, 
   3.5160489765163507`*^9, 3.516049034692965*^9, 3.516049242468774*^9, 
   3.516049273224852*^9, 3.51605328447974*^9, 3.5160540990376596`*^9, 
   3.516059580935721*^9, 3.516059879819209*^9, 3.5160599394978724`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1.0679468516935264`", "/", 
  RowBox[{"(", 
   RowBox[{"1.0679468516935264`", "+", "0.5181340663776651`"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.516059893856571*^9, 3.51605990897745*^9}}],

Cell[BoxData["0.6733243175211011`"], "Output",
 CellChangeTimes->{3.516059909731913*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.7572330580440316`", "/", 
  RowBox[{"-", "0.11413860583377966`"}]}]], "Input",
 CellChangeTimes->{{3.516059850023962*^9, 3.5160598559004707`*^9}}],

Cell[BoxData[
 RowBox[{"-", "6.63432895918487`"}]], "Output",
 CellChangeTimes->{3.51605985903541*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
What happens if I know the number of parameters and estimate the means and \
parameters simultaneously\
\>", "Subsubsection",
 CellChangeTimes->{{3.516055258443626*^9, 3.516055276408196*^9}}],

Cell["\<\
I tried minimizing L1 and L2 error, both have lots of minima that are very \
far from the true values.  It looks like one needs to do some further \
regularization to break the ambiguity.  Maybe more peaks could help?\
\>", "Text",
 CellChangeTimes->{{3.516059230138981*^9, 3.516059310054634*^9}, {
  3.516059364837178*^9, 3.5160593736439657`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"um", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "u1", "}"}], ",", 
    RowBox[{"{", "u2", "}"}], ",", 
    RowBox[{"{", "u3", "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5160554435267277`*^9, 3.516055490363432*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "u1", "}"}], ",", 
   RowBox[{"{", "u2", "}"}], ",", 
   RowBox[{"{", "u3", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.51605546953692*^9, 3.516055502256917*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"vm", "=", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4", ",", "v5"}], "}"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.5160554717444267`*^9, 3.516055498534884*^9}, {
  3.516059659927393*^9, 3.516059663481447*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"v1", ",", "v2", ",", "v3", ",", "v4", ",", "v5"}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516055499313855*^9, 3.516059676046496*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mm", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.51605550456653*^9, 3.5160555213018417`*^9}, {
  3.516059668155615*^9, 3.516059684436356*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516055521910749*^9, 3.5160596851846952`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"um", ".", "vm"}], "+", "mm"}]], "Input",
 CellChangeTimes->{{3.5160555239485598`*^9, 3.5160555328366337`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u1", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u1", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u1", " ", "v3"}]}], ",", 
     RowBox[{"m4", "+", 
      RowBox[{"u1", " ", "v4"}]}], ",", 
     RowBox[{"m5", "+", 
      RowBox[{"u1", " ", "v5"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u2", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u2", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u2", " ", "v3"}]}], ",", 
     RowBox[{"m4", "+", 
      RowBox[{"u2", " ", "v4"}]}], ",", 
     RowBox[{"m5", "+", 
      RowBox[{"u2", " ", "v5"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m1", "+", 
      RowBox[{"u3", " ", "v1"}]}], ",", 
     RowBox[{"m2", "+", 
      RowBox[{"u3", " ", "v2"}]}], ",", 
     RowBox[{"m3", "+", 
      RowBox[{"u3", " ", "v3"}]}], ",", 
     RowBox[{"m4", "+", 
      RowBox[{"u3", " ", "v4"}]}], ",", 
     RowBox[{"m5", "+", 
      RowBox[{"u3", " ", "v5"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.516055525870001*^9, 3.516055533515459*^9}, 
   3.516059686458993*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["samples"], "Input",
 CellChangeTimes->{{3.516055581277811*^9, 3.5160555823064327`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9.52753628070724`", ",", "4.61857463763488`", ",", "9.40080747857003`", 
     ",", "4.15541097289017`", ",", "1.69454810656872`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "10.2806995840334`", ",", "4.13439995472008`", ",", "9.30068635414814`", 
     ",", "4.73693167354539`", ",", "1.91633838519872`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.94867180566561`", ",", "4.34784562261201`", ",", "9.34482418503114`", 
     ",", "5.47451762719196`", ",", "2.1976514906282`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.516055582817149*^9, 3.516059688280349*^9}]
}, Open  ]],

Cell["Minimizing the sum-of-squared error:", "Text",
 CellChangeTimes->{{3.516056093528582*^9, 3.51605610265593*^9}}],

Cell["\<\
Doesn't produce good estimates of either the parameters or the means\
\>", "Text",
 CellChangeTimes->{{3.5160583669018593`*^9, 3.516058391770303*^9}, {
  3.516058444898946*^9, 3.516058445705924*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "@@", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "^", "2"}], "&"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.516055662081067*^9, 3.516055680352915*^9}, {
  3.5160557144127274`*^9, 3.516055770456299*^9}, {3.516055905712864*^9, 
  3.516055915311533*^9}, {3.516055951085696*^9, 3.516055983631639*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.52753628070724`"}], "+", "m1", "+", 
     RowBox[{"u1", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "10.2806995840334`"}], "+", "m1", "+", 
     RowBox[{"u2", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.94867180566561`"}], "+", "m1", "+", 
     RowBox[{"u3", " ", "v1"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.61857463763488`"}], "+", "m2", "+", 
     RowBox[{"u1", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.13439995472008`"}], "+", "m2", "+", 
     RowBox[{"u2", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.34784562261201`"}], "+", "m2", "+", 
     RowBox[{"u3", " ", "v2"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.40080747857003`"}], "+", "m3", "+", 
     RowBox[{"u1", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.30068635414814`"}], "+", "m3", "+", 
     RowBox[{"u2", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "9.34482418503114`"}], "+", "m3", "+", 
     RowBox[{"u3", " ", "v3"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.15541097289017`"}], "+", "m4", "+", 
     RowBox[{"u1", " ", "v4"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "4.73693167354539`"}], "+", "m4", "+", 
     RowBox[{"u2", " ", "v4"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "5.47451762719196`"}], "+", "m4", "+", 
     RowBox[{"u3", " ", "v4"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1.69454810656872`"}], "+", "m5", "+", 
     RowBox[{"u1", " ", "v5"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1.91633838519872`"}], "+", "m5", "+", 
     RowBox[{"u2", " ", "v5"}]}], ")"}], "2"], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "2.1976514906282`"}], "+", "m5", "+", 
     RowBox[{"u3", " ", "v5"}]}], ")"}], "2"]}]], "Output",
 CellChangeTimes->{{3.516055671825543*^9, 3.516055681324745*^9}, {
   3.516055718376042*^9, 3.516055770992712*^9}, 3.516055916055737*^9, {
   3.516055959902102*^9, 3.516055984470379*^9}, 3.5160596931163692`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Minimize", "[", 
  RowBox[{
   RowBox[{"Plus", "@@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "^", "2"}], "&"}], ",", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"um", ".", "vm"}], "+", "mm", "-", "samples"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
    "u1", ",", "u2", ",", "u3", ",", "v1", ",", "v2", ",", "v3", ",", "v4", 
     ",", "v5", ",", "m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.51605554570043*^9, 3.516055594878422*^9}, {
  3.516055650632958*^9, 3.516055654327899*^9}, {3.51605568777732*^9, 
  3.5160557003926888`*^9}, {3.516055782992626*^9, 3.5160557919473333`*^9}, {
  3.516055858829101*^9, 3.5160558616143847`*^9}, {3.5160559686267223`*^9, 
  3.516056035585326*^9}, {3.5160597217379503`*^9, 3.516059726620043*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2684629107410543`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"u1", "\[Rule]", "2.229659404841449`"}], ",", 
     RowBox[{"u2", "\[Rule]", "2.4834237119342415`"}], ",", 
     RowBox[{"u3", "\[Rule]", "2.6374683267013888`"}], ",", 
     RowBox[{"v1", "\[Rule]", "1.225156519621604`"}], ",", 
     RowBox[{"v2", "\[Rule]", 
      RowBox[{"-", "0.7875978115092495`"}]}], ",", 
     RowBox[{"v3", "\[Rule]", 
      RowBox[{"-", "0.16286514198925392`"}]}], ",", 
     RowBox[{"v4", "\[Rule]", "3.1408271948826694`"}], ",", 
     RowBox[{"v5", "\[Rule]", "1.1979022206721441`"}], ",", 
     RowBox[{"m1", "\[Rule]", "6.9171105486013635`"}], ",", 
     RowBox[{"m2", "\[Rule]", "6.296699481919271`"}], ",", 
     RowBox[{"m3", "\[Rule]", "9.747822207466164`"}], ",", 
     RowBox[{"m4", "\[Rule]", 
      RowBox[{"-", "2.9066505331712573`"}]}], ",", 
     RowBox[{"m5", "\[Rule]", 
      RowBox[{"-", "0.9989013052351265`"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.51605557342763*^9, 3.516055596997998*^9}, 
   3.516055701011448*^9, 3.5160557945142612`*^9, 3.516055862275813*^9, 
   3.516056036452951*^9, 3.516059694903789*^9, 3.51605972752446*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
The result of hand calculation - I need more samples for a good example\
\>", "Subsection",
 CellChangeTimes->{{3.51606014824647*^9, 3.516060174160841*^9}}],

Cell["\<\
Three samples is not enough for a good mean calculation that will give a \
decent estimate of the sample parameters.\
\>", "Text",
 CellChangeTimes->{{3.516060175749522*^9, 3.516060212825289*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{1270, 721},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{611.28, 789.57},
"PostScriptOutputFile"->"EricLabBook.nb.ps"},
ShowSelection->True,
FrontEndVersion->"7.0 for Linux x86 (64-bit) (February 25, 2009)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3512459889-7380264"->{
  Cell[571295, 14176, 757, 11, 144, "Print",
   CellTags->"Info3512459889-7380264"]},
 "Info3512474752-6925473"->{
  Cell[588490, 14662, 658, 10, 144, "Print",
   CellTags->"Info3512474752-6925473"]},
 "Info3512479406-3746257"->{
  Cell[617988, 15447, 836, 12, 164, "Print",
   CellTags->"Info3512479406-3746257"]},
 "Info3512481356-2868314"->{
  Cell[639225, 15910, 758, 11, 144, "Print",
   CellTags->"Info3512481356-2868314"]},
 "Info3512481362-2165483"->{
  Cell[640148, 15930, 658, 10, 144, "Print",
   CellTags->"Info3512481362-2165483"]},
 "Info3512496286-5561169"->{
  Cell[656122, 16383, 1982, 28, 422, "Print",
   CellTags->"Info3512496286-5561169"]},
 "Info3512999103-4095725"->{
  Cell[759199, 18824, 2163, 31, 195, "Print",
   CellTags->"Info3512999103-4095725"]},
 "Info3512999381-5384665"->{
  Cell[762007, 18878, 131, 2, 43, "Print",
   CellTags->"Info3512999381-5384665"],
  Cell[762141, 18882, 1162, 31, 24, "Print",
   CellTags->"Info3512999381-5384665"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3512459889-7380264", 1616421, 38083},
 {"Info3512474752-6925473", 1616536, 38086},
 {"Info3512479406-3746257", 1616651, 38089},
 {"Info3512481356-2868314", 1616766, 38092},
 {"Info3512481362-2165483", 1616881, 38095},
 {"Info3512496286-5561169", 1616996, 38098},
 {"Info3512999103-4095725", 1617112, 38101},
 {"Info3512999381-5384665", 1617228, 38104}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 156, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[748, 28, 160, 3, 39, "Subsection"],
Cell[911, 33, 727, 11, 111, "Text"],
Cell[1641, 46, 284, 5, 51, "Text"],
Cell[1928, 53, 23819, 399, 261, 7937, 137, "CachedBoxData", "BoxData", \
"Input"],
Cell[25750, 454, 301, 6, 51, "Text"],
Cell[26054, 462, 23371, 391, 261, 7888, 136, "CachedBoxData", "BoxData", \
"Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[49462, 858, 177, 4, 31, "Subsection"],
Cell[49642, 864, 126, 1, 31, "Text"],
Cell[49771, 867, 858, 19, 32, "Input"],
Cell[50632, 888, 174, 2, 31, "Text"],
Cell[50809, 892, 416, 12, 32, "Input"],
Cell[51228, 906, 118, 1, 31, "Text"],
Cell[51349, 909, 300, 8, 32, "Input"],
Cell[51652, 919, 118, 1, 31, "Text"],
Cell[51773, 922, 746, 21, 77, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[52556, 948, 101, 1, 31, "Subsection"],
Cell[52660, 951, 123, 1, 31, "Text"],
Cell[52786, 954, 813, 23, 99, "Input"],
Cell[CellGroupData[{
Cell[53624, 981, 479, 12, 77, "Input"],
Cell[54106, 995, 17946, 301, 253, 7313, 125, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[72101, 1302, 189, 2, 31, "Subsection"],
Cell[72293, 1306, 180, 4, 31, "Text"],
Cell[72476, 1312, 761, 12, 51, "Text"],
Cell[73240, 1326, 885, 24, 77, "Input"],
Cell[CellGroupData[{
Cell[74150, 1354, 487, 12, 55, "Input"],
Cell[74640, 1368, 19936, 333, 253, 7136, 122, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[94625, 1707, 188, 2, 31, "Subsection"],
Cell[94816, 1711, 167, 3, 31, "Text"],
Cell[94986, 1716, 1210, 31, 143, "Input"],
Cell[CellGroupData[{
Cell[96221, 1751, 536, 13, 55, "Input"],
Cell[96760, 1766, 20027, 335, 253, 7149, 122, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[116836, 2107, 158, 2, 31, "Subsection"],
Cell[116997, 2111, 290, 5, 51, "Text"],
Cell[117290, 2118, 818, 21, 55, "Input"],
Cell[118111, 2141, 902, 24, 99, "Input"],
Cell[CellGroupData[{
Cell[119038, 2169, 507, 12, 77, "Input"],
Cell[119548, 2183, 18508, 311, 252, 7222, 124, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[138071, 2497, 120, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[138216, 2502, 479, 12, 77, "Input"],
Cell[138698, 2516, 17895, 300, 253, 7313, 125, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[156642, 2822, 173, 3, 31, "Subsection"],
Cell[156818, 2827, 793, 22, 55, "Input",
 InitializationCell->True],
Cell[157614, 2851, 894, 26, 55, "Input"],
Cell[158511, 2879, 1089, 29, 55, "Input"],
Cell[159603, 2910, 512, 15, 32, "Input"],
Cell[CellGroupData[{
Cell[160140, 2929, 889, 22, 55, "Input"],
Cell[161032, 2953, 23730, 397, 261, 7889, 136, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[184823, 3357, 157, 2, 43, "Section"],
Cell[CellGroupData[{
Cell[185005, 3363, 127, 1, 39, "Subsection"],
Cell[185135, 3366, 241, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[185401, 3374, 99, 1, 29, "Subsubsection"],
Cell[185503, 3377, 120, 1, 31, "Text"],
Cell[185626, 3380, 269, 6, 31, "Text"],
Cell[185898, 3388, 259, 6, 31, "Text"],
Cell[186160, 3396, 222, 6, 31, "Text"],
Cell[186385, 3404, 353, 8, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186775, 3417, 97, 1, 29, "Subsubsection"],
Cell[186875, 3420, 459, 9, 51, "Text"],
Cell[187337, 3431, 559, 11, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187933, 3447, 102, 1, 29, "Subsubsection"],
Cell[188038, 3450, 782, 13, 51, "Text"],
Cell[188823, 3465, 225, 5, 31, "Text"],
Cell[189051, 3472, 325, 7, 31, "Text"],
Cell[189379, 3481, 410, 8, 31, "Text"],
Cell[189792, 3491, 345, 7, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[190186, 3504, 92, 1, 39, "Subsection"],
Cell[190281, 3507, 4248, 102, 253, "Input",
 InitializationCell->True],
Cell[194532, 3611, 813, 24, 32, "Input",
 InitializationCell->True],
Cell[195348, 3637, 590, 15, 32, "Input",
 InitializationCell->True],
Cell[195941, 3654, 2241, 56, 143, "Input",
 InitializationCell->True],
Cell[198185, 3712, 5203, 135, 341, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[203413, 3851, 108, 1, 29, "Subsubsection"],
Cell[203524, 3854, 352, 7, 32, "Input"],
Cell[CellGroupData[{
Cell[203901, 3865, 473, 13, 32, "Input"],
Cell[204377, 3880, 954, 20, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205368, 3905, 379, 11, 32, "Input"],
Cell[205750, 3918, 553, 19, 31, "Output"]
}, Open  ]],
Cell[206318, 3940, 263, 7, 32, "Input"],
Cell[206584, 3949, 305, 6, 32, "Input"],
Cell[CellGroupData[{
Cell[206914, 3959, 141, 2, 32, "Input"],
Cell[207058, 3963, 75, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207170, 3969, 285, 6, 32, "Input"],
Cell[207458, 3977, 247, 4, 31, "Output"]
}, Open  ]],
Cell[207720, 3984, 533, 9, 55, "Input"],
Cell[CellGroupData[{
Cell[208278, 3997, 247, 5, 32, "Input"],
Cell[208528, 4004, 146, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208711, 4012, 182, 3, 32, "Input"],
Cell[208896, 4017, 99, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209032, 4023, 182, 3, 32, "Input"],
Cell[209217, 4028, 100, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209354, 4034, 174, 3, 32, "Input"],
Cell[209531, 4039, 100, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209668, 4045, 314, 9, 32, "Input"],
Cell[209985, 4056, 475, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210497, 4077, 375, 10, 32, "Input"],
Cell[210875, 4089, 873, 29, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[211797, 4124, 130, 1, 23, "Subsubsection"],
Cell[211930, 4127, 520, 15, 55, "Input",
 InitializationCell->True],
Cell[212453, 4144, 820, 14, 209, "Input",
 InitializationCell->True],
Cell[213276, 4160, 1148, 33, 121, "Input",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[214473, 4199, 208, 4, 39, "Subsection"],
Cell[214684, 4205, 173, 4, 32, "Input"],
Cell[CellGroupData[{
Cell[214882, 4213, 632, 19, 55, "Input"],
Cell[215517, 4234, 246, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215800, 4244, 369, 10, 32, "Input"],
Cell[216172, 4256, 222, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216431, 4266, 351, 10, 32, "Input"],
Cell[216785, 4278, 242, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217064, 4288, 183, 3, 32, "Input"],
Cell[217250, 4293, 143, 2, 31, "Output"]
}, Open  ]],
Cell[217408, 4298, 137, 1, 31, "Text"],
Cell[217548, 4301, 147, 3, 32, "Input"],
Cell[217698, 4306, 591, 19, 32, "Input"],
Cell[CellGroupData[{
Cell[218314, 4329, 177, 3, 32, "Input"],
Cell[218494, 4334, 121, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218652, 4341, 565, 13, 77, "Input"],
Cell[219220, 4356, 399, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219656, 4370, 654, 17, 99, "Input"],
Cell[220313, 4389, 961, 20, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221311, 4414, 146, 2, 32, "Input"],
Cell[221460, 4418, 303, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221800, 4430, 214, 4, 32, "Input"],
Cell[222017, 4436, 276, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222330, 4448, 626, 14, 99, "Input"],
Cell[222959, 4464, 371, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223367, 4477, 152, 2, 32, "Input"],
Cell[223522, 4481, 251, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223810, 4492, 330, 6, 32, "Input"],
Cell[224143, 4500, 368, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224548, 4512, 496, 10, 32, "Input"],
Cell[225047, 4524, 1060, 22, 122, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226144, 4551, 168, 3, 32, "Input"],
Cell[226315, 4556, 116, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226468, 4563, 364, 10, 77, "Input"],
Cell[226835, 4575, 215, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227087, 4585, 140, 2, 32, "Input"],
Cell[227230, 4589, 166, 4, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[227457, 4600, 105, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[227587, 4605, 340, 6, 39, "Subsection"],
Cell[CellGroupData[{
Cell[227952, 4615, 111, 1, 29, "Subsubsection"],
Cell[228066, 4618, 2485, 37, 473, "Input",
 InitializationCell->True],
Cell[230554, 4657, 4254, 105, 275, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[234845, 4767, 111, 1, 23, "Subsubsection"],
Cell[234959, 4770, 638, 12, 121, "Input",
 InitializationCell->True],
Cell[235600, 4784, 1500, 43, 99, "Input",
 InitializationCell->True],
Cell[237103, 4829, 946, 16, 187, "Input",
 InitializationCell->True],
Cell[238052, 4847, 1729, 46, 165, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[239818, 4898, 126, 1, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[239969, 4903, 1368, 35, 99, "Input"],
Cell[241340, 4940, 17060, 286, 254, 7495, 128, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258437, 5231, 1462, 36, 99, "Input"],
Cell[259902, 5269, 18586, 312, 248, 7833, 134, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[278549, 5588, 186, 4, 31, "Subsection"],
Cell[278738, 5594, 274, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[279037, 5603, 106, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[279168, 5608, 310, 6, 55, "Input",
 InitializationCell->True],
Cell[279481, 5616, 738, 11, 70, "Output"]
}, Open  ]],
Cell[280234, 5630, 2106, 61, 143, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[282377, 5696, 119, 1, 23, "Subsubsection"],
Cell[282499, 5699, 163, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[282687, 5705, 2996, 87, 143, "Input"],
Cell[285686, 5794, 197, 3, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[285944, 5804, 214, 4, 31, "Subsection"],
Cell[CellGroupData[{
Cell[286183, 5812, 166, 3, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[286374, 5819, 1605, 39, 121, "Input"],
Cell[287982, 5860, 403, 7, 47, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[288434, 5873, 255, 5, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[288714, 5882, 3054, 73, 165, "Input"],
Cell[291771, 5957, 2549, 63, 116, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294357, 6025, 162, 3, 32, "Input"],
Cell[294522, 6030, 1083, 28, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295642, 6063, 170, 3, 32, "Input"],
Cell[295815, 6068, 565, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296417, 6087, 162, 3, 32, "Input"],
Cell[296582, 6092, 565, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297184, 6111, 301, 6, 32, "Input"],
Cell[297488, 6119, 222, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297747, 6129, 296, 6, 32, "Input"],
Cell[298046, 6137, 195, 4, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[298314, 6149, 106, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[298445, 6154, 264, 5, 39, "Subsection"],
Cell[298712, 6161, 333, 6, 31, "Text"],
Cell[299048, 6169, 1049, 25, 59, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[300146, 6200, 118, 1, 43, "Section"],
Cell[300267, 6203, 262, 5, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[300566, 6213, 107, 1, 43, "Section"],
Cell[300676, 6216, 120, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[300821, 6221, 291, 3, 31, "Subsection"],
Cell[CellGroupData[{
Cell[301137, 6228, 161, 3, 29, "Subsubsection"],
Cell[301301, 6233, 221, 4, 31, "Text"],
Cell[301525, 6239, 2955, 71, 187, "Input"],
Cell[CellGroupData[{
Cell[304505, 6314, 141, 2, 32, "Input"],
Cell[304649, 6318, 118, 3, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[304816, 6327, 134, 1, 23, "Subsubsection"],
Cell[304953, 6330, 543, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[305521, 6342, 626, 16, 32, "Input"],
Cell[306150, 6360, 302, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[306489, 6373, 315, 9, 32, "Input"],
Cell[306807, 6384, 382, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307226, 6399, 152, 3, 32, "Input"],
Cell[307381, 6404, 381, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307799, 6419, 310, 7, 32, "Input"],
Cell[308112, 6428, 18267, 531, 207, "Output"]
}, Open  ]],
Cell[326394, 6962, 224, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[326643, 6971, 324, 7, 32, "Input"],
Cell[326970, 6980, 339, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[327346, 6994, 118, 2, 32, "Input"],
Cell[327467, 6998, 567, 15, 31, "Output"]
}, Open  ]],
Cell[328049, 7016, 195, 4, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[328281, 7025, 190, 4, 23, "Subsubsection"],
Cell[328474, 7031, 1248, 32, 77, "Input"],
Cell[CellGroupData[{
Cell[329747, 7067, 335, 10, 32, "Input"],
Cell[330085, 7079, 914, 18, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331036, 7102, 179, 3, 32, "Input"],
Cell[331218, 7107, 640, 15, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331895, 7127, 296, 7, 32, "Input"],
Cell[332194, 7136, 6517, 181, 232, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[338784, 7325, 107, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[338916, 7330, 216, 2, 39, "Subsection"],
Cell[339135, 7334, 298, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[339458, 7344, 626, 16, 32, "Input"],
Cell[340087, 7362, 326, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[340450, 7375, 358, 8, 32, "Input"],
Cell[340811, 7385, 430, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341278, 7399, 152, 3, 32, "Input"],
Cell[341433, 7404, 429, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341899, 7418, 310, 7, 32, "Input"],
Cell[342212, 7427, 1572, 52, 50, "Output"]
}, Open  ]],
Cell[343799, 7482, 224, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[344048, 7491, 324, 7, 32, "Input"],
Cell[344375, 7500, 3807, 106, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348219, 7611, 118, 2, 32, "Input"],
Cell[348340, 7615, 3649, 104, 101, "Output"]
}, Open  ]],
Cell[352004, 7722, 195, 4, 32, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[352236, 7731, 290, 6, 31, "Subsection"],
Cell[352529, 7739, 1319, 33, 77, "Input"],
Cell[CellGroupData[{
Cell[353873, 7776, 335, 10, 32, "Input"],
Cell[354211, 7788, 1055, 20, 245, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355303, 7813, 179, 3, 32, "Input"],
Cell[355485, 7818, 788, 19, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356310, 7842, 391, 8, 32, "Input"],
Cell[356704, 7852, 508, 8, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[357261, 7866, 151, 2, 31, "Subsection"],
Cell[357415, 7870, 540, 11, 51, "Text"],
Cell[357958, 7883, 279, 5, 31, "Text"],
Cell[358240, 7890, 727, 14, 165, "Input",
 InitializationCell->True],
Cell[358970, 7906, 4908, 114, 253, "Input",
 InitializationCell->True],
Cell[363881, 8022, 1072, 18, 187, "Input",
 InitializationCell->True],
Cell[364956, 8042, 3595, 81, 209, "Input",
 InitializationCell->True],
Cell[368554, 8125, 1043, 17, 187, "Input",
 InitializationCell->True],
Cell[369600, 8144, 3089, 73, 209, "Input",
 InitializationCell->True],
Cell[372692, 8219, 1198, 19, 209, "Input",
 InitializationCell->True],
Cell[373893, 8240, 4854, 108, 297, "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[378796, 8354, 104, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[378925, 8359, 270, 5, 39, "Subsection"],
Cell[CellGroupData[{
Cell[379220, 8368, 106, 1, 29, "Subsubsection"],
Cell[379329, 8371, 531, 8, 51, "Text"],
Cell[379863, 8381, 97, 1, 31, "Text"],
Cell[379963, 8384, 385, 7, 51, "Text"],
Cell[380351, 8393, 119, 2, 31, "Text"],
Cell[380473, 8397, 770, 12, 71, "Text"],
Cell[381246, 8411, 127, 1, 31, "Text"],
Cell[381376, 8414, 206, 5, 31, "Text"],
Cell[381585, 8421, 141, 3, 31, "Text"],
Cell[381729, 8426, 662, 13, 71, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382428, 8444, 111, 1, 29, "Subsubsection"],
Cell[382542, 8447, 381, 7, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382960, 8459, 125, 1, 29, "Subsubsection"],
Cell[383088, 8462, 446, 7, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[383571, 8474, 109, 1, 29, "Subsubsection"],
Cell[383683, 8477, 500, 11, 51, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[384232, 8494, 110, 1, 31, "Subsection"],
Cell[384345, 8497, 191, 4, 31, "Text"],
Cell[384539, 8503, 215, 4, 31, "Text"],
Cell[384757, 8509, 273, 5, 31, "Text"],
Cell[385033, 8516, 807, 12, 91, "Text"],
Cell[385843, 8530, 381, 7, 51, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[386273, 8543, 108, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[386406, 8548, 219, 3, 39, "Subsection"],
Cell[CellGroupData[{
Cell[386650, 8555, 116, 1, 29, "Subsubsection"],
Cell[386769, 8558, 304, 8, 34, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387110, 8571, 102, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[387237, 8576, 105, 1, 30, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[387367, 8581, 131, 1, 29, "Subsubsubsubsection"],
Cell[387501, 8584, 163, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[387689, 8591, 1668, 44, 121, "Input"],
Cell[389360, 8637, 1170, 36, 52, "Output"]
}, Open  ]],
Cell[390545, 8676, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[390679, 8681, 1140, 33, 121, "Input"],
Cell[391822, 8716, 695, 25, 47, "Output"]
}, Open  ]],
Cell[392532, 8744, 95, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[392652, 8749, 119, 2, 32, "Input"],
Cell[392774, 8753, 786, 26, 47, "Output"]
}, Open  ]],
Cell[393575, 8782, 165, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[393765, 8789, 1545, 40, 121, "Input"],
Cell[395313, 8831, 1075, 39, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396425, 8875, 584, 17, 32, "Input"],
Cell[397012, 8894, 440, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397489, 8910, 671, 19, 32, "Input"],
Cell[398163, 8931, 456, 14, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398656, 8950, 1618, 42, 121, "Input"],
Cell[400277, 8994, 1036, 36, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[401350, 9035, 1561, 40, 121, "Input"],
Cell[402914, 9077, 310, 9, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[403273, 9092, 129, 1, 23, "Subsubsubsubsection"],
Cell[403405, 9095, 242, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[403672, 9103, 230, 5, 32, "Input"],
Cell[403905, 9110, 247, 7, 47, "Output"]
}, Open  ]],
Cell[404167, 9120, 113, 2, 32, "Input"],
Cell[404283, 9124, 111, 1, 31, "Text"],
Cell[404397, 9127, 2014, 48, 77, "Input"],
Cell[CellGroupData[{
Cell[406436, 9179, 952, 22, 32, "Input"],
Cell[407391, 9203, 3538, 127, 83, "Output"]
}, Open  ]],
Cell[410944, 9333, 302, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[411271, 9342, 1692, 46, 54, "Input"],
Cell[412966, 9390, 1341, 40, 31, "Output"]
}, Open  ]],
Cell[414322, 9433, 112, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[414459, 9438, 2517, 63, 84, "Input"],
Cell[416979, 9503, 6267, 184, 168, "Output"]
}, Open  ]],
Cell[423261, 9690, 266, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[423552, 9699, 3314, 83, 105, "Input"],
Cell[426869, 9784, 296, 5, 31, "Output"]
}, Open  ]],
Cell[427180, 9792, 201, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[427406, 9800, 2691, 81, 190, "Input"],
Cell[430100, 9883, 952, 34, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[431089, 9922, 2444, 72, 171, "Input"],
Cell[433536, 9996, 1497, 50, 47, "Output"]
}, Open  ]],
Cell[435048, 10049, 181, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[435254, 10057, 3413, 92, 201, "Input"],
Cell[438670, 10151, 2560, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441267, 10241, 287, 7, 32, "Input"],
Cell[441557, 10250, 765, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442359, 10276, 159, 3, 32, "Input"],
Cell[442521, 10281, 612, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[443170, 10302, 315, 8, 32, "Input"],
Cell[443488, 10312, 1227, 34, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[444764, 10352, 218, 5, 23, "Subsubsubsubsection"],
Cell[444985, 10359, 1555, 41, 121, "Input"],
Cell[CellGroupData[{
Cell[446565, 10404, 2522, 60, 105, "Input"],
Cell[449090, 10466, 77, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449204, 10472, 2336, 53, 77, "Input"],
Cell[451543, 10527, 385, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451965, 10542, 640, 18, 55, "Input"],
Cell[452608, 10562, 371, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[453016, 10578, 2739, 71, 165, "Input"],
Cell[455758, 10651, 1486, 47, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[457281, 10703, 277, 7, 32, "Input"],
Cell[457561, 10712, 2536, 88, 138, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[460134, 10805, 156, 3, 32, "Input"],
Cell[460293, 10810, 1743, 66, 95, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462073, 10881, 260, 5, 32, "Input"],
Cell[462336, 10888, 1737, 58, 76, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[464146, 10954, 131, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[464302, 10959, 3122, 87, 226, "Input"],
Cell[467427, 11048, 4736, 169, 179, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472200, 11222, 129, 2, 32, "Input"],
Cell[472332, 11226, 529, 14, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472898, 11245, 180, 3, 32, "Input"],
Cell[473081, 11250, 995, 24, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[474113, 11279, 659, 13, 32, "Input"],
Cell[474775, 11294, 1145, 33, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[475957, 11332, 163, 4, 32, "Input"],
Cell[476123, 11338, 740, 19, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[476900, 11362, 239, 5, 32, "Input"],
Cell[477142, 11369, 1014, 23, 52, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[478217, 11399, 185, 4, 39, "Subsection"],
Cell[478405, 11405, 111, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[478541, 11410, 152, 2, 25, "Item"],
Cell[478696, 11414, 108, 1, 25, "Subitem"],
Cell[478807, 11417, 150, 2, 25, "Item"],
Cell[478960, 11421, 392, 13, 28, "Subitem"],
Cell[479355, 11436, 152, 2, 25, "Item"],
Cell[479510, 11440, 161, 3, 25, "Subitem"],
Cell[479674, 11445, 132, 3, 25, "Item"],
Cell[479809, 11450, 121, 1, 25, "Item"],
Cell[479933, 11453, 109, 1, 25, "Item"],
Cell[480045, 11456, 116, 1, 25, "Item"]
}, Open  ]],
Cell[480176, 11460, 338, 10, 33, "Text"],
Cell[480517, 11472, 112, 1, 31, "Text"],
Cell[480632, 11475, 189, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[480846, 11483, 106, 1, 29, "Subsubsection"],
Cell[480955, 11486, 343, 9, 33, "Text"],
Cell[481301, 11497, 129, 1, 31, "Text"],
Cell[481433, 11500, 124, 1, 31, "Text"],
Cell[481560, 11503, 212, 4, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481809, 11512, 130, 1, 29, "Subsubsection"],
Cell[481942, 11515, 283, 8, 33, "Text"],
Cell[482228, 11525, 755, 27, 33, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[483032, 11558, 188, 2, 39, "Subsection"],
Cell[483223, 11562, 456, 8, 51, "Text"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[483728, 11576, 109, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[483862, 11581, 116, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[484003, 11586, 318, 6, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[484346, 11596, 2796, 83, 201, "Input"],
Cell[487145, 11681, 2560, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[489742, 11771, 386, 10, 32, "Input"],
Cell[490131, 11783, 613, 17, 31, "Output"]
}, Open  ]],
Cell[490759, 11803, 99, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[490883, 11808, 207, 4, 32, "Input"],
Cell[491093, 11814, 949, 25, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[492079, 11844, 126, 2, 32, "Input"],
Cell[492208, 11848, 899, 24, 52, "Output"]
}, Open  ]],
Cell[493122, 11875, 100, 1, 31, "Text"],
Cell[493225, 11878, 314, 9, 32, "Input"],
Cell[CellGroupData[{
Cell[493564, 11891, 399, 6, 32, "Input"],
Cell[493966, 11899, 1102, 36, 47, "Output"]
}, Open  ]],
Cell[495083, 11938, 279, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[495387, 11947, 119, 1, 32, "Input"],
Cell[495509, 11950, 859, 29, 58, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[496417, 11985, 113, 1, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[496555, 11990, 186, 4, 30, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[496766, 11998, 234, 5, 32, "Input"],
Cell[497003, 12005, 96, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497136, 12011, 357, 9, 32, "Input"],
Cell[497496, 12022, 569, 20, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498102, 12047, 320, 7, 32, "Input"],
Cell[498425, 12056, 368, 12, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498830, 12073, 197, 3, 32, "Input"],
Cell[499030, 12078, 242, 8, 51, "Output"]
}, Open  ]],
Cell[499287, 12089, 319, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[499631, 12098, 344, 7, 32, "Input"],
Cell[499978, 12107, 420, 11, 31, "Output"]
}, Open  ]],
Cell[500413, 12121, 140, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[500578, 12126, 431, 10, 32, "Input"],
Cell[501012, 12138, 143, 2, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[501216, 12147, 282, 3, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[501523, 12154, 2796, 83, 201, "Input"],
Cell[504322, 12239, 2582, 85, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[506941, 12329, 386, 10, 32, "Input"],
Cell[507330, 12341, 1149, 32, 52, "Output"]
}, Open  ]],
Cell[508494, 12376, 142, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[508661, 12382, 271, 5, 32, "Input"],
Cell[508935, 12389, 1127, 36, 47, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[510111, 12431, 137, 1, 23, "Subsubsection"],
Cell[510251, 12434, 282, 5, 31, "Text"],
Cell[510536, 12441, 1353, 26, 32, "Input"],
Cell[CellGroupData[{
Cell[511914, 12471, 279, 6, 32, "Input"],
Cell[512196, 12479, 310, 5, 31, "Output"]
}, Open  ]],
Cell[512521, 12487, 332, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[512878, 12497, 880, 29, 54, "Input"],
Cell[513761, 12528, 711, 25, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[514509, 12558, 789, 26, 54, "Input"],
Cell[515301, 12586, 910, 33, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516248, 12624, 1482, 42, 54, "Input"],
Cell[517733, 12668, 446, 12, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[518216, 12685, 1268, 38, 54, "Input"],
Cell[519487, 12725, 1525, 53, 80, "Output"]
}, Open  ]],
Cell[521027, 12781, 135, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[521187, 12786, 185, 3, 32, "Input"],
Cell[521375, 12791, 461, 12, 31, "Output"]
}, Open  ]],
Cell[521851, 12806, 101, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[521977, 12811, 1896, 47, 165, "Input"],
Cell[523876, 12860, 1570, 34, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525483, 12899, 603, 12, 32, "Input"],
Cell[526089, 12913, 159, 3, 31, "Output"]
}, Open  ]],
Cell[526263, 12919, 851, 13, 71, "Text"],
Cell[CellGroupData[{
Cell[527139, 12936, 243, 5, 32, "Input"],
Cell[527385, 12943, 459, 11, 31, "Output"]
}, Open  ]],
Cell[527859, 12957, 136, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[528020, 12962, 246, 6, 32, "Input"],
Cell[528269, 12970, 212, 3, 33, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[528530, 12979, 150, 2, 29, "Subsubsection"],
Cell[528683, 12983, 238, 4, 31, "Text"],
Cell[528924, 12989, 476, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[529425, 13005, 155, 2, 32, "Input"],
Cell[529583, 13009, 189, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[529809, 13018, 385, 9, 32, "Input"],
Cell[530197, 13029, 788, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[531022, 13055, 234, 5, 32, "Input"],
Cell[531259, 13062, 143, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[531439, 13069, 357, 9, 32, "Input"],
Cell[531799, 13080, 321, 7, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[532193, 13095, 105, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[532323, 13100, 112, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[532460, 13105, 313, 6, 29, "Subsubsection"],
Cell[532776, 13113, 590, 9, 51, "Text"],
Cell[533369, 13124, 345, 7, 31, "Text"],
Cell[CellGroupData[{
Cell[533739, 13135, 1268, 38, 54, "Input"],
Cell[535010, 13175, 1358, 51, 80, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[536405, 13231, 142, 2, 32, "Input"],
Cell[536550, 13235, 1688, 60, 156, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[538275, 13300, 161, 3, 32, "Input"],
Cell[538439, 13305, 1324, 29, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[539800, 13339, 145, 2, 32, "Input"],
Cell[539948, 13343, 89, 2, 31, "Output"]
}, Open  ]],
Cell[540052, 13348, 1733, 34, 32, "Input"],
Cell[CellGroupData[{
Cell[541810, 13386, 1968, 48, 187, "Input"],
Cell[543781, 13436, 1076, 26, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[544894, 13467, 260, 5, 32, "Input"],
Cell[545157, 13474, 6439, 117, 941, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551633, 13596, 277, 7, 32, "Input"],
Cell[551913, 13605, 633, 11, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552583, 13621, 200, 5, 32, "Input"],
Cell[552786, 13628, 136, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552959, 13635, 147, 2, 32, "Input"],
Cell[553109, 13639, 884, 29, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554030, 13673, 175, 4, 32, "Input"],
Cell[554208, 13679, 1332, 33, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[555577, 13717, 143, 2, 32, "Input"],
Cell[555723, 13721, 1358, 51, 80, "Output"]
}, Open  ]],
Cell[557096, 13775, 452, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[557573, 13791, 297, 7, 32, "Input"],
Cell[557873, 13800, 764, 13, 92, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[558686, 13819, 370, 6, 23, "Subsubsection"],
Cell[559059, 13827, 494, 8, 31, "Text"],
Cell[CellGroupData[{
Cell[559578, 13839, 1268, 38, 54, "Input"],
Cell[560849, 13879, 1380, 51, 80, "Output"]
}, Open  ]],
Cell[562244, 13933, 1733, 34, 32, "Input"],
Cell[CellGroupData[{
Cell[564002, 13971, 2214, 52, 187, "Input"],
Cell[566219, 14025, 1130, 27, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[567386, 14057, 340, 8, 32, "Input"],
Cell[567729, 14067, 408, 8, 31, "Output"]
}, Open  ]],
Cell[568152, 14078, 175, 4, 32, "Input"],
Cell[568330, 14084, 584, 15, 32, "Input"],
Cell[CellGroupData[{
Cell[568939, 14103, 169, 3, 32, "Input"],
Cell[569111, 14108, 75, 1, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[569247, 14116, 117, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[569389, 14121, 171, 3, 29, "Subsubsection"],
Cell[569563, 14126, 266, 5, 31, "Text"],
Cell[569832, 14133, 1055, 28, 32, "Input"],
Cell[570890, 14163, 248, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[571163, 14172, 129, 2, 32, "Input"],
Cell[571295, 14176, 757, 11, 144, "Print",
 CellTags->"Info3512459889-7380264"]
}, Open  ]],
Cell[572067, 14190, 111, 1, 31, "Text"],
Cell[572181, 14193, 545, 15, 32, "Input"],
Cell[572729, 14210, 118, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[572872, 14215, 190, 3, 32, "Input"],
Cell[573065, 14220, 238, 5, 31, "Output"]
}, Open  ]],
Cell[573318, 14228, 114, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[573457, 14233, 337, 8, 32, "Input"],
Cell[573797, 14243, 1530, 35, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[575364, 14283, 184, 4, 32, "Input"],
Cell[575551, 14289, 310, 7, 33, "Output"]
}, Open  ]],
Cell[575876, 14299, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[576010, 14304, 408, 9, 32, "Input"],
Cell[576421, 14315, 1553, 41, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[578011, 14361, 205, 4, 32, "Input"],
Cell[578219, 14367, 215, 7, 31, "Output"]
}, Open  ]],
Cell[578449, 14377, 221, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[578695, 14384, 307, 7, 32, "Input"],
Cell[579005, 14393, 929, 26, 31, "Output"]
}, Open  ]],
Cell[579949, 14422, 318, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[580292, 14430, 342, 8, 32, "Input"],
Cell[580637, 14440, 952, 26, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[581638, 14472, 141, 1, 29, "Subsubsection"],
Cell[581782, 14475, 259, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[582066, 14484, 332, 6, 32, "Input"],
Cell[582401, 14492, 1599, 41, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[584037, 14538, 220, 4, 32, "Input"],
Cell[584260, 14544, 1980, 48, 72, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[586301, 14599, 166, 2, 31, "Subsection"],
Cell[CellGroupData[{
Cell[586492, 14605, 217, 4, 29, "Subsubsection"],
Cell[586712, 14611, 266, 5, 31, "Text"],
Cell[586981, 14618, 1055, 28, 32, "Input"],
Cell[588039, 14648, 248, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[588312, 14657, 175, 3, 32, "Input"],
Cell[588490, 14662, 658, 10, 144, "Print",
 CellTags->"Info3512474752-6925473"]
}, Open  ]],
Cell[589163, 14675, 160, 2, 31, "Text"],
Cell[589326, 14679, 860, 22, 32, "Input"],
Cell[590189, 14703, 118, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[590332, 14708, 190, 3, 32, "Input"],
Cell[590525, 14713, 254, 6, 31, "Output"]
}, Open  ]],
Cell[590794, 14722, 114, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[590933, 14727, 337, 8, 32, "Input"],
Cell[591273, 14737, 1571, 31, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[592881, 14773, 184, 4, 32, "Input"],
Cell[593068, 14779, 207, 5, 33, "Output"]
}, Open  ]],
Cell[593290, 14787, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[593424, 14792, 408, 9, 32, "Input"],
Cell[593835, 14803, 1975, 42, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[595847, 14850, 205, 4, 32, "Input"],
Cell[596055, 14856, 237, 7, 31, "Output"]
}, Open  ]],
Cell[596307, 14866, 236, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[596568, 14873, 286, 4, 32, "Input"],
Cell[596857, 14879, 1561, 30, 52, "Output"]
}, Open  ]],
Cell[598433, 14912, 322, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[598780, 14920, 315, 7, 32, "Input"],
Cell[599098, 14929, 1580, 29, 52, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[600739, 14965, 124, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[600888, 14970, 100, 1, 29, "Subsubsection"],
Cell[600991, 14973, 837, 25, 32, "Input"],
Cell[CellGroupData[{
Cell[601853, 15002, 380, 8, 32, "Input"],
Cell[602236, 15012, 2219, 44, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[604492, 15061, 514, 12, 32, "Input"],
Cell[605009, 15075, 956, 26, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[606002, 15106, 221, 5, 32, "Input"],
Cell[606226, 15113, 272, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[606535, 15126, 348, 8, 32, "Input"],
Cell[606886, 15136, 2728, 69, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[609651, 15210, 109, 1, 32, "Input"],
Cell[609763, 15213, 2759, 70, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612559, 15288, 183, 3, 32, "Input"],
Cell[612745, 15293, 3250, 84, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[616032, 15382, 429, 11, 32, "Input"],
Cell[616464, 15395, 409, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[616910, 15408, 221, 5, 32, "Input"],
Cell[617134, 15415, 111, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[617282, 15421, 219, 5, 32, "Input"],
Cell[617504, 15428, 191, 4, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[617744, 15438, 108, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[617877, 15443, 108, 2, 32, "Input"],
Cell[617988, 15447, 836, 12, 164, "Print",
 CellTags->"Info3512479406-3746257"]
}, Open  ]],
Cell[CellGroupData[{
Cell[618861, 15464, 559, 12, 32, "Input"],
Cell[619423, 15478, 2072, 33, 65, "Message"],
Cell[621498, 15513, 1810, 31, 65, "Message"],
Cell[623311, 15546, 1812, 31, 65, "Message"],
Cell[625126, 15579, 1765, 29, 65, "Message"],
Cell[626894, 15610, 730, 13, 24, "Message"],
Cell[627627, 15625, 6054, 155, 138, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[633730, 15786, 164, 2, 23, "Subsubsection"],
Cell[633897, 15790, 5171, 112, 297, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[639093, 15906, 129, 2, 32, "Input"],
Cell[639225, 15910, 758, 11, 144, "Print",
 CellTags->"Info3512481356-2868314"]
}, Open  ]],
Cell[CellGroupData[{
Cell[640020, 15926, 125, 2, 32, "Input"],
Cell[640148, 15930, 658, 10, 144, "Print",
 CellTags->"Info3512481362-2165483"]
}, Open  ]],
Cell[640821, 15943, 3222, 75, 209, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[644068, 16022, 487, 10, 32, "Input"],
Cell[644558, 16034, 262, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[644857, 16045, 470, 11, 32, "Input"],
Cell[645330, 16058, 800, 20, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[646167, 16083, 305, 8, 32, "Input"],
Cell[646475, 16093, 214, 5, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[646738, 16104, 131, 1, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[646894, 16109, 410, 10, 32, "Input"],
Cell[647307, 16121, 189, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[647533, 16130, 144, 2, 32, "Input"],
Cell[647680, 16134, 75, 1, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[647816, 16142, 172, 2, 31, "Subsection"],
Cell[647991, 16146, 566, 11, 121, "Input",
 InitializationCell->True],
Cell[648560, 16159, 1967, 53, 99, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[650552, 16216, 109, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[650686, 16221, 840, 25, 32, "Input"],
Cell[651529, 16248, 2918, 69, 132, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[654484, 16322, 201, 4, 32, "Input"],
Cell[654688, 16328, 215, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[654940, 16338, 110, 2, 32, "Input"],
Cell[655053, 16342, 71, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[655161, 16348, 181, 4, 32, "Input"],
Cell[655345, 16354, 149, 2, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[655555, 16363, 223, 4, 31, "Subsection"],
Cell[CellGroupData[{
Cell[655803, 16371, 182, 4, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[656010, 16379, 109, 2, 32, "Input"],
Cell[656122, 16383, 1982, 28, 422, "Print",
 CellTags->"Info3512496286-5561169"]
}, Open  ]],
Cell[CellGroupData[{
Cell[658141, 16416, 447, 10, 32, "Input"],
Cell[658591, 16428, 1002, 29, 31, "Output"]
}, Open  ]],
Cell[659608, 16460, 297, 6, 32, "Input"],
Cell[659908, 16468, 317, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[660250, 16480, 146, 2, 32, "Input"],
Cell[660399, 16484, 119, 2, 31, "Output"]
}, Open  ]],
Cell[660533, 16489, 400, 11, 32, "Input"],
Cell[660936, 16502, 310, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[661271, 16514, 590, 16, 32, "Input"],
Cell[661864, 16532, 721, 20, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662622, 16557, 321, 6, 32, "Input"],
Cell[662946, 16565, 540, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663523, 16586, 177, 3, 32, "Input"],
Cell[663703, 16591, 131, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663871, 16598, 611, 17, 77, "Input"],
Cell[664485, 16617, 105, 2, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[664639, 16625, 210, 4, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[664874, 16633, 495, 10, 32, "Input"],
Cell[665372, 16645, 1396, 36, 52, "Output"]
}, Open  ]],
Cell[666783, 16684, 297, 6, 32, "Input"],
Cell[667083, 16692, 317, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[667425, 16704, 146, 2, 32, "Input"],
Cell[667574, 16708, 144, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[667755, 16715, 492, 13, 32, "Input"],
Cell[668250, 16730, 136, 3, 31, "Output"]
}, Open  ]],
Cell[668401, 16736, 310, 8, 32, "Input"],
Cell[CellGroupData[{
Cell[668736, 16748, 590, 16, 32, "Input"],
Cell[669329, 16766, 1000, 26, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[670366, 16797, 321, 6, 32, "Input"],
Cell[670690, 16805, 805, 21, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671532, 16831, 249, 5, 32, "Input"],
Cell[671784, 16838, 155, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671976, 16846, 275, 5, 32, "Input"],
Cell[672254, 16853, 107, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[672398, 16860, 889, 23, 99, "Input"],
Cell[673290, 16885, 126, 2, 31, "Output"]
}, Open  ]],
Cell[673431, 16890, 213, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[673669, 16898, 274, 8, 32, "Input"],
Cell[673946, 16908, 72, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[674055, 16914, 174, 4, 32, "Input"],
Cell[674232, 16920, 113, 1, 31, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[674406, 16928, 108, 1, 31, "Subsection"],
Cell[674517, 16931, 258, 5, 31, "Text"],
Cell[674778, 16938, 307, 6, 31, "Text"],
Cell[675088, 16946, 242, 5, 31, "Text"],
Cell[675333, 16953, 317, 5, 51, "Text"],
Cell[675653, 16960, 218, 4, 31, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[675920, 16970, 107, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[676052, 16975, 115, 1, 39, "Subsection"],
Cell[676170, 16978, 495, 8, 71, "Text"],
Cell[676668, 16988, 142, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[676835, 16993, 188, 2, 29, "Subsubsection"],
Cell[677026, 16997, 450, 8, 51, "Text"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[677537, 17012, 110, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[677672, 17017, 112, 1, 39, "Subsection"],
Cell[677787, 17020, 240, 4, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[678064, 17029, 121, 1, 31, "Subsection"],
Cell[678188, 17032, 279, 5, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[678504, 17042, 166, 2, 31, "Subsection"],
Cell[678673, 17046, 461, 8, 51, "Text"],
Cell[679137, 17056, 235, 5, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[679409, 17066, 234, 3, 31, "Subsection"],
Cell[679646, 17071, 191, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[679862, 17079, 109, 1, 29, "Subsubsection"],
Cell[679974, 17082, 486, 8, 31, "Text"],
Cell[680463, 17092, 661, 11, 51, "Text"],
Cell[CellGroupData[{
Cell[681149, 17107, 99, 1, 30, "Subsubsubsection"],
Cell[681251, 17110, 697, 12, 51, "Text"],
Cell[681951, 17124, 1186, 24, 111, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[683174, 17153, 102, 1, 30, "Subsubsubsection"],
Cell[683279, 17156, 495, 11, 71, "Text"],
Cell[683777, 17169, 835, 15, 151, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[684661, 17190, 151, 2, 29, "Subsubsection"],
Cell[684815, 17194, 334, 6, 31, "Text"],
Cell[685152, 17202, 1035, 15, 91, "Text"],
Cell[CellGroupData[{
Cell[686212, 17221, 101, 1, 30, "Subsubsubsection"],
Cell[686316, 17224, 283, 6, 31, "Text"],
Cell[686602, 17232, 201, 4, 31, "Text"],
Cell[686806, 17238, 792, 19, 131, "Text"],
Cell[687601, 17259, 396, 7, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[688034, 17271, 102, 1, 30, "Subsubsubsection"],
Cell[688139, 17274, 242, 5, 31, "Text"],
Cell[688384, 17281, 736, 19, 131, "Text"],
Cell[689123, 17302, 627, 13, 111, "Text"],
Cell[689753, 17317, 272, 6, 51, "Text"],
Cell[690028, 17325, 286, 5, 31, "Text"]
}, Open  ]]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[690387, 17338, 110, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[690522, 17343, 184, 2, 39, "Subsection"],
Cell[CellGroupData[{
Cell[690731, 17349, 95, 1, 29, "Subsubsection"],
Cell[690829, 17352, 98, 1, 31, "Text"],
Cell[690930, 17355, 349, 6, 31, "Text"],
Cell[691282, 17363, 136, 1, 31, "Text"],
Cell[691421, 17366, 106, 1, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[691564, 17372, 104, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[691693, 17377, 102, 1, 30, "Subsubsubsection"],
Cell[691798, 17380, 751, 14, 51, "Text"],
Cell[692552, 17396, 285, 5, 31, "Text"],
Cell[692840, 17403, 39103, 714, 510, 19249, 385, "CachedBoxData", "BoxData", \
"Input"],
Cell[731946, 18119, 832, 14, 51, "Text"],
Cell[732781, 18135, 304, 6, 31, "Text"],
Cell[733088, 18143, 488, 8, 71, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[733613, 18156, 189, 2, 24, "Subsubsubsection"],
Cell[733805, 18160, 249, 5, 31, "Text"],
Cell[734057, 18167, 187, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[734269, 18175, 222, 3, 29, "Subsubsubsubsection"],
Cell[734494, 18180, 388, 8, 31, "Text"],
Cell[734885, 18190, 338, 8, 31, "Text"],
Cell[735226, 18200, 225, 6, 31, "Text"],
Cell[735454, 18208, 418, 9, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[735909, 18222, 243, 4, 29, "Subsubsubsubsection"],
Cell[736155, 18228, 380, 8, 31, "Text"],
Cell[736538, 18238, 338, 8, 31, "Text"],
Cell[736879, 18248, 225, 6, 31, "Text"],
Cell[737107, 18256, 418, 9, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[737562, 18270, 143, 2, 29, "Subsubsubsubsection"],
Cell[737708, 18274, 241, 6, 31, "Text"],
Cell[737952, 18282, 228, 6, 31, "Text"],
Cell[738183, 18290, 237, 6, 31, "Text"],
Cell[738423, 18298, 204, 5, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[738664, 18308, 139, 2, 29, "Subsubsubsubsection"],
Cell[738806, 18312, 186, 5, 31, "Text"],
Cell[738995, 18319, 129, 1, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[739161, 18325, 85, 1, 29, "Subsubsubsubsection"],
Cell[739249, 18328, 567, 11, 31, "Text"],
Cell[739819, 18341, 130, 1, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[739986, 18347, 130, 2, 29, "Subsubsubsubsection"],
Cell[740119, 18351, 159, 5, 31, "Text"],
Cell[740281, 18358, 277, 7, 31, "Text"],
Cell[740561, 18367, 382, 8, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740980, 18380, 135, 2, 29, "Subsubsubsubsection"],
Cell[741118, 18384, 186, 5, 31, "Text"],
Cell[741307, 18391, 283, 7, 31, "Text"],
Cell[741593, 18400, 326, 7, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[741956, 18412, 185, 3, 29, "Subsubsubsubsection"],
Cell[742144, 18417, 129, 1, 31, "Text"],
Cell[742276, 18420, 352, 7, 51, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[742689, 18434, 109, 1, 29, "Subsubsection"],
Cell[742801, 18437, 748, 16, 31, "Text"],
Cell[743552, 18455, 737, 11, 51, "Text"],
Cell[744292, 18468, 662, 10, 71, "Text"],
Cell[CellGroupData[{
Cell[744979, 18482, 100, 1, 30, "Subsubsubsection"],
Cell[745082, 18485, 282, 5, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[745413, 18496, 105, 1, 29, "Subsubsection"],
Cell[745521, 18499, 559, 13, 31, "Text"],
Cell[746083, 18514, 789, 12, 51, "Text"],
Cell[746875, 18528, 244, 6, 31, "Text"],
Cell[747122, 18536, 383, 8, 31, "Text"],
Cell[747508, 18546, 269, 7, 31, "Text"],
Cell[747780, 18555, 445, 9, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[748262, 18569, 102, 1, 29, "Subsubsection"],
Cell[748367, 18572, 532, 11, 31, "Text"],
Cell[748902, 18585, 829, 13, 91, "Text"],
Cell[749734, 18600, 321, 6, 31, "Text"],
Cell[750058, 18608, 1193, 17, 111, "Text"],
Cell[751254, 18627, 892, 14, 91, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[752207, 18648, 111, 1, 73, "Section"],
Cell[CellGroupData[{
Cell[752343, 18653, 260, 5, 39, "Subsection"],
Cell[752606, 18660, 311, 5, 51, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[752954, 18670, 132, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[753111, 18675, 129, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[753265, 18680, 145, 1, 30, "Subsubsubsection"],
Cell[753413, 18683, 758, 14, 187, "Input",
 InitializationCell->True],
Cell[754174, 18699, 4706, 111, 341, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[758917, 18815, 118, 1, 24, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[759060, 18820, 136, 2, 32, "Input"],
Cell[759199, 18824, 2163, 31, 195, "Print",
 CellTags->"Info3512999103-4095725"]
}, Open  ]],
Cell[761377, 18858, 458, 10, 32, "Input"],
Cell[CellGroupData[{
Cell[761860, 18872, 122, 2, 32, "Input"],
Cell[CellGroupData[{
Cell[762007, 18878, 131, 2, 43, "Print",
 CellTags->"Info3512999381-5384665"],
Cell[762141, 18882, 1162, 31, 24, "Print",
 CellTags->"Info3512999381-5384665"]
}, Open  ]]
}, Open  ]],
Cell[763330, 18917, 300, 7, 32, "Input"],
Cell[763633, 18926, 257, 6, 32, "Input"],
Cell[763893, 18934, 208, 5, 32, "Input"],
Cell[764104, 18941, 168, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[764297, 18948, 434, 11, 32, "Input"],
Cell[764734, 18961, 859, 20, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[765630, 18986, 227, 5, 32, "Input"],
Cell[765860, 18993, 836, 19, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[766723, 19016, 190, 4, 24, "Subsubsubsection"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[766962, 19026, 125, 1, 31, "Subsection"],
Cell[767090, 19029, 164, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[767279, 19036, 103, 1, 29, "Subsubsection"],
Cell[767385, 19039, 304, 6, 31, "Text"],
Cell[767692, 19047, 236, 5, 31, "Text"],
Cell[767931, 19054, 397, 7, 51, "Text"],
Cell[768331, 19063, 239, 5, 31, "Text"],
Cell[768573, 19070, 224, 4, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[768834, 19079, 107, 1, 29, "Subsubsection"],
Cell[768944, 19082, 281, 5, 31, "Text"],
Cell[769228, 19089, 136, 1, 31, "Text"],
Cell[769367, 19092, 163, 3, 31, "Text"],
Cell[769533, 19097, 205, 4, 31, "Text"],
Cell[769741, 19103, 209, 4, 31, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[770011, 19114, 122, 1, 73, "Section"],
Cell[770136, 19117, 134, 1, 39, "Subsection"]
}, Closed]],
Cell[CellGroupData[{
Cell[770307, 19123, 102, 1, 43, "Section"],
Cell[770412, 19126, 145, 1, 39, "Subsection"],
Cell[770560, 19129, 139, 1, 31, "Subsection"],
Cell[CellGroupData[{
Cell[770724, 19134, 165, 3, 31, "Subsection"],
Cell[770892, 19139, 449, 7, 51, "Text"],
Cell[771344, 19148, 431, 7, 51, "Text"],
Cell[771778, 19157, 449, 13, 32, "Input"],
Cell[772230, 19172, 340, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[772595, 19182, 437, 9, 32, "Input"],
Cell[773035, 19193, 406, 12, 37, "Output"]
}, Open  ]],
Cell[773456, 19208, 105, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[773586, 19213, 186, 4, 32, "Input"],
Cell[773775, 19219, 570, 18, 37, "Output"]
}, Open  ]],
Cell[774360, 19240, 250, 7, 31, "Text"],
Cell[CellGroupData[{
Cell[774635, 19251, 329, 7, 32, "Input"],
Cell[774967, 19260, 470, 9, 24, "Message"],
Cell[775440, 19271, 670, 21, 41, "Output"]
}, Open  ]],
Cell[776125, 19295, 733, 20, 57, "Text"],
Cell[CellGroupData[{
Cell[776883, 19319, 147, 3, 32, "Input"],
Cell[777033, 19324, 114, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[777184, 19330, 1106, 30, 32, "Input"],
Cell[778293, 19362, 839, 17, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[779169, 19384, 268, 7, 32, "Input"],
Cell[779440, 19393, 473, 9, 24, "Message"],
Cell[779916, 19404, 732, 24, 41, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[780685, 19433, 301, 9, 32, "Input"],
Cell[780989, 19444, 241, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[781267, 19457, 771, 23, 32, "Input"],
Cell[782041, 19482, 1720, 36, 336, "Output"]
}, Open  ]],
Cell[783776, 19521, 94, 1, 32, "Input"],
Cell[783873, 19524, 960, 29, 32, "Input"],
Cell[784836, 19555, 1718, 35, 326, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[786591, 19595, 137, 1, 31, "Subsection"],
Cell[786731, 19598, 173, 3, 32, "Input"],
Cell[786907, 19603, 591, 10, 71, "Text"],
Cell[CellGroupData[{
Cell[787523, 19617, 1014, 25, 32, "Input"],
Cell[788540, 19644, 16529, 290, 240, 7332, 137, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805106, 19939, 387, 11, 32, "Input"],
Cell[805496, 19952, 210, 6, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[805743, 19963, 491, 14, 32, "Input"],
Cell[806237, 19979, 296, 8, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806570, 19992, 396, 9, 32, "Input"],
Cell[806969, 20003, 3415, 62, 222, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[810421, 20070, 407, 11, 32, "Input"],
Cell[810831, 20083, 102, 2, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[810994, 20092, 105, 1, 73, "Section"],
Cell[811102, 20095, 140, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[811267, 20100, 308, 6, 31, "Subsection"],
Cell[811578, 20108, 2271, 35, 173, "Text"],
Cell[CellGroupData[{
Cell[813874, 20147, 160, 2, 29, "Subsubsection"],
Cell[814037, 20151, 416, 7, 51, "Text"],
Cell[814456, 20160, 577, 17, 32, "Input"],
Cell[CellGroupData[{
Cell[815058, 20181, 304, 9, 32, "Input"],
Cell[815365, 20192, 269, 8, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[815671, 20205, 267, 7, 32, "Input"],
Cell[815941, 20214, 265, 8, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[816243, 20227, 262, 7, 32, "Input"],
Cell[816508, 20236, 3942, 74, 253, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[820487, 20315, 316, 8, 32, "Input"],
Cell[820806, 20325, 147, 3, 31, "Output"]
}, Open  ]],
Cell[820968, 20331, 568, 17, 32, "Input"],
Cell[CellGroupData[{
Cell[821561, 20352, 377, 9, 32, "Input"],
Cell[821941, 20363, 2237, 65, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[824215, 20433, 506, 13, 32, "Input"],
Cell[824724, 20448, 316, 10, 47, "Output"]
}, Open  ]],
Cell[825055, 20461, 784, 23, 32, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[825888, 20490, 368, 6, 59, "Subsection"],
Cell[826259, 20498, 1508, 31, 101, "Text"],
Cell[827770, 20531, 603, 10, 71, "Text"],
Cell[828376, 20543, 482, 8, 51, "Text"],
Cell[828861, 20553, 159, 3, 31, "Text"],
Cell[829023, 20558, 856, 13, 91, "Text"],
Cell[CellGroupData[{
Cell[829904, 20575, 117, 1, 29, "Subsubsection"],
Cell[830024, 20578, 142, 1, 31, "Text"],
Cell[830169, 20581, 563, 17, 32, "Input"],
Cell[830735, 20600, 286, 8, 32, "Input"],
Cell[831024, 20610, 191, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[831240, 20616, 807, 21, 32, "Input"],
Cell[832050, 20639, 21047, 353, 245, 12067, 205, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[853134, 20997, 267, 7, 32, "Input"],
Cell[853404, 21006, 72, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[853513, 21012, 383, 11, 32, "Input"],
Cell[853899, 21025, 94, 1, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[854054, 21033, 191, 2, 39, "Subsection"],
Cell[854248, 21037, 457, 7, 51, "Text"],
Cell[854708, 21046, 415, 7, 51, "Text"],
Cell[855126, 21055, 596, 10, 71, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[855759, 21070, 193, 2, 39, "Subsection"],
Cell[855955, 21074, 463, 8, 51, "Text"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[856467, 21088, 100, 1, 43, "Section"],
Cell[856570, 21091, 118, 1, 39, "Subsection"]
}, Closed]],
Cell[CellGroupData[{
Cell[856725, 21097, 100, 1, 43, "Section"],
Cell[856828, 21100, 118, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[856971, 21105, 171, 3, 31, "Subsection"],
Cell[857145, 21110, 981, 25, 55, "Text"],
Cell[858129, 21137, 253, 5, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[858419, 21147, 139, 1, 39, "Subsection"],
Cell[858561, 21150, 657, 14, 54, "Text"],
Cell[859221, 21166, 332, 6, 31, "Text"],
Cell[859556, 21174, 184, 2, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[859777, 21181, 163, 3, 39, "Subsection"],
Cell[CellGroupData[{
Cell[859965, 21188, 131, 1, 29, "Subsubsection"],
Cell[860099, 21191, 188, 4, 31, "Text"],
Cell[860290, 21197, 610, 18, 32, "Input"],
Cell[860903, 21217, 117, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[861045, 21222, 447, 12, 32, "Input"],
Cell[861495, 21236, 270, 8, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[861802, 21249, 446, 13, 32, "Input"],
Cell[862251, 21264, 499, 17, 53, "Output"]
}, Open  ]],
Cell[862765, 21284, 474, 11, 57, "Input"],
Cell[CellGroupData[{
Cell[863264, 21299, 382, 9, 32, "Input"],
Cell[863649, 21310, 961, 28, 60, "Output"]
}, Open  ]],
Cell[864625, 21341, 278, 10, 31, "Text"],
Cell[CellGroupData[{
Cell[864928, 21355, 157, 3, 32, "Input"],
Cell[865088, 21360, 956, 28, 54, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[866093, 21394, 150, 2, 29, "Subsubsection"],
Cell[866246, 21398, 453, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[866724, 21414, 151, 3, 32, "Input"],
Cell[866878, 21419, 94, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[867009, 21425, 866, 23, 32, "Input"],
Cell[867878, 21450, 234978, 3833, 275, 188524, 3070, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1102905, 25289, 113, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[1103043, 25294, 294, 7, 54, "Input"],
Cell[1103340, 25303, 351, 10, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1103728, 25318, 384, 13, 32, "Input"],
Cell[1104115, 25333, 187, 6, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1104339, 25344, 520, 16, 32, "Input"],
Cell[1104862, 25362, 72, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1104971, 25368, 513, 15, 32, "Input"],
Cell[1105487, 25385, 307, 9, 47, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1105843, 25400, 322, 8, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[1106190, 25412, 113, 1, 30, "Subsubsubsection"],
Cell[1106306, 25415, 113, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1106444, 25420, 409, 11, 32, "Input"],
Cell[1106856, 25433, 167, 3, 47, "Output"]
}, Open  ]],
Cell[1107038, 25439, 180, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[1107243, 25445, 614, 15, 32, "Input"],
Cell[1107860, 25462, 2050, 65, 112, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1109947, 25532, 385, 10, 32, "Input"],
Cell[1110335, 25544, 197, 4, 31, "Output"]
}, Open  ]],
Cell[1110547, 25551, 129, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1110701, 25556, 727, 21, 32, "Input"],
Cell[1111431, 25579, 165, 2, 31, "Output"]
}, Open  ]],
Cell[1111611, 25584, 130, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1111766, 25589, 737, 16, 32, "Input"],
Cell[1112506, 25607, 3297, 106, 187, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1115840, 25718, 358, 9, 32, "Input"],
Cell[1116201, 25729, 348, 9, 47, "Output"]
}, Open  ]],
Cell[1116564, 25741, 126, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1116715, 25746, 699, 22, 54, "Input"],
Cell[1117417, 25770, 117, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1117571, 25777, 120, 2, 32, "Input"],
Cell[1117694, 25781, 90, 1, 31, "Output"]
}, Open  ]],
Cell[1117799, 25785, 129, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1117953, 25790, 458, 12, 32, "Input"],
Cell[1118414, 25804, 1760, 55, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1120211, 25864, 258, 7, 32, "Input"],
Cell[1120472, 25873, 126, 3, 47, "Output"]
}, Open  ]],
Cell[1120613, 25879, 144, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1120782, 25884, 770, 24, 54, "Input"],
Cell[1121555, 25910, 120, 2, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1121712, 25917, 118, 2, 32, "Input"],
Cell[1121833, 25921, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1121958, 25927, 507, 13, 32, "Input"],
Cell[1122468, 25942, 1782, 56, 112, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1124287, 26003, 336, 9, 32, "Input"],
Cell[1124626, 26014, 141, 2, 31, "Output"]
}, Open  ]],
Cell[1124782, 26019, 141, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1124948, 26024, 674, 21, 32, "Input"],
Cell[1125625, 26047, 88, 1, 31, "Output"]
}, Open  ]],
Cell[1125728, 26051, 338, 7, 37, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1126103, 26063, 165, 2, 30, "Subsubsubsection"],
Cell[1126271, 26067, 176, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[1126472, 26073, 487, 13, 54, "Input"],
Cell[1126962, 26088, 192, 3, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1127191, 26096, 145, 3, 32, "Input"],
Cell[1127339, 26101, 82, 1, 31, "Output"]
}, Open  ]],
Cell[1127436, 26105, 228, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[1127689, 26112, 694, 17, 54, "Input"],
Cell[1128386, 26131, 2224, 68, 145, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1130647, 26204, 402, 9, 54, "Input"],
Cell[1131052, 26215, 225, 5, 47, "Output"]
}, Open  ]],
Cell[1131292, 26223, 129, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1131446, 26228, 902, 26, 54, "Input"],
Cell[1132351, 26256, 229, 4, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1132617, 26265, 167, 3, 32, "Input"],
Cell[1132787, 26270, 109, 1, 31, "Output"]
}, Open  ]],
Cell[1132911, 26274, 130, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1133066, 26279, 798, 18, 54, "Input"],
Cell[1133867, 26299, 3528, 112, 216, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1137432, 26416, 488, 12, 54, "Input"],
Cell[1137923, 26430, 320, 6, 47, "Output"]
}, Open  ]],
Cell[1138258, 26439, 126, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1138409, 26444, 854, 25, 54, "Input"],
Cell[1139266, 26471, 148, 3, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1139451, 26479, 169, 3, 32, "Input"],
Cell[1139623, 26484, 114, 1, 31, "Output"]
}, Open  ]],
Cell[1139752, 26488, 129, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1139906, 26493, 513, 14, 54, "Input"],
Cell[1140422, 26509, 1320, 41, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1141779, 26555, 284, 8, 54, "Input"],
Cell[1142066, 26565, 150, 3, 47, "Output"]
}, Open  ]],
Cell[1142231, 26571, 144, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1142400, 26576, 714, 22, 54, "Input"],
Cell[1143117, 26600, 144, 3, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1143298, 26608, 171, 3, 32, "Input"],
Cell[1143472, 26613, 111, 1, 31, "Output"]
}, Open  ]],
Cell[1143598, 26617, 126, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1143749, 26622, 614, 16, 54, "Input"],
Cell[1144366, 26640, 1241, 38, 91, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1145644, 26683, 482, 13, 54, "Input"],
Cell[1146129, 26698, 194, 4, 31, "Output"]
}, Open  ]],
Cell[1146338, 26705, 141, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1146504, 26710, 830, 24, 54, "Input"],
Cell[1147337, 26736, 109, 1, 31, "Output"]
}, Open  ]],
Cell[1147461, 26740, 363, 8, 37, "Text"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1147885, 26755, 170, 3, 39, "Subsection"],
Cell[1148058, 26760, 481, 8, 51, "Text"],
Cell[1148542, 26770, 490, 8, 51, "Text"],
Cell[1149035, 26780, 236, 4, 31, "Text"],
Cell[1149274, 26786, 406, 7, 51, "Text"],
Cell[1149683, 26795, 381, 9, 32, "Input"],
Cell[CellGroupData[{
Cell[1150089, 26808, 174, 3, 32, "Input"],
Cell[1150266, 26813, 1175, 35, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1151478, 26853, 860, 21, 32, "Input"],
Cell[1152341, 26876, 177512, 2934, 285, 163906, 2708, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1329890, 29815, 111, 1, 29, "Subsubsection"],
Cell[CellGroupData[{
Cell[1330026, 29820, 770, 18, 32, "Input"],
Cell[1330799, 29840, 72779, 2061, 2701, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1403615, 31906, 129, 2, 32, "Input"],
Cell[1403747, 31910, 57265, 1756, 1930, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1461085, 33674, 100, 1, 43, "Section"],
Cell[1461188, 33677, 174, 3, 39, "Subsection"]
}, Closed]],
Cell[CellGroupData[{
Cell[1461399, 33685, 95, 1, 43, "Section"],
Cell[CellGroupData[{
Cell[1461519, 33690, 211, 4, 39, "Subsection"],
Cell[1461733, 33696, 809, 13, 91, "Text"],
Cell[CellGroupData[{
Cell[1462567, 33713, 129, 1, 29, "Subsubsection"],
Cell[1462699, 33716, 390, 7, 51, "Text"],
Cell[CellGroupData[{
Cell[1463114, 33727, 555, 13, 32, "Input"],
Cell[1463672, 33742, 114, 2, 31, "Output"]
}, Open  ]],
Cell[1463801, 33747, 380, 7, 51, "Text"],
Cell[1464184, 33756, 737, 17, 32, "Input"],
Cell[CellGroupData[{
Cell[1464946, 33777, 775, 18, 32, "Input"],
Cell[1465724, 33797, 2634, 79, 119, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1468395, 33881, 718, 17, 32, "Input"],
Cell[1469116, 33900, 424, 12, 31, "Output"]
}, Open  ]],
Cell[1469555, 33915, 689, 11, 51, "Text"],
Cell[CellGroupData[{
Cell[1470269, 33930, 2624, 78, 237, "Input"],
Cell[1472896, 34010, 2481, 77, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1475414, 34092, 3349, 90, 205, "Input"],
Cell[1478766, 34184, 5197, 149, 92, "Output"]
}, Open  ]],
Cell[1483978, 34336, 158, 2, 31, "Text"],
Cell[CellGroupData[{
Cell[1484161, 34342, 858, 24, 55, "Input"],
Cell[1485022, 34368, 671, 20, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1485742, 34394, 233, 5, 29, "Subsubsection"],
Cell[1485978, 34401, 1087, 16, 91, "Text"],
Cell[1487068, 34419, 1298, 19, 111, "Text"],
Cell[1488369, 34440, 826, 12, 91, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1489232, 34457, 101, 1, 29, "Subsubsection"],
Cell[1489336, 34460, 390, 7, 51, "Text"],
Cell[1489729, 34469, 459, 8, 51, "Text"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1490249, 34484, 109, 1, 43, "Section"],
Cell[1490361, 34487, 133, 1, 39, "Subsection"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1490531, 34493, 96, 1, 73, "Section"],
Cell[1490630, 34496, 119, 1, 39, "Subsection"],
Cell[CellGroupData[{
Cell[1490774, 34501, 165, 3, 31, "Subsection"],
Cell[1490942, 34506, 233, 4, 31, "Text"],
Cell[1491178, 34512, 540, 9, 51, "Text"],
Cell[1491721, 34523, 416, 7, 51, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1492174, 34535, 220, 4, 39, "Subsection"],
Cell[1492397, 34541, 173, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[1492595, 34549, 763, 20, 55, "Input"],
Cell[1493361, 34571, 850, 20, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1494248, 34596, 120, 1, 29, "Subsubsection"],
Cell[1494371, 34599, 445, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[1494841, 34611, 63, 1, 32, "Input"],
Cell[1494907, 34614, 183, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1495127, 34624, 282, 8, 32, "Input"],
Cell[1495412, 34634, 632, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1496081, 34655, 138, 2, 32, "Input"],
Cell[1496222, 34659, 192, 4, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1496451, 34668, 503, 9, 32, "Input"],
Cell[1496957, 34679, 836, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1497830, 34705, 390, 8, 32, "Input"],
Cell[1498223, 34715, 2265, 60, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1500525, 34780, 167, 3, 32, "Input"],
Cell[1500695, 34785, 105, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1500837, 34792, 227, 5, 32, "Input"],
Cell[1501067, 34799, 88, 1, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1501204, 34806, 107, 1, 23, "Subsubsection"],
Cell[1501314, 34809, 329, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[1501668, 34819, 368, 10, 32, "Input"],
Cell[1502039, 34831, 551, 15, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1502627, 34851, 313, 7, 32, "Input"],
Cell[1502943, 34860, 648, 17, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1503628, 34882, 129, 2, 32, "Input"],
Cell[1503760, 34886, 252, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1504049, 34897, 165, 3, 32, "Input"],
Cell[1504217, 34902, 229, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1504483, 34913, 201, 4, 32, "Input"],
Cell[1504687, 34919, 600, 16, 31, "Output"]
}, Open  ]],
Cell[1505302, 34938, 201, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[1505528, 34946, 367, 8, 32, "Input"],
Cell[1505898, 34956, 310, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1506245, 34970, 182, 4, 32, "Input"],
Cell[1506430, 34976, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1506555, 34982, 239, 6, 32, "Input"],
Cell[1506797, 34990, 317, 8, 31, "Output"]
}, Open  ]],
Cell[1507129, 35001, 151, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[1507305, 35008, 289, 8, 32, "Input"],
Cell[1507597, 35018, 88, 1, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1507734, 35025, 201, 4, 23, "Subsubsection"],
Cell[1507938, 35031, 358, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[1508321, 35041, 253, 7, 32, "Input"],
Cell[1508577, 35050, 246, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1508860, 35062, 203, 5, 32, "Input"],
Cell[1509066, 35069, 176, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1509279, 35078, 366, 10, 32, "Input"],
Cell[1509648, 35090, 335, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1510020, 35104, 145, 3, 32, "Input"],
Cell[1510168, 35109, 830, 27, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1511035, 35141, 101, 1, 32, "Input"],
Cell[1511139, 35144, 476, 15, 31, "Output"]
}, Open  ]],
Cell[1511630, 35162, 117, 1, 31, "Text"],
Cell[1511750, 35165, 209, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[1511984, 35173, 477, 12, 32, "Input"],
Cell[1512464, 35187, 1649, 49, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1514150, 35241, 793, 20, 32, "Input"],
Cell[1514946, 35263, 902, 20, 33, "Output"]
}, Open  ]],
Cell[1515863, 35286, 99, 1, 31, "Text"],
Cell[1515965, 35289, 279, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[1516269, 35298, 221, 7, 32, "Input"],
Cell[1516493, 35307, 1314, 38, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1517844, 35350, 795, 18, 32, "Input"],
Cell[1518642, 35370, 733, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1519412, 35391, 1052, 22, 55, "Input"],
Cell[1520467, 35415, 879, 21, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1521383, 35441, 1526, 32, 55, "Input"],
Cell[1522912, 35475, 23014, 509, 626, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1545963, 35989, 1032, 24, 77, "Input"],
Cell[1546998, 36015, 828, 14, 65, "Message"],
Cell[1547829, 36031, 731, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1548597, 36052, 1620, 40, 77, "Input"],
Cell[1550220, 36094, 850, 14, 65, "Message"],
Cell[1551073, 36110, 1017, 21, 33, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1552139, 36137, 206, 5, 23, "Subsubsection"],
Cell[CellGroupData[{
Cell[1552370, 36146, 409, 12, 32, "Input"],
Cell[1552782, 36160, 519, 16, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1553338, 36181, 770, 23, 32, "Input"],
Cell[1554111, 36206, 1917, 60, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1556065, 36271, 930, 28, 55, "Input"],
Cell[1556998, 36301, 784, 18, 56, "Output"]
}, Open  ]],
Cell[1557797, 36322, 177, 4, 31, "Text"],
Cell[1557977, 36328, 780, 18, 55, "Input"],
Cell[1558760, 36348, 282, 5, 31, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[1559079, 36358, 271, 5, 23, "Subsubsection"],
Cell[1559353, 36365, 203, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[1559581, 36373, 411, 10, 32, "Input"],
Cell[1559995, 36385, 509, 13, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1560541, 36403, 772, 22, 32, "Input"],
Cell[1561316, 36427, 1907, 57, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1563260, 36489, 1050, 31, 55, "Input"],
Cell[1564313, 36522, 809, 18, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1565171, 36546, 136, 1, 23, "Subsubsection"],
Cell[1565310, 36549, 92, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[1565427, 36554, 1198, 33, 55, "Input"],
Cell[1566628, 36589, 956, 20, 56, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1567633, 36615, 167, 3, 23, "Subsubsection"],
Cell[1567803, 36620, 353, 6, 31, "Text"],
Cell[1568159, 36628, 455, 7, 51, "Text"],
Cell[CellGroupData[{
Cell[1568639, 36639, 1098, 33, 32, "Input"],
Cell[1569740, 36674, 2149, 66, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1571926, 36745, 1235, 38, 55, "Input"],
Cell[1573164, 36785, 823, 18, 56, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1574036, 36809, 222, 4, 23, "Subsubsection"],
Cell[1574261, 36815, 275, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[1574561, 36824, 1279, 38, 55, "Input"],
Cell[1575843, 36864, 2731, 88, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1578611, 36957, 1479, 44, 55, "Input"],
Cell[1580093, 37003, 915, 20, 52, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1581057, 37029, 226, 4, 23, "Subsubsection"],
Cell[1581286, 37035, 163, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[1581474, 37042, 438, 12, 32, "Input"],
Cell[1581915, 37056, 274, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1582226, 37067, 390, 11, 32, "Input"],
Cell[1582619, 37080, 250, 5, 31, "Output"]
}, Open  ]],
Cell[1582884, 37088, 1037, 33, 55, "Input"],
Cell[CellGroupData[{
Cell[1583946, 37125, 1442, 42, 77, "Input"],
Cell[1585391, 37169, 803, 19, 56, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1586243, 37194, 346, 6, 23, "Subsubsection"],
Cell[1586592, 37202, 583, 10, 51, "Text"],
Cell[CellGroupData[{
Cell[1587200, 37216, 128, 2, 32, "Input"],
Cell[1587331, 37220, 180, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1587548, 37230, 146, 2, 32, "Input"],
Cell[1587697, 37234, 191, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1587925, 37244, 277, 6, 32, "Input"],
Cell[1588205, 37252, 257, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1588499, 37263, 325, 7, 32, "Input"],
Cell[1588827, 37272, 282, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1589146, 37283, 1584, 45, 77, "Input"],
Cell[1590733, 37330, 804, 19, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1591574, 37354, 460, 12, 32, "Input"],
Cell[1592037, 37368, 218, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1592292, 37378, 244, 7, 32, "Input"],
Cell[1592539, 37387, 205, 5, 31, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1592805, 37399, 288, 6, 31, "Subsection"],
Cell[1593096, 37407, 367, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[1593488, 37417, 979, 22, 77, "Input"],
Cell[1594470, 37441, 999, 23, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1595506, 37469, 120, 1, 29, "Subsubsection"],
Cell[1595629, 37472, 539, 8, 51, "Text"],
Cell[CellGroupData[{
Cell[1596193, 37484, 63, 1, 32, "Input"],
Cell[1596259, 37487, 261, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1596557, 37497, 282, 8, 32, "Input"],
Cell[1596842, 37507, 915, 21, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1597794, 37533, 138, 2, 32, "Input"],
Cell[1597935, 37537, 262, 5, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1598234, 37547, 603, 11, 32, "Input"],
Cell[1598840, 37560, 2045, 54, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1600922, 37619, 390, 8, 32, "Input"],
Cell[1601315, 37629, 3036, 74, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604388, 37708, 219, 5, 32, "Input"],
Cell[1604610, 37715, 88, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604735, 37721, 172, 3, 32, "Input"],
Cell[1604910, 37726, 102, 2, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1605061, 37734, 201, 4, 29, "Subsubsection"],
Cell[1605265, 37740, 358, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[1605648, 37750, 253, 7, 32, "Input"],
Cell[1605904, 37759, 221, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1606162, 37770, 278, 7, 32, "Input"],
Cell[1606443, 37779, 199, 5, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1606679, 37789, 485, 12, 32, "Input"],
Cell[1607167, 37803, 404, 10, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1607608, 37818, 145, 3, 32, "Input"],
Cell[1607756, 37823, 1252, 40, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1609045, 37868, 101, 1, 32, "Input"],
Cell[1609149, 37871, 659, 16, 31, "Output"]
}, Open  ]],
Cell[1609823, 37890, 117, 1, 31, "Text"],
Cell[1609943, 37893, 209, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[1610177, 37901, 477, 12, 32, "Input"],
Cell[1610657, 37915, 2626, 79, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1613320, 37999, 890, 21, 32, "Input"],
Cell[1614213, 38022, 1204, 24, 52, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1615478, 38053, 166, 3, 31, "Subsection"],
Cell[1615647, 38058, 206, 4, 31, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
