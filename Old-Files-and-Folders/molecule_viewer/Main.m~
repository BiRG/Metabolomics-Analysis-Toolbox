function varargout = Main(varargin)
% MAIN M-file for Main.fig
%      MAIN, by itself, creates a new MAIN or raises the existing
%      singleton*.
%
%      H = MAIN returns the handle to a new MAIN or the handle to
%      the existing singleton*.
%
%      MAIN('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MAIN.M with the given input arguments.
%
%      MAIN('Property','Value',...) creates a new MAIN or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Main_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Main_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Main

% Last Modified by GUIDE v2.5 22-Feb-2010 09:14:04

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Main_OpeningFcn, ...
                   'gui_OutputFcn',  @Main_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Main is made visible.
function Main_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Main (see VARARGIN)

% Choose default command line output for Main
handles.output = hObject;

set(hObject,'toolbar','figure');
set(handles.figure1,'CloseRequestFcn',@closeGUI);
if ismac
    set(handles.mainListTable,'ColumnWidth',{215});
elseif ispc
    set(handles.mainListTable, 'ColumnWidth', {135});    
end

% Loads the database file generated by "readinfiles.m", but will give
% priority to an edited library (created with the addCustMolecule function.
% a structure format.  This is then saved in handles as handles.molecules.
if((exist('molecules_library_edited.mat', 'file') > 0))
    load molecules_library_edited.mat
    handles.molecules = molecules;
elseif ((exist('molecules_library.mat', 'file') > 0))
    load molecules_library.mat
    handles.molecules = molecules;
else
    disp('Error Loading Library File');
end

% Takes the recently read in molecules structure and iterates through the 
% names of the molecules.  These are then printed to the master table.
set(handles.mainListTable,'ColumnName','Molecule');
data = cell(length(handles.molecules),1);
for m = 1:length(handles.molecules)
    data{m,1} = handles.molecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.mainListTable,'data',data);

% Sets up an array for later use.
handles.moleculeSelection = [];

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Main wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Main_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes when trying to close the GUI figure1.
function closeGUI(src,evnt)
% src is the handle of the object generating the callback (the source of the event)
% evnt is the The event data structure (can be empty for some callbacks)
selection = questdlg('Do you want to close this window?',...
                     'Confirmation Window',...
                     'Yes','No','Yes');
switch selection,
   case 'Yes',
    delete(gcf)
   case 'No'
     return
end


% --- Executes on button press in showButton.
function showButton_Callback(hObject, eventdata, handles)
% hObject    handle to showButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Calls Paul's function to show the molecule in a graphical way.
view_molecule_handles = guihandles(view_molecule);
set(view_molecule_handles.height_slider,'Min',0);
set(view_molecule_handles.height_slider,'Max',1);
set(view_molecule_handles.height_slider,'Value',1);
show_molecule(handles.molecules(handles.moleculeSelection));


% --- Executes on button press in addCustMolButton.
function addCustMolButton_Callback(hObject, eventdata, handles)
% hObject    handle to addCustMolButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

AddCustMolecule();


% --- Executes on button press in addCustListButton.
function addCustListButton_Callback(hObject, eventdata, handles)
% hObject    handle to addCustListButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

ListSubsetEditer();


% --- Executes on button press in loadCustListButton.
function loadCustListButton_Callback(hObject, eventdata, handles)
% hObject    handle to loadCustListButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[filename, pathname] = uigetfile('*.mat', 'Pick A Subset: ');
if isequal(filename,0) || isequal(pathname,0)
   disp('User pressed cancel')
else
    load(strcat(pathname,filename));
    handles.molecules = tempMolecules;
end


% Recalculates the subsetTable's contents.
data = cell(length(handles.molecules),1);
for m = 1:length(handles.molecules)
    data{m,1} = handles.molecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.mainListTable,'data',data);

% Update handles structure
guidata(hObject, handles);


% --- Executes when selected cell(s) is changed in mainListTable.
function mainListTable_CellSelectionCallback(hObject, eventdata, handles)
% hObject    handle to mainListTable (see GCBO)
% eventdata  structure with the following fields (see UITABLE)
%	Indices: row and column indices of the cell(s) currently selecteds
% handles    structure with handles and user data (see GUIDATA)

% Grabs the row that is selected on the table and stores it in "row".
% Then sends row to a handles object that can be used by the buttons! 
row = eventdata.Indices(1,1);
handles.moleculeSelection = row;

% Update handles structure
guidata(hObject, handles);


% --- Executes on button press in resetButton.
function resetButton_Callback(hObject, eventdata, handles)
% hObject    handle to resetButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

if ismac
    set(handles.mainListTable,'ColumnWidth',{140});
end

% Loads the database file generated by "readinfiles.m", but will give
% priority to an edited library (created with the addCustMolecule function.
% a structure format.  This is then saved in handles as handles.molecules.
if((exist('molecules_library_edited.mat', 'file') > 0))
    load molecules_library_edited.mat
    handles.molecules = molecules;
elseif ((exist('molecules_library.mat', 'file') > 0))
    load molecules_library.mat
    handles.molecules = molecules;
else
    disp('Error Loading Library File');
end

% Takes the recently read in molecules structure and iterates through the 
% names of the molecules.  These are then printed to the master table.
set(handles.mainListTable,'ColumnName','Molecule');
data = cell(length(handles.molecules),1);
for m = 1:length(handles.molecules)
    data{m,1} = handles.molecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.mainListTable,'data',data);

% Sets up an array for later use.
handles.moleculeSelection = [];

% Update handles structure
guidata(hObject, handles);


% --- Executes on selection change in nmrTypeFilter.
function nmrTypeFilter_Callback(hObject, eventdata, handles)
% hObject    handle to nmrTypeFilter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns nmrTypeFilter contents as cell array
%        contents{get(hObject,'Value')} returns selected item from nmrTypeFilter

val = get(handles.nmrTypeFilter,'Value');
if val == 1
    disp('hydrogen');
    
    counter = 1;
    tempSubSetMolecules = struct('file', '', 'peakNumbers', 0, 'ppm', 0, 'hz', 0,...
        'peakHeight', 0, 'moleculeName', '');


    % Filters out the file to be removed based on file name and repopulates the
    % tempSubSetMolecules structure with the new infomation.
    for m = 1:length(handles.molecules)
        if((strcmp(handles.molecules(m).type,'H')))
            tempSubSetMolecules(counter) = handles.molecules(m);
        else
            % disp(strcat('Removed file: ', num2str(handles.moleculeSelection)));
        end
    end

    handles.subSetMolecules = tempSubSetMolecules;

    fixTable2Size = cell(length(handles.subSetMolecules),1);
    set(handles.subsetListTable,'data',fixTable2Size);

    % Recalculates the subsetTable's contents.
    data = cell(length(handles.subSetMolecules),1);
    for m = 1:length(handles.subSetMolecules)
        data{m,1} = handles.subSetMolecules(m).moleculeName;
    end

    % Passes the information to the table object.
    set(handles.subsetListTable,'data',data);
elseif val == 2
    disp('carbon');
elseif val == 3
    disp('phosphorus');
end

% --- Executes during object creation, after setting all properties.
function nmrTypeFilter_CreateFcn(hObject, eventdata, handles)
% hObject    handle to nmrTypeFilter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on mouse press over figure background, over a disabled or
% --- inactive control, or over an axes background.
function figure1_WindowButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% This supresses the error caused when you click on the background of main
% window.
