{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red1\green122\blue255;\red0\green77\blue187;
}
\vieww12000\viewh13980\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\b\fs32 \cf0 \ul \ulc0 Program Outline (Section Regarding Scoring)
\b0\fs20 \ulnone \
\

\b \ul Initialization:
\b0 \ulnone \
\
This sets up the operation by doing the following steps: \
\cf2 I think it would be easier to separate out what you need before this first step. For example, I would save the spectrum (x,y). I would also choose a molecule(i) and save that as well.\cf3 \
Not sure how to tackle this one.\
\cf4 Just put a breakpoint in show_molecule and save the spectrum's x and y data (after you load a collection). Then just save one particular molecule.\
\cf0 \
1.) Seperate a section into what is visible in the window via:\
	- Check for minimum threshold (similar to show_molecule)\
	- Get a list of included peaks from the library molecule. \cf4 From the molecule or the sample?\
\cf0 	- Add a buffer the terminating end of the first/last peaks for picture clarity.  \
		The size is the maximum amount that the multiplet can shit.\
	\cf4 This window really isn't arbitrary. The buffer size is the maximum amount of shift for a multiplet.\
\cf0 \
2.) Then save the paramaters into variables.  \
\
	The parameters needed are: \
		Window's X min/max\
		Y min/max (usually 0-1)\
		Library Molecule's peaks that appear in window\
		Library Molecule's X min/max\
		Sample Molecule's X min/max\
\
3.) This is then going to pass the information to the walk-through calculation method (walkingCalc)\
	- Purpose: Gets the best position for the given window.\
	- This returns (shift, score) where "shift" is the amount you need to shift the molecule to get the best score\
		and "score" being the numerical score of the best result. \cf4 You probably won't need to return y. Also, you are probably going to return the shift not x. The shift says how much you moved the multiplet from its original position.\cf0 \
\
4.) Save returned score from 3 above to a variable that will be summed up at the end of the windows loop.\
\cf2 Score for each window/section/multiplet.\cf0 \
\
5.) Iterate to the next window and repeat untill finished\
\
6.) Save resulting sum'd score into a variable to compare with other molecules later.\
\

\b \ul WalkingCalc\
\

\b0 \ulnone This is going to take the given information to do the following:\
\
	1.) Start the library molecule section on the minimum X value of the sample molecule section\
		--> Run the scoring method\
		--> Save the result in an array of numbers corresponding to the location on X\
		--> The "minimum X" to start at will take into account shift allowance and\
			if there is a value outside the window, a score of zero will be given for that iteration.\
\cf4 Let's say that I have a multiplet (doublet) centered at 2 ppm. How would you shift it to right by 0.5 ppm?\
Wouldn't you just take the right extreme and update the x positions by +.5?\cf0 \
	2.) Iterate to the next X value (by a length of delta) on the sample molecule section\
		--> Run the scoring method\
		--> Save the result in an array of numbers corresponding to the location on X\
\
	3.) Repeat until the X max is reached\
\
	4.) Find the largest values in the number array\
	\
	5.) Return the x coordinates and the score to calling method.\
\

\b \ul Scoring\
\

\b0 \ulnone This is going to take the passed in molecule sections and compare the following: \
\
	1.) Take the first peak in the Library molecule and take the difference to the sample molecule at the same location\
	\
		A different showing the library peak is under the sample data (+ or -) will receive a moderate penalty\
		A different showing the library peak is above the sample data (+ or -) will receive a harsh penalty \cf4 (Make them the same penalty for now).\cf0 \
\cf2 You won't need to take the difference to the nearest sample's peak. We've done away with that idea for now. Right now all you need to do is calculate the difference between the molecule's peak and the corresponding intensity in the spectrum.\cf0 \
\
	2.) Iterate through all peaks in the library molecule\
\
	3.) Returns the score as a integer to the calling method\
\
\
	\
}