%% Determine the significant features for a model
addpath('../matlab_scripts');
% [opls_scores_code,add_new_data] = get_opls_model(309);
eval(opls_scores_code);
eval(add_new_data);
[num_samples,num_variables] = size(X);
[model,stats] = opls(X,Y,num_opls_fact);
P_original = model.P; % Grab the original P
% for each variable, permute the labels N times and recalculate P
fprintf('Maximum number of permutations is %d\n',factorial(num_samples));
N = 1000;
fprintf('Maximum number of permutations is %d\n',factorial(num_samples));
talpha = 0.001;
P_permuted = NaN*ones(num_variables,N);
for v = 1:num_variables
    for n = 1:N
        X_permuted = X;
        inxs = randperm(num_samples);
        X_permuted(:,v) = X(inxs,v);
        [model,stats] = opls(X_permuted,Y,num_opls_fact);
        P_permuted(v,n) = model.P(v);
        % Make sure the direction of the vector is the same
        model.P(v) = 0; % Remove from calculation
        P_test = P_original;
        P_test(v) = 0;
        err1 = sum((P_test - model.P).^2);
        err2 = sum((P_test - (-1*model.P)).^2);
        if err2 < err1
            P_permuted(v,n) = -1 * P_permuted(v,n);
        end
    end
end

% Determine the significant bins
significant = ones(1,num_variables)*false;
for v = 1:num_variables
    sorted = sort(P_permuted(v,:),'descend');
    ix = round(N*talpha/2) + 1; % Two tailed
    thres = sorted(ix);
    if abs(P_original(v)) >= thres
        significant(v) = true;
    end
end

% Graph each significant distribution
for v = 1:num_variables
    if significant(v)
        figure;
        [f,xi] = ksdensity(P_permuted(v,:));
        plot(xi,f,'k-');
        yl = ylim;
        arrow([P_original(v),yl(2)/4],[P_original(v),0]);
        xlabel(['P_{',num2str(v),'}']);
    end
end

% Graph the distributions that are not significant
for v = 1:num_variables
    if ~significant(v)
        figure;
        [f,xi] = ksdensity(P_permuted(v,:));
        plot(xi,f,'k-');
        yl = ylim;
        arrow([P_original(v),yl(2)/4],[P_original(v),0]);
        xlabel(['P_{',num2str(v),'}']);
    end
end