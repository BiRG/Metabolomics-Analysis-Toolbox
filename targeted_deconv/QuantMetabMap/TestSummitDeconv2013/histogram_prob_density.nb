(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    331673,       6844]
NotebookOptionsPosition[    326452,       6671]
NotebookOutlinePosition[    326789,       6686]
CellTagsIndexPosition[    326746,       6683]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Evaluation of Histogram Probability Model", "Title",
 CellChangeTimes->{{3.579340730660074*^9, 3.579340768131483*^9}}],

Cell["Eric Moyer", "Subtitle",
 CellChangeTimes->{{3.579340789995402*^9, 3.57934079157929*^9}}],

Cell["June 2013", "Subsubtitle",
 CellChangeTimes->{{3.579340777020064*^9, 3.579340788155541*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.579340919731789*^9, 3.579340922507313*^9}}],

Cell["\<\
I want to model probability densities for functions with bounded support. The \
most obvious way to do this is to create a histogram with a grid dependent on \
the number of samples I've seen - put the boundaries half-way between each \
sample.\
\>", "Text",
 CellChangeTimes->{{3.579340773058905*^9, 3.579340774339303*^9}, {
  3.579340933883967*^9, 3.579340991811512*^9}}],

Cell["\<\
A refinement is to start a histogram with a single uniform bin and split it \
when each data point is seen, giving equal probability to the two bins so \
formed. Given such a set of models, what is the posterior probability density \
over them after the data has been seen?\
\>", "Text",
 CellChangeTimes->{{3.579341007347597*^9, 3.579341034603476*^9}, {
  3.579341081725815*^9, 3.579341194443561*^9}}],

Cell["\<\
One can then go farther and look at 3 bin histograms after two data points \
have been seen. Can the 3 bin histogram be arrived at from splitting the 2 \
bin histogram? I imagine it can.\
\>", "Text",
 CellChangeTimes->{{3.579341253875808*^9, 3.579341295948274*^9}, {
  3.579361238853616*^9, 3.579361241932254*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why I didn't finish", "Section",
 CellChangeTimes->{{3.5793603143014*^9, 3.579360317388021*^9}}],

Cell["\<\
I realized that using the posterior distribution for the histogram bin \
boundary would be intractible even if I could calculate the posterior \
tractably.\
\>", "Text",
 CellChangeTimes->{{3.579360332632412*^9, 3.579360351059978*^9}, {
  3.579360430948786*^9, 3.579360454492441*^9}}],

Cell["\<\
The application I am concerned about right now is sampling from an unknown \
distribution then using that sample to construct a set of equiprobable bins \
which I will then use to bin another distribution. The KL divergence between \
the distribution of the bins from the unknown distribution and the other \
distribution will be the error in the other distribution's approximation of \
the unknown distribution. However, to use the histogram bin posterior, I'd \
have to re-bin the other distribution according to all binnings and assign \
that binning a probability according to the posterior. But that \"re-bin \
according to all possible sets of histograms\" step is intractable unless a \
simplification falls out of the math. Thus, even if I can calculate the \
probability model, it is in vain. So, I'm giving up now and am going to spend \
my time on more profitable things.\
\>", "Text",
 CellChangeTimes->{{3.579360458065799*^9, 3.57936046213211*^9}, {
  3.579360510051932*^9, 3.579360525932067*^9}, {3.579360556932441*^9, 
  3.579360577428178*^9}, {3.579360613012224*^9, 3.579360753957152*^9}, {
  3.579360792916792*^9, 3.57936090065749*^9}, {3.579360934246447*^9, 
  3.57936095427721*^9}, {3.579361266198563*^9, 3.579361285988524*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Two bin histogram on [0..1]", "Section",
 CellChangeTimes->{{3.579341307531914*^9, 3.579341314763942*^9}, {
  3.579341660828069*^9, 3.579341667684095*^9}}],

Cell[CellGroupData[{

Cell["Likelihood and joint distribution", "Subsection",
 CellChangeTimes->{{3.57935334477759*^9, 3.579353384808797*^9}}],

Cell[TextData[{
 "If we have ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " hypotheses (models M), each with two equally probable bins, but with the \
division at ",
 Cell[BoxData[
  FormBox[
   FractionBox["i", "n"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "\[Element]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "...", ",", 
      RowBox[{"n", "-", "1"}]}], "}"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", "\[Element]", "3"}], ",", "4", ",", "...", ",", 
    "\[Infinity]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", the likelihood ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"P", "(", 
     RowBox[{
      RowBox[{"X", "=", 
       RowBox[{"x", "|", 
        SubscriptBox["M", 
         RowBox[{"i", ",", "n"}]]}]}], ",", "i", ",", "n"}], ")"}], "=", 
    RowBox[{"px", "(", 
     RowBox[{"x", ",", "i", ",", "n"}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " can be expressed:"
}], "Text",
 CellChangeTimes->{{3.57934131713228*^9, 3.57934133749975*^9}, {
   3.579341573331989*^9, 3.579341636659626*^9}, 3.579341670629467*^9, {
   3.5793417065079*^9, 3.579341768253567*^9}, {3.579341806525335*^9, 
   3.579341873436812*^9}, {3.579341970965646*^9, 3.579342087029369*^9}, {
   3.579343893621914*^9, 3.579343949811259*^9}, {3.579344350379993*^9, 
   3.579344380486059*^9}, {3.579344612546264*^9, 3.579344613949881*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"px", "[", 
   RowBox[{"x_", ",", "i_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", 
          RowBox[{"i", "/", "n"}]}], ")"}]}], ",", 
       RowBox[{"0", "\[LessEqual]", "x", "<", 
        RowBox[{"i", "/", "n"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", 
        RowBox[{"(", 
         RowBox[{"2", 
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"i", "/", "n"}]}], ")"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"i", "/", "n"}], "\[LessEqual]", "x", "\[LessEqual]", "1"}]}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "True"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.579343952637586*^9, 3.579344107079716*^9}}],

Cell["Check that this integrates to 1", "Text",
 CellChangeTimes->{{3.579344115453183*^9, 3.579344119844818*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"0", "<", "i", "<", "n"}], "&&", 
    RowBox[{"n", ">", "1"}]}], ",", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.579344121643545*^9, 3.579344206420942*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.579344207988563*^9}]
}, Open  ]],

Cell[TextData[{
 "Now, we can calculate the joint probability ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"P", "(", 
     RowBox[{
      RowBox[{"X", "=", "x"}], ",", 
      SubscriptBox["M", 
       RowBox[{"i", ",", "n"}]], ",", 
      RowBox[{"i", "|", "n"}]}], ")"}], "=", 
    RowBox[{"pxm", "(", 
     RowBox[{"x", ",", "i", ",", "n"}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " using a uniform prior over all models for a given n."
}], "Text",
 CellChangeTimes->{{3.579344390740281*^9, 3.579344403070106*^9}, {
  3.5793444445652*^9, 3.579344531750546*^9}, {3.579344567121341*^9, 
  3.57934464562934*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pxm", "[", 
   RowBox[{"x_", ",", "i_", ",", "n_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"px", "[", 
    RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{"n", "-", "1"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.579344535863873*^9, 3.579344562365199*^9}}],

Cell["Check that this integrates to 1", "Text",
 CellChangeTimes->{{3.579344115453183*^9, 3.579344119844818*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"n", ">", "1"}], ",", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{"Integrate", "[", 
       RowBox[{
        RowBox[{"pxm", "[", 
         RowBox[{"x", ",", "i", ",", "n"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "Infinity"}], ",", "Infinity"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.579344121643545*^9, 3.579344206420942*^9}, {
  3.579344685290674*^9, 3.57934475439688*^9}, {3.579344785403174*^9, 
  3.579344816881184*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.579344207988563*^9, 3.579344755959018*^9, {3.579344793472548*^9, 
   3.579344817697529*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Posterior", "Subsection",
 CellChangeTimes->{{3.57935337353997*^9, 3.579353374408986*^9}}],

Cell[TextData[{
 "Finally, we can calculate the posterior ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"P", "(", 
     RowBox[{
      SubscriptBox["M", 
       RowBox[{"i", ",", "n"}]], ",", 
      RowBox[{
       RowBox[{"i", "|", "X"}], "=", "x"}], ",", "n"}], ")"}], "=", 
    RowBox[{"postmx", "(", 
     RowBox[{"x", ",", "i", ",", "n"}], ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.579344893765522*^9, 3.579344898773245*^9}, {
  3.579344934669364*^9, 3.579344977554443*^9}}],

Cell[TextData[{
 "First, I will use ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to simplify the expression for me. I start with the expression itself"
}], "Text",
 CellChangeTimes->{{3.57934498610965*^9, 3.579344997749313*^9}, {
  3.579345150197879*^9, 3.579345197925396*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"pxm", "[", 
    RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"pxm", "[", 
      RowBox[{"x", ",", "j", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579345000359164*^9, 3.579345103026958*^9}, {
  3.579345178073497*^9, 3.579345201956855*^9}, {3.579345273229756*^9, 
  3.579345277908347*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "i"}]], 
      RowBox[{"0", "\[LessEqual]", "x", "<", 
       FractionBox["i", "n"]}]},
     {
      RowBox[{"-", 
       FractionBox["n", 
        RowBox[{
         RowBox[{"2", " ", "i"}], "-", 
         RowBox[{"2", " ", "n"}]}]]}], 
      RowBox[{
       FractionBox["i", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
     {"0", 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"j", "=", "1"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", "n"}]], 
    FractionBox[
     RowBox[{"\[Piecewise]", GridBox[{
        {
         FractionBox["n", 
          RowBox[{"2", " ", "j"}]], 
         RowBox[{"0", "\[LessEqual]", "x", "<", 
          FractionBox["j", "n"]}]},
        {
         FractionBox["1", 
          RowBox[{"2", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             FractionBox["j", "n"]}], ")"}]}]], 
         RowBox[{
          FractionBox["j", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
        {"0", 
         TagBox["True",
          "PiecewiseDefault",
          AutoDelete->False,
          DeletionWarning->True]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.84]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}]}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", "n"}]]}]}]]], "Output",
 CellChangeTimes->{{3.579345182530507*^9, 3.579345202975881*^9}, 
   3.579345310071307*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " wasn't much help there. First, get rid of the division inside the summation"
}], "Text",
 CellChangeTimes->{{3.579345328693578*^9, 3.579345338789615*^9}, {
  3.579345403021951*^9, 3.579345418477942*^9}, {3.579346198536434*^9, 
  3.579346206183987*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"Out", "[", "27", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.579346221450414*^9, 3.579346241687091*^9}}],

Cell["\<\
Piecewise[{{n/(2*i), Inequality[0, LessEqual, x, Less, i/n]}, 
   {-(n/(2*i - 2*n)), i/n <= x <= 1}}, 0]/
 ((-1 + n)*
  Sum[Piecewise[{{n/(2*j), Inequality[0, LessEqual, x, Less, 
        j/n]}, {1/(2*(1 - j/n)), j/n <= x <= 1}}, 0]/(-1 + n), 
   {j, 1, -1 + n}])\
\>", "Output",
 CellChangeTimes->{{3.579346228976597*^9, 3.579346242625388*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Piecewise[{{n/(2*i), Inequality[0, LessEqual, x, Less, i/n]}, 
   {-(n/(2*i - 2*n)), i/n <= x <= 1}}, 0]/
 ((-1 + n)*
  Sum[Piecewise[{{n/(2*j), Inequality[0, LessEqual, x, Less, 
        j/n]}, {1/(2*(1 - j/n)), j/n <= x <= 1}}, 0], 
   {j, 1, -1 + n}]/(-1 + n))\
\>", "Input",
 CellChangeTimes->{{3.579346284509977*^9, 3.579346284587632*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "i"}]], 
      RowBox[{"0", "\[LessEqual]", "x", "<", 
       FractionBox["i", "n"]}]},
     {
      RowBox[{"-", 
       FractionBox["n", 
        RowBox[{
         RowBox[{"2", " ", "i"}], "-", 
         RowBox[{"2", " ", "n"}]}]]}], 
      RowBox[{
       FractionBox["i", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
     {"0", 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}], 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"j", "=", "1"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "n"}]], 
   RowBox[{"\[Piecewise]", GridBox[{
      {
       FractionBox["n", 
        RowBox[{"2", " ", "j"}]], 
       RowBox[{"0", "\[LessEqual]", "x", "<", 
        FractionBox["j", "n"]}]},
      {
       FractionBox["1", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           FractionBox["j", "n"]}], ")"}]}]], 
       RowBox[{
        FractionBox["j", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
      {"0", 
       TagBox["True",
        "PiecewiseDefault",
        AutoDelete->False,
        DeletionWarning->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.84]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}]}]]], "Output",
 CellChangeTimes->{3.579346307164078*^9}]
}, Open  ]],

Cell["Check that that was valid:", "Text",
 CellChangeTimes->{{3.579346546918248*^9, 3.579346550525831*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", ">", "1"}], ",", 
     RowBox[{"1", "\[LessEqual]", "i", "<", "n"}], ",", 
     RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}]}], "}"}], ",", 
   RowBox[{"Reduce", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "/", 
             RowBox[{"(", 
              RowBox[{"2", "*", "i"}], ")"}]}], ",", 
            RowBox[{"Inequality", "[", 
             RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
              RowBox[{"i", "/", "n"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"n", "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", "i"}], "-", 
                 RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"i", "/", "n"}], "\[LessEqual]", "x", "\[LessEqual]", 
             "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "n"}], ")"}], "*", 
        RowBox[{
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"n", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", "j"}], ")"}]}], ",", 
                 RowBox[{"Inequality", "[", 
                  RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
                   RowBox[{"j", "/", "n"}]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"j", "/", "n"}]}], ")"}]}], ")"}]}], ",", 
                 RowBox[{
                  RowBox[{"j", "/", "n"}], "\[LessEqual]", "x", 
                  "\[LessEqual]", "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "n"}]}], "}"}]}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "n"}], ")"}]}]}], ")"}]}], " ", 
     "\[Equal]", " ", 
     RowBox[{
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "/", 
             RowBox[{"(", 
              RowBox[{"2", "*", "i"}], ")"}]}], ",", 
            RowBox[{"Inequality", "[", 
             RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
              RowBox[{"i", "/", "n"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"n", "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"2", "*", "i"}], "-", 
                 RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}], ",", 
            RowBox[{
             RowBox[{"i", "/", "n"}], "\[LessEqual]", "x", "\[LessEqual]", 
             "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "n"}], ")"}], "*", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Piecewise", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"n", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", "j"}], ")"}]}], ",", 
                 RowBox[{"Inequality", "[", 
                  RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
                   RowBox[{"j", "/", "n"}]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"1", "/", 
                  RowBox[{"(", 
                   RowBox[{"2", "*", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{"j", "/", "n"}]}], ")"}]}], ")"}]}], ",", 
                 RowBox[{
                  RowBox[{"j", "/", "n"}], "\[LessEqual]", "x", 
                  "\[LessEqual]", "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], 
           "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "n"}], ")"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "n"}]}], "}"}]}], "]"}]}], ")"}]}]}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579346566691955*^9, 3.579346587935521*^9}, {
  3.579347199644361*^9, 3.579347255669681*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.579347192245361*^9, 3.57934727717943*^9}]
}, Open  ]],

Cell["That took too long, but I'm pretty sure it was correct.", "Text",
 CellChangeTimes->{{3.579347286438741*^9, 3.579347294646195*^9}}],

Cell["Now, work only on the denominator.", "Text",
 CellChangeTimes->{{3.579346810856606*^9, 3.579346820871457*^9}}],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"j", "=", "1"}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", "n"}]], 
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "j"}]], 
      RowBox[{"0", "\[LessEqual]", "x", "<", 
       FractionBox["j", "n"]}]},
     {
      FractionBox["1", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          FractionBox["j", "n"]}], ")"}]}]], 
      RowBox[{
       FractionBox["j", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
     {"0", 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}]}]], "Input"],

Cell["When you multiply the limits by n, this becomes", "Text",
 CellChangeTimes->{{3.579347324046932*^9, 3.579347343102218*^9}}],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"j", "=", "1"}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", "n"}]], 
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "j"}]], 
      RowBox[{"0", "\[LessEqual]", 
       RowBox[{"x", " ", "n"}], "<", "j"}]},
     {
      FractionBox["1", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          FractionBox["j", "n"]}], ")"}]}]], 
      RowBox[{"j", "\[LessEqual]", 
       RowBox[{"x", " ", "n"}], "\[LessEqual]", "n"}]},
     {"0", 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}]}]], "Input",
 CellChangeTimes->{{3.579347347703392*^9, 3.579347365600581*^9}}],

Cell["\<\
Now we can split up the summation into portions where the piecewise function \
is constant.\
\>", "Text",
 CellChangeTimes->{{3.579347445839161*^9, 3.579347478406561*^9}, {
  3.579348914671622*^9, 3.579348915191635*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postMXDenom", "=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"n", "/", "2"}], "j"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"x", " ", "n"}], "<", "1"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sum", "[", 
        RowBox[{
         FractionBox["1", 
          RowBox[{"2", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             FractionBox["j", "n"]}], ")"}]}]], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"n", "-", "1"}], "<=", 
        RowBox[{"x", " ", "n"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"n", "/", "2"}], "j"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"Floor", "[", 
             RowBox[{"x", " ", "n"}], "]"}]}], "}"}]}], "]"}], "+", 
        RowBox[{"Sum", "[", 
         RowBox[{
          FractionBox["1", 
           RowBox[{"2", " ", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              FractionBox["j", "n"]}], ")"}]}]], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", 
            RowBox[{
             RowBox[{"Floor", "[", 
              RowBox[{"x", " ", "n"}], "]"}], "+", "1"}], ",", 
            RowBox[{"n", "-", "1"}]}], "}"}]}], "]"}]}], ",", 
       RowBox[{"1", "<=", 
        RowBox[{"x", " ", "n"}], " ", "<", " ", 
        RowBox[{"(", 
         RowBox[{"n", "-", "1"}], ")"}]}]}], "}"}]}], "}"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.579347491870036*^9, 3.579347637063904*^9}, {
   3.579347689230317*^9, 3.579347733149068*^9}, {3.579347806809611*^9, 
   3.579347880791788*^9}, {3.579348028333356*^9, 3.579348030531626*^9}, {
   3.579348082145843*^9, 3.579348091628286*^9}, {3.579350830065504*^9, 
   3.579350887200825*^9}, {3.579351396711428*^9, 3.579351401953507*^9}, 
   3.579351555786065*^9, {3.579353886311807*^9, 3.579353893201324*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     RowBox[{
      FractionBox["1", "4"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", 
      SuperscriptBox["n", "2"]}], 
     RowBox[{
      RowBox[{"n", " ", "x"}], "<", "1"}]},
    {
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{
         RowBox[{"DifferenceRoot", "[", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"\[FormalN]", "-", "n"}], ")"}], " ", 
                 RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "1"}], "-", 
                   RowBox[{"2", " ", "\[FormalN]"}], "+", 
                   RowBox[{"2", " ", "n"}]}], ")"}], " ", 
                 RowBox[{"\[FormalY]", "[", 
                  RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], " ", 
                 RowBox[{"\[FormalY]", "[", 
                  RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
               "0"}], ",", 
              RowBox[{
               RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
              
              RowBox[{
               RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}], 
             "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "+", "n"}], "\[LessEqual]", 
      RowBox[{"n", " ", "x"}]}]},
    {
     RowBox[{
      RowBox[{
       FractionBox["1", "4"], " ", "n", " ", 
       RowBox[{"Floor", "[", 
        RowBox[{"n", " ", "x"}], "]"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"Floor", "[", 
          RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{
        RowBox[{"DifferenceRoot", "[", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"\[FormalY]", "[", 
                 RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", "3"}], "-", 
                  RowBox[{"2", " ", "\[FormalN]"}], "+", 
                  RowBox[{"2", " ", "n"}], "-", 
                  RowBox[{"2", " ", 
                   RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                RowBox[{"(", 
                 RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", 
                 RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                RowBox[{"(", 
                 RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
              "0"}], ",", 
             RowBox[{
              RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
             RowBox[{
              RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
              FractionBox["1", 
               RowBox[{"1", "+", 
                FractionBox[
                 RowBox[{
                  RowBox[{"-", "1"}], "-", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
          "]"}], "]"}], "[", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n", "-", 
         RowBox[{"Floor", "[", 
          RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], 
     RowBox[{"1", "\[LessEqual]", 
      RowBox[{"n", " ", "x"}], "<", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "n"}]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.579347386414319*^9, 3.579347882930756*^9, 
  3.579348107423155*^9, 3.579350892247086*^9, 3.579351410215134*^9, 
  3.5793515569122*^9}]
}, Open  ]],

Cell["\<\
Now, let's see what happens when I put the numerator in directly. \
\>", "Text",
 CellChangeTimes->{{3.579350919976314*^9, 3.579350931208167*^9}, {
  3.579351587632941*^9, 3.579351596840238*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}], "&&", 
    RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", 
     RowBox[{"n", "-", "1"}]}], "&&", 
    RowBox[{"n", "\[GreaterEqual]", "2"}]}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", "postMXDenom"}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.579350898865325*^9, 3.579350902317499*^9}, {
   3.579350933318814*^9, 3.579350998633711*^9}, {3.579351099230751*^9, 
   3.579351192327173*^9}, {3.579351233566024*^9, 3.579351235782712*^9}, {
   3.579351293347292*^9, 3.579351321755197*^9}, 3.579351613160328*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "i"}]], 
      RowBox[{
       RowBox[{"n", " ", "x"}], "<", "i"}]},
     {
      RowBox[{"-", 
       FractionBox["n", 
        RowBox[{
         RowBox[{"2", " ", "i"}], "-", 
         RowBox[{"2", " ", "n"}]}]]}], 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}], "/", 
  RowBox[{"\[Piecewise]", GridBox[{
     {
      RowBox[{
       FractionBox["1", "4"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", 
       SuperscriptBox["n", "2"]}], 
      RowBox[{
       RowBox[{"n", " ", "x"}], "<", "1"}]},
     {
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{
          RowBox[{"DifferenceRoot", "[", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"\[FormalN]", "-", "n"}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}]}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}], 
              "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], ")"}]}], 
      RowBox[{"n", "\[LessEqual]", 
       RowBox[{"1", "+", 
        RowBox[{"n", " ", "x"}]}]}]},
     {
      RowBox[{
       FractionBox["1", "4"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"n", " ", 
          RowBox[{"Floor", "[", 
           RowBox[{"n", " ", "x"}], "]"}], " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", 
            RowBox[{"Floor", "[", 
             RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{
           RowBox[{"DifferenceRoot", "[", 
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                   RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                   RowBox[{"(", 
                    RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                 "0"}], ",", 
                RowBox[{
                 RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                ",", 
                RowBox[{
                 RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                 FractionBox["1", 
                  RowBox[{"1", "+", 
                   FractionBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
             "]"}], "]"}], "[", 
           RowBox[{
            RowBox[{"-", "1"}], "+", "n", "-", 
            RowBox[{"Floor", "[", 
             RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}]}]], "Output",
 CellChangeTimes->{{3.579350983161629*^9, 3.579351001684924*^9}, {
   3.579351118205985*^9, 3.579351164434588*^9}, 3.579351194925987*^9, 
   3.579351241504229*^9, {3.579351298756399*^9, 3.579351324998028*^9}, 
   3.579351461435435*^9, 3.579351565525001*^9, 3.579351621447679*^9}]
}, Open  ]],

Cell[TextData[{
 "I still got two branches. So, I'll treat each branch of the numerator \
separately. First the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "<", " ", "i"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " branch."
}], "Text",
 CellChangeTimes->{{3.579351655752432*^9, 3.579351706352379*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", "x"}], " ", "<", " ", "i"}], "&&", 
    RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}], "&&", 
    RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", 
     RowBox[{"n", "-", "1"}]}], "&&", 
    RowBox[{"n", "\[GreaterEqual]", "2"}]}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", "postMXDenom"}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.579350898865325*^9, 3.579350902317499*^9}, {
   3.579350933318814*^9, 3.579350998633711*^9}, {3.579351099230751*^9, 
   3.579351192327173*^9}, {3.579351233566024*^9, 3.579351235782712*^9}, {
   3.579351293347292*^9, 3.579351321755197*^9}, 3.579351613160328*^9, {
   3.579351713645162*^9, 3.579351716439652*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["2", 
      RowBox[{"i", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", "n"}]], 
     RowBox[{
      RowBox[{"n", " ", "x"}], "<", "1"}]},
    {
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", " ", "n"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"i", " ", "n", " ", 
         RowBox[{"Floor", "[", 
          RowBox[{"n", " ", "x"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"Floor", "[", 
            RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
        RowBox[{"2", " ", "i", " ", 
         RowBox[{
          RowBox[{"DifferenceRoot", "[", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                FractionBox["1", 
                 RowBox[{"1", "+", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
            "]"}], "]"}], "[", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "n", "-", 
           RowBox[{"Floor", "[", 
            RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.579351722853228*^9}]
}, Open  ]],

Cell[TextData[{
 "That gave me two branches. However, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[LessEqual]", "i"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "<", "i"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " so, isn't ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "<", " ", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " required? After thinking about it, no. It is possible that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"i", "\[Equal]", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Then ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "<", " ", "i"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " means ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "<", " ", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.579351764088685*^9, 3.579351793392329*^9}, {
  3.579351831208662*^9, 3.579351905568168*^9}, {3.579351951320779*^9, 
  3.57935200419128*^9}}],

Cell[TextData[{
 "Now, let's do the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"n", " ", "x"}], " ", "\[GreaterEqual]", " ", "i"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " branch."
}], "Text",
 CellChangeTimes->{{3.57935206661672*^9, 3.579352083344214*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", "x"}], " ", ">=", " ", "i"}], "&&", 
    RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}], "&&", 
    RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", 
     RowBox[{"n", "-", "1"}]}], "&&", 
    RowBox[{"n", "\[GreaterEqual]", "2"}]}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", "postMXDenom"}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.579350898865325*^9, 3.579350902317499*^9}, {
   3.579350933318814*^9, 3.579350998633711*^9}, {3.579351099230751*^9, 
   3.579351192327173*^9}, {3.579351233566024*^9, 3.579351235782712*^9}, {
   3.579351293347292*^9, 3.579351321755197*^9}, 3.579351613160328*^9, {
   3.579351713645162*^9, 3.579351716439652*^9}, {3.57935209460182*^9, 
   3.57935209584152*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"n", "/", 
   RowBox[{"(", 
    RowBox[{"2", " ", 
     RowBox[{"(", 
      RowBox[{"i", "-", "n"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"\[Piecewise]", GridBox[{
         {
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             RowBox[{
              RowBox[{"DifferenceRoot", "[", 
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[FormalN]", "-", "n"}], ")"}], " ", 
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}]}], ")"}], " ", 
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], " ", 
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
                    "0"}], ",", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                   ",", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                    "1"}]}], "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], 
            ")"}]}], 
          RowBox[{
           RowBox[{"1", "+", 
            RowBox[{"n", " ", "x"}]}], "\[GreaterEqual]", "n"}]},
         {
          RowBox[{
           FractionBox["1", "4"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"n", " ", 
              RowBox[{"Floor", "[", 
               RowBox[{"n", " ", "x"}], "]"}], " ", 
              RowBox[{"(", 
               RowBox[{"1", "+", 
                RowBox[{"Floor", "[", 
                 RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{
               RowBox[{"DifferenceRoot", "[", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                    "0"}], ",", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                    FractionBox["1", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
                 "]"}], "]"}], "[", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "n", "-", 
                RowBox[{"Floor", "[", 
                 RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
          TagBox["True",
           "PiecewiseDefault",
           AutoDelete->False,
           DeletionWarning->True]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}]}], ")"}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{3.579352106818321*^9}]
}, Open  ]],

Cell["\<\
That gave two branches, but there is some other stuff before the piecewise \
function. So, let's include the other stuff in the main by isolating each \
branch in turn.\
\>", "Text",
 CellChangeTimes->{{3.579352240353716*^9, 3.57935227356059*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", "x"}], " ", "\[GreaterEqual]", "i"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", 
      RowBox[{"n", " ", "x"}]}], " ", "\[GreaterEqual]", "n"}], "&&", 
    RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}], "&&", 
    RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", 
     RowBox[{"n", "-", "1"}]}], "&&", 
    RowBox[{"n", "\[GreaterEqual]", "2"}]}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", "postMXDenom"}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.579350898865325*^9, 3.579350902317499*^9}, {
   3.579350933318814*^9, 3.579350998633711*^9}, {3.579351099230751*^9, 
   3.579351192327173*^9}, {3.579351233566024*^9, 3.579351235782712*^9}, {
   3.579351293347292*^9, 3.579351321755197*^9}, 3.579351613160328*^9, {
   3.579351713645162*^9, 3.579351716439652*^9}, {3.57935209460182*^9, 
   3.57935209584152*^9}, {3.579352291882441*^9, 3.57935236610555*^9}, {
   3.579352406997783*^9, 3.579352411583291*^9}, 3.579352441812239*^9, {
   3.579352472610895*^9, 3.579352507843036*^9}}],

Cell[BoxData[
 FractionBox["n", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "i"}], "+", "n"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{
      RowBox[{"DifferenceRoot", "[", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"\[FormalN]", "-", "n"}], ")"}], " ", 
              RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "-", 
                RowBox[{"2", " ", "\[FormalN]"}], "+", 
                RowBox[{"2", " ", "n"}]}], ")"}], " ", 
              RowBox[{"\[FormalY]", "[", 
               RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], " ", 
              RowBox[{"\[FormalY]", "[", 
               RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", "0"}],
            ",", 
           RowBox[{
            RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}], 
          "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], ")"}]}]]], "Output",
 CellChangeTimes->{{3.579352317946808*^9, 3.579352342483649*^9}, 
   3.579352374862025*^9, {3.579352420647643*^9, 3.579352479467919*^9}, 
   3.579352510196518*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Assuming", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", "x"}], " ", "\[GreaterEqual]", "i"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", 
      RowBox[{"n", " ", "x"}]}], " ", "<", "n"}], "&&", 
    RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", "1"}], "&&", 
    RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", 
     RowBox[{"n", "-", "1"}]}], "&&", 
    RowBox[{"n", "\[GreaterEqual]", "2"}]}], ",", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"px", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], "/", "postMXDenom"}], "]"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.579350898865325*^9, 3.579350902317499*^9}, {
   3.579350933318814*^9, 3.579350998633711*^9}, {3.579351099230751*^9, 
   3.579351192327173*^9}, {3.579351233566024*^9, 3.579351235782712*^9}, {
   3.579351293347292*^9, 3.579351321755197*^9}, 3.579351613160328*^9, {
   3.579351713645162*^9, 3.579351716439652*^9}, {3.57935209460182*^9, 
   3.57935209584152*^9}, {3.579352291882441*^9, 3.57935236610555*^9}, {
   3.579352406997783*^9, 3.579352411583291*^9}, 3.579352441812239*^9, {
   3.579352472610895*^9, 3.579352507843036*^9}, {3.579352555313154*^9, 
   3.579352555688229*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"2", " ", "n"}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"i", "-", "n"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"n", " ", 
        RowBox[{"Floor", "[", 
         RowBox[{"n", " ", "x"}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"Floor", "[", 
           RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{
         RowBox[{"DifferenceRoot", "[", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"\[FormalY]", "[", 
                  RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "3"}], "-", 
                   RowBox[{"2", " ", "\[FormalN]"}], "+", 
                   RowBox[{"2", " ", "n"}], "-", 
                   RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                RowBox[{
                 RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                   RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                RowBox[{
                 RowBox[{"\[FormalY]", "[", 
                  RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                   RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
               "0"}], ",", 
              RowBox[{
               RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
              
              RowBox[{
               RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
               FractionBox["1", 
                RowBox[{"1", "+", 
                 FractionBox[
                  RowBox[{
                   RowBox[{"-", "1"}], "-", 
                   RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
           "]"}], "]"}], "[", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "n", "-", 
          RowBox[{"Floor", "[", 
           RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
    ")"}]}]}]], "Output",
 CellChangeTimes->{3.579352559469725*^9}]
}, Open  ]],

Cell["Now, I can combine the four branches:", "Text",
 CellChangeTimes->{{3.579352783801316*^9, 3.579352810384892*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"Out", "[", "74", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.57935276220898*^9, 3.579352770099256*^9}}],

Cell["\<\
Piecewise[{{2/(i*(-1 + n)*n), n*x < 1}}, (2*n)/(i*n*Floor[n*x]*(1 + \
Floor[n*x]) + 
   2*i*DifferenceRoot[Function[{\[FormalY], \[FormalN]}, {\[FormalY][1 + \
\[FormalN]]*(-3 - 2*\[FormalN] + 2*n - 2*Floor[n*x]) + \
\[FormalY][\[FormalN]]*(1 + \[FormalN] - n + Floor[n*x]) + 
          \[FormalY][2 + \[FormalN]]*(2 + \[FormalN] - n + Floor[n*x]) == 0, \
\[FormalY][0] == 0, \[FormalY][1] == (1 + (-1 - Floor[n*x])/n)^(-1)}]][-1 + n \
- Floor[n*x]])]\
\>", "Output",
 CellChangeTimes->{3.579352771430244*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"Out", "[", "82", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.579352837733723*^9, 3.579352846529056*^9}}],

Cell["\<\
n/((-i + n)*(-1 + DifferenceRoot[Function[{\[FormalY], \[FormalN]}, {(\
\[FormalN] - n)*\[FormalY][\[FormalN]] + (-1 - 2*\[FormalN] + \
2*n)*\[FormalY][1 + \[FormalN]] + (1 + \[FormalN] - n)*\[FormalY][2 + \
\[FormalN]] == 0, 
       \[FormalY][0] == 0, \[FormalY][1] == 1}]][n]))\
\>", "Output",
 CellChangeTimes->{3.579352771430244*^9, 3.579352848247939*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"InputForm", "[", 
  RowBox[{"Out", "[", "83", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.57935285087409*^9, 3.579352855558071*^9}}],

Cell["\<\
(-2*n)/((i - n)*(n*Floor[n*x]*(1 + Floor[n*x]) + 
   2*DifferenceRoot[Function[{\[FormalY], \[FormalN]}, {\[FormalY][1 + \
\[FormalN]]*(-3 - 2*\[FormalN] + 2*n - 2*Floor[n*x]) + \
\[FormalY][\[FormalN]]*(1 + \[FormalN] - n + Floor[n*x]) + 
          \[FormalY][2 + \[FormalN]]*(2 + \[FormalN] - n + Floor[n*x]) == 0, \
\[FormalY][0] == 0, \[FormalY][1] == (1 + (-1 - Floor[n*x])/n)^(-1)}]][-1 + n \
- Floor[n*x]]))\
\>", "Output",
 CellChangeTimes->{3.579352856378158*^9}]
}, Open  ]],

Cell["Now, I define the posterior", "Text",
 CellChangeTimes->{{3.57935342242574*^9, 3.579353427271566*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"postmx", "[", 
   RowBox[{"x_", ",", "i_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "/", 
        RowBox[{"(", 
         RowBox[{"i", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], " ", "+", " ", "n"}], ")"}], "*", "n"}], 
         ")"}]}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"n", " ", "x"}], " ", "<", " ", "1"}], " ", "&&", " ", 
        RowBox[{
         RowBox[{"n", " ", "x"}], " ", "<", "i"}]}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"2", "*", "n"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"i", "*", "n", "*", 
           RowBox[{"Floor", "[", 
            RowBox[{"n", "*", "x"}], "]"}], "*", 
           RowBox[{"(", 
            RowBox[{"1", " ", "+", " ", 
             RowBox[{"Floor", "[", 
              RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}], " ", "+", " ", "\n", 
          "   ", 
          RowBox[{"2", "*", "i", "*", 
           RowBox[{
            RowBox[{"DifferenceRoot", "[", 
             RowBox[{"Function", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"\[FormalY]", ",", " ", "\[FormalN]"}], "}"}], ",", 
               " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", " ", "+", " ", "\[FormalN]"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "-", " ", 
                    RowBox[{"2", "*", "\[FormalN]"}], " ", "+", " ", 
                    RowBox[{"2", "*", "n"}], " ", "-", " ", 
                    RowBox[{"2", "*", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}]}], ")"}]}], " ", "+", 
                   " ", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    "1", " ", "+", " ", "\[FormalN]", " ", "-", " ", "n", " ",
                     "+", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}], " ", "+", " ", 
                   "\n", "          ", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", " ", "+", " ", "\[FormalN]"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    "2", " ", "+", " ", "\[FormalN]", " ", "-", " ", "n", " ",
                     "+", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}]}], " ", "==", 
                  " ", "0"}], ",", " ", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", "0", "]"}], " ", "==", " ", 
                  "0"}], ",", " ", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", "1", "]"}], " ", "==", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"1", " ", "+", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], " ", "-", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}], "/", "n"}]}], 
                    ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], "}"}]}], "]"}], "]"}], 
            "[", 
            RowBox[{
             RowBox[{"-", "1"}], " ", "+", " ", "n", " ", "-", " ", 
             RowBox[{"Floor", "[", 
              RowBox[{"n", "*", "x"}], "]"}]}], "]"}]}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"n", " ", "x"}], " ", "\[GreaterEqual]", "1"}], "&&", 
        RowBox[{
         RowBox[{"n", " ", "x"}], "<", "i"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "i"}], "+", "n"}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{
             RowBox[{"DifferenceRoot", "[", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[FormalN]", "-", "n"}], ")"}], "*", 
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", "*", "\[FormalN]"}], "+", 
                    RowBox[{"2", "*", "n"}]}], ")"}], "*", 
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], "*", 
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
                   "0"}], ",", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}],
                  "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], ")"}]}], ")"}]}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"n", " ", "x"}], "\[GreaterEqual]", "i"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"n", " ", "x"}]}], ">=", "n"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2"}], "*", "n"}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i", "-", "n"}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"n", "*", 
             RowBox[{"Floor", "[", 
              RowBox[{"n", "*", "x"}], "]"}], "*", 
             RowBox[{"(", 
              RowBox[{"1", "+", 
               RowBox[{"Floor", "[", 
                RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}], "+", 
            RowBox[{"2", "*", 
             RowBox[{
              RowBox[{"DifferenceRoot", "[", 
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", "*", "\[FormalN]"}], "+", 
                    RowBox[{"2", "*", "n"}], "-", 
                    RowBox[{"2", "*", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}], "*", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                    "0"}], ",", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                   ",", 
                   RowBox[{
                    RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", "*", "x"}], "]"}]}], ")"}], "/", "n"}]}], 
                    ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}]}]}], "}"}]}], "]"}], "]"}], 
              "[", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "n", "-", 
               RowBox[{"Floor", "[", 
                RowBox[{"n", "*", "x"}], "]"}]}], "]"}]}]}], ")"}]}], ")"}]}],
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"n", " ", "x"}], " ", "\[GreaterEqual]", "i"}], "&&", 
        RowBox[{
         RowBox[{"1", "+", 
          RowBox[{"n", " ", "x"}]}], " ", "<", "n"}]}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.579352916874513*^9, 3.57935318082211*^9}, {
  3.579353272040746*^9, 3.579353275901963*^9}, {3.579353410684756*^9, 
  3.579353416585821*^9}, {3.579353607848876*^9, 3.579353612152129*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postmx", "[", 
  RowBox[{"x", ",", "i", ",", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.579353432487626*^9, 3.579353436110089*^9}}],

Cell[BoxData[
 RowBox[{"\[Piecewise]", GridBox[{
    {
     FractionBox["2", 
      RowBox[{"i", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", "n"}]], 
     RowBox[{
      RowBox[{
       RowBox[{"n", " ", "x"}], "<", "1"}], "&&", 
      RowBox[{
       RowBox[{"n", " ", "x"}], "<", "i"}]}]},
    {
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", " ", "n"}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"i", " ", "n", " ", 
         RowBox[{"Floor", "[", 
          RowBox[{"n", " ", "x"}], "]"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"Floor", "[", 
            RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
        RowBox[{"2", " ", "i", " ", 
         RowBox[{
          RowBox[{"DifferenceRoot", "[", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                 RowBox[{
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                  RowBox[{"(", 
                   RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                FractionBox["1", 
                 RowBox[{"1", "+", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
            "]"}], "]"}], "[", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "n", "-", 
           RowBox[{"Floor", "[", 
            RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"n", " ", "x"}], "\[GreaterEqual]", "1"}], "&&", 
      RowBox[{
       RowBox[{"n", " ", "x"}], "<", "i"}]}]},
    {
     FractionBox["n", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "i"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{
          RowBox[{"DifferenceRoot", "[", 
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"\[FormalN]", "-", "n"}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}]}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", "+", "\[FormalN]", "-", "n"}], ")"}], " ", 
                  RowBox[{"\[FormalY]", "[", 
                   RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
                "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
               RowBox[{
                RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}], 
              "}"}]}], "]"}], "]"}], "[", "n", "]"}]}], ")"}]}]], 
     RowBox[{
      RowBox[{
       RowBox[{"n", " ", "x"}], "\[GreaterEqual]", "i"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"n", " ", "x"}]}], "\[GreaterEqual]", "n"}]}]},
    {
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"2", " ", "n"}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i", "-", "n"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"n", " ", 
            RowBox[{"Floor", "[", 
             RowBox[{"n", " ", "x"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", 
              RowBox[{"Floor", "[", 
               RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
           RowBox[{"2", " ", 
            RowBox[{
             RowBox[{"DifferenceRoot", "[", 
              RowBox[{"Function", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"1", "+", "\[FormalN]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "3"}], "-", 
                    RowBox[{"2", " ", "\[FormalN]"}], "+", 
                    RowBox[{"2", " ", "n"}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"\[FormalY]", "[", 
                    RowBox[{"2", "+", "\[FormalN]"}], "]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"2", "+", "\[FormalN]", "-", "n", "+", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], ")"}]}]}], "\[Equal]", 
                   "0"}], ",", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], 
                  ",", 
                  RowBox[{
                   RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", 
                   FractionBox["1", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"n", " ", "x"}], "]"}]}], "n"]}]]}]}], "}"}]}], 
               "]"}], "]"}], "[", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "n", "-", 
              RowBox[{"Floor", "[", 
               RowBox[{"n", " ", "x"}], "]"}]}], "]"}]}]}], ")"}]}], 
        ")"}]}]}], 
     RowBox[{
      RowBox[{
       RowBox[{"n", " ", "x"}], "\[GreaterEqual]", "i"}], "&&", 
      RowBox[{
       RowBox[{"1", "+", 
        RowBox[{"n", " ", "x"}]}], "<", "n"}]}]},
    {"0", 
     TagBox["True",
      "PiecewiseDefault",
      AutoDelete->False,
      DeletionWarning->True]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxItemSize->{
    "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.84]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}]}]], "Output",
 CellChangeTimes->{3.579353436854263*^9, 3.579353629486229*^9}]
}, Open  ]],

Cell["So, what does it look like?", "Text",
 CellChangeTimes->{{3.579353446823214*^9, 3.579353452121093*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"postmx", "[", 
    RowBox[{
     RowBox[{"95", "/", "100"}], ",", "i", ",", "3"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579353520077201*^9, 3.579353577713614*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQbVJQxcrA8MGeAQqUzsxTSQtA8E9z1bb2L0fwf/I/
sfr0A8EXftpnt8fjI5z/Ys7nZs/5CL6T9ENZgQ8IfnhNx8+Z7p/g/Mi1xcrd
cxH8B0ueL9z6FsFXqhdNWuzyGc5/KX+m7NRUBH/OhGM3I54i+FxPqupWWX+B
8//+3V5u2oPgr/61blPzYwTf7fhLa0vLr3B+atRaSY1OBN/hgpblrfsI/nwe
w7VHDb7B+bu0PyaVdCD4B6W+pnXdQ/B9LzTuv6n3Hc6fknEi8k0rgp9wfLqH
xXUEX+LbqtbXaj/g/G72CpakWgS/+f7Z64LnEHzzWXfftKj+hPOvqxgGxFcj
+H9KeTmKTyP4d1YuZvRS+gXnOy455B9VjOBPylN9c/EQgj9P2ukUj+RvOF+/
//mfhkwEv/qpW+GOAwi+D5O+labQH0R8vI8KZExC8Jv3OayaswPBbwxZH17I
+RfOtzp73Y0zEcG/L+rSwrEdwedUtRRzZP8H578Te/HSJg7BjzgvL1S0HsFf
Hz67g+8/gn/w0AWHvND/CPVf+nzZlyH4Z/pbf/3/j+ADAMxC0zc=
   "], {}],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1., 0},
  PlotRange->{{1, 2}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.579353578350878*^9, 3.579353634402495*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postmx", "[", 
  RowBox[{
   RowBox[{"95", "/", "100"}], ",", "1", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.57935358282789*^9, 3.579353591367676*^9}, {
  3.579353681632835*^9, 3.579353693675391*^9}, {3.579353805248949*^9, 
  3.579353822380168*^9}, {3.579353857228407*^9, 3.579353857493284*^9}}],

Cell[BoxData[
 RowBox[{"5", "/", 
  RowBox[{"(", 
   RowBox[{"4", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"DifferenceRoot", "[", 
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\[FormalY]", ",", "\[FormalN]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "5"}], "+", "\[FormalN]"}], ")"}], " ", 
               RowBox[{"\[FormalY]", "[", "\[FormalN]", "]"}]}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"9", "-", 
                 RowBox[{"2", " ", "\[FormalN]"}]}], ")"}], " ", 
               RowBox[{"\[FormalY]", "[", 
                RowBox[{"1", "+", "\[FormalN]"}], "]"}]}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "4"}], "+", "\[FormalN]"}], ")"}], " ", 
               RowBox[{"\[FormalY]", "[", 
                RowBox[{"2", "+", "\[FormalN]"}], "]"}]}]}], "\[Equal]", 
             "0"}], ",", 
            RowBox[{
             RowBox[{"\[FormalY]", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
            RowBox[{
             RowBox[{"\[FormalY]", "[", "1", "]"}], "\[Equal]", "1"}]}], 
           "}"}]}], "]"}], "]"}], "[", "5", "]"}]}], ")"}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{
  3.579353591847624*^9, 3.579353640056309*^9, {3.579353682303628*^9, 
   3.579353694271133*^9}, {3.579353812048308*^9, 3.579353823988586*^9}, 
   3.579353858292466*^9}]
}, Open  ]],

Cell["\<\
Seems like there's a problem dealing with the \"simplification\" into \
DifferenceRoot factors. Try just a naive formulation for plotting\
\>", "Text",
 CellChangeTimes->{{3.579354080154258*^9, 3.579354129457947*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"n", "/", 
         RowBox[{"(", 
          RowBox[{"2", "*", "i"}], ")"}]}], ",", " ", 
        RowBox[{"Inequality", "[", 
         RowBox[{
         "0", ",", " ", "LessEqual", ",", " ", "x", ",", " ", "Less", ",", 
          " ", 
          RowBox[{"i", "/", "n"}]}], "]"}]}], "}"}], ",", " ", "\n", "   ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{"n", "/", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"2", "*", "i"}], " ", "-", " ", 
             RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}], ",", " ", 
        RowBox[{
         RowBox[{"i", "/", "n"}], " ", "<=", " ", "x", " ", "<=", " ", 
         "1"}]}], "}"}]}], "}"}], ",", " ", "0"}], "]"}], "/", "\n", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], " ", "+", " ", "n"}], ")"}], "*", "\n", "  ", 
    RowBox[{
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"Piecewise", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"n", "/", 
              RowBox[{"(", 
               RowBox[{"2", "*", "j"}], ")"}]}], ",", " ", 
             RowBox[{"Inequality", "[", 
              RowBox[{
              "0", ",", " ", "LessEqual", ",", " ", "x", ",", " ", "Less", 
               ",", " ", "\n", "        ", 
               RowBox[{"j", "/", "n"}]}], "]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "/", 
              RowBox[{"(", 
               RowBox[{"2", "*", 
                RowBox[{"(", 
                 RowBox[{"1", " ", "-", " ", 
                  RowBox[{"j", "/", "n"}]}], ")"}]}], ")"}]}], ",", " ", 
             RowBox[{
              RowBox[{"j", "/", "n"}], " ", "<=", " ", "x", " ", "<=", " ", 
              "1"}]}], "}"}]}], "}"}], ",", " ", "0"}], "]"}], ",", " ", "\n",
        "   ", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", "1", ",", " ", 
         RowBox[{
          RowBox[{"-", "1"}], " ", "+", " ", "n"}]}], "}"}]}], "]"}], "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], " ", "+", " ", "n"}], ")"}]}]}], ")"}]}]], "Input",\

 CellChangeTimes->{{3.579354139679261*^9, 3.579354232289122*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[Piecewise]", GridBox[{
     {
      FractionBox["n", 
       RowBox[{"2", " ", "i"}]], 
      RowBox[{"0", "\[LessEqual]", "x", "<", 
       FractionBox["i", "n"]}]},
     {
      RowBox[{"-", 
       FractionBox["n", 
        RowBox[{
         RowBox[{"2", " ", "i"}], "-", 
         RowBox[{"2", " ", "n"}]}]]}], 
      RowBox[{
       FractionBox["i", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
     {"0", 
      TagBox["True",
       "PiecewiseDefault",
       AutoDelete->False,
       DeletionWarning->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.84]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}]}], 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"j", "=", "1"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "n"}]], 
   RowBox[{"\[Piecewise]", GridBox[{
      {
       FractionBox["n", 
        RowBox[{"2", " ", "j"}]], 
       RowBox[{"0", "\[LessEqual]", "x", "<", 
        FractionBox["j", "n"]}]},
      {
       FractionBox["1", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           FractionBox["j", "n"]}], ")"}]}]], 
       RowBox[{
        FractionBox["j", "n"], "\[LessEqual]", "x", "\[LessEqual]", "1"}]},
      {"0", 
       TagBox["True",
        "PiecewiseDefault",
        AutoDelete->False,
        DeletionWarning->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.84]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}]}]]], "Output",
 CellChangeTimes->{3.579354233270644*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"postmxUnsimplified", "[", 
   RowBox[{"x_", ",", "i_", ",", "n_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Piecewise", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"n", "/", 
          RowBox[{"(", 
           RowBox[{"2", "*", "i"}], ")"}]}], ",", 
         RowBox[{"Inequality", "[", 
          RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
           RowBox[{"i", "/", "n"}]}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"n", "/", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", "*", "i"}], "-", 
              RowBox[{"2", "*", "n"}]}], ")"}]}], ")"}]}], ",", 
         RowBox[{
          RowBox[{"i", "/", "n"}], "\[LessEqual]", "x", "\[LessEqual]", 
          "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], "/", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"n", "/", 
            RowBox[{"(", 
             RowBox[{"2", "*", "j"}], ")"}]}], ",", 
           RowBox[{"Inequality", "[", 
            RowBox[{"0", ",", "LessEqual", ",", "x", ",", "Less", ",", 
             RowBox[{"j", "/", "n"}]}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{"2", "*", 
              RowBox[{"(", 
               RowBox[{"1", "-", 
                RowBox[{"j", "/", "n"}]}], ")"}]}], ")"}]}], ",", 
           RowBox[{
            RowBox[{"j", "/", "n"}], "\[LessEqual]", "x", "\[LessEqual]", 
            "1"}]}], "}"}]}], "}"}], ",", "0"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "n"}]}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{3.579354264380801*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"postmxUnsimplified", "[", 
  RowBox[{
   RowBox[{"95", "/", "100"}], ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.579354283628066*^9, 3.579354330411703*^9}}],

Cell[BoxData[
 FractionBox["2", "3"]], "Output",
 CellChangeTimes->{{3.579354293188075*^9, 3.579354331023861*^9}}]
}, Open  ]],

Cell["\<\
Plot probability of a model with a bin boundary at i/n given an observation \
of 0.8\
\>", "Text",
 CellChangeTimes->{{3.579354820122207*^9, 3.579354853817504*^9}, {
  3.579354932169591*^9, 3.579354933281626*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "800"}], "}"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"postmxUnsimplified", "[", 
      RowBox[{
       RowBox[{"80", "/", "100"}], ",", "i", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579354370817647*^9, 3.5793544038209*^9}, {
  3.579354449125216*^9, 3.579354477344835*^9}, {3.579354520727313*^9, 
  3.579354598161796*^9}, {3.579354748347781*^9, 3.579354753215639*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxljH8403kcwCWeWFeRlB6krpznEY/h6rlS3m/MsKRhsZb51czmq0w/MHNh
nycVinIhSXKReUotdUmZ2lWaFEoUjnJ1RJZLkS5c9/f98Xpez+uf14rIuIAo
XR0dHd9v/OcTvytMjHVGof1vqXE+nwmPLSeiM4fGYO3tHQ7BYUwwSGLcmv1s
Ak4yHuSZRTAhxa5PMK6YAVaHB71YwAQli9Y9opiDXgs7b1RQTGh+YZX/VmGC
HzTzl2mkTNh2tmrPgGIFLrF9WeqRz4Tl+pLIvxR0FLypDDBp/dYbe42yniCC
5u0umb8XuPkVFJvd9kZZnsGZky1esKFW327YnY3DwprODLY3RGV7llskc/DE
4VwPZb83PH949KO3mIs9jayYuHgf4D7m9zVeCMEmvcDXB01YoLTTj3fYFY7G
51auul7Hgm6bcP7niEhcHb6oRBC6CbL19hcMpQrwUY7x4XEzX3iVX7qhSypE
3fMfrLe2+kLKiHLkmViETkYNptFHNkOJdca7LyQGbV96hz6J8gOBSViQZXIs
rurKkbi4bAFl/5d54qJdyIqvmlhixobvb6pF4VwJPsu1VnYXsKE+jKaT5R+P
y9LVdfzF/mCxz9m1KWw3BgS7+kZU+sPmN72OBiF78Phdx72qdQHgfp9q5u3c
i9dORbyj9wfANsPR2BrpPhQaZtd35AWCx/lxNW1vAroxntbe8eTA6LXehgSS
iLN1Z5mlmW6FOCuf3a/SktBTlf7TgoGtYDxcZRsglWLNXefqd3eDINFGe7gz
IxnD49qKQpqC4ZKqpmS7XIYdRffl4nYuVN3n8T4eT8FyJSOabcSDB/RJ87yS
nzEmp0WeI9wOtZ+W5tEL96NVoyxTrzEEYldbKPsrUpHVd+bcL3GhMMlnqzX+
aejVukbtYxoOfsHzHcofpaGquyyNbRAB+oYb39M46ahqKDescYoE60E7mqQt
HW1TAyVxkh1QkXokKWybHGula2wapgRwjHHJze+5HDtrMri/VgtBVNdngF1y
dP26dqrlmhCQbtTq2CPHMKsf7WfVC2HUPD7U9KUcs9oEGP9QCOwxJ1nPgBwr
1+lVHxoUglHZb1djJuTYMN6VVbgyGnJm6m0OLia4wpxcCTkdDUfqmufd5hB0
t6CTo6UiYI6xpruDCEYVZGfdVIhAx06jneASnIwaiX1/RQS7T99rceATXLw5
5QV1TwTcNNWxM1EE8y+edK4dEsEq5mXT1ASCSprhq/K1YrjVlmfpWkiwRasb
tKBdDAm0hfN5RQQv7c/1sekVg4NH7vS+YoKaz5qVXoNiKLua3XexlGDSRamy
5KsYDhUcOGupIBibeXxdtXUMcPiJ1lM3CG7Y4h8bLI2B4UGe/a1uguU77y1Z
akMB7weG+dU/CGoPdLDkjhQ07bA3vNBHcE2oOmXMhYLK3pnXp/4keD19ma6W
TYGg/VyxbJjg+ufXCxkyCp4aH83cM0IwGb57oD1AgfuWxCTqPcGpkFNuZ3Mp
WN7kw9k+9u3f5LjeqoKCnDnO7oGfCNpPq5uHLlMwzbCgb5ogeGiwrFV1k4Ke
Bu1cl38Ifr0xl5PWRsGmqc5JpymCEpOigZ09FNStvzNgO0NwKVO+SDDw//4X
Mes00w==
      "]], LineBox[CompressedData["
1:eJwBMQPO/CFib1JlAgAAADIAAAACAAAAmLWTwxoDhECGxU9qtOdLPwfzfLES
BYRApc5bAPbkSz92MGafCgeEQNbseyA44ks/Vas4e/oKhEC0rFX+vdxLP8To
IWnyDIRAcxi+uwHaSz80JgtX6g6EQFctmAJG10s/EqHdMtoShEDTlf8r0NFL
P86Wguq5GoRA6a4y6erGSz891GvYsRyEQMdBv+0yxEs/rBFVxqkehEASn3t6
e8FLP4qMJ6KZIoRARvTjKw68Sz9HgsxZeSqEQLkRGOo5sUs/wG0WyTg6hEA9
OmmxqptLP7JEqqe3WYRALo+sWfBwSz8CReG+2VuEQKpNYkkQbks/U0UY1vtd
hEBdQUfTMGtLP/RFhgRAYoRAaijdtHNlSz83R2JhyGqEQNUB8qkAWks/vEka
G9l7hEBsOsoxN0NLP8ZOio76nYRAC3WZbBUWSz/bWGp1PeKEQGomW3GMvUo/
FR4mRkZohUCNLl9xHxZKP7gQo3FO5YVAVVAlIimBST+9u5Dw4GyGQNE7qRP5
5kg/K5Q/ynLrhkAPfyiFdF1IP6od6qaHZ4dAc56a2kfcRz+LXwXXJu6HQL59
eDMNVkc/1c7hYcVriECF7+g4A95GP0YgOEz2bYhAg/+gLfbbRj+4cY42J3CI
QI40f4Dp2UY/mhQ7C4l0iECC1EhA0dVGP15alLRMfYhA5FVOJaXNRj/o5UYH
1I6IQMw7K29evUY/+vyrrOKxiEC3OkdUFp1GP2tOApcTtIhAh1hl3RSbRj/c
n1iBRLaIQL3OkMETmUY/vkIFVqa6iED19K6aEpVGP4OIXv9pw4hAuFxkjRSN
Rj8MFBFS8dSIQNUtsV8pfUY/fWVnPCLXiECpLV6OLXtGP+62vSZT2YhAfiOZ
FjJ5Rj/QWWr7tN2IQKw/WjM8dUY/lZ/DpHjmiEA6MnSbVG1GPwbxGY+p6IhA
lJ/7k1trRj94QnB52uqIQCl4VOViaUY/WuUcTjzviEDcwhyScmVGP8s2czht
8YhAfHVd7XpjRj88iMkinvOIQFEUEqGDYUY/rdkfDc/1iEAgVCOtjF9GPx4r
dvf/94hA1PF5EZZdRj8Wb2lR
      "]]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  ImageSize->{681., Automatic},
  PlotRange->{{0, 799}, {0, 0.003406234234781602}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{
  3.579354404583094*^9, {3.579354469488783*^9, 3.579354478101332*^9}, {
   3.579354534993599*^9, 3.579354550805382*^9}, 3.579354593153077*^9, 
   3.579354651432444*^9, 3.579354756505355*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "800"}], "}"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"postmxUnsimplified", "[", 
      RowBox[{
       RowBox[{"20", "/", "100"}], ",", "i", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579354370817647*^9, 3.5793544038209*^9}, {
  3.579354449125216*^9, 3.579354477344835*^9}, {3.579354520727313*^9, 
  3.579354598161796*^9}, {3.579354748347781*^9, 3.579354753215639*^9}, {
  3.579358689730595*^9, 3.579358689873797*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxlj2tQTHEcQLe0lRgibYVUyA7Wo/X8IL8fcW33T5Nk2m3C3XtLIrubFLaE
bSixeSYGu5KwyTvZMR7bYDJJCJWpsaXHlRBK7ZSRfPbhzJnz8fix6rAYe4FA
EDDAP+c8NrmNEHyHzSFy4+J4Ciq9e2KzPnfCFM2XJgcVBc7bl9wf9K4H7u6d
rC5TU5AqsUZ3m/rh0bhGxYpECm7SLnVfTU4onuGli9JSUPHe50SbyQ2NECHJ
zKRAkVeYyJv80HQoaa17AQW+Qg3bapqJt0tC/7hYBzrwg+uBKsSWq7zdM2YZ
LArJPeNpkeELYe/3+dZlsMAslLQvDkUqJNKiZWQQc3BpwVhtOC5MjB8p7JRB
7fPsLlmcHBM8NQ2+umCQV66xlhVFoZsuuDh/Ig03JcKEGSoGnfjCC1hBg+Fk
yfE/SQzmmg98K62kIcthg/nFTgarj0XdCHpNQ3R9ef8mPYMKj9VnZNU0iA4e
zr5cxOD55jAveQMNqe1jivzaGbz0Zt5TfRcNVKGUd9ugxDL3vrfh3gSkomaX
JrUS554dsq7Fh4CPLmf6rW1KXDspMiZ5PAGbwpYUmqHEvriF/CkxgSuDHzro
Lypx+nv7J60BBFzjgsc7tijxwdlzgpMUgToxs8amZHG3v79OoSEQYpRN0mxk
cfAcp1xpIgGLKKCD38IiLQwLGppM4KLQfk9NOosi8we2NIXAlqb8CyUFLCZH
2z+WZhBwNvLtW9tYLL06IUBqIJAielX85QeLU0bUVY3KI/BNb94Z3cviPnXP
MFs+gTep+4eHD+FQ88k3wmIiYIicOmvWNA5bn2dI5HcIzBaptT80HNaoNKKC
CgKX9BFBcTs4tDsRkXTkJYHRQhzauIfD9KnFCWlVBPo7XQ2vjnK46+jxoMha
AuWvb5VeL+bQIy12pVczgcDg01niBxyW3FblufAEbljSVxmfchgblXL4dxuB
nOvhLdnVHEpOq5Z/7Bj4EQdec7RyeGrmPa/qnwS0Bv9taTyH9fPe7Sv/ReCr
+zDs7uDQc/3PY49sBBh9t7PKxqF175JFd/r+77/b/WJa
      "]], 
     LineBox[CompressedData["
1:eJwVj3s0lHkcxp1iC6lEpyNSKZTJiW2PdTT1/a74NcpMSBqTSF4a846MS2PI
fTReR4Uo3Q46uYQchNbqSnfr1p5UypZmMw0al82ldLH2j+c8fz2f53lWHwz3
Cp6jpaXlPqv/ncQ/Or9fl8Itz22DXMdoaPxUHdRtSKHPwGP20X4aWPTZDdzl
FF5ds0TnRg8NBcrkifsWFKYWpVRrd9CwWBB6m82iMEZRvJHfQsMkx8ljA5vC
Iv6lJLNKGkLvWpgUu1A4At8dThTS0PurvtKUO5u3W5w7L4+GZqveKH3/WX7S
Vl2TBBqOayfmDyZROKPDvVS1i4buk0t8/kqncOLAjqT1rjSYm5QZN2VRuHOb
f1SVEw21tl05GYUUlubly9otaXjuY3F83R0KK7v1J8XfRLC6/GFyyA8KHWyg
b3WlCK5zF4mU8cEIUktn64UieHemiP0qNgTtPmSGq9RCiNfUarpDhSh7bcPt
Hg6BAkvFx2m5CJcZ8DeFrAgGyijAZ0WcGKVtkRrj8iCoVU4bhJ4/jAzVmy7c
eRAsbrQID/AlOBVl3BCwKhBuBehpZXpG4Lrai4rP6w+A2ZFNW1sDIhEivlZJ
Zf7A7X9jP98vCh2CVWeihvzA+SHdJgiLRjsP945E4T7w1R0V18UeQU1rvYH2
EgFsK5ts0YuW4sZmeQl/hA+jDW/uSOUxaD+nnZPWuRfCV7pFvkuWYcfFctW2
Hh8wHKqw8YqNxSuPF2SHTe+BGOvhjBeKOKSeGhusNN0D1bfrCvalHsUhp16p
lcAbKh4KBOOn4rG3j3P6e/5ueGz3xTS3IAHFrWuvjKu8oHHCJNfubCLWyF5K
b7p7gZhlVqssTcKmH6a8zTWe8GW/R8sTz2S0E2a1uFl7Am/vwo0l7cnIsu7L
7bniATq6W0b0vFNw2Nwx/7K1B1iqN+hJnqbgqeXnlqroXVCadEIW4JuKrvak
0lzOgxyX6t94L1NRPhX76FwDF040tRnc9ZYjK64riD/pDkNqge3N13Jshrm/
xNm7wzWXirLffdOwM/kP4VjqTnjNFx3ZokxDyZrm9mWdO2CpuRUhwmOYVVEz
zrbeAY2LL0fw+o/hNZvsgfc5bnDrRvZon1iB5+KP1u6a4gArD1ojhxRYXO82
IAnjQMWKwdL0Q+nYZRSSODK0HTIDdF5YDadjDPffB37B26G7413gA5pBy0Cp
rraGAFnl6D4ZxuC4S13JxCCBxoiTDtYSBh2NvIs+qAmcN96snxHNoPjTvpq2
9wT8BXn17gkMDvnddbzQS0DdT+Y9O8mgLef5M7c2AtPfKq8qaxlMXPg282Ml
AZo3J9+onsG3o8vvD5QT6C3kp7hcZ1ClLtz7oYzAbWcdn9ImBr/rrc3+5zIB
OeM/E3qPwXnZ4S59FwgsMDb0GnvG4KLQuSWDmQQSgg+xLV4wqLiQqtBkEBi+
fstqdw+DDcdam0fTCXT5ir7W/81gfs4e189yAqcL7xXLVLP97c0J+vEEfhoz
ySpXM1j3ZMTGMI6AzFkS+2qQwXvS9fbLZAQE/WY89giDc2cCOWujCfzpEOUY
Nja755u9LyuSAJt5YlHwafa/prrlZwmBqp6VBp0TDNrE3U9zOkzAnCWdmpli
MIzHL3QWE/gPwZMz/w==
      "]]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 799}, {0, 0.0034117587635255006`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.579358692536752*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "800"}], "}"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"postmxUnsimplified", "[", 
      RowBox[{
       RowBox[{"50", "/", "100"}], ",", "i", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579354370817647*^9, 3.5793544038209*^9}, {
  3.579354449125216*^9, 3.579354477344835*^9}, {3.579354520727313*^9, 
  3.579354598161796*^9}, {3.579354748347781*^9, 3.579354753215639*^9}, {
  3.579358689730595*^9, 3.579358709681479*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxljX881Hccxy8iPx+77qbxiDir2TyuxcNDtXG930iT+p4jdNz32yHKj/uR
H/E5ExVJ2BJS24RG05XFPcxY25iz2R7xYHpMxJAthO6Rjd2ZB2v29/54PV6P
1+P5eLyevBhlSJwRi8XyWs9/fbVLzd3MWoCY1RtqfiUFfQ6Gk4VziyBw3uCT
U0WBGdn/jfGgAYyw2fNhDQVZ/IlYvfolSA7Te1S3KNAEWozq1JuQXeRa1XOP
gt7HjhWzai4O59hYn++kIOLmndQZNQ9njuZZ7Z6hwMnkVMy02g09ut2LOzyE
4CQYZxc9RHzlYqQfZ0IIPsJrlbbfBWBR0ojYIj8IvNtM+PO+IpTLXt/F2Iog
rtj/ln1mKO4bf7twm0oEwz0fLgUkiPHc5z8PfTIkAnEfM/FjA42iT4M1z3yD
QcM3Sd6liEKZbdN8mSYYRl2imOXoGJyv7/j1uUMIFG/MvjaXE4u/HBt6U/5R
CExW1HiPqE5gY+mwfT/nCGTpNLrBhHicO2DKNVw+AlU78p+v5CaiC2+66h3H
UIjlSsMdMmU4YbAKyW4IBc1vK9YJHyuwRDB6vU4YBs5fa+OjxKfwUbOb9oEh
DL6VWrCKgpPx7tCY2XvV4WB/2mPfA2kKlqwOCCuijgI1Ne5uRqeiaSd3vzlP
DL7dSb2R8jQ8aONQa8mKgAjzBVmz6jT2vgoB3vMR4Fev11qkpeOLvLbsnx5F
wkLLeEd6bgYe86o9NDArgQrp7UTZxQz86uaS+z86CXibp9jEFGWgWbNAzP9T
AgW0SRJVts7d9CeKVyTgZMzfsr02A8sMfZUSSxpEIpVsQJuB96ebZnfvpKFp
jmvHNyLYxlneMpVMQ3j5WBfPlOD8SYWdVzoNq4J6xWsWBKXZZxWlmTQEXHn3
eyMOwXL5U45/Lg1P9kQrH/MI6q60ht0vp4F94d4P+T4EjXNcqKlWGpSOB1Mm
zxK0jNsa6/OShqrPXD278ggmP9nr12DMQO9Oq+W6AoIRTXbv25ox4Ordfya+
hKCXptKwxGbgqTjs0otqglr2Bs92ZwbEpdE1a+0Ez1sHUqUHGMi38zs+oSUY
NXvcmHuIgZaa7W90dhM8owu0vxrEAKdx5m5eH0GXdLbqhnjd1yNvtRwneGc2
Z6E9kYGVkKBM3STBtdum/YFKBt4acRP0TxFsWcyzGU5d/3+2qC3VEfxgeeOY
PouBL5SDF9L+IBhqHy4tOMfA7/ovA8L/IiivFhzemr/uy75uufdvgtu8Yusa
CxlAk8w+uzWCCZtT4/0v/3//Cwqcpsg=
      "]], LineBox[CompressedData["
1:eJwVjXkwnHcch0VtiyBJ6TiiGyShQYZppoayvt/KZjOm3rfsOpc322SiNGwc
TRqvI277I2gTohnFplHraqOOUVmJpFUSQlpTjash1LGlbASRFR3VP575/PPM
57E+FSMM19bS0vLc5v8tN+b5P9FhsUlZtPY8n4G+Uq7pXV0WvS4N/80QBjas
tUavG7DYM9fg3ZvJwDu1k2UZu1kU/hVr4prKQJBzp+S0CYuZmnjv6kQGWjxz
ZuwsWbwgLVXnxjEw1RVRo2fFYllvrOTfaAb2UN5RC/tZlOG8S3wkA2dDDZZv
OrA4Ou1o8bFk+z/hyuZ77iy2JwzKfahtf6HOXsiymLtRYzzGYUD7pR2SFBZ/
n5wt2bWDgVWdqoCOdBaddiQ0HNsMg2GuPM0+j8W+6bjy1udhUCEseqz9NYtu
r60E1k+Egb0yKaP5NotoSRVN3AoDfq7PqIlWIrJsy7Q0Jgwu2C3lDuUkou6j
TjPNeCg0dDRXhGYk4S+rKg/bp2Ko6xaLV68kY6G0O/+niRB44KzZW1SRgvuv
87Y0a8HQtmZe5HztIsZwXnwosg+GaAfLxilFKsq9W61rQoNAw/j+3OOXhnMH
jtcOKAKBDjJyqupPQ1Xj4OXRrQDg6PHU+v7p+EOO4ND7AQFwUOWoHzuQjqbT
Vr1md/1BkVqQIAnJwKxKo1ufHPSHy/yGD+jhDFzPpkQt5SIoUPYZ3vPPxAcO
45PR+0SwoBIfvj2Wicklut2x5UJo4tdV/xiShfcXj1UfsRfCWPCZ87ypLDR7
Oa53rtkP3uLaCgSR2diqdFLL+X7Qtrsyjp7Jxl1HDzfqTPnCnfYvnz2NzsFD
vIsLK0m+4FAMvfELOeiHTTv/sfKFurfnFbIIGc7xbYwHSz6CSxLOkO2SDFeq
p5e4MzT88WjyZFcUwcS8ozZHBDQIrFx9XkgJ1rilc5KP0tAWV+hiF0uwQO90
eBfSUGrivjP3HMFrukWlIe40nBAXt/ikEJQaqR/LnGlQzQjeGCwkaNGQl/jK
goaNzfrvphq3/XdNZZ7PKIiitb8ybiGIOeqOkkUK/pQHp/NbCfafFMWo5yno
8OIEKpTbvWye240ZCjLJia1POwne6Lc8azhGgYHJHuHyIEHJgAtudFGQEh7h
YTNEcO/GyHJIJwVLrXdsRSMEM8wNLZT3KPgt5MyrlicEm8er+pPaKbgq7/w2
YZagEePSodNIwevL5l/Uqggu3l+0irxJQYJXLDs6TzAp313zsJ4C8Ywl7aEm
GHSAq39VQcFDl89cpcsElcbnvTYqKfAgPTYVKwSXimfVkm8o+H5kn+GvawRt
B0RvdldQwHX4fH1rneCpzfJaxzIK/gOPl9EG
      "]]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  PlotRange->{{0, 799}, {0, 0.0018041780293041826`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.579358712649961*^9}]
}, Open  ]],

Cell["What does the posterior look like for different observations", "Text",
 CellChangeTimes->{{3.579355050493646*^9, 3.57935507374046*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "800"}], "}"}], ",", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"postmxUnsimplified", "[", 
      RowBox[{"x", ",", "i", ",", "n"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"n", "-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579355076065241*^9, 3.57935511718009*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
Bn9L/Ul4Bm9N/Ux4Bof/I9N/R1aY3V/54rDelbaqzcxb6Sufa+otUAYul5LC
8t9qHS/2UcGfaaZeyQ47KrXIMbtYp9kAvo84v9ESk4yAIb34/OA7K4bnPOnf
m+MUj8d5cP5hU30u7oy05PPoPR2vp1KX8N8Fx7i66vPlrW24xHHiuvB3cX5w
/F3EI3KcX5dP9Ovwd3E8vG1r12B7VFg7Pj/ix3XhPDg/jo+9aVKomb9AGWU5
KSsrTP67c9c7mleebaJ8cGOVWQeVWov7LLLUHApLl852r2b++X1fPo/Tq+rj
jVRvmcMDztNo253F933N+Ty4L5Vrb/u+4ILsB/HgeJwf3nA8ziOOH/xdxBm0
6/ggv4lynIin/aa4I7E58vmbL97aQW30n7z0bMbOoO1K5rjv2frvX3R8aMF/
F3HiPIgfHsS/K95fnKftqvz94flZWn8X17WgXbt9akU7Ph7nAcffFT3Dg+gz
1DHvqGLjYK3fKfKhyBsvL95Z7qkN33dw9eeY1xrHWK3fNfKGyI/bur7QbIpj
P6IHjHN4Rpz4nYpxgnfZr04wvj6A44TPY7Zt+tSxt2QujmfEj9+LGD+4GZ0f
8WOc4PyIE/croFp8z9sGwySHFiPOKGq7af1dHC8+p8DxiF+83v7mrsf7HJvH
vFJwqUn0HzY6n4N037Lm1u7ADOYfl5xYMqfucK3jcX6Ty/nlK43NZt5wRmuf
Y4u9tPr8m0fccF53OFCL4+86m0eZmPxxVuu5gJfnh9Lv6y8wn9DrxdmCmtp9
7Nif6SGeucFaHOc5sfXhq2XVrjDHvHb7bpVY71+vmT9RGAQXOWjXyYUZsc52
Odoc5xkzep61ZZ52XV02MWCy+aEi5kNeOe5KrhOjVQfOSJzuYf9Wuz5sVbP9
tb39tesZnD8lfZdN/G2Z1wmNmmny3k/pGGNXcipAHg+NG37vkrIqRNnnL5eO
5ZtdY94nqpx5o8bzlJmnx0w5MVX2oNnvYvqg3Hzl9FqRp893k89ffVyNv2wS
Y5W9M/omVO0m56VTE+/XfN+7m9In6sGpdU/TmI82XxhpGrxA6eNV0PrzBPn3
2+rIN/NPNnHKo09P375dKJ+nLPP8uo4h9lr5eUOHOjWq7NGu3zCv3eqZVuxW
WT5/Rkxrz8XT4nTOj5XmzbC5Gb+XufvOL9FezxcoR7tpClI/yefR2z24yuzt
1ZXj7le7sengRubIk6duOV3b8mYZ87DC3lN6VtDX+v1OGlBXqW/XTStPIo8t
X7G08eQs+fzIz2NWL362f7wcf7Nz8Rd+FmrPvyVhmnXng7TrJcwLaXpDjif/
13UZN+lbNGyzp/JD7wmje4/cwNzeoCAieLilMllxTb9Syj7ma9Ye2pzZKVZp
FrHL/HFF+e8i73U5qmdQPUPm6Y+XJTcqilOWScHDN5TI9yvkzwpTm61zU/qs
dxlZ6nCC+VV1n2ibHW5aedu86W3fOZVVylqzrsz1vJPJfF3L3jFNQhyV1ZUF
fTOCxsv5OU7j4rMrVtmzZIr75gba+Xld7Fa/6LpyPKm7DV3u7dTO5/2utSqK
GxentBy/rcvgIPl45OE2UUrDNLv1zHvGdkj3+OGivNq9V5Fh1ELmUaOOpw7e
66a8Xun6+N0mS5jfWe2wcIyHi3LIzhnS1vqH/8/xr+t6deX5fxuPruvSNU7+
7XyhKy/pmhd05X9deV5XftOV/3XNI7rmI13z2r8dz7ruu675VNf41zWP6/r9
6sp7uvL2v81X/7/ypK68rWu+0JV/dM1TuvKYrvlU1/yra37UNb/rqhN01Ru6
5mVddYuu+kRXHaKr3tCVP3XlSV15VVf+1DWP65ovdM3vuuqKfzsP6pr3/+38
2+tEwOZy41Vav8fYCOcDCtOhWvyQXpaDIncE5/nyn3/H1m02iDmOHzS38tzy
T0ZKxn//jGqP4uNb9nqwOeerLXMcP2Jh66Xbbw6XNq+73VnhNI6P7/rz9LwL
fQcwx/FtHCrU9YrwkhLM39dUnJnIx3fr4WLYWrJgjuNzFq0e18rBQ7JdM7Wy
okB+f+zrr0XvLPJ6M8fxK3Ku3uvu6UrPR6fJx1Of6mhQ3FdNM/m9sqoz19oU
NzLn43GeF9Q/xPHg9VLv3rjxxUGKuFzzvaZvNJ9n4kj/Sj5NujLH8fc636me
52AvJRte/qTpLL+fZt18Ud2cCFPmOP570ovEuAa20pS/z3N0Lh/voto9OtXY
hDmOH/N40cVgC2vJfZZbqcYhho/fPPKpyem8TsxxfLBZrY3l9gyQTM1WvtHc
l99/G51RufW8vA7McXxDp2qrAj0tpRrP77/QhMrvxa3dPa2qsnF75ji+2sev
MaM6K3l8Yv7yH/j9+vzH1jw+xXkN4wo86ViBXruCQB4/4KGNPtaLS/TjcQLe
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
   "], {{
     {EdgeForm[None], GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtmXnAVVMXxu+9++yrhFQajIlISGaSef4MoZKhEkKzSvM8Kc2D5jlCc0qa
pPQ1SSRSSrP6NFCJkhT1/R7P/WO/63f2Pe8Z91rrWeuUeLlhxdczqVRqFH8C
9nP+1ME2S1KpVulUagfcGnsJ8yvhp9nvY35rzNw67JXMr2G+OvOPwoWZfwSb
xh5gfj+jNNtfY6uxz9XwevhF+BT2d8ZaRknmV2GfYf4KeDVcFb4U/gKuAkeO
eRL+jfEZ5z6KnYPNpn2+w2xPZ/siHQebMHcI/ill3oc9O+Xz/sL4mTGf/f7E
zsOW4Vzfwy9xrjaMi+GZ/N9VzK+DazA3N/H1Pootx/xZ8IfsMzvxsZswNwte
Bn+EbcFvx+C7sNfw2wb4ZY5zC7wdrgcvZ792/L4eO4vtZ5jfw/abeha6RngE
fBf8NTwZfgLeBk+Bn4S3w5PgCvBWuCdcVs8JHqjz6d3CH8PPwnvhXvC18GL4
I7gKvBseBN8Kr4SXcE21sWuxMxl94R+wE9nncfbZwvZM+Gk9Z7gs97URrqlj
wz/Ar8A3wlvg2vBN8Fa4DnwzvA2uC09lPAXv4DjXMb8JfpW5dxkPwt+nvU7v
gb+Bh8N3wqvhkfDd8Bp4PPwQvAF+D34Y3giX4Jifw5WZKw4vhyvCfzPGwddi
H2C+APvej23PdiHmR+TW3V69F0Zn5otixzPfES4Mj4E7wUXgcXAH+Bz5lZ4X
/Dp8Et4IN4D/gT+Ab4O/hDfA9eG/4eXwc1qf8Gr4ZfkJ/D1cDz4Bd4XPhSfC
reAz4Clwczgv/D7cAj4dngA3hfPA78Dvw+XgVXA3+Dx4MtwaPhOeBjeBT4PH
wo3le/BIuCWcD54EvwFn4dFwI5hlkRquc/HsamC/YaJhLq4M1fqGW8N5sRMY
5eGvmJ8O3wd/B0d2ngyX0//BE+Fb9CzhT+CH4fPhxfATegbwIvhx3Qf8GVxB
vguvgCvBhxnD4FLYfxjvwNdhM+wzAb4Z/oMxQrEKe4QxHL4Ce4AxAC6BXcSo
BO/iOpdxb530TrAFOc485h/k99mM/8Cb+G0O/Ai8GV4IV4R3wh/C98Pr4Gnw
vYqBcCGOMx9+SGucB34h3IG5hDEJvpX5AvBc+AF4GucuDndkLh/jQ8UZ5s+G
58D3a13AM+C74Z8YPeFzsf9j9ICLYT9lvAQf0v1w3rl6Hhx7G/xfPTN4fXTs
OAKvjo41++F10THrMPxVdFz4Bd4OL4FPwpujz3Ec3gQvgP+Ct8KL5X/wD/An
8DF4AzwPPgpvhOfDf8LHo331XOyX0b79M/NrouPgQfhQ9DrLj/09+j4LYA9H
339B7LHo911UNvodn4P9Ojq2HuA4u+DPtUawPzKWwXKCb6Lj1K/ssxNeAaex
30XH0N+Z3wEvhU8pV0THx9+UZ6LXVhHsiei1eJ7ec9bxrjyczvpdXqzfo33g
Amwm63dZAk6yXgeXwjHr9VdS+2b97i+BT0avmwux2azX1mVw/qzj4DXwqWh/
uwhbMOscfB18Wtb+djlcIOscfC1cOOtcfqPeQ7T/nI8tkrUOuAk+L+s8dytc
LOt8fzN8fta5oRxcPOt8cAd8QdZ54jb4nKxz/w3wuVnn41vgElnnibvgUnA7
5TCe58VZ55I7mb8Crgg/CF+SdX69Gy4NV4Ifgt9S7OA1TmWdH42OC4WxX0Tn
mL0c8+nouFkJrhwdTyvCz0bHxypwleg4WBl+Jjr+Pg1XiI53j8NPRsfNJ+CK
0fH0KfgVuI9iOvxUdAx9Eq4J95Afws9H557n4KrRueR5+KXcPdSA22tdpHxe
BeHT2S6e891q0jdp+1B1eH/aPvQCfCBt/3sR/jVtn6sBH4TzcJxiHKdUzi9f
Yf5I2n78GnwUvoh9bmCf23Ox4VXm/1DsYr4U89fn1n4t5v9M229qw8fgX/lt
HdtnYV9mdNd1cP3VovNoVfhneI1yGPYX+ZtymHyUsVbxDPsqoy9ck/1rwf11
HfBv8FbFP+xexlfKYYoBjJXKJ9iD8lXlOewexRHlMOx+xrfKbYoTWhPKZ9jd
jFXKf9gXo/PlC5zrL/kwXEz/x5gBH0qsA6VLpU/n5rSlNOYT0TmyAlw9WitU
g2tE5/Lq8BFdB1wIexnPs7xieuI13BB+nPl9ilPskwdbMmudupl9trD9GXwi
sY/UYf/HmHuN0U/vUvo0ax1fNrfWlF9m8F6GwVfDi9J+fp3gAti3GTfDK6QJ
5d8pP2etkYXwY/w+h2MVza2ZK/ltuvImfHniPK4YUjJxHleMku4ukrb2viRx
/lUcuxT+IOXYdVnifKd49ViwfniGPwMVe1K+l7cVJ1JeA/Uz1tLPBtcm0vyq
C3qyfWXK76t8Ys2gONCD+dIpP/O32d6SWzP109Z+DXJ1Q8G0a4ceadc1PRnP
MZQKnpf+DNZvtTjOAK39lP16WLC+eg2+NnEuLsPxdwb7gtb/VYnzdWn4j2Bd
pNyUTZyjlZvOh8emnAtmMPLmfLxQYj2jvHAOPDTlOHxBYh2rHDFGzzq3luSX
X+maM15f/XVMrWn2755yDPwn+L0rDyaJtYHyVC/mr0o55hROrIsuzK19XVtZ
7I2JdYtyxE2JdZryyA2JdZHW2/WJdYvyzo7g+CAfLJJYdykH7WG+bsq5++rE
uuVKeCLjeM7XrpOPMX81fEbie5EeOMr/tko515+ZWLMpt66A6/KuVmL7sE+Z
lGNs7+A1r/jzOWMJfAf2hWh9v0W1W7C2VwxvFaz5FcO7KPemHJ8b5tZKI2wX
/q8UPC9tbaa1I9+UlruN/3lO8RtbjPmtzDcLri+UL/oG15vb4X7Bum4b3Dy4
jlDc6J22//RJuxYTq25tG6zhlbOkF+XXylNtgmsE5S89Bx1/sZ4Z/38CHqAa
U9oh5fzSLjg/Kq91lV5IOSaPDa65VHspz8jH74S7SSOkHMf0DLurXsE2wf7F
fFPlF8WCXF5oGVwfKd81y/g5vMc+E4N18uuKB8H6uQF8Wq7uyp9y7Z7k/FH1
v+ZVi6l/oHpe8SR/2vuoDlcvQD0B9R8uTKz5pQ0UjzPMH8SOCK5BavN7nlwP
4Tu2Ryq/YeswXym6dtqkmMT8o8w3VM5N+7xrc+fJk+t3vBus7evrnMF1Tb3E
8UJxoyq2GqMoo3ruGKncex0XXAvUTXwf+XNrS/eq3oeeQ2fpu5T1j86bzV2z
ejQ7sG1yz0zPTvXq9Ny7k16dFlwjSydPDe4nSOvu4MKa6hzYPYy28BmKqYwm
eu7YHxnN4Cx2G+MNOGB3MprrfNJPjHbya+lgrQ/FMWl0Rge9H+w+RnvFQGlo
RhfFHOVOxpuKRdLKjK6KPxnHsI7w2dhdjBZwHuxRRi/FvYxjQz+4OHYQ930c
vk9rkO2+ii3Yk8pn8KXYY4w+WhfY3Yw2cD5pAp7Ju/ANGcfaMYpX8J+M3oq3
0i7Mj4dvVA6GR8NlpCHgkfBV0hzwKMUoOA0Phi+HDzI6w4Ww90b3H+5KrGUU
Tz7mmvuzf03st4nztnxzNtsDMva1uWnrHfnmnLQ1lHTg9LR1pdbGLHhIxrnv
U3hMxrlyKTw449y3AB6XcU5fDg/NOM4vhMdmnGeXac1xPe/BN8kHGA3lb2nn
zMZautgZXOtSxQRsGUY39TMSxwBpod2M6znOl4qZGcce+aF8cDPbjeQD0iPs
8xF4L1wEngrfrnuFF8CPZKw1psF3ZBxXPoUfhQvDU+Dy8EXwLK0BeHTGeXlJ
OvWvkBiEuSxjbaWY/xQ8JrgPtptrbhT9XPbAo4J7aD/BtaPfwY/waNVPzP8P
Hhwc83fC7wX32fbJ99n3AXg95y2XuEehuml8sKZSrXFf4t6map9ZwT0u1Y8f
B/ev/q2pgzW8tOuQ4H7gLua3BWty6eHm0T0F6U9p883M18pYk1bWdXINk4N7
ZarZp6j2SrlOfz+416c6+qPga1atuiD6nUnn/ydxj1f11P2J+7SqVR9K3KdV
/fVw4h6varQHE+sN1XenuIaBcEmt+cQ9ZNWAqzh21ZRr57sT92pU6/03+JrV
E5gd3LtTz+ET6dmU+xLyGfmO6sr5wX1I9QpaR/dopIEXBfcS1XNYGtzbVC9C
Grmmni3P5NPgPqp6DguCe6fqMywM7qmqR7EyuJ5SH+CexP1D1bZa1//k1vY3
wTWUaoS1wbWVaoqvg2su1RG3Je5NqUZeHtyDVT9hSXDvVD2WTcE1l+qdLcG1
leqRZcE9YfUTbk2svVUjd4nuD6oW2Bh8X6qb1gX3c1T7nJV1L0z6s15O30rn
np51v0z6M3/iuDdGeTBxHBuBvSaniyZjb0nsv1OxB4Jjcg/47MTxcCy2bC4O
TMHOjI6n78OLg3uYTeECiePJOGy+xDF2tI4RnTOGw+cl9vH3dF3R+WAYXDqx
v0/SNUbnm7fh0xPH4VHYglrT8DvYKxLHjYnYYonjw7vYucH91TfgGcF9uUbS
U8G56S3FAbgrz+keztEAbglXwS6O7ptLp30W3WeXTquld8o+lbFLo3vuigmL
ovv40nszg/uHjeHX4bZp1yz7g/Njd+ZnRcfcCfBPOi/zXeBdwbmvM/xjcM7t
BO8Nzl9vKkZpvaVdK+0LzuNdma8L12K+gvRg4rg6Xu8hOo/qXetbhvSUdGoJ
xaCUr+G34LzcGz4UnK97wYeD83tf+Aj8FtwP/j04d/dJ/N1E+ut27F/BOXQA
88eCc3d/+HhwLtZ7/Ds4jw9KnFOk6VT/ngrO3YOT1L9NZsWTIYlzqI5dlLWc
SZxntU5OBOf9gXBgDEl5XaUTx/+hWtfR9a3i+a/BebknvDlY87TXmorWLrqe
hdH6XnXBqGgdo+OPjc7rurZx0ZpG1/Z+tG4YqTUbrXelId+J1jq6hg+itYjW
7YRovSJf+DBaW2j9T87FUPnXlOgcJt9ZGZ1jlKeWR38LUT6aFK115MvTo7WI
3vXUaC0iv8ibWJ/o2qZFaxf5xbLobz/KL/OYe559mijmRX9fUX78IvgbRHO4
XXSPtAXcJvq7hb4bto3ui2qfJtG9fmnmN6K/eUjnN43ufcvv+kZ/F+kGt4ru
lStWrAn+VtISbhndT9f1tIjus8t/+0R/O9E6/y5Yn7SGvw3+5tIKbhb9jUF+
1z66F6RjDo7Wvlrb9aI1kGqBIdF6V2u4U3SPqI18NlpLSc+vDv5eo3tvHP1N
RTVLh+jekc7bMFpLqRboGN1H0rUNiNY9ip/9o3WVfL9f9LcixZ+h0dpa/lU3
Ws+pzzAoWpfLB+tE6zn1GQZG63Kt4WHRWln+2CBaA6mmqB/d61Fd0yu6F6fY
kjfr7yjq28yO1l6KsWdm/Z1MtXbv6O9PijPdo3tlHeEe0X05xaJ8WX+bUc2+
PljX6bkVT6zrlAsuTqzNPtBctJ4Wz4vWbcod86M1n3LN1uDapINiUrTOUzz/
IbgGaQeviv7mJ921IViXtlWcj9aUyl9vRfcSdZye0T1AxdKfg2sWrb2u0b01
HXNF9DdXab/O0b1EHXN7cB2kex8eXT8ojnWL7lsqboyIrqMU6/4PEW4DTg==

         "]], Polygon3DBox[CompressedData["
1:eJwtmnngTUUfxs+ZmauQRHYRUlkioU2btK+iVRGVtEdFKRWpqLTRQpskSSqU
JRWRpaik1ZISFZESKi1v8j4fz/ljmM+ZueeeO2e+2zO/+hf37HhtyLLsKv2T
9H+9UpY9q/9biPMyWXa2Lu4hfiXPsnM1drq4ivhJcXvxfzHLhop/0fw/xAep
zRefKa6hz18t/khzD+Mzmtten6+q/tO6dobGOoiri0eJO4pv1pydxb31+TPF
f2m8vfhbjS8XnyWuLR4vPkd8priWeJz4bHFHcU3xWPFZ4jPE1cQjxR3Ef4vP
EK8SfyW+Su1D9dvo2hP67nM0Xkf9Cbp2nsb+0LV7xT/oebaIt4kfFv8s/l1c
reTxmuI/1a+qdo+4hnir+mV0vyfEvxfjR7Ae4gvEe2p99hK/KD6Y9Rc3EI8V
HySO4j/1ffeJ14h/Y67uN0V8jHiyuIraHeLKxfqP1fhkcTvx6+Ij1RaJO4vr
6X6HiT8QnyeuI96q+aeJv9HvXaqxNmoLxedqfA++X+Oni1dqfJnGKqvdIi5X
PE8l3pm4bLE+tTR/JKznniSuXvLz19L4X+rvpPEnxX8UnMQjxL8V63Ww2nvi
s8Q19f2HiN8Xny2uJf5D808Vf63nWaKxQ9UWiM/ReG2NHyX+WNxFXF98oHiW
uL24mrixeKK4rbiceJ6es4d4jvhb9q74MvFc8SrxXPGl4nfFK3k28eXieeLV
4g16niPEi/Q8H7E/xGeL1+ae/5P4EPFC8Yf8XrULxRvFa9Sfwp4Tv677fS6e
Jj5PPEX8pbi+2ijxAeKg5/1Z9ztS/LE+v0hjUzX/XPFkjX/BbxN3wF7Fn4gn
Rz/Pa+LPxN/o8zUK+3hH/LrGzxJP0vin4pJaV/GvGl/L/lXrJt4k/lH9qNYF
exf/oP6uJa/H3+Jf1S+n1p33K96gfkW1K8X/iDepX77k9dwq/ln9f5O/f434
G3GFktf/L/FG9Xcp+f38Kf5F/c2af5x4Se7f86v4aPGnuX/vRnFb8SfixeKg
1hl7FX+vfq52gXiD+Dv1tyev37rc7zsref3X536/a6P3+5fBz/9m9P3eCN5/
ZdUuwb41/yf2t9pF4s3iderPiV6P2cG/7xd931HixRr/WPxu9OdnafxrcR2N
TxLvEv2+W+naTPFpGq8i/i95v/yYe7/ukbyfy0f76/11bbr4BM3fTdyCZxaf
KK4kbi5+Q3y8uKK4tfgd8eniquJm7EHxceJdxfuxx8THiiuIq+v7xrNM+r7t
GmukNkF8lMbLavx3jZ8oXp57/1YTvyROmv+feO+S+VDNL6P5B4jfEp8kriyu
nXy/cpqfifcp+fvaaHwncUPxOPEh4pK4ajJHzd+msd/EJ4iX5baHH8TNWV/x
fPEa8f68D/F7/Pbo/f12cDyYGb3/3wqON29H7/fpwf5xVvT7nSFeIZ4Rbc9v
BvvHjdH++BvxZvF6fd/B4gX6vg/E68QHid8XL2R/J8fb/2n+3+LvxPtyP43P
FX8vbsTziOdhH8n+4F/N/0e8Urwn9q3xWeLdk+NJ0HP8K94iPl68NLd/2VX8
nHibPv8/8fElc0txozJeI9aKNXpa96hTcvxqHPz+Rkbv3yeD12+W7ldR83fT
tanqP1JyLGINWAvugb96IvjeT+v/SzW/u9q7/MbCXp/S9fc1/rhaVfXvwob0
2RHEEPEgYoR4OHtKfLd4i/hRfrN4ID5L/Ji4ivhOfJb4SXFt8RB8ivg5cUPx
I1m2I+EZzZ4UPyrMxX01Zyf1bwjOR9bqWgvsI/r5no/2P89pfAGsto/6j7Hm
mjsmer1HB7/fp7BR9e/HR7Ie2Lj4AXyi+ImSYyMxklh/i1pZ9W8Mzl+G4kPV
748P09jYaPsaExxPTtN37i4eobU8XdxT7XP1j+EZNfee6P1zV7C/HyZuKH5I
3EN8Xcm2yj259/DoePVo8H57PHr/PhK8H/sS0zS/Ez5QYwPE/4mvxQeLrynZ
F+OTnxW/oOd7Xf2j9fnXNHat2mcab6droxiPttfng+2jDzZALkhM0lhv8erc
MY3YNlv3q6d+P81vqP16sbhl5r3UXXNvUFuh/sm6Nk7zH4zey/cF28ec4n0O
Ec8WX6/2leafpGsvau6bJMHEFn6f+o9F2+swzZ+jubeKy4v7Buef/cTlxDcF
558P6bN/Ys9qD6t/NzGIXJo9rf5AYoz6vYgpvB9xSdwbnyG+Xp/Zyl5hD6o/
SONR49fjUzV+m/oX6Xq33O98sMaTrt2g8RXF/iG+99G1GRq7V62M+n107VuN
NSk5vrTnd2j9HiAma7wfMZBckxgmvlG8WnytvqMysVvcU/8P0fjOGr9J/L3G
7y85FyRGEiuPi57P57qr34c8AttjjdRvq/mL1e+gsQb6/gfxgfr8rcRcXRtG
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
iDNQ9M/54m/FB0efH/0fdprwSA==
         "]], Polygon3DBox[CompressedData["
1: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
RfLbRDf7viQvbt9ecR/Y0JjjsKpsOPs/mOZmqg==
         "]]}]}, {}, 
     {GrayLevel[0.82], EdgeForm[None], 
      GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtk0tP01EQxe/tvzZRKgF0oY0YGrBAiyj4gBhaKQXKo6ApjwRIiJq4EjW6
duPerXwPWPog6RcQ/AZa3LuRHQt/JzOL0zOdOXdm7sz951+8bb5JhRAaIAG7
/EzEECbhRTgL7oOldAg/ic9eCCHH/+ugC5zh+wPa4B/4C07Ba5J2w5/RTLuu
Ar8ibx98COrYV+B5+Gva9Dq3kVitbfhhtHyPouVPotVQXum3EquvPG2PS/cb
nAeriyvMeR7le+DaKbjqtnyzfrYMN8FV8BQMgwP8g/A76t2WH94Dq9F6yGZC
eKaZMZ8dOI9/Bf7CvS5it9Jmq2fddTqxfjTnW8THsPvhI2LL8DF8E+7B36tc
Pu8G+EZsAf4Bf0iZv0aeKujEnoFH4RPO3oG/++60w/fE1qLNdiGxOy7CL8ET
34V6u+x5hvzuxWi76YAr+Mvgktvqp8Pj467XOfWWD7brQfcrvpuy3lT3zPek
HdajzWodPCc2ojmj3fc51LzmNdfpDeb8HbSY+ye0v+iln108RlvD9zGxHtTL
gM+5AJcyNi+952LGZjGHfddrafZjrtd+Nr3uRrRd30BfQl/A1gfUoO4UaAXL
U/deNaeKv/+ZaOek0b3K/t7m4Xu+L+2t4HVV/z+BAFcj
         "]], 
        Polygon3DBox[CompressedData["
1:eJwtkssvpEEUxav6+1riGY9ZaENoxEJHmOiNhGm6G6M94i1ELNrSDGFhZWNv
J+b/YDmTkfTSY0FsLJn5F8be77iVfCd16t766p576qbLB8v7CedcFsQgHznX
4J37Bx+Hd8Kb4G2sG+Bb0rlu1jSxl9ggPs/ZCrlb9v3kL4ll2E+CCnyRfH+V
c2Osf9m3cGYaPkt+EP5ArAA/h7/C/4MivMCZRtYU+AnWQCuoAZ/BKqgOsXWw
BB759xPrsrc7c9yxG2qd0OwV8S7wFPSfEduOrLe+KqujehVyJVAPrwN/YutB
vQywf2Yv81R/GpSJ/45Nm2K/Yqutf2e8aejh/52EadR9U956ld+T8M3I/Jbv
3+FzoYbuLiXNY3mdJn9Hbgu+Ah+RN5FpVm39o15UQ/VzoXYe/ubsDSbg2dCb
eix5603vlYEfhvrNzjzRffJTb6UedJ+8+8K+15uHM5F5/xjOSJ+43uUoshnS
LOlN50ExaXlpz3DfV9Zab/o0K6eR1R8idoOW69jmcyKcV7+pMKPyWx51ePtH
2kdj0ztM7B5+zMr34cG4t1nQ/Gqm9yLzfwHeDi7Aj4Rp0pvqbTUzc0G/Zkko
BI3S+g7n10+4
         "]], Polygon3DBox[CompressedData["
1:eJwtkLsOAVEURc8YFF6J0JlGVIxG5Vkg3iJEopIIEiW+Qa/1IXqRKD2CUo3e
L1g3c4s1Z5+dfc69c+Pz9XDlEpEweKDGp2KKVCFoiHTcIi8YoKPQwk95RWxy
FnrAcBr/QuYBBfSHPSHqkb5Bpo+OgQ+a9Gf8MbUHcbIbqs3OETVPpqtnbzDT
Z5zIlejrHucObXhqT91lj04yN8UPsOuKn6DP4G/VPJk22Iazy9I5db8I3hcv
R13Q50znH35QxJvQL9mxQ1vqDeDA/juU0G9yfu2p2ax6N8N5vzL9H57EIm4=

         "]]}]}, {}, {}}, {
     {GrayLevel[0], 
      Line3DBox[{252, 1, 374, 320, 318, 322, 321, 309, 316, 1230, 328, 284, 
       334, 876, 287, 343, 333, 332, 1235, 288, 875, 290, 1352, 860, 292, 294,
        305, 293, 291, 1227, 289, 859, 1225, 304, 286, 285, 1354, 866, 327, 
       340, 342, 341, 283, 335, 869, 312, 228, 252}], 
      Line3DBox[CompressedData["
1:eJwt00lsTHEcwPG/qS52EYkbaZxp3C0Hx46LiNBi2uk2M60OSuzU2lqqiGhE
REjaRqQckIgrCSESqovaD1UcSCwRkUh8/uHw7ec37z/z3r/z3pSm88ubx4UQ
RtRSEMJ0flKreQ47OZ8XuIhXmeQdVvIhHyln/sDt/Ml2Fo4PoYsz2cO5vMUF
vMcb/MwSG3jGIn5nKhHCAKs4yGoOMc1h1vA5axP/9l3HF6xng16aM3zFLF8z
xzds5Fs28R1X2us2110f984d2qldanZs0B53m/dor5YVhpB3vNU8ZG0f9+uA
DuqQNlgftnbYvNbcxsdet/OIjqre8WM8rg6NWD/BTp3UKZ3WGS3Vb3v9ooS5
3Hv7zd+02HyXZbzJUnZzBs+ygG38Ef9Pvueosub7rOBtlvMKF/I857GDs3nN
OT6y2LWnxfvKr7zOqezjlPhscHI8DyexlxPZzQm8zEsqMV9kcXyuWBSvSV9t
OEeXC110+ZD0Z5bZ7QorzKvMDVzNClVqTfyetU4Za0+cIGWuUrWSTpx1PG1+
aq2GtaqL9yGeTznr/dYy5lT8fvjA6xwb1RSfkfg5a/EHk4/3WQPes5Gb1KLN
2qKtWqJf9j2mP/9/X38Bx7VuZQ==
       "]], 
      Line3DBox[{259, 225, 403, 324, 317, 326, 325, 310, 314, 1231, 331, 313, 
       339, 882, 337, 338, 336, 1240, 301, 881, 299, 1353, 864, 297, 295, 306,
        296, 298, 1226, 300, 865, 1228, 307, 302, 303, 1355, 867, 329, 308, 
       330, 311, 862, 315, 239, 259}]}, {
      Line3DBox[{883, 1205, 1215, 1206, 1204, 1236}], 
      Line3DBox[{896, 1197, 1243, 1572, 1216, 1222, 1224}], 
      Line3DBox[{909, 1121, 1379, 908, 1120, 1378, 907, 1119, 1377, 906, 1118,
        1376, 905, 1117, 1375, 904, 1470, 1245, 903, 1469, 1244, 1374, 902, 
       1116, 1373, 901, 1115, 1372, 900, 1114, 1371, 899, 1113, 1370, 898, 
       1112, 1575, 1356}], 
      Line3DBox[{911, 1246, 1471, 910, 1247, 1472, 1218, 1234}], 
      Line3DBox[{923, 1129, 1388, 922, 1128, 1387, 921, 1127, 1386, 920, 1126,
        1385, 919, 1476, 1251, 918, 1475, 1250, 917, 1474, 1249, 1384, 916, 
       1125, 1383, 915, 1124, 1382, 914, 1123, 1381, 913, 1122, 1380, 912, 
       1233}], Line3DBox[{925, 1252, 1477, 924, 1253, 1478, 926, 1254, 1479, 
       1219, 668, 927, 1389, 1130, 928, 1390, 1131, 929, 1391, 1132, 930, 
       1392, 1255, 1480, 931, 1256, 1481, 932, 1257, 1482, 933, 1258, 1483, 
       934, 1393, 1133, 935, 1394, 1134, 936, 1395, 1135, 937}], 
      Line3DBox[{939, 1259, 1484, 938, 1260, 1485, 940, 1261, 1486, 941, 1262,
        1487, 942, 1263, 1488, 943, 1396, 1136, 944, 1397, 1137, 945, 1398, 
       1264, 1489, 946, 1265, 1490, 947, 1266, 1491, 948, 1267, 1492, 949, 
       1268, 1493, 950, 1399, 1138, 951, 1400, 1139, 952}], 
      Line3DBox[{954, 1269, 1494, 953, 1270, 1495, 955, 1271, 1496, 956, 1272,
        1497, 957, 1273, 1498, 958, 1274, 1499, 959, 1401, 1140, 960, 1402, 
       1275, 1500, 961, 1276, 1501, 962, 1277, 1502, 963, 1278, 1503, 964, 
       1279, 1504, 965, 1280, 1505, 966, 1403, 1141, 967}], 
      Line3DBox[{971, 1404, 1142, 969, 1405, 1143, 973, 1406, 1144, 975, 1407,
        1145, 977, 1408, 1146, 979, 1409, 1147, 981, 1410, 1148, 983, 1412, 
       1413, 1149, 985, 1414, 1150, 987, 1415, 1151, 989, 1416, 1152, 991, 
       1417, 1153, 993, 1418, 1154, 995, 1419, 1155, 997}], 
      Line3DBox[{996, 1519, 1294, 994, 1518, 1293, 992, 1517, 1292, 990, 1516,
        1291, 988, 1515, 1290, 986, 1514, 1289, 984, 1513, 1288, 1411, 982, 
       1512, 1287, 980, 1511, 1286, 978, 1510, 1285, 976, 1509, 1284, 974, 
       1508, 1283, 972, 1507, 1282, 968, 1506, 1281, 970}], 
      Line3DBox[{999, 1295, 1520, 998, 1420, 1156, 1000, 1421, 1157, 1001, 
       1422, 1158, 1002, 1423, 1159, 1003, 1424, 1160, 1004, 1425, 1161, 1005,
        1426, 1296, 1521, 1006, 1427, 1162, 1007, 1428, 1163, 1008, 1429, 
       1164, 1009, 1430, 1165, 1010, 1431, 1166, 1011, 1432, 1167, 1012}], 
      Line3DBox[{1014, 1297, 1522, 1013, 1298, 1523, 1015, 1433, 1168, 1016, 
       1434, 1169, 1017, 1435, 1170, 1018, 1436, 1171, 1019, 1437, 1172, 1020,
        1438, 1299, 1524, 1021, 1300, 1525, 1022, 1439, 1173, 1023, 1440, 
       1174, 1024, 1441, 1175, 1025, 1442, 1176, 1026, 1443, 1177, 1027}], 
      Line3DBox[{1029, 1301, 1526, 1028, 1302, 1527, 1030, 1303, 1528, 1031, 
       1444, 1178, 1032, 1445, 1179, 1033, 1446, 1180, 1034, 1447, 1181, 1035,
        1448, 1304, 1529, 1036, 1305, 1530, 1037, 1306, 1531, 1038, 1449, 
       1182, 1039, 1450, 1183, 1040, 1451, 1184, 1041, 1452, 1185, 1042}], 
      Line3DBox[{1044, 1307, 1532, 1043, 1308, 1533, 1045, 1309, 1534, 1046, 
       1310, 1535, 1047, 1453, 1186, 1048, 1454, 1187, 1049, 1455, 1188, 1050,
        1456, 1311, 1536, 1051, 1312, 1537, 1052, 1313, 1538, 1053, 1350, 
       1576, 1054, 1457, 1189, 1055, 1458, 1190, 1056, 1459, 1191, 1057}], 
      Line3DBox[{1059, 1314, 1539, 1058, 1315, 1540, 1060, 1316, 1541, 1061, 
       1317, 1542, 1062, 1318, 1543, 1063, 1460, 1192, 1064, 1461, 1193, 1065,
        1462, 1319, 1544, 1066, 1320, 1545, 1067, 1321, 1546, 1068, 1322, 
       1547, 1220, 1238}], 
      Line3DBox[{1071, 1195, 1464, 1070, 1194, 1463, 1069, 1239}], 
      Line3DBox[{1073, 1324, 1549, 1072, 1325, 1550, 1074, 1326, 1551, 1075, 
       1327, 1552, 1076, 1328, 1553, 1077, 1329, 1554, 1078, 1465, 1196, 1079,
        1466, 1330, 1555, 1080, 1331, 1556, 1081, 1332, 1557, 1082, 1333, 
       1558, 1083, 1351, 1577, 1357}], 
      Line3DBox[{1086, 1200, 1199, 1573, 1085, 1223, 1229}], 
      Line3DBox[{1099, 1207, 1209, 1208, 1201, 1241}], 
      Line3DBox[{1198, 1111, 1369, 1345, 895, 1110, 1368, 894, 1109, 1367, 
       893, 1108, 1366, 892, 1107, 1365, 891, 1106, 1364, 890, 1468, 1242, 
       1363, 889, 1105, 1362, 888, 1104, 1361, 887, 1103, 1360, 886, 1102, 
       1359, 885, 1101, 1358, 884, 1232}], 
      Line3DBox[{1203, 1202, 1559, 1346, 1087, 1334, 1560, 1088, 1335, 1561, 
       1089, 1336, 1562, 1090, 1337, 1563, 1091, 1338, 1564, 1092, 1339, 1565,
        1093, 1467, 1340, 1566, 1094, 1341, 1567, 1095, 1342, 1568, 1096, 
       1343, 1569, 1097, 1344, 1570, 1221, 1237}]}, {
      Line3DBox[{407, 623, 1358, 408, 637, 1575, 873}], 
      Line3DBox[{409, 624, 1359, 410, 638, 1370, 435, 653, 1380, 449, 668, 
       464, 1487, 683, 479, 1497, 698, 494, 1509, 713, 1407, 509, 728, 1422, 
       524, 743, 1434, 539, 758, 1444, 554, 1535, 773, 569, 1542, 787, 583, 
       1552, 802, 597, 1562, 814, 610}], 
      Line3DBox[{411, 625, 1360, 412, 639, 1371, 436, 654, 1381, 450, 669, 
       1389, 465, 1488, 684, 480, 1498, 699, 495, 1510, 714, 1408, 510, 729, 
       1423, 525, 744, 1435, 540, 759, 1445, 555, 774, 1453, 570, 1543, 788, 
       584, 1553, 803, 598, 1563, 815, 611}], 
      Line3DBox[{413, 626, 1361, 414, 640, 1372, 437, 655, 1382, 451, 670, 
       1390, 466, 685, 1396, 481, 1499, 700, 496, 1511, 715, 1409, 511, 730, 
       1424, 526, 745, 1436, 541, 760, 1446, 556, 775, 1454, 571, 789, 1460, 
       585, 1554, 804, 599, 1564, 816, 612}], 
      Line3DBox[{415, 627, 1362, 416, 641, 1373, 438, 656, 1383, 452, 671, 
       1391, 467, 686, 1397, 482, 701, 1401, 497, 1512, 716, 1410, 512, 731, 
       1425, 527, 746, 1437, 542, 761, 1447, 557, 776, 1455, 572, 790, 1461, 
       586, 805, 1465, 600, 1565, 817, 613}], 
      Line3DBox[{417, 628, 1363, 419, 642, 1374, 439, 657, 1384, 453, 672, 
       1392, 468, 687, 1398, 483, 702, 1402, 498, 717, 1411, 1412, 513, 732, 
       1426, 528, 747, 1438, 543, 762, 1448, 558, 777, 1456, 573, 791, 1462, 
       587, 806, 1466, 601, 818, 1467, 614}], 
      Line3DBox[{421, 630, 1364, 422, 1470, 644, 441, 1475, 659, 455, 1481, 
       674, 470, 1490, 689, 485, 1501, 704, 500, 1514, 719, 1414, 515, 734, 
       1427, 530, 1525, 749, 545, 1530, 764, 560, 1537, 779, 575, 1545, 793, 
       589, 1556, 808, 603, 1567, 820, 616}], 
      Line3DBox[{423, 631, 1365, 424, 645, 1375, 442, 1476, 660, 456, 1482, 
       675, 471, 1491, 690, 486, 1502, 705, 501, 1515, 720, 1415, 516, 735, 
       1428, 531, 750, 1439, 546, 1531, 765, 561, 1538, 780, 576, 1546, 794, 
       590, 1557, 809, 604, 1568, 821, 617}], 
      Line3DBox[{425, 632, 1366, 426, 646, 1376, 443, 661, 1385, 457, 1483, 
       676, 472, 1492, 691, 487, 1503, 706, 502, 1516, 721, 1416, 517, 736, 
       1429, 532, 751, 1440, 547, 766, 1449, 562, 1576, 850, 847, 1547, 795, 
       591, 1558, 810, 605, 1569, 822, 618}], 
      Line3DBox[{427, 633, 1367, 428, 647, 1377, 444, 662, 1386, 458, 677, 
       1393, 473, 1493, 692, 488, 1504, 707, 503, 1517, 722, 1417, 518, 737, 
       1430, 533, 752, 1441, 548, 767, 1450, 563, 781, 1457, 577, 880}], 
      Line3DBox[{429, 634, 1368, 430, 648, 1378, 445, 663, 1387, 459, 678, 
       1394, 474, 693, 1399, 489, 1505, 708, 504, 1518, 723, 1418, 519, 738, 
       1431, 534, 753, 1442, 549, 768, 1451, 564, 782, 1458, 578, 797, 1463, 
       861}], Line3DBox[{431, 825, 826, 1369, 432, 649, 1379, 446, 664, 1388, 
       460, 679, 1395, 475, 694, 1400, 490, 709, 1403, 505, 1519, 724, 1419, 
       520, 739, 1432, 535, 754, 1443, 550, 769, 1452, 565, 783, 1459, 579, 
       798, 1464, 593, 827, 1573, 842, 843, 870}], 
      Line3DBox[{607, 811, 828, 1559, 594, 799, 1549, 580, 784, 1539, 566, 
       770, 1532, 551, 755, 1526, 536, 740, 1522, 521, 725, 1520, 506, 1404, 
       710, 1506, 491, 695, 1494, 476, 680, 1484, 461, 665, 1477, 447, 650, 
       1471, 433, 635, 1572, 836, 837, 868}], 
      Line3DBox[{608, 812, 1560, 595, 800, 1550, 581, 785, 1540, 567, 771, 
       1533, 552, 756, 1527, 537, 741, 1523, 522, 1420, 726, 507, 1405, 711, 
       1507, 492, 696, 1495, 477, 681, 1485, 462, 666, 1478, 448, 651, 1472, 
       863}], Line3DBox[{609, 813, 1561, 596, 801, 1551, 582, 786, 1541, 568, 
       772, 1534, 553, 757, 1528, 538, 1433, 742, 523, 1421, 727, 508, 1406, 
       712, 1508, 493, 697, 1496, 478, 682, 1486, 463, 667, 1479, 846, 874}], 
      Line3DBox[{615, 819, 1566, 602, 807, 1555, 588, 792, 1544, 574, 778, 
       1536, 559, 763, 1529, 544, 748, 1524, 529, 733, 1521, 514, 1413, 718, 
       1513, 499, 703, 1500, 484, 688, 1489, 469, 673, 1480, 454, 658, 1474, 
       440, 643, 1469, 420, 629, 1468, 418}], 
      Line3DBox[{619, 823, 1570, 849, 851, 1577, 879}], 
      Line3DBox[{620, 856, 878}], Line3DBox[{844, 855, 872}], 
      Line3DBox[{871, 852}], Line3DBox[{877, 854}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
JtU7PrNSc4k+Apzpo6jeE14SPQU401PcH/5V6/qa33Qjeg3iyfSawSSlxvP7
UScyfVf2sfPHKznot4AedF5eS/Qj4Ew/DhOzbSR6E3CmN2fInDhE9CngTJ/G
H2nSJ3oWcKZnuS0+nkT/Yj+l+td2QmO7WmWs20wvFwv4kOUpbW2IHgec6fHU
Kcc/Ef0OONPv84vP5hG9DzjT+zuija2unMa6oUX9AaMKvyTux1HAJ1O/68H5
xV8cxGDfI/gV6innww5q4bot8zfa6dmkOT3CODM/ZMHLzqWVJuGAM//kpVhw
0r4/WD+KTHqxb2c61gfmz0wV8BUjpvyo7CeKdZ75P1fDdMLEhuO6BvOLTFPa
6JT+uI/PS/0lkerdGTM8cN2N+VHqwQcybhyqAJz5V9wf/lXr+jVIXyPxhDxk
8dTymX93Xy/YT8h1ofsDV37K66z4GH0M5v88kMlMINcntrxe6Hf/2/C7Jxcv
P+qCvnQ+9aUju3Ub+ygM9g9zLl/+7zxXaw8jNTIeiDMbT2jvgGVkPICz8di3
NhNX0sR9UIrxn347Tvls37eFjpiHbN3EdmDrTxLzqwBn+6mE7jM47q1LQjL6
rmxfZbslfXaNi/gIOPNDAofY/aysh328XHfqB44bdThSenYn+J2ELRq//d2z
yy8PGjC7E9tvzMXS64deiuEakmE/PJe1P6cZN5sUOYLgyG8pLnT/vwtP/jYg
VnoX1vlPVb/PnwqPkynk+sT/v9f/Xbh72upPZzVgPzx39E++13t3zDebXK/T
8nrRjDVpFdXwnQUXcbFbM77wcadBewM4wNf0jG/GTwaEvOpnVof8bV8Znw+Z
nLJhOuo+y9J/LQ7KNvYT9QbDvneuJLM/3wc/BeqS8QBuS8cjYXe3laRZHfwu
G8/1YOkBZDwwzn91PHcMZ7yc74brLMF0naX33qlBruY/4f5Lxz/h63n+NNf+
crgekfOKr+cf0qsjSrTRP+zXj6//18ROD1u3AX2VLpl8n9XJ++GrNhn1pr8t
/7sXX4WVZebjOsV0ep7GxdR3d+ws0ScZQ/cDdOEsoiYEYRzSaByWycx3GrAb
fb9Meh6LnrZSicN3XNcopbxRT+nabut5WMcSaB37cr7TNeMU2K/OGdI+8vTj
loU21zE/R/1Jfl4pShYZUY5+7B0Jvv54aX7r9qIRfe9z1fw6sr3Fwo0S4uhT
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
0ofzdL3I9YCPodcL3V8I/z+Zi/+y
    "]],
  Axes->True,
  BoxRatios->{1, 1, 0.4},
  ImageSize->{678., 520.},
  Method->{"RotationControl" -> "Globe"},
  PlotRange->{{1, 799}, {0, 1}, {0., 0.003114477623995414}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  ViewPoint->{0.05544202392909327, -2.769515996770149, 1.9433752405587794`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.579355109571901*^9, 3.579355138649545*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzUvQuMXcd551lbVefcR7/YJCXqZVmJncSZycOZZHayyM4svI9kgSDAZhEY
3iDGJghsTxA4WdiDdRzbWU8QYL1AkNfYgR3sbHaz2diSbNmWbdl6WZYsy9bD
epASRVIkm49mv9/d93aTlNRb36O+qjqnzu1uUqQ9B6zTt283b997Tv1/9X1f
ffXVr/3Ov/u373n/7/y73/vd37njVz7wO//Lv/293/3gHb/8hx9wT5n/TCn9
T66171DweFspf9p2/+j0OTjB0//pPfEufKJQly5dUu973/vUn/7pn6oPfOAD
6s/+7M+Uxp9Z9elPf1p98IMfVO95z3vU/fff3/D0f5V/6f3qH/7hH9Qv/dIv
4XevvfaaGh8fV88884w6ffq0uu2229Tly5fV7OysOnDgAL6Nhuf/TfT6z+Lj
rvoP/+E/qA996EPq4x//uPrwhz+sXn/9dfzJ7t7xh/HpNv7vd7/73Yrft/q5
n/s5deedd6pPfepT6h3veIf/3wcPHlSPP/54+rSRp+G7fx29x/8OH3fUPffc
o26//Xb127/922pjYyP3/pqu9If5Cp48eVK99a1vlY/3Mz/zM/jf9ngF/4g/
7yOPPKLe8pa34K8uLi6q0dFRde7cOfXRj34UroN/M29/+9vVXXfdlT5t5Onq
5/1lfDymfvVXf1V95Stfwe/2+AaVf4dwHX7jN35D7sg73/lO9Rd/8RdXcEfo
FVv4v3/9138dO+I3vvENfPZjH/sY3vfqB+bnB3zg+/HLEPY9uHqHDh3C1mq1
8PPs4R77j/xHf/RH6vd///fVH/7hH6o77rhD/dqv/Zp67LHHruAjf4hfEaQM
t3l9fV0tLy+rW265BW/93m+zf8WZmRn8S1tbW+rUqVPq1ltvRUX/7d/+be49
Jk9nhXI/d3DofUAff78nJyfV0aNH99p//PsEuvzd3/0dfhd3xyv/5H/zN3+j
fvM3f1P99V//NXajv/zLv4y70B560If4I3/3u9/F+wyahrtjrVWrq6tXSMX/
PN+5Ps5vAC77Jz7xCfxjmj8S9yC55rvuWS38ePBe42t7BWL6ED8HL/HLv/zL
/B29O+47tXc3oE99iIcy6JGgoj/4gz9Qv/Vbv6X+6q/+St7VZz7zGbw+733v
e+OBofI0D2X/Er+UTZf+4/xjAPz73/9+/PHV9LKWWlhYUH/+53+eXFd/IfYg
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
VOqK+on2ZVfVUyjAyCmMGho3cZyPyzKyIWGTVO81ODQT8w98MjWVVahknpof
QVcTbAt0zjF4gsH5P/G2LGmmIGkc9MbZlriHTsvWiWGklg8GfuBE5v/H9bCh
oHRaDdyatKsj2GyoEIv+djcvj92g7rkhs1q4nSizuprLNVWXqwNwYV/eZwo4
+qHrSSpwsxBSdOBv/w7CvpUzAIm3RYJq3SQB/qgMLdPlhtSiwG+fBn6IrBcL
yDKB306vpnbeuLMRbs2VW/cUufU2c2vRiypq0EFBlWFr8a6g66Zmt7/dNfiS
+G+Irid5Hc8QXTSgrC3GfaOCqssFVbaKp2eXozQpXBP1upBZ2yUdtb+mo2rx
Xi+kkFmeei+0fG5WlE+WVGdFOuGLfiZdPD/wwEd/gU/uIHl1kGjHw2qSxZUk
C5w2TTxWhUoYCbCmvKdaZjHKjmpykhDPD2FeEtvLSmiKC14ncWhumzQ3wIEL
c5JrBRK1WsCWkSgoidZrJJqq3z5V9VQi0Qxuve78KmUlf+bDAlOPIzgEphsR
UsMuBwOmxHSXDderKSqM9GReDJw/yxXVAE0v/x0vg00V1Q7hySGfernxxl1K
J4fO1AZ5U4fvjafH06I/xKX7TLCHbJKyDcDTArGExwGfHIAJn2ixer/FLc6o
EBq5KqWrWdTCRf3JelPH+ba3d5N8Wyg07WeGslsmBzwrGwDDi/GUlr7wp36e
45gSFEqeMsYxrgYFDGP8tUEB2/d5118Pg4mWJowhoKRO1nhtwUCYdKPCpM1C
KT4tEGGqTU5Nm5S0woFrH7w1G+WBp5AKn5R7jasYCrdcQxIuwC29kNzMr72P
Jp7rIs8znSpMcC6EDqOvv23x9TddA/pOQ790iCAwYZqsAeVXYt0EJZl4E0A4
fBkO+Qsx9fb45HU4mq/mlXgiYcPglZi+sLPwHJegAUs2eYDnsK1HogThAPus
Lt326TjDZEng0jih5QJNjBF4tPNru5RuCjoY1Ove4+ogfV965sPp0tUmVYPV
rfjMR4O1XfZU73SjJz/fxWW1T/WHsqd6p6/269zKaJ/W8VXe6XzPUIwykqfz
THsWyRDRF/kNfS5jlIFP2U7Hy13L8xYuCdk+Qy81/Br97/pH2YP/tn8yb/a3
+HINL9FFN/ZzRdMD3FiHL9LraRURBxH6Ov3cn2TTNbf72xvgddq4sX/e7PQv
1PQiDZPoeQfIK8MXaljb6fClug8S3rijP3fSefMuBy/V9Eq9xq/UX28W/cFX
57fvxVdqfZWGCOKdBz2GEDfh6/QunHcPZAHEIxFex6ITuygkjGiaWzeEFwUP
tLJ4ZpLlwq+h90FtOW1Sfw5HwPUu1hUdZXjFlLlDfLUcSpxmehHBHPJrFu2P
dA59Eka4LHE0rRkfuLoY+7c3k0Q5n4ixBs0PfD/8OdaVY1JGBWljJ7u9vWuS
RxFjDglWkzSOJmSgfkmmafoVJMzzImFcIVNUkjANBTbCMcebipdJGDfCNamz
lIlE9KDAd1AyCZsWD5yJsU4UOJ5rz4V6cFwqcaZ2j7HlHnYv4jAir9zzNe51
yr04oCgLbHBeUacLmBrcWqfypYGidZlvfK0QvCrxIgtqezregpw8K+eBf8vc
zI3i3x0xipPQxiE0Zz0u/8AgM/NdDDL/1CLTJLEGyCzENoLM26HB5fU7DDZj
gDN/S4KcWY/NewiZgM8SNo88iAXpDzqE5609OB9ieD5s4FkAJ+xTKqawJNse
TWMqM/IrKz8znXimyITLZrIUmZpw74ruS49MMl+Car6LNtfuE2CiX5wRs6z2
LkW1R6DkxJU3k9rweXwK5N0Qj9jEzc694NFk1q3ki3mrGO8N4bhr4Ii5ddZ2
w1HDH4jKWxWOuMnTRHU+QSL+PCbKPgfoC6rzxonXKfFmhnj3nTDEW1PihRrx
MJQLJeLRKyK8xWeartyoRm/T5ewruTlZbZH98FXdnIR9D/zbgLizQjHLjB0s
rCbK6otIKK4ZodifZ/6w4jT/mQLvm3+W6UQLvL+Ju+KMTtx57Wv9uY2B12vE
/paAh9BzSLw1ZR4cYt09xDsxdYh3UFDJVZU3a5FRxN2B1XAnJvMqWnHTaMWu
phUj8SCo5UCXfmOAvSlBj+dWEvCk9hx1IsnEfUWZmAFv4DYXJ1jsrpolw13H
wr9N5t/7NLWyvPC4JBN9USbSCCArE8OyivNQJOKu7PeM7dz0w60bYuMqsqEO
HeFk3IPs8ubtYVNOEyeukUgSRroaI7Fnm6seYwQsZPSqBV0WAfNxmo/rCv04
nQ5YM6yEs6bqMOiSuBIrpzEDl870Gacm/vzv5NLKrlBBsIJYvBpg/oiCsP8Y
IOHZB/5vPZsPmOBZmDjwt0ut2tHjJiW4zyjBP0QleBGD55h92+7/BCxaKFIC
bpZCsRA87/RK0CEWfY/F23oo3oZgdIjFfRJAxyNUhHLMw1+PVreqwPtBmgka
v4exOAyfCYmHMiQ+WUTiQAWezbq2O1NrntSbO4yfp4N9bnANyi9vxoG+CRS3
xPkrKsGMipaMMs8iZDm4ETXYpWrwkpIw6PzeuJ0CVYLkBap9ivywPVoGYVAQ
VsdMxkIBi8LXGYXcBrkK+0oi0bJPUoShlgTwRfbB9aSoxRWSgoSPVkdXmNg5
R6JXJHbLkJgkASpIDAkSZZR6RkVXoOKMhvoKBqf8ux9Os/DNnTzeB85kOQ27
WoviHmm4Drd41w83/+aru9xNDxS8OeMg1Z6fX2oi5rk+yvc5JOEk5eCzf5Jw
kATi/oGJOOTg33JETCzcIYFIKGwVg1EjQl3C/M07gSU9BgmBd1NVeopBqaEC
ElJM/EASGz8EXYc2JBYYHj3EiRALQ5sIyZalneFlaWF1ifiGSkROhxAHOSWi
6ZCg080ZhjTnJ69JOKkqcUtrEigsvjgMi7EncRAW6xDeZJAFVnVK4zZAkWvR
USIiFHs4wgkcKMN1hvf3wHCf96sTflquRD/KHI350vLGy1jp6WhnWuIpUglV
q2kRuVQntivWfCaCUID4/HZZEJZsxcBQFCA+ecFCsUmLO+P0XZ6BXgif4ZrA
W21KxBg+NxQ/CxBdOta8qhAny3CIq9EoEaoQ7K91XSvsqM2m4ZU8/F2LJvQa
S2dExBqJUB/uI2mVq8HiRwtYXDP39VjE8+N4S1sKUCre/29ILo7lWcY8w4Fc
XE/k4sUshCapGOUiFUSsp4h88SvFGHrHyMWvQXTZ36ZyMbBcvJO4gnmXHpIB
fcO5eIbfhpot4WRnOPmgiaMPOITjLagXEzweozwxbF9fDEpMAY/P1fXiJutF
n+hFKjftBuWmBMfD9QXsvADDLjfbonRxKhhPOySkL6SKuySKxkHlu3B2DCND
zsgoGh0vmAQ0Chgd3vYvwKwg6YnSoxEE4/skGyXT0riafqT2bWWkNu0MMBnS
mDpiMuveZv/wdcwli71YKY0vN2kP5aMlZVU+xtA5DEh5YQkpva40a3DAj4rJ
WAbPSRe44M9OmdkVVOQKzERkTnToWRZLO7iN6Rbc84sjyvnjvm5VYxOnocHV
EdOznMuQmw6wOdsLLVfNvzAt+7jyS1/6Es4e/7Vf+zWdPX748OHmE5/4RLO5
uYl/zz9mVtOeJchS0dmNTFfKyJyrZmRKBuUXga4O8TpRDUpwtR6ltBbt6+H6
X4uxeBGurEEd4rXtwaoaFA/A1SFeNzKj8g6Ba8/Wu9ipTOjqla7oUTaf1HrY
PA4fcvXxyNUkDh9IT+Xqbs/VXUxjUzYGxSelY7rBwCD8yof+5FB5vsNkPWrX
6oxG4TtZFG47ioJANQ/Cd6kUtvGJJylQPTeAKmex+7fwAFLPQHyOivMU3Vwp
DVEzgfhRCcRBdxqUur3E5Y7UJ3EJNKgo0DHANiPzJlfhbUh4K91IVXGapXUy
5IYEueeyfHWrvmWwoBXIpqAtitNBpB73RExSzLZ7wmxQzPJxpEubwdKdcb6i
W+lH+dru2bL8Eebr/uIqncVi0Xz+859v3nvvvdq6nemKiP0JuCUr4tYsxyOt
mWWRmnA0yfPQsAxhKMXxG0OGypTyl1KRutNTdOeVv3cIUd8j9B9InypG1xij
tzM+70CdKpamQajDrPYakJRdzehs2uaCXatTp8zSRzKWaprHIUxDjlKHLA3N
bk/TXaapqNRaGE8QXaGq8SaEKYN0iaeZkzTG8A5Z6qNG3YVMT6JQnS50aIbd
mSlJ32ukPxTePmvOGRxQKTiFRPf7lO7GmueTSM2iTLVgXSJTQ7oBvRlsLOPk
phlmDtfrDNjXQc+uLFebwboHZzD6rYhRvzzGH2D0KYtR7C/nqedxa5kkfcbh
WVSpA3i2Cs9OFzpgNB9WhGeD/qZCnnNQ4mxWRSmWOHc0fG01aI6L0jFotsWl
j7S3rGu+8IUvlN6PwJzRtzTE5GfglooygkGiUZZdQVkiEWnYWstQNFH78xK1
tykQWVg6QKJDHnZRVb4KOGQkvv41IiIxC4iIwjKj4eLw14GE93rE4S2mhyEN
1/OUd+TgoYyDkttBXemQhLNBuJ6AkGVlOWanHyp7mhKzm1qf/YNFN0TCDyFY
X9iA3cloXgrWpc720nsBsOcj9zA6Py0OZmAAnuxvBYBtOmWtxr6CrgyDTlCl
n1z5FocMfO3eh2xkItKZoP1b0d60MrIUuTe07eZpPl6LKDMSOl2bG2qWZ6Vi
aASMQcHYLgPjRDeNhRXB6GhdLj0ghI66c2y6FzoGDdmLdKQF5ddIx9KGcaHj
b/zGb5Tev2rE/r/GiD2Y9A/KRoeE7EO4p6Nq3JJhlDdG0fjNYeBNfDT7v4xo
3CHR6IGRDuG4IXgkLoKzWWdjT8Wve4y4W1MFGSshKf29Ucejht0Wj0855OO0
h2O+zeb5Ho2KR4d89Kb5lANv7lqxWfD5MOtTlov8epDPpNxSQDok5KwH49K4
u5HF4BJ4X8yrIXtAdrweXDfZSr5HGgbPYR78PZaNm0BLQuYlQuZ7PSjfy5BJ
xMSGGGyfP4HCcQk3ZTPjAJQNkVKubPYavwQbSnL7vKKyNnmtOrc8h6Smyaux
dgmSTiHJ/S09GjugYkkfWgxiXnzzisn8ZPowwWCcWS6Diez2L2mV4QGU40AM
dtFXNdZGJmJPbLciE/cXt4wLCdvrT8Lf/M3f3BMJ8a5/Fvk3NeHylwbh8tYz
f+QRfDdlbuOfDqFXiJR3YqSM2rB/4gv9Zki/Afk4nyPk86oLKUxus/JvSXMD
9maa5h5C7zGC3vEnAVt9hLyvkMf5ZrML50xCPhaGLyXCkJCXzl2b14ShQ+RN
TRX4uwNVuC2FkL6Q4vZJIWQ1PPZ2VghLQuAeCULQiT3s4IIQuWkwVn4vCsMA
lPMIOMrbnOLjlHJ2uGT0GI+pxyhgq3YAsxY9fOmK/wDA1uXhL8IM/0epEC9F
vljuGGiPFwa9+LN5ChbWjCVp2lqrjK/hrb/vIO9j0M3dk5R2IacdEQ8nlE8B
bzPSexWyTXSBV6eJ7QrZJrrCZjqKN7xvQuMk74RVhgC0kODtdhwweW2EG4uE
v/jFL5beXyLcvoLWM6ybGMZ9mQXeH2qzCym8Gwzo/lsBdH85VHgv/00Puh52
r3y1oUB4X4+5vwPU0elpR5yL+etE6b11F9b2OCj9dgo8KPPOCh2Fd7tZHEy8
O5jxTnIrlF8ZKL0+EEbelZReq7Ewoq7Q9DLPlB6lWG4YrKoh4r2zPA7ePt2U
A2GYNdIWA+HMFexfAC5AGIyn13i7tGQbrvNc1yPc+26AukdQd98V7l0i7r3X
0+69jHtVdVfCoE+XwNrOZ/zPJRoOmlZx5QA4jht3uogmjKzsahGCbQJBBmDD
8yYrsa8lIH00aLqnLkiGJy391vLHbjTsDaMsdIDCkOq9oOOZcgKe1h0NVu+1
y4HYeB2IAhdXH0knTVdKZms83CkhUQC2o4ScqgDEfQ38enaHqQa6/YgthQw1
TH66gMkfVUyWsiyCyUqGZVVM/vOIyY8mMnCrMOqkFAAjHr81xCNsMdwhLYh0
dAjHdUQj0iH6hMMgmNHoFY2NTxoBqajn+8bJyE0xKRltwSNX9TAZd0+VyJiq
QXoglUvBGY0uRsHTYhSsaLxIg5hgCUMaACsZbQRMzdMhLqsxmWeHXGw59Zxu
q3FIx4BslAudQoAjz2/m0sdzwMZNYGMPSKjl6W8hBuYTgJYOQdkiKk8mx/qG
DSVNBJDSMCPxL4+3bFAi6ldlegatUuTMM1xvYF56OSR9AslSYXgW+rrlUlGy
4BAFP33RxL/9ty3MfIr5CcxcQUa2usGLfxHCykOwpOER2GdzEG8GgpFw2ea4
xDC5FCNnzEStONXZMO0HB8RUMt6BliE4iAkQ2xV1owAxNF/+8pexZAfee889
91BOZHD3eoGBGwUG/u9wS3dNeub94aAPOs0Wrxnu/cVAGsLM8R2Shg614UYz
72/nr36VnvmoDEkdVtDnkX2t6QiMXdBY0ghazITCu0cepEh4ivxL2Hf0kGWf
Q/j5iL4+EO7/aQ+/tsfec4NA2CH8eOlXLL7JM8bzmjC03dCCvUoc3FAgPB3m
iefJngWH4Au5KMw1oUfqIet2ca/1bo14QYnnEXhk+53m45R5KAmz1PAQcyHF
XEOckyvPjPSQuxTzwkS7NqGd1Nz4UeC1KeHA62MFSL6eqMAMbqgCG6RbYy6U
hP2vVygnhykXJ+ZFxFWXK7gRxE1SxGWK0JUVodNsSAlxE6q2aXgFzVqq+TK6
eaWb14DYA90cvBV4nesAcTNF3HrB9HN8nx0kMdEJnf4qcPc9Kyq5f6EUo4h2
fzGiHcXWSwZb6xm2/m4UWz0S3roLbu7GcLb/2pPZDYWAdjeTbUNsPdosMGsx
lG2wOWu3l21Art1iQPsCfb5o4iVrVzdVtTkAl5Fst6SSTbl1pBjNbueabcdo
NuIW7c5aV8m21XNrC7mVZHaT8ZmSl7igIS0jrPHGzaN1Md9xuJOaNmqd5eMk
wgUVd7q/PR2RRgLOJwLOpTtk+FnHSEuxxiYffn35pIcB0dxVE82BggvazewZ
a4K0FGsxuG0wulWS8df5LKQwxOgz6VwNcNtC4qI126cFXL6mzLCvuTU7VoVa
TgdAhBqzGmpeifTFL3wsvB3HWhzth1jbN4DZuwZma1rzUoVZVGyIMHc9EYad
DRiCNt+P7wVwDbCFkeafJ7v+tl8kdO28lCiunlx/23Prb5lZX42GnEabKbcW
b94Z0UXxppKLUg8fH5SklMn1cEYuG3AyvXJymYDTIbsmTK0X8SxMbUrMvLaD
Qj2QXdSAvFZcH50Q7GLckQpZBwMwSrv6QtDpk6DTIcP80JKD+3qCwRUDT6DY
JTXmhGJwnTdl0N8JSDGQYd9RiinDfMKwEsD8QJeVAObJnsPnF4uzy3GGeSbO
iGShebO/BYq9uctJBZlYGnhzNG6MnutBhrm9MCyk66P5Cyy5dBV8RR3W6aa/
TId5vhWSHUJtVhFhSDPaGD3QX4ZlIWGZ7LmajqJrXdHVjiqyAOjaKKLr3atG
Fwabfm/o+ngBXR+DW3xtMUmGjSRTCpcdGiNyaweYRXLLIbQ6xBY+RRFdiixK
lwZSW5FYTpEFAVjPLDs3hvVWHiTu2iCxM7w6aHnlEFhecbV7ErIHAKzZUGz1
QSJ+GuOR0bysLikWMWqLEqZeh8jExc4bieYa0qqSM81DxTPlULEtSq4oseIM
GQSWpE4HmPKKKYeUwiwCW2SguM5APclpptV7zSk+mE5oQlJfJ2LLLq8SVsXV
fZw4kIwCrXz2ycpnl9YZXy2y2tqGZ6HVzhWuKBZaefq8SSA5DqqgOks8sSfO
DfrfsF7ksU1KIpRo1aRzt4LCK+YUmnTwYBjBGHbE8Qj2pTmFDa2nu2ZyrWt3
RpVcGEDGzQ7YnbFCyuDH6tD6nkLIiPjqlRjSKieXKK4XeLvyi0wvVlyEr/US
utJI8Q1WXG/CRvoeXgCmN+9CgjG/yOH/SDVc3M1ElwIsc/h5UZXD3fNT3rFc
jhbxqUWSSyo+FnuQXAuUXICwdiC56HMDwmZWcpmgMW2KoDnPPiEYRY2TatRI
/0fUXKnZ3xrNRbqLPv481QbLxINNPhhBovRCBwzVlgN4uUJtcHTAqvQam42F
zj8KtNLq+kgxiRzhkqgRz4JHRHszHktQ5ge50uo6Pv7y4K1v7TDZmqBzYvga
BJbgl6lnRj5Zm1TEPX1BhmTJ+NV2uThzNdzhQtKukDhtfLJJgiBHPy25T9IB
Lb/S4XRp1moTnjn4AeAuJLiTedMbhTkJs+Xsm9Du5v4qdfnuEXb/W3T5Z4Oh
ftu8NTQn3Fd4PfGc48pBTJkRbvHmHQS5zgLOhpUUVe5PosqlgIsFHg47HWaI
uCLgMKh8romE466vuAbLxYFWPvHDdJeokWgLqfGYGHX27TyebCignGaO2Mlk
m0wfUFbjSenWQn222OFa3rkdBX0BS3ltNClkO3/pcgCuoTrzrM7O9LdRnQ2F
GQaQcXmyqy0SZRkm4WNQhoWC+HKcsLTYcpn86skVpVcTfa/S5BZvt/VZYIkk
8wSbuPom2daXiTM/Aqw2dfXDcpFmQ8pHy9Rq0tK3YOYAyl4uXn9RMci6UVB5
BRWW9faf/97jV/AtPlV0TRRdazWlxpmAHl646WJcqXW66aLBVRco1+C01y7c
Pl5gmanauDnjGG9AztQaPm97vTZ/5W9Ure0UOOaQZD0C3kCWIcrUHmsTe6yU
ktzNo01evDHkmNkqKiAbwgz/rclJOkSZGURlhvOZgQCF+cw9xiCjYcfy5RS7
mDYjOORYaZffJA80e4ARyuixvIUFGT3IgqIsnQeQazSm2C5U6/YYAy8f3txE
L0yPQ6RRkvI0H0xPQjXGpfe0cJcOL/EZUWoIjqRorSLNor3vOMB8KwaXtQ1/
bjnwvI7ua3yyx8eZhgW5GHSJ5R+nsDRYp4GJTDhuGe06pV2rtHMAO/T//YqM
m+TDTXFBfMPrfJpgOxdqhJto2rLBfi6FG36VwrcWyOZHkTZVx39VpK0VkOZ1
GP6Me7sszUKBZiXvjGn2iRWVGdZfsPltYWZB5hBlMwbZVxBmYPbvFEAGELuN
SOYtxRrCWMgrK0iS7VNJtjsWcya73B8FJPUgW+sR9nhRkxHC1Oi3kmxRkmQU
cYY04oSqMhBjNyLHJNjEH8UFS7FCsGnrbXdOSawJGNvuIbatsWaLIIOLYk2K
N5FjDjEWkkCzPz7z9+mBzxTbleb8y0o0LxHmd1COoRqrtt9HTcZWU+LhRxGW
mfZ7AJSJIssevmdDjALJfM0YfrNYTfYtcMzEGCupMCJUSAilfOqKfHoa2hAS
RHlFFIaRDhCFUaRbjiicTN/g9qGUp0gsbxyyA0Wjv0CsTvutXEGYtVaYsToL
FlzHDLhmWl9WBRfet5/3oR6RlWL9WzcApJw2IFwHNOFv9l9EeXUT7gXaQVn1
V0Sjl0hWwQUB4s4IiSjdKLKq5RDxzsQAo4KJH64WTOyOBYiyXfSYDPV8tCCs
iEb4bwZ1rrFogict6dqLgQ12Y9EG4yCxWfDY40ilQZRIQeK+FEpZkLi9c1bJ
BFwiIknWsUuN/BgsulReOaQSPaajD3bJA5hIXgGNLqu88gNtxaVfvjBuqaEc
o1zJ5qCwF7+eaOUTWjkzyO6NhYkbx3rikVJSoCqqidejopKScDHNOWawwuxj
S1WvyVQQKnMNQiY5baFDIKSsyuTUCqzy6ba0sIxQpVKwic4O8SipvAgq/LNb
BU7H9ginfelSjUxVtZqM3K8rUktaqhQZ/ngdWJ9IgdXsJyZlISDeB2Hgy1mZ
BFpZyCqHsFpXXImbxRUS0cp6K1pZ1KwUkq70XZgFB6y6lWlVs7KEVkIqphWH
gESqYXmXiKdFTTzBLve0vivBlISBi2Qi8dWGgUE5hYzifKNUR2wZRqGAQkL5
GACScBJAcdrxHFIL1BMwio9DVJGvdYYP5huDti+lbZvEKh83vEdg8Zb3kJbk
R2C58gAPW9SFj/FYlw+a6g0M+Ia4Gnjxcr04Jy/e2PA1XLlRbRVQW7XNs1uJ
tkJpZdjlE3Y5nc9Z0lftXvRVSw3sDRhostH1A2DWRJnllzNrTXagvRv3W0xH
6dWRtKJfLTj1ySzjEszQ9doHMAta13ptMPtehdn/oerLIcTWIsKw0itKLnXj
Id/4OmOsiwjDkgmtq6fo74ZiXb1MYdsthH8WYbgzuVdCA8Flwj/8+GqFKgou
mqje5UZWWmAfcr1FQeAay60aw4ZFXttJkVcPsWmUWz3C4NpGJ+ucOFlEsZCr
rQrIBGIZyGjapYAMBRd6WJplzNnllV3820/FlmVXFgs2aSnXcP5aBjAcFwy3
iwiwBF+BVpG9Qh2X8yQrKDFhDzGNCfFzjmmttiCuoNI+Dfzi4oloxTtaR/YE
eO97IFMT5wXTD7MZrJ5eCipsJVoDMgUdOJSFehOt6grqUQWerG7JJB1GOF59
Q8erZzRyunpiUjPdrwN+PlnAz/cV8NPcYjz0v66TB4O9LBeYokcUFMV6Nww8
9HH0HEiWwTqEz/og1iPslEtMHcKnQ/20kFivqKA2aitukkDPkIdKHSaZ+xSX
fcXenpAEevhw3MaWxm2TDTQSyoZ5XsnjhuTZLZHnUkqeRD9xvZanevjTWKAl
tjkfpxiimM8nGHI1ETVcf4hhniYFJdTzDCCroARAceN1Q+tuEvYYUyoDUFtT
T60CKLAVlcklme1j7KccRe0KKAoJig5BHVfD2x0mK0EnqDq6WuikcsiZkZDJ
npt1GqGLj0GJ3qqwwenkcZiPu3bY/EAKG67AEmNJODMf48zrYipNkyGzhUgt
D9R2baDWImoiZqzKWSeVo5ghlUOYGebqHILGax/OAvN1i/F8Xc3oXkfSRMoU
4jRTFkqLVNfiyhjGDFzW6d42daFjCqexRVVcf9AE7SjkaRNpyIa8uVQP2Rg5
zaC9kEd6e87ZwWXqRMVwEvCMxG/ZSLEgyoeNJVY/wc5etH541o1DsLHLtiJ6
HJLHC3e4POEFmEVhYrVvbpespTp8BDzkNe0VPjLCQjZuwZmq3HErkaejJVsP
nDIbEqr4gQiN11LDmS6nEW5wXedFrbxZpsE3Vf80kPRbCqRWZ+9ggdQKrvcI
i3BXAt5ligraIoQcYqhLIGTsIlpcFQyDTHXnWhJq7Rb0DoJFBl3fYKztRxIO
4YfVip9OG7kj9Z2Z1ikY25VA61YDocPlQMvWpm/rctP+EIQIQKezdBtgyGvN
gCmBusiFAxxmXeQwi0t/4pAb0Ts5ei7l6Dlrq9Mz9PhM9/BlbO5YDKWSJ8vD
lSZ++WXwiRtPsUaANz83vN3UIXPQOMK4i0/IJA9cLwJwhDqocULEjE8w42LM
lYKm1QmG46BpqGJTLv56pbcZq9KnqnOuD23ut7RxAJu11ADyNcZMdVXAtBZo
heWU6dJJDSsonk8RZb63QJkfVcqYMszWyJsoccjFaYuhFDW+tKW6yoay+LNi
LMVsUZHjEC8bCVzwYwp5MxNLkcbpTK9xIXUW8g4YKkqaFoMpuBZEF4d48Umz
cTIgxsCFwJJmzcaiKWSLT9kigxIsW3jCPoClzcByCblCvS8h6X3BzhdAC/nR
Ml4alQ0+TdLsWQErmZxpUM/oZOlSTNXEkfrMl3awTfn1ZHOyeNIEGJ8Axg2k
DfNlVWkTqNDy2cTdoc/yDLvR46SJC6CKibJHxdqJpJmapD7Ugj+M3cYPw4SE
lDl8YifyhBZBPXCKZkm7UfCgypkpeHwNPCJ47smn7/tRwydyqFSN1F13Dn1K
Iy+jdnyBP9Mif0zenqycScXKIQRRjMUdd9AtLDHWUUzdO+TPBpMnM5KFPifT
uu4eQGTmzOK0g70KnBhlGfwMBc7WO4Uoix5XOzHKomRYmwRZ21wT6VIAobhB
JwdnVcXOO0GQRwhBln4XGQQEcsiegJGVSdnjiAMX2dMm7IFL5M0Vn7PnBLPH
FyRNlT3J2BbLHpcqG/ov0Mixm5E8G8rLxI2AR8RN1c/pP95iSIRPhFBD/SmG
QVUEORI79FyAUu/H+Bhzp01gJCYP8miWFxkJjzzfHuCJCAeQUQKjqIKWwOh+
gVEAGOG0U5emwdDKWVPSNF6iKfyzWw6ZSdpzcm2Q+ckUMgyAgoUj1dZZrn1Z
oiqPnhQvFYVT5MuYwpkMFI5pH2nQLW68afCVGaGz4ia2RTaPgBzj/cUIiuBC
Imdn51QqcogwGkDNswCq8cbNSWoX26R2MaGNQ9j4ROw4iaMMZbwoHEMXngVv
0u0rACYUwqVxrDgSNYQVGZ/CJ3rF47oG3BpDF6d8CQoUBzyJSXUMoNzqIBF8
DDpGGtpoCeHTYyhjHtN5BEIUsY+teSNcmXJ9dRkkPlU1rgSSkIBENrG1ypKW
Jqk0PBMeHZp9BYy0WoVYwgjGTNPriZGfUoxgzMR5cM51Dw0Ylik6HiDkURIZ
wR1ipIAQatj4SC5SiB7WCB4nSKpSQqJSdiVGmtWmBBQ6bMknSy2YqFIcImSG
ECF4HDcASWsLHSIkWC8YZMpyP7jEj0XOj90CP2hIgE8mafJQolF4aMYpRkZL
t4cPCnbg4ry31z2OnjSKrBgbkyXj4CgJk5ByJAqS1TjS4HzhRi6OHiVEavcE
k9QJdmnY1DFOBCWpLslwMi1sGHcFhRK3TyBaWkCL1NTcG7PgmpSCa2gNj0dK
HxB9vq9An59W+tCUAO6DfW2UPMMAKeQBkkP2tFrWjHjhsmaH8LkR0UPYeSTL
QRXQUwmQkvb+M2MTlVaPji4OoyNkjomOUvFSj4764yN31mt1zQPonMcufwVP
SMCD2JEJJahd+v9a2AMXMoiXc7+PauaKTXq3lPQesiikQma1Fd3EojZlEYwm
uXRFntsSNIWSlqnESWzOzK/kQAoJkCqyZimOGq/jfBVCdvuhkCgwegQ7OmUp
KGtmVroMWJNJlwaDoLTzdU/UweBI1nx9wzTCtssTUiv4M1WfGKkTR1yWMJJR
5yfq1PkZpc4/tdmotLTGDhPZl6ebZGuWRky7WcREv1VAzv4eN2zKKHAODqEz
BA7NzA2mlSI2d0mParJERqpr1kera4g3b6nWoRUyNxBz4q7qYrqpEixRusll
ae/xNgr1hHPaoDHcA2Y3pww/m8mHsSsG6VwhHwbp0pDUEbg47U+NSmcvm1W9
0kWfrP19dgBS3LIaCqonWKFT5gp2eHkz+uibCJUVeOJ1sUwTdC44n5YXKkCb
PYRMT+AWhaVw8YUpSJNBmGRZ4wu6JmPNhIttynDxJGnoJ2tT3oEUzocEl1Ul
zQhcPpPChS2tvOlBhxSV0tiTFbBys2IFkQJhVBErJaN3oGWakts7rmc+nuuZ
CBcuHCYxEwUN/hi2TFHNAC4qaBQug3QTHUOZtihoCDGS0padVbK3KqGMz4ZC
wnVWrJgR0HQImqCQ4VPETGGJaRZSOarhw18vjfi4lNi9ewmllDBSPxNSwkTF
UiSMTwjD6aKxSpmlSmWzYLKM0GOqtXk+wwW9TjMkIIF0nI4nVfI/GSn+iZIC
V4bye4USDjkRTGuUCXimacAzpARBYgMhQYA4oF5LFRInnqRRjMEwYqlhu2sN
22UCJOXDYeSDyi+Y219JBxUDni4LeDToKWWEdHEJWSwCBrBXFpEImBa6DFiI
Q8v4WUnbSs7GTSWy044CnRjiuBE6xBBnnA5ZkCOSwwY50tc5kCGRGMMEUUg1
iasRI2oSt5wY0hP6zMVss7EvdD/Fkpf+9/f4ZnRZpPJFJjPipvcY4QTDDZlK
FswsbJmA4ZQgU2ohxy8tMU0QFNPR4pZrBsXeUz0Miu8vgOLnFBQ/l+STjSUy
6sZ+0hDiPtURu+88QJ7I3hCxopaoeLJLJrfelFHiLaUEolGska13zGrfYZji
kBN+qCSqWZ0CJ3aGnMAlv7sxcYznsoYq/FvbZCEh1kiGDFQUXJJ7GjigtEjd
kBi0ZLxwgIsswdNgtNLIJWGLsEJ50Wqc4k39igDC2Z5KeEsRQSB7iREhjZWo
K7xSIhQo0f/InjWz8uFidSHlK4NVv6G2Ey6YLPKK/Ii6Y0/8WJP45aT9mdLL
1APGKxFNEj4wwFzHXPIIYP6pFs79E6tEknq4CltuMV2NQ7bg2xCnjLEl9Vuv
QoKkOeOQ5IwVLbcatLyZDpIwQUpEy2pBCmV72kSFbNnCFDRgL+omoeWM8Qlj
SI/QmC6By6akfJaxJTFElrElpHnj0lrJKlFKQcpqCMmERoYQ3o5GTzxbaisR
SgkifjlEmjSD7KgC93GoQolRjEAlUyNFmjwsNGm1uYhX5RaimIKjOtFBqOOJ
m3VdH7QnYmSJG0+zbPqrVMb/k3VO/DNz3+cekV9Bf33GbNfAGpO3zDyHw2XL
dCkz3t07M04OmVGSI8vKaG9QU8PyAr85liM2S3PVQcswQdysJbSww+RTWswd
BS7nde2iqJFzoEbw9WplTrSaIubf7ckyJ8JIihgjFuaFrOSuQqOJ42gKYUso
RCpNHO2Ao0u5iNaNMqTBUv3GXC7zOtrcTUWStHsmCNWghESQNFxmW4pm/BJ+
IPAe5CqT682PkuJoV+SH0xmkYcU8DOPkB2qyw+AEjoNbfBz9bIx1fnAFmDBQ
DEwIJA/uDSYnnioFOA4jnBAnLJx+PqZhulphLDmla9EFOf+6AoVg8pYFis5z
3xpv+gGe0Iy99azzUICSDgwVomCQ00wzoqQaRKCCfYcNTYmBi2btfcdX9oC9
h3kZZ9K+4IjA6bQ4dmW2FPyQJl1xGBM0roYYpxUpq/kh/Rea2akCHKe0ycxU
Z9I1RFygzXN83KBQNsNMq+OtsuntVRHSpSJkBCINFKo+GKvUyvxorx8/Vigc
aWhfoVwTgtweApgRkuTCBI5PSdJ8nJ571xsix1KIOMRIMBAxydxZnsztj23w
IYqMSpMNpQh+NxfejBTJ8i3c3kPdPT7p7nHIET+MZCjf4gthzPpQmGRLBQ1C
KJ2LoUzcB+0QIm2yFYIOeyU5SEICEtEpVZasVj5S2io4DpGwomfia7WxjU+0
i1fhkqGkKayGSMpKCiOo6KNkhl4oIKUpLIZuYoEbfQKRKZEw3GN4EBIzJczg
k1eskj1hBhdzlQjjdBbeeJgTMTMjkOw1J3N1IPnsI8T5T5u0biTJPUgS8kR8
QhKSMOsU36xIEtouMzF+69BzJU0yyTVJ7BU8IyhZH5qu5zg/o4rkDWUJbWKY
LQ1zACYOcdLZMIclyZmIk0k2+KmkStqBKqEH5gUJcuhXcp6DHJ2xuUyMDBjS
6dwVwxAtGfEFhqDfKp77O5fiACin9qvLKXK4TJFB5+By59UrN15EngzZgR8R
yt06q2EjUyKhhg1pUoarIkz69z5yJlvGgBThDVgS4qwVKkTCh0qRfbTZL1JE
TNVqldn1QokHlPRvfvYg/SIAJ5+Owc5UaWLzu0ST++gXByhZWxUmyJKhLHkm
ypK1qiwpjXCyBus5NljpJyhVIPOBKpF+HJ9sOKbZcW0a3Gyb8ZeJJtnKNQmQ
46IGNRk64gzxXXrmymRerGZN1Mdq4mNSAsdodRlXdSbpXMrTUHexgEKX6tVc
kSoxYviyAjEcdeLgD0PbjK8PMUpCw9WI0SoxcH1LQGDgRN5GLk//25hHUgKI
Z4zYctaGszOr4iOuORjHx1Rn8VbHV141TX4Q/kBgYuZ3yj8ToIYwgwxXes9S
VMw0z5ug4miKChfX2rVZopd44UadEB7CdGY4hAlr319lnfEafVmAipCDgkpR
S8MJpoPhBMCJHVQbp1NS4KYBh5TA2neOWYZC46IhBRuXYnx4ERnZAjuDiiao
kconVOVFgRIoL9gTwPV1l/D41WmRGRxx1okv2aeFEKQJOuREn3bFCvcKKeKc
Sf5WxdtwWuYuw7ufvBA9VLc6MLg/uFUDFUtSPa2qe+SMwAzI0YLGUEw8fFqA
9TB0ACfMwHabsBIppuqKXAspGpp2Kxebu2NOySTdy7mCyfqPDDhWkCEujWj+
sUn6Ckxg4dI36IW9lwfv3J+Ui1QwQmtKJsZQHW5dcoiSEKtGTplGvptQeCyG
wiMpQMUvkwMYggrlaubnbQCzNuymyRf9Ek7IDAkYv+zE+GUF7dGEJEODpe2N
jVqii6q5GdlUUgxchlBp1feoQiUoVBpaiilXtVpEsGKQopsCMssjYqVU0z7M
yvArtwQoNZjUppuUcOIVJ2EUJw5oMoxTGCKueRQGoEhBaqC52vjFPgJVqatA
pAOIzK4VIvdaiARdFNeks7QnOksbX+Q3lgNjQqmZDwQY0QJxKEHovbJa6WfN
LG2lxsaq1JA8DC2dDCYVY3K7a3lutz/FcAWESFwvYojhkBkhJ4ZDZPhCrLIx
nB2wdXyQiFENMl9ZgzikBf0Is/WTJWbQsEeTzvUxnXsZOn33gIm4bFL25xrx
UY5VoqFxGA2N2BAjo65XtTaK3FBWDfMrMUwJKwKiqjfCXgCB7S9SZp5tAt87
KjBE8TotoPFaNUZGR1I5dpWw8HCLNgZOIdmolaaG5a10pbBkj7AIfCvxCscs
pnZ1TeKTMiPiziEaQx2MnWGWb0/GMrZNMVA5HYfiW3HRYwKxcO4VooRPKOFQ
WfjE0rChyk4SqkwqoQqhwiko0BbdLG54vIhlqRexh04yLXJxEbuj5WjncV1t
LP+oIYMrQC7LeT+25lap4ZUaYn6CxDjKx3EAY/mRKI0PDiE8I7axqdmg6AhL
qPGspUZ/+/TFrP6Ul9Q+CfXrQ23R0G5tQw4ER3U8LBLEqdHxgdJjpnWnhh73
Cj1aXaeNpWlhdFnHOELG9cYIQn5oxSqQln3Sg/TYo6pU6pVXchwZJUdD6JgV
NpYNqz3G6seafSoxSoEJgoJlRs8PdToc4iP06IiBSQ8Ph/SYaVyyU4pLtmyW
NgYmO0tlhmxVlCesgCO2xHnTDseTGH1hjwbVs3faFCeHRYdTv2OcHk7pkezT
YEwEU2daw0S6VGPoeIyTov8O7FoNU9Rhx44kG2EzhrRxt2Kb7FYUlATyRJ/m
Rty9wkOQYebZN470x1Vwo/9EB+Im2MYXMOIZI4KQwlCRcYywCKEvexCxlFyQ
9kMGSkmTIFACAAXv/0zUIiEnCc0H6YazoQkkZHK0Q5PjhHDEL9UhC9EhHjlC
DMH69Z4kk4Qj4JgCSYQjFK+sJfFKdVr01nFK0AYTriBLjAzxiQxxsRSVzOUt
U+0hKLlgNAhWny7MzOhssqtdMvadZjgzpCRJwmiOlsOXJFEbCubpHqCSl3iU
Bys25UUZmbfqrhdZ2ppAQRsEg5xxL9XQhq/MBGnVTvVXzZhO5ytGT6TKmOiK
rGmzbsYYIYvdphHgdm3UZEW8bNTw0qmhuqo/8lNXgZeJ4uVnjaEqZHGoUkLu
gpBMWcsjnKJM6eFC9qlP7FPbGrMwMgXxATJF0dKlaOECEBxGBGy5Oc3amiFo
pa3PpbYYkigoU5pylKPbv/hhZUYq7m7xfWZGiG3el2p3O7i1P7Jq1W6yl3bd
M5ciXhLJ0lAZmcAlLuIhxoxMjrbixdU44zlNY9ESxw/F7RdJhkYIohRpARue
56C9sJ3NQfO17aqlVdD4c+3fGJcreeUHvT7i1/kY8qTHh53OGikSNCnzwVOk
05HRa7wP45j0+Yo+6dgkuftoyVG9SoCgPlnbG0B+eC8Bz5oC5NNmGprMLStb
qGVtksDDapONUR91AaenB5FD+mQ2sYIMYpxzFONk8MhjnIaCnLa0nTnWfGwN
6eGWSBO4ZkmgY7lh61F5fWDesxu5scnc8LyZWUfNDx3VJt2X0/CyrqyVHwzV
aIM0riBImtikG9O6NR/EG1o0vLaCYpp2UKhOXxPJDrtD3l0DPxziIySKpMKP
/qOs4Sqd/gyOWG4KFzmt5L5amDhjvH4IODlpcBJXX0x0mqKvWbDeWrAr0cUv
p8sw+oHlX4KMUvRzNXRZJzvl99hT+Wk7SsCyhYY6B8OWQnK33DFD6mSWJ3eV
LQgOUCc9WxxqkxbxYg0U+sUCXkIS+MzPv6WVqSutVE4rUzN1kmR34dpanMum
yfNooRwtXtHia1Od0TiJe98NWzK0SN+ImCaFnK6rwSVzWq8GLsQNCHFejed/
FMhg4BMNWa/jn1013tkzZtpCyepq9SQOeDPZC2amhJlv8PhEfKvBdRca+4QC
dYLWtE5pS/zd8NY1sqarKZnrwJpOWeOBNfjOn7LxUDI7flaSMYMgSKtXTxSa
arpExhBiUMY45MyaxkBEmZeNhIlF8HOJgdpCDHQE0z3v9Cpo5RgoTfXQdy5V
8OTYtgMhQw+LnjWgXjgCAndlbsaXLexEVgOebJo8hD6XbSHJFWus0FP5VFwA
qNOhM+44wE7mrQxinrdX9VYaMlfkim2+bhlyHBAnaBGrA874q8ZLy4PNrLGi
1SUBG37NFT0WmQ0tgFHIhJQqWNbajXboZfhoCnWsA5CctCYKpqfjkoquplci
Ofz1I0dJpZQmCYyQo2qibCg5eqnyMOHjJxN8PFxXKVkEdLwQAZFEmSQSBWHQ
s4O50RA4ZgYcLxWLz6Cn16FACSJRTClrj44Qm2fstvRguHECuEEDi1ouJDkt
7TP8+Ku05Il3AhfEQFRUohKFwTFH22SBtsmCQiAkx65TbGB2+HKS69EwqP9c
Z2INfNPy/EO4ZJ9fsvzGVpkkABmXK6UN6sPNFG6kiRcZ4gAhztgpL1s7pUQR
9GMdTQx4fotSxm4ZO0JthHO7F1Z0qkA67pWxW22aEbVRx0VIcHH/SdEaw1Wi
nW7b6moFrpkLO+GlohD/jFFkHSiyb7mTsmqsQ+5K8yN7iXX2aazTAkWatF7t
U3i7n3iibkrRUYlS5LimehzSxNs+moakCKVMQIZYnCzOfitxU8iLnQ1QMk+j
HWOlTJJwZ56FOzRvpBOY5EKEXu9Lc0fODRZTKEtonirhJCQ4YQ0CN5d20XbN
dlI0IU0bc9TjVIWIAJGhiWWIUEUr1clD8MPHrwiTWCPvdC1F/9jINtsgSmJl
64cJkSZuQld++NrMkb0zBeKYs3lUc22IwQoUqYuT/X1w2lG+tDF3rIzBqGbt
f0qgdAAU/G39hGkEzk1ZSuu06WJzxshoNMMq5/RziBCHEGnVNKGqkxeTbHGK
kdea+bkkW9yDpC3uFnYIkomJZ0zZ2g6hRCYpwpXmddqmNG6EMscd0gRZYoYY
XdglnnjECJmz5/i4TJGMIMQpQoggXvgR0zp+GUQyReJqBkogiNAjHnry3uDj
ai03TbrOPMfIy4IRrxhpqFAenBM+fo84caRJ8CcynLpaHXhWIkmr24bHSYLL
h5ugxggjJdDKiQOnriQOLMuQ/jFzPw9UVIWSrB6epquHq6NI+tt7jkVhgsme
dpQjTsObFTjigCP48lwKaq6GHvu5aL7HB8oROK2GN5+y4Q1LEdraOTVzikak
yCSRIvhpkj3lwJBgGGISOxNb/JqpEal8bW1gQwi5IJZIkMhGMFISI3CpGAGE
hFyM4O6IJiTDAfDlCeDhBR94HGuS8/1t1CRz1CSSHI6SpIiTSwlOGhBHFZKE
wWCR1eHRxAVZfI231cAEIoOOV6IJ4k3NPFivfCr4CGaWCPgifEJMDXudyfrs
Fn/bsYb+WvDR0AJzcVtlNsAISGiVZ+qQtKpHkCIeKMLjA0wdrMVIlhaOHKlu
EnZkjtzDe8wjPUoVJlGF7B+lB1fgRxXyNVYie+RI1RypcoSlO7zF14/tSZxE
qJA4WU/ECRHlmYQqu2cyv4TyObeqWVJmyjDCsUyxEc58MFHRK1SIDfmQ51Wk
Cf1A8jFGwJTtMbCQ67ou+6+0ni1i5T1QKWK28hd4BvqBVyNLf+exqE8aVwh1
CDQhAU2yOQJDnpjkYbsVIhyNcqQtGEWJWKxxUNF1Q4wktoAvwzad642YplBy
31IG+SDkko1gQc7EGKiTOdAmefzQKXFNKA568ORwRMmIM7vqLnNH6eSeQBMl
UHd1cZDTKSZmnlqrBPqaIdHP1kn0o3tRNDcAiSYZen6XDj4YfxT5E5g/B2U4
CaLHIXl8ISjqNJ2M/y4ZwNiDp2X00KAj8VWGmWShj6wM7lTRKHnOG5t23YCH
xj/PC6MX4bIxken8a0w6uTztSKgDWmbLo5Ahc+U8H5eyhhaSdzXQcPxzBvLI
Q8AEBYwfBUzM7CReioFLw77r2IgSyu2EBDZJTBSYN8Ia5U0AxPirQQw91q2K
kXkloTZW3lMWOVlGgcPkvUHN4x8Eagg3rU5m9KpqEC5dkSknro0p3OezGlNm
yg+nWiYASVDLoJQJSJDlZW+fvjaWeGUJ/U1o8iOJmpExR+TUEk0mpfAIaULf
F+iY1qgYGx/tUnx0thAf7U9oksdHKU0SLUPh0cTQJA6TJ5Jgg0/Pky7tI86n
p4WcJzUhc2F3C5myDSjZQZ54DIrWULyY9Z0DosB19vL7nVq0VaBwP+AegCJS
QNLEmipeOgk6CY7a5tV5GhwRAgUj0gDI5PBmkDx+HJXEZrQowcLruuAPDxZt
Coszsp6CfnK4JovFCc4xQWUSyuwoz4eecqHs9WeHo9Qw/owrsZHXxPHkuvPE
0yvBGEVapcgP50aLxkKTLBaKyWOhx1OgTewS8kgQAohPDBbSJNM0GtpMo6HF
Oa45udFKkmowJJoE6ZH6tKkkOZPNczVtgpNEjCg9dokeblSXqLmSrgFGc4XX
5l1+TzGS65KTw8DHUZr42CXyVXwKj/739u3UPsG/Y+VJSMeVxJ7AoMrjqqjh
dJgzouO/DzWcmU+CrTkH8YZZweODKs1+jryS1cgQVcUKZAhAhnZFMrQ6HK3U
8YdDF106tTVcBRR+bAWRAdca3MxqeJgoHn4Q8dAleDCz4pMC2J4O+GHD6UY9
H6aJvgCnZDdNBRMd9i2jQ5xqZPAwFrIQGmppnDYVGTtnzYrNrha1eAlbmBHK
iagyltABycD+SE+HyXKRgVFLQ7kb0Bh8Mkq4dOME/0/f5sBlSIkwEqwEbcvZ
AzK4Ag2/ANnZG9hgtcjgJXkVaFSX5LkaNHBcc1tDRVMYpeiJHGKrtmVUjCyZ
qKMiJKjAMQP3IC3QTx0BBeJhUqs4cyocJhqItB8EIw6l/cHJYFaFR5txA4yO
KdziXd9vZcWxg6nFaoY6EzDE6mjj1JJTT9tu4dPYLazQMKWsnZlYIpMHzGj4
VrlhmUEVJFOT+j2izIBrToGJWqw7MW+TlKWxrMixQciI2IDr4uKCp9msPS1I
VAQjKgr5GmnKuSzLQDeNqdpDoz9A6jPAhqXhSQBY+BwW+DQ1+RoLiygq/IAU
bywqpHAACme8jVfm6dD3l6OP2sSyEU9L8+hpCR7H83wiRJo22STx3JYYynHj
ZjLxfWWEPD6GEOy54ZFoS2yMjCIxFAGD9MRwGprXQGS2PMXrUop0mprhzpyx
RRNOpcVUsYHSov0AsHEI/tbfOm7+faT/T6VKZJ0exoiI3zlAv+/vNTNbE20B
jDj2GN0vw432pyNYTxUijxQRqbZYyxFR0BbSU9NDYv+g4xcQQXggaTHPF9Hs
JJWrVWWRzCiBKx1w5Mm6QPti2wgLU/jOdasOEUHlLnZ1hKWEA050EROxUJXP
sMbMkkJWzcAlQ94930ososleKRDh8EMq3C0uYm3ItQGDnkdgkJphiuFqcNGm
YUrYMy68jmEVdwISuwf5jKVaQgoOr+BoSX48cII1CNewRoyEtN93T/Roqeod
f4CVspD9tckkGUzaPWuQn7kKmHiFyUQr4UPNG2XPtgcMvr59EgGzZgAzgEu+
7PspCFZKcIkpXod0uWFQf0ZwedkAxsDl3Ju4wTcVIW0iQoQuDvkSmnmy5uoE
maM+b6lJhsKn8sPQReTHYssgZZIjBbuBiScy8iggUzYjU5YiZRi2HL+UhC2W
L/jrkk6acarY2vc3FsYP7b9rbNWbx/OKbKp6BSrLKjDxESODqaw+wqSwxcpa
IFRyViUKChC3F6KwSSoXG3pL6s5WYEvMrfSfzooSGaDmr44twSgT+jS2Dbi9
ugWd3izI6lGDBwMf3LLXXQV0fnzP0OmWQwdjngC8wdfhj9spBcwb4kxhhom4
JKeeJpMkGNagmKE6tY/mdWrDKWtF1lQSMb2aQc5cfMchbCYkZhQ1afseqZmQ
qRlu4pvGaQQJcHRmIymaSVQ0ULW22E4in9iMg2spOPQhrwQnzPc/8RjzsKJp
94Afn+DHKYCk6L60trMJCYhkbqM05RzerTblvLEwlusSMFUmv/plw6JdFUvG
ZrnINku2oiKLjFYFU3Wao1upKhbpFFuHvVbFBqBTWJ1OPp2XtELyt6HSWLmk
Wh/KZO/mExsBx6cpVa3bNd0hPPmgwRRSMLkamGYApjUVQh+zxSc9mOhPdnBn
6ei2k4Uo67QYMfuomWcYZdXJtPlaQwvHb9QwS5WQIRNRKW7WsnEW44lGGLTD
EQZDJeSQSaFMpKkh0taASNjPQ4+V6MXYiW0EpU0DJUDUlbAMSq2ZAHkcaHIM
Rc7RS/bFXvyZlgWRYVBjIOQTCMWkT4YhyRcjZ8S6ZRvXpVNjm+oUg+tFIV/z
Z1agEM9OGVq83TLORBUUqPq+5wyu5wvl4GocMTxWSYrUmr1MVFqP3m5IINKf
Da2zn36ACAmrIkT93A01a261yaBhP6DuyTlpFvQxPhwCJGgctbBx1EYSR5Xo
kWkbh/gICg8CBy8LnibpH5E28yhtcIYsyhraGLxmC0y0Cl+iKIMPp/zAMKqn
Zg4OuGT0o5DDITuCmjN4oFztLAxfE2q4gofrUjEz5AZcUmxyLdxA+dKQXQNm
zRsLbikmDTNpXpsXNUz0bZgkFYgE8ncTbjhbez9Ci6o945QWbNBm0VNSYhLq
i/iWcCPQ9vECN9LEUIya1nUEAZssUkSCG/hmo4BYq9Wz7vvw6IB5nzb1bn0t
8gHT5cAVQAQe1hv/6SEixs2JvZuvF39c1Aa5LsGIDRQckvhZnEn0BiV+zJjY
sy83tFRrvwFGGggtOBBCUgxtXQqEQk4LUhuTwcT6QX29Wi8JMDLNsZ5GQbyc
j5Axr2Cjy7HRn/f3Qg5UHE2g4Y2XrkgkJPsubD6oxI1gencAG3xiSiio0MA5
01BSn7JC0jqDFcDjtBhUrI3RYgXrhWtOEBSy7WIcGXGnVsfhjLgr9A09jICw
UcyeKNHpYLUmJBOPKqFMXDiOcUq7ckW8eCdIkP+fu/eMkuu67nzPuqGquwGQ
sizbT84znnn22G/eeMZBnvG8td5ab6358Nb7AAkCCTETAggCRCByzqERGmg0
cmwAjZxzYAABgjlnUqIkUiJlJVuWZFlE6PT+O5xzz7l1q7qbweM1d61dXV3h
1q1bdX713/vsvY9hH4XT4MnYWYl7yRLJkzd//AlYQrPGXp2Orc3htiZ1knQC
mvRjlMRm5ePdRBI2Zgp/az/vR3T9UuI+RFb+XiMr/Sr8FwuUSgXyLfZhqK+J
BYrA5P18//oa7ouJigRIHAgQYUnKAiTPkkyB0OyxRxIjS/VJc6Ss9fTPqNpP
OPKzYo6kxJE4zxHbhiAOFYjHEd2iMJqb+IHcXnAk8VPVAo6UHEfs5sdNUre0
Z+Ty5fuEjbjnwEjiYFE1JpLLTcvaRtcmRuaPpAX1NKWe2YE7qJ+A3TQ+3GM0
JHYdBhghpWqzP1kCfMrR1wKO1PdFhHwccJRc8glnqeFGHxyWGfWOGSo8gIyE
SMEf3uf8kIclxY8q/ZSfvFTVTwnme+pylHg7TwkJctS5IAc/DKC4+osgBNtn
PyUffv0onPARSvysWHWUXcdG2rRNvVMcrn+0hjjE2v0IB4GCrBekSF2nASOR
V9p+yDCwmMh1TvMy1NQS9VR8OOBR37mauSYBKWwr2KL4Rup0RtY2Ous2b8IV
92pjoihyYbgPiTu3eiSBa/Ix0VG0zm/cS3TExUENbnjE35VepLfybfWOFOVq
pGjomRQNnwEp1vikKOdIkeZJkUVDEyJFncQzVpKLQspCzlRTpjX4c7zZW7+P
lEUaRkZ/ItgQcfG7+WmbXA7Km+aaz4yfVo9tCDBEXVwtmLcpcld+Gbor1cRF
mKLWAzIYFd5UTSUyyubnITJgmbiIiBipc1GMxEQtL1KnKiK3eEUULl5hwlX4
suRWXP3ghqShyE+fRUbi/JJYoxk+MrL5Ytv66d2epmV4VqZoDS1TseyvH/R8
tRgdabX+aEnootSmRrYWX44aqY1o/H1lL6NcLIM7kNQ7UtgZW25c9MNulRd9
yILPohpVBUWDm+MtwkQ/Jyg4UFDUGEC58Ce95ALPk9TluJC1CJAzY+VDDgrs
aOj+AucDZ7fpcjBNdxPrCxktXjSjgBAFE7uEiBLX7F77BwKErE1xzV8jvJQL
Z3zL8kHin6nqiu8Gi95IkV2pwvsoCmn8qkZIg4vs/lFAIS0DbLnMP+ninbS5
RkYKiqxDq7f+jXVCkjwnGBMsM7o5m/WnHLpw1EgCamQNon+c9Uvz16UIVqVg
fgAbdPEB88QiQypmAmwkricaTmpOaXDWmmaMvyu58FcrA6E5bJgkCGv0ZjY3
qgmSLMKhCfJyQEQTEiJk6ccDSRYe9WIdxSDJhTsYJGXXyij2GrHaxvEZPqo2
LupRZXxYoDIIGxYhDRoZ/a6kfvWplK4PXFlj9UadrsOna1MoV2hrtv/VOa6U
iStJxpUKsREzVBKzIkRLf7+412HlBbsyH8BSdtOyRYU1EZMlDrgSsfQoVYgP
hgrV3V3lxkbWYblqwfILu/pvudJjycSHCadmM7qEU7MQhRYr+W4kYRleEVfK
ea7AMgESMVoSzlSzTss/EjSs35KTIZFr/2yylW/kK1S5lgXzJCGeRMSTqNh5
iaT7yHeveR5MVChH+GWCVNhclQ1t32CSVGqRj8WRxAkSIyU3dlP9ZQOnUUHg
tCpMTFisF9XESlHr51xAJGuPZtM0LnkridcuyMmw04t+aXUOO3U+dj7sZmPs
1DvslAqwE4tq4bHahyDqn/dEnCQgzhpORHsaL2ShU18AnSSETomgk3L4VFwc
y5xY3BsQh4HDH3w/P0jyYydgoix2mha6N0KYEqsXIcxbVr0QYSJGzACFS1a6
53s3V4u9GyPuTSkjzC+rxUXiQLv4rY7ygNEvuUROc3Spsgwop9Zn3o1VLp0u
KkLypTvxvRyLFoeXWPFCm20sn+tC8rHwknk7Pl6yEW29nR7xkoVIPiFeYikD
lkFbXAbcN7IkAVnsylqR1zCgGleuBFxJXPory5Sq4dVce4By2Ky1KkjKDiT1
1UBS50CSeC3RgI+b+qJVeiRHqFVivbTVfGSZdMlmdvVp7BtV6peUUFJSlFiM
OJeIxUtKKOE7633R0hs/yPYJaHB+kE+Sa16gRDCiAdb6IIusSK9UdYRywRIC
SMFiW1ar1AcuEP/1mjFanRIxS0ouUCLmUGJJ8vMcSX7WN5JIhNUN8cSFWnMk
SZzj01eSGAmcZK8QQMQ2g66o1EmyydwkWOHzE+JESGKXJn+Z53qDGd5PFycm
TA5JewZLJGFYPlWgS10vwVIKV6ioGlep03rhDCwEFAsX/o9LhXH1XJZFZjgd
tU5+Bc5wrY5b0cYGXLh0h1VLqW/s+Q/V2KP+MYjTjxAT1UQMqxVuMZASYpJq
iEmtZoFrtEItdbqlzq8wDjyjupqe0TVKICHU6AyyBc1PdR2Lyqhs4Bj9XEBz
tVeOkcAmKhQtv/J7kmgivd18j0hJI21fE237WrDesPWH2CeKmDJJnjOxw0ys
ARbavMUs1C+xUZaML0mBUsHTbShWYyuJN9cLtFiTjLMSM8bfuMPR1e4i0JjE
NX5V1jBmUukT3TeyyHekxKKEAiUv/VyECf1fmTdSnSppQBXuwGj7k9RmCSea
JdVYovPMj1MspXcYiQswkhR3Hsi5OZGyw1LESZSsO0ns1rXJOTx1rvaGY7Xl
j4EOPoN/USBW+ssrt0irAVySj0NWqgkRDuKWQpKkHklsAkmZLssMkNgsv5R9
C8t+BDc3FaxJaJr13hC0WQzlihBE6KGOz825lNVKx+dqgeNDbY0WPkTvesEF
vJH55110vmKlG25b5HVsvfrP/jLkRrjQkOcCLBQgP/PAEARKaLPBksyTybWS
L/Jfek2FiKigblmQBRLn2sdnS4yz80L3eXHWIsURERaiwjx1u9kAMoHgRQzl
FzCUnyOn4nke0y/8TG5WXnx8PHCgNeXsMg6JMB6e4rpgXJYdGTSHtXKSpjYK
sjU666pS4O88H4UpEOcoICOBX//cB+KoFAEg60xUksmaT0c7VMRY12iMtZ8c
UmW4o1Qw9uO8igjGfkl8FAx97W3uaYeP46C8rX/fMdfYQcllgJSrOiiLHqZP
j8a4fEh0TS2lQV+iQZ+YeedsTH3OGRzy7NP2XdG1Wafo2bhMzMyTuJhxAs+d
fhyPm3acHkezKFnDZd5LMH5rxx/wPc6NX68ut2AQyzDK1cPZrA0/obz2yMbf
d3TZ71q+RG5ky0npJ17CL+SnnbbnZTSbZ/Hr+zR+aJ8h+wf5P+J7SvwYaq9M
Q/0FnUP5bEY5BylKeqbsb79an4Z8HP7685BP/SH/d93Wys574FnZOv0doeF+
Ti0p8B7q3OAvchzSj0eA//wxCDBAS1S0bYgJG7znxn3+N39l8Juf0LiP5ex7
sc7sp16SvkqZq/D3r3u/9G/Kd7zO/dBfK07giM3iR3AkNMJjHtN2fEfh6E5p
dCdm7tluGd7GbjZ4Zsc4WVx1nKdm2rFuM9Xa0W4z5Sg9fsoReyaCVkBVQwU2
6Bh0+XBzpN6I1y0O8yxy1fi1BncffrbN5znRwt9sYOAlVfE0bJ/XIvlndJg/
9ZNu8wQGy5M/xvUf8/8R39GQEeCnQobn/rG7iAA9jPlnC8d8WfuX/oOLfz7p
LSmVz+W6YnO5cBYe//ugx3q5lwiIQgSU/BCCIiAb//rLXvC7T8O/pBA4+2EO
AnU1IVByEKjvGwT+tC/hy5sIAnbCg7ZA/WsbMguBpAACdQ4CJffjH/tVbDmt
DwJEjIDUB4A89B/eIo3w07cTs+RR7M4b7Hagh4M9DQd74n7KVepVDuyYBnZE
4zniAZ3wkKYBTcZPmnwYj5p0CBcTD9IDJhwI8h+yBKo4N7aTYGzbHsTZVGUc
lrGbiiZfVUd2IMgjGthROKLNF3hI242rRb3fa6u+n9ff62c0X5oGMQ3mKz/s
Npfx/X78B3L9Cn3/n+DRQQ958icy7nmgRzzGYx7lNEaf4zlJrvwoGNdJOK41
KTOV9Crb+KswEOgWra0cw/wz3tBTdWmRbud1aXPDOJUFrh/SYVyfH8b2t5z9
94RGce3Bm7Uw5649/T6bwZu4wVvnDd7Mpw/ku2ZtrHTZEXbwwrLxW6bxK/d7
dWI/8erEUu+3+w3TeNEKYFwruSGbFAzZOByyScGQ9dQ3GQ9eO0GNIUwjmC3q
/ViOw7Ec01COzfj9uHhwHz1+3N5uyYEU88Zy6say3VwX4M96QMt5+DUewL7o
tr/Gz3mDmEblk7q4GQ1cGsCX8J1+DN/Xxzi3h/77dXP573SA/9ANcB7fT/y4
Oxvhfy+/8E//g/yMP/PT7mCQ0884rZhSa3THuvSStrGInQNedXRnVV39agzo
KFTl9S6qLwO6QJobI3XigTd+Tj1xN5xLNJxLbjjHBcM5Cn+L+382wzktmErs
pz25aoxuDvGX6PeZ23Hpz3UwoGOz7DHnQ9pRvfSxbrLILL2IR9nhm1YbvknN
4Yu7acR6o5ddZx62dgTTyMWQZYvc4K2isCMewPKhYgRbKxrJCY3kmAZybMbu
oeMeszsXgYpdZxlS2teqFFnGrvu/N2jT/KAljW1i50FnI9f8HgfL/c3+CL9C
MfDcj/BzJJNprP1EVDSNQR6/WnJkx/CjkIqP4Ev4yAdy/VHcdpHs+974jnho
x/zkx38kgzuioR3RuI54YMcyrH8qpt1mqg9hU9Adq5ytGV0KFnT1VmOs8oOd
je+0QHTn9Ha9nwtA49luuoqJ/bWuzzKL0sDptqO85EZ4KiuNVPnBzo1w/sGO
zMn3+zDM/6xgmP9lwTAv0WVEo7x/0eButrUVucGduMqryt9vzhKok/MTjHnd
L10jS2jAl/v8U43/55/rpgHPFrmhL451mh/6ZtZpdalx30xc0m+3tRknu4UF
+lFKMM1HgPySx+6XXB7Xy8FfZ8bgkgAwmqyt2zzQJrt4YFe3GbWzlxQw4Qpm
FausWh5ERIMo/BmXc/kbvG7Qa/+kKvznoQr3f8AtAKwKpx9w+rGmwU2bBcDD
36XXu/A+ffVx9Yvm4e/VJgMR5NIP5Ff/spLFwoF+9Z/4ifzqUxIyAYIm0ywi
aJNUQzf75oMtc8g/Hg2SXtKAtXtJvG/+GoTa/SH+4cdlg5vAt+E22oIQXBpS
oOh3vvzxAPBfqgOg6He+5NIN+xVMxcUFP/ZlmzOUrXQmiwfELg8x55EzKMqS
hwgiqPivgoW0AAuxhwW6ViAB8DwfC2wcbXOiIA2o0Gsy4IWme1oBJjsqO4Vg
VYLFg0TjAkREhIjEKX0PEeWaiIgIEviMRu5gXJhxeOwkuP8z8BJzT+Q5waup
GtYMXLbwLjPBWwSkSDxkfRnk/H5RmnErLqxWeInmxXJa4RmMnqdJK9AI/mF3
qPe/L6OfaEAbMQKwMOff6zZnv02veu47NDP9XncGkYgZEgtBPhSLiB+ReYwH
2iVFB1lE8IjMFV7X4wnlhnyxZDKeNorKEytKspJzrXZ1vj9gQ/Wa9vM4FUDY
fEITVl/WSSlESI2LrHcCB8FwQYQjljojEsdzEHnIh0jk2tPVJkkSkiTxSMJd
H77XbTLfn52F+LMhSZkuuVqiweUDFfGjTvqCV/aRSXx0XPHQUeem8zisb+c1
lonPwBbTZR1RI61KDbLUUSMhakQEjTgnIfJ+Py6ZEhFBIiI6xIyHVJwI347T
u8hEhN3s0uk1CJGLBfSNEBEDop+5v7XbjMWDJu7vNtPgo8zGkSzAe2gEH1c+
go/pUrfZ+ER31vnpkxCDtt/hZQrfsNriF9WdC19bWGBYbXHp+6FzQdrioffV
M/6OAOPMt+iFT73bbX7bnP6W/H/m23LfWTyGHnfuPQEMgeYC7YOM9kf2gcDo
EXqd74ssuUigIvuBSJNLxJYfiSzgT40gIEFjFhI2vUfm+WKd+nvqH7Opv9it
apb2kiyREyAcPyx7KLnoo4QFSCQCxFBQsAo7YtftO3XsSAvYETt2JNrLkiqt
ThezI3EqJP1s2FFHl2lYwWmyBUjoLycFMDv6y0QgISLNYGEtmAHInA9NwA5k
RVQAiBIBIiFAYCQvwLiZn1lGCzyJ1MVctcj3P3x4BCoj40dE/OC4YUzcSKr5
HZomVgsUHDOMei0lft2MxCXR4n4y8GI07hu/F+rlEA4VLzwfQmgJ3uEKnIzV
IOt6nNQt+Ih2PN9t9r7cbQ693m2Ov93N4EjyuXseKuS0/gHHInxFwZDwFMUL
GDbP5xTFUz8SSFz5QQiJix4kfEVBg5+/tIACIeLkN3GM79B7PvENEs7fpM+F
7qAHWDvDMuQsyZBzJEPO8xfb50ZE1IgYGfUOGgwLbU57+cfZ38s8HyErkF2x
rgenHnAiQLDaYZxxIQm40KPeKGeQ4FwgHxQMhoQQ0cBiI7apQGwcmIyUETWI
UVeNGJHzWzJilKoRI3LThBwCLKrvVkT8Hz0h4hkPEaWw+UNvEOHpiSusJ650
lwv44HkhpCdK4oUYci5DXCQBLmCZpKhJjDQgBtsZOh5PcZzxFAdl+3g5AZX4
sDFMtYguqwcwkryHomgJHJRcDEOo0lA7hiFxDKIKi5CImfIF8wBuexDPm5w5
K2Yx3vNyeG7NF7vNOmB6Mz7A1ue6ze6Xus2B17rN0bcwejFUz2M0P4ov0hV8
OZ/Bd/5FnZUzf8wF1lZxvA6YvPYLAcrLP6vuoviKg4HiKY6LH8hLWcVx4T15
eVIUZ5QTtFmgHAP4jrwlh3r0bfn/2DsebPAx02NPvisgOqX7iJg2/c0Z3Tcp
lXMEL7Lvilq58D1VK+Q24Rgf/UG3ZkryLz8NeWmUTTx4/MciU2jlQ4aGaAxf
omQLJiYZbtI8bjgWUhs3uM0uxSzixHaQYGFSF4ZIOSgS94wZLvwuqRvjY6YP
kDGxW9tdNJEhkX2KShz6pFKqI0gObS0hSIwpVHYUkmhJ4gik1uBcnAqfRprc
KYNKNQOkJTcjkpJu0cVlq+iWyKGIxUvMJEqEQ+eccbQ0IhJxYMSnzxylj+Qi
pXn6cICkR+cn6j2A2P8xrGuM3eysEOU5UJaDWs4tYi5FhKWImVRiKtUm0t+a
EdtF91j/aDpefQ4OdiHe51LrH12Gf4SPcNuz3abtxW6z/1UM9zcxnDGwz2EA
P4Jv2uXviz4hzfKqph6+5WHJ1ziMJU/jPIex9qyvcYCkJ34gWKL9+ljyHSGr
cawjZDUOAYc2i6XDONaDr9MpP/QGfUT0Px0/3XdEkRURsCJznITRiW/SJ+DD
Cr/b36Y5ie+Q5Dn7npIKh3Eeh3PhQxnKtFlpEbHU4EZ03EbmMY3PXGLH5TLr
lBywIk2H8n2qyHHKouyKxnOcu1QZty0iVqpNbn5sQ/oXi/2pOpeHEdfEVhRi
SxMrQ3V0liEWhGHqiE+cxTigL27TX/QeSGoRUams+dPqPtmACwVyn2JZ9JSH
pLgASUmIpFI1JEV0yRM3CXEpJi5FpvHRbk6QMpwO6UazlsmBS6VecQm/NkUS
yaZLMqziXmmjzLXCIRGXpqkVJmf4QGIeRQQgDdF9UvLEDJ4vmTG4cwLcrKk5
N6sJ7G7Bmd2AT2ErZO5O62a9IaqChvvD+O5c+lBw8ZwOC0IMq5+fZ6h5MYca
353y1Q+jxlM/hLWHPfVDqDuryoUEmUUNHQ8hhDZGzRsi3CICZcRXy8wfuoPe
wKE3hUmHlT8RP32AOfqOyibaKe2c7F2RTSe/pbKJWEfRYhzcuQ+0fYapk6b7
H0rj/Ye+LxAiuaTBHAxuGs2PkWTipdQus4Dx9ZJWYEkPcD8129iYTxyQJnIL
PPLeEtf9JnElGZ+YMIlbIzb1Cj+tJip5wDnrAyd2IslIk1+7qetil5m/qS+q
qEcIxQGEIrqMCUM8l1TvOnnq41oUQ3GIoagAQ+yxcfQm9fI3KzGkKSTAUIkw
xPleMWEoJgxFZgkFfwlFuFR9RJt+aDp7BH9tQWbsusUFGgkHNVcJNEdpNPtM
bZkUZ05aLZlUl8mk4lmkohCx+m2WSHgjY3FJjtoYsd5rov9mRuCS8HQf2bbu
wGubieOYd7LSa9uiXtseeG0HMeKPYVyfxvi9AHBcVK+NNoIQPDfWP/T3BU//
kFf3tNU/P5TnWDA9lgNT4Jap/jn9roDJQon0D7lkpHWIO7QRjUi/7X0Fb3fP
y3SmiKv41+x7lQ3Yeo2w9Tp9TEXIisyRtymsbnF17BtijCwcxkkczqn3smIp
+cWgbOqUkUWYYm/OTWY9wkObvTvx8AzzKmLZJE08L/3IiacfSxwoUSbRZlGV
5PWP3TTFVzLXNH2tKqJyyahxzRBR3CtEndVcl7Oc0YbLyPXAqBOAn/6elTHW
mQtmpyJz6v2+ouo/VkOVnSqyQSSXqFrvGpXnxFJGqf46RUVgspAqOUBlOkln
oiyfUrqsIywlRKSIiBQTkSJx3Raz62aRtMj9h8uHKiYIe+3J6Rm1hIIlPflx
eaXUkCmlY90BmqpiiVw1XJK7xi6bxpFw83hcQjqxcZRa3g8Ry/KKdRQFrb3Q
Uh5YEYerkyBgDWhFRK2IkfVXZhRuH4fnT8o5dctwwlbhN2AtnLpNcOq255y6
UxjJ5zGCH9XwAYGIoESA8kEVOGqeenrsAwGeVU8PvScQPKezUmfeFVCdLADV
YQUViSVAiF+fyEScomOMzK4X6NzQ9baXJES2+2W5f88rQrHIMczczBA78IYo
r4NvCsYOvaXKi16UXpyCWDaghQM99b4V1hRB4UwTUVvfDabPAASWFw8pzR4u
ItnfKclM7LzAx3iW3mowGxr3IRa7ZhrlImAlAbACXMWyum0tXEU94ypiSoWy
KpJ8elYLZ0hbebEnXUAhy6KP6RyWPyVW5WRV7Ly7AQIEu4ZTTlal0iDMA5aF
VQ1gWVhJmGkZhbotsAxrKAIWW1SBLostF3WKiFwcerKV6y4Kzgl6zr+rDIHL
O7O0qjpLxsFtkxYCyiXo5efWseNJuCRMkU1Uv44KaLzwEkAVMaVS86Cwim0c
2V77HSyFMXBN6H2gDU8FqXoDqeFbcTtU1hhAbgL2PQ1HNBtHvwA0bixwA2n4
78NgP4xxfeIdccd4NHwg8CG1REB6CoPsyR+ECsrC6dEcnHzX7owqKIpsncgp
qMNvyCwfKyjYPgUObQQkOjaaDYxIB0Z0NTI7GVe7XuyuiqzI7H2V8gT36V73
vy52wBILR3DYxrNwdMdwlMd1Xu84jv7EeyK2TpNPqIEp1oXva4DKBql44u6C
IAuXDzlkPcwLLhG4PAEm1Eozav0om94T55En590Pc+AKljRnsIbOypiVm49L
a/qDTK+yW5wycp1/6nWIkco8o9avJqnqJQBVRVX9x0+JVCmRKnXT+NzcI0NT
Pw9NdI3QxG1S68PUHn0IXSM01dFlSSPgHGR6hN4UeXbEosUqopykih2JWDpF
BCKdqeiBPz26c+TJeUU/M7JpNwl4e1SKlUiWRsSiqBaR0jyRGEgxASkiEkWM
ojjw9GL9HngwMr2jUcQwgvMHMI3GQ8djb1NyDt8KSNHVcPjWq8O3I+fw0UY4
IawQYkgHMZYwuC572oi01SOeNiK9de5boRN3ssCJO6zayHPiGCQEFQIMbYQg
ckQpWE/I3Iqv4rZn5H/Setuf684BKmVA7XpJANX2sgAqYjx9nvG0l3CH197/
przGoXcESodxnEcUwUfxHo7DTpD3920NVH1b0UrZBGcom+AsJTWe48qc3pEp
DsgUsXMoTWryS+Kyh/hjDayXQuWU5hBEYfmsaLiOmJNUY05diBvbGcjN0FmJ
ZONO/Wtih3sFJYSdhl4KJKlPcLkCPWEnctjJ4k7STkgO11YtsT/HNOL64RBE
suJlACLpFpQ4EKkxi1LHolR1kZNEFkhRCKLKSBPLo8hlB9iCJIsj1yMgcYVL
VdKTey2NLIicNIpqOW9x4LxFRKGYKCT8SfxYE9FHTlTZjzHl2WNCKYRLIpA1
33+bATzOxbtYRP4bTteqR8V/2wz/rRVjejfG74FX5USRT0UMIZYQV5hF7xf7
ZOc92UPBqlMqeyiR6VhO9hDjDkiEKOAOsWOnSh/amDvPCB8j8jAjzmgoc7ZU
NSBBM+Hpv8U7oZ3tfFFslwUSvaA6hASiAzi4AzjIgzjYg6qOjuBNHCWF9G4W
NecT8a5NNjhFc3inv4OPrBqLzjsWlRyLmEfKIP7NlLxl2ghGj7I/d5EapHIC
wCVy6h7TmomSxx16IFkaditj+KQ5+Fxg+FxwbUv4q2QzE33XjFfPtcHuSFeP
cCkAlj6pa1Fy02cDHdY6SZgJUOSV8UK7kWtk1k8AVIs9+VZlAiFclgvAo4Ft
yx3mUA48iVNAcbWyKY86tNkgjc0EcLlIWfVkLRXEs/5VkSPxojSPHCZOxMRJ
JFhkbZ9oHz9oxCLIhbjjIGJk9ZCPnojhkwQh7uEqgCIzbAv1qSKnbCz2MzHn
lC3F6VmJU7sGMnTjFRnI5PjQRpEbIgYpFqIIqRgafKQAfJXDxPlm6GgdL3C0
DqrKYUfLUzn0ejtV5RBA6BhoI+JQRGsjzaKs51kU8hsps5vMg1HKMNryjMBo
q8IoIhQJiT5vdhCBXpYd735V6LMXB7UXB7gPB7pPJ/wOfUOk0FENghN+6U2d
/gaHuCJCUcSzd7EExtUYRDRM35P5PDJGUkxIiphEdUyiCxo6tiWW7CnJDF/E
UJIaikoW9QJDWVPnIjfMUumCvrKjkmogW7FdiaYPPDTVufqLOpcC6SkjCrI1
0OXnPkM0cai7waVKJgV6yC4DzrmTZdtaxSvmgjUIiGuxKaXLNHTQesGmxNZ0
eqIodvUYiUS1RQPRlmVYg0oildKgWVLopCV5PMXaPOlYd94rC8lUMzQUu9AQ
ASlyYkgi2Ek+gh0pkKwaktv4omcefX1zd+aZUb4ADmgWDnw+3teSnGdGIoOH
7cvCDvKWiCfMpreUTd8IVc9J3HZCVc9RSg3KqR7m0Muht2UDPj6H6LWJMLQR
dAhD66hNL9WYlFm0rbssM4Z0qHQ3MWoD84lyrL7ICKNdbH66O8DUNnoZFVk7
XlJthLfXhkPbjUPd/YbQiTbSRhw5ejtLyCTEnnzbJmUSq2KJfZO9y4ma79Jt
PIWn03ismXDbKbCKeHWaKWXVE83naRoC4+H7NnJwgYLID33fTu5LPEkW0/Kc
tshH00WtqA/RlC1cUXY+Gnt/mVOWEShWAp3V43EEKku6ZEagrDXEKSUQi6Nf
UwKd0BmAaoGgGgT66wICJcohf7atwdWXpjmZ1MK62S4VnBCNcn0kclopcp1j
MmfNCxj1BCULpF5CKeoZSlnkSFOdJDtSso68mtHeKKMqzljqnDFPGJkiZVQL
RlL7EQe+mRVMHohMRqKIQfSfzH1w0B7Aox/EHid7DtpiaMTl6qDRGKeN/Jsd
L4ijtEen2gkpFMghzDCS3s6crqMFTtd+lUAUbCJnr00lEAWgWj30kAQip3DT
E8IU2og3ay9JHJ2yFSICZUT/CpViptLax+WIWTlF9GTHI0KaSqxthDsyQh+O
ZQeOaSeObddrwiDa9uH4D7wp0WubaXkMdvwNzcZ8W+bejrwj82+knPrGoyTj
0fvdsuSVfNFYd3xP7BzdfI6TDs5/IO2dL6g98n2NLvFMXeT4lHossosKc+FI
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
ribitSbtldsmk2akB/wuvzRthLSZlLlJKeZHBGnzFGmso05l7t5yaplCmZ3U
mI5apzwiOKNtA1XswTbDtsC2AXHb6H98DTc+jg/JpnzHRLSYaBYRxIRhdZx0
sN0mHWhJrs2ibKWOS60cidqByx24eSdVpbzaZfa91mUOvgZMwY691mEO4/8D
r1Ga0+uUWWm51VDIraOafEDbkW9rKtIRKqg7SheSf3BMGw8c59jUCa6qs1lQ
lPJUiKokQJXtua3LkZ7VbGwPVKe5HA+X/fMtIy2oSiGoyh8DVOzA/GUBnvq5
EJPEkxyd6tziQqyhqqxLpoGl3BKFSQGPsu7/qba0lbjRxQA+UbWGSHFNDvkr
FhptPlKbNZEuHeSzxtas5SJJuUVAKNExzAdQ4gEwEdMldmz5JBKpziGF7I41
+LsmwwueGvtk2S3Fa1RUy+rloJLliJLleEiROTmKEAqsEqKNiEEMGY/9Ptgm
aQgPsmtJt/wBtzCh+4kwtJFqmkbVKpQ/hX3MosJeag13xEPKCXHNGqn/N1Wz
ACtNVPSLH4/mhwQp/NXEZ78BthG2CbaF7KIgZj279esIKraYJHZkwe89pQ9s
eU4SJRkn6nu1arLkNp5520Yx7u0v0zkmqLS90mX2wg680mkOw4680mEO4v99
r2C/rtFu6jK5D76RNdyNuPFb7DpYHn7HIl+m4ez0XEQpBiAMz8/ZlIKjHFYS
1lDWJTElbEiUVOMKr2sqL3NOq/XJ6rXoo6J9f1naY9sUoxxh0tAtq+tlaOhL
Qpj/0oNbth4fCNkAnzWWM24hs9S1Eyn7HUSUMFmyI1V4gC5NntGGvw3eEuY2
0dGkga4JtE3GlCTs5W+yhmoytOefd2ebwtS26WNUjS5GpAz/yAblaHE1tEig
p1xYwkFKRrKoaWsoVDD5BiB9i/bQRmQh0kTMmpK5o6Xb3L5ayEOPUurIl/s3
uXMttdhm8uwR8pC8IIqQJmHyUEzZ0ynTyZc7IISavE90CW2WMmMpbDVmB4Wl
x2D3Y3fyTWbcLgEQbQSdSZT3DZuG8zKdqk8IOtj1bNUy8/CyC6gahcrm8GE0
UlXKaQ84+FybVbGuwW/JOth62EbYJvoLEK2nPig6tWaL2fyqkIgn22KpDFFj
HOEXlXOZKHNbMwTIN9uppW3bVOdswd/NL9Bz6Fo9Icm0vtRldsH2vNRp9sMO
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
fCMzVeDAT67hAfof/x/jG8Lm\
\>"]]
}, Open  ]],

Cell["\<\
It looks like the most probable boundary is always at the observation.\
\>", "Text",
 CellChangeTimes->{{3.579355264562666*^9, 3.579355278594042*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Maximize", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"postmxUnsimplified", "[", 
         RowBox[{"#", ",", "i", ",", "80"}], "]"}], ",", 
        RowBox[{"i", "\[LessEqual]", "79"}]}], "}"}], ",", "i"}], "]"}], 
    "&"}], "/@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Range", "[", "80", "]"}], "/", "80"}], ")"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.579355671383195*^9, 3.579355689518319*^9}, {
  3.579355727709677*^9, 3.57935579736134*^9}, {3.579356371218999*^9, 
  3.579356410481262*^9}, {3.579356456631182*^9, 3.579356459706566*^9}, {
  3.579356496586885*^9, 3.579356509403449*^9}, {3.57935654242982*^9, 
  3.579356616806118*^9}, {3.57935669424256*^9, 3.579356788685721*^9}, {
  3.579356832208497*^9, 3.579356876198826*^9}, {3.579356937200998*^9, 
  3.579356997089582*^9}, {3.579358552727777*^9, 3.579358570419992*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.2521662653953819`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "1.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.14374185261993344`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "2.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.10554830388380965`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "3.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.08557922915196776`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "4.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.07313676073428733`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "5.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.06456320333379195`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "6.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.05825455772811375`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "7.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.05339187587983031`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "8.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.049511367568881526`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "9.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.046329772547582596`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "10.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.04366382804550309`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "11.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.041389451044094576`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "12.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03941947570310072`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "13.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03769077661771072`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "14.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03615645342423361`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "15.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03478089254556213`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "16.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03353653847941338`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "17.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.032401719909641816`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "18.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.031359148192456804`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "19.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03039485676734931`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "20.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.029497437021105813`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "21.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02865747792900084`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "22.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.027867148561953558`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "23.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02711988254581018`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "24.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.026410136447543496`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "25.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.025733202548114894`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "26.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02508506215613553`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "27.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02446226950568814`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "28.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.023861858981005762`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "29.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.023281270312085357`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "30.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.022718287743035602`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "31.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.022170990156814136`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "32.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02163770985846129`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "33.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.021116998250453527`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "34.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02060759703107768`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "35.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.020108413846537266`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "36.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.019618501555801134`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "37.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01913704044251492`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "38.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01866332284396908`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "39.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01819673977286986`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "40.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.018646347097835053`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "41.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01910222519906953`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "42.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.019564943202036257`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "43.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.020035163780214412`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "44.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.020513655443297713`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "45.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.021001306627330074`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "46.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.021499141970244013`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "47.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02200834125106574`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "48.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.022530261592340665`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "49.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.023066463681638904`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "50.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.023618742971009236`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "51.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.024189167079130686`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "52.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.024780120972258787`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "53.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.025394361968791822`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "54.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.026035087243977777`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "55.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.026706017371872157`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "56.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.027411500627739935`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "57.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.028156644429237366`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "58.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.028947482635570773`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "59.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.029791190782833966`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "60.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03069636623018698`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "61.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.031673397452779306`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "62.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03273495768994083`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "63.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03389667508521901`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "64.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.035178058176530004`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "65.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.03660379886716495`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "66.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.038205647117625766`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "67.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.04002517570837783`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "68.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0421179750432569`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "69.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.04456023081199337`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "70.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.04745944522651584`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "71.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.050972738012099526`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "72.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.05533988857182168`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "73.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.06094730061190611`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "74.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.06846338332157421`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "75.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.07916122791285723`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "76.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0958279017466223`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "77.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.12608313269769095`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "78.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.20189868434355712`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "79.`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.20189868434355712`", ",", 
     RowBox[{"{", 
      RowBox[{"i", "\[Rule]", "79.`"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.579355759127311*^9, 3.579355788572734*^9}, {
   3.57935635804276*^9, 3.579356382758249*^9}, 3.579356414167925*^9, 
   3.579356460608765*^9, 3.579356510025688*^9, 3.579356618588011*^9, 
   3.579356794258526*^9, {3.579356857347555*^9, 3.579356877541032*^9}, 
   3.5793569619175*^9, {3.579356993835976*^9, 3.579356999067517*^9}, 
   3.579358573566022*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"postmxUnsimplified", "[", 
    RowBox[{"1", ",", "i", ",", "80"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "79"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.579358474902873*^9, 3.579358515190721*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJwVkHk81IkfxlmllUSObFqlELlVVBifTyLlmPl+RwmJEkLkqtzlblyDmXHO
kByVSNhsbaFyVKottlUZV+igkCMUk/35/fG8ntfzz/v1fj2b3PzpHr8ICQlF
LeX//VOXWiEsNAFrIq+KXfnqDqLRZpsWj09AtcrtMotJd5BqN8yZb54ASi7G
fphyB5WAjXHTFyfBckwgUJ11B6vqCacPktMgV/1gvlzgDtl67JVtG2fBe9lN
lUYxD9DRf+udAQLwejrFk1fxAN11+px0WIZcG6sElqMHBNFFK043S6H1A1+g
dHiA707XyODZtZhUmmH4wsITPgYNNtuvVETLXBKH6z2hY/fFR6s6NuEJR22T
nr0n4X4bXbngvQqet+U8ZD8+CdT6KVQ0Usc78qOVkke9QJF/NW9VtCYq6Uqo
KM95QeRF1ufraTqY8WDu74E0b2h8pn6eN66HH6QyDHJ2+0DiemUR4/BtqJ0T
9cxo0AfGha6prlncjjRFzcSF9FNwRT5Hvb/YAA92S7nV2fvCltmiq/GaO/Ev
3qB2jIIfzC2XW7G5cxfukL/BEFvwA68KmWVz54yw0kOlaMWH03D5N+2oEoEx
upqON0U+9weN29WvLUsouLlQVLryVABEKNIqm7UBBzlPAp0mAoDJ16zh+iI+
K2kuH0kKBN3AGadA0z3otz/FtkQzCG6det607RczXL01+fLxv4Ng4PxbhYDX
ZsgLFrCnk4JhamZSL4+3F/uGP+p3W56BV7fb5fpczLG1GZRYUmfBmfX+c6G+
BfbW+CcUC85CW/vy89azFnhqKLf06Og56FdzFj7zbB+mb9XJP/prKLS2hdjd
4VkixdoH9xiHAfNl0Ylh1/1YanIwJuBcOAiNL57gbD+AOyjNVtMTEWAf4LNZ
68cB/GFe6sMMj4JICvdm/10rPOGi3slXvwBWysLakmnW+FguXCiMGw0C3zNe
GqQNyo2mj5rUxoD9y985D1VtMbdLWPj9qjjgZP0TZT5qixqSLwjN+HgovmJr
OFRFxUtVQ7/X6yXCgZMTRbq1VMxYuCWXvysRJtTY4pF1VIysiy+NwkQwLX/7
TraeiiGhAu4hIhG6Kk6k7GujonavIfdAQCJI1YS9Kx+iovjdF6aWNYkQda8s
OeA3Ggr3x657tPMiOLT/7PsZQ8Prg41dTg4MYD7K/b4mgYaJ1lwH/eMMaK3f
Lr2FQcNPFhHmq30YsK3c24LKpGFgnduF7ggGiMd2VhTm09BNnb+/5RIDGrff
CIU/aDgyciShc5gBqjnO0jHvaSgT4HhfMzoJflT1bo5VJvCxzXxDSGsy7OOk
qGmrElhl1eUq0ZEMrLDdWm+3EGjnVrrqRk8yaJlnGehoELj4xOveym/J4NJl
s5+vR+AKjawBVE6BJpF6v22mBE4W7aKUxqVAskP+nUGHJd5AcG2FTSq8puxv
SHMi8LDaUH+BYyooK88+3OVMIMNY8JnrmQr1Y+QzpiuBoWrl3feiU2E8VqzP
yJNAbb/FudS6VKDfCBVhBxNYy2eJx21KA4VfDlP3MgksvLDYayLCBEFgcfLH
dAJL2489ZqxhQt/A2KOkTAK9GiTtBzcyofhhPLRzCLw/0lzTaMIEzZhavaNc
Am/KDKRvCGGCidBqmZBrBNoQHR2p40xwWWx5c72JwJ5R7z33htMBT0vJUlsI
DLcXe/7+ezps7jtCTLYSaOip55q+LAM+Nkw92dm29MehvRsHZTPAP0rpbstL
AjXPShiPGmRAtCCC19dDoJiZjkthWAaUzG87Lj1H4NA9y5U9KzLBJmH+TN53
Au9G684ESWXCrGQTQ2l+6X9qMlN6XSZYqZLVOj8JVOkMFvbVyIQpmv9/ViIk
ii0uuCbZZoJZWUVBnCSJ8lsuKYRnZcI7mgr/mxqJ63nFZ/K1WJDM/zIWsZXE
l1MhI26GLNjh8YewiCaJ/46YjBogCxjhZlvX6JC47rr+uwU7FuiVHQvV3kFi
7waKj1gkCy7M89Z6IonRMp1tRi9YsKFMzu6NA4mG6yXIqAg2/MhrcLngROKB
NsfZqots+Jfp4aPmTOLKy/3DX9lsSAmtiwlxJbEn6OjWoko2fLc+VC3vSSKl
uZre0MeGf6Y4Eg7BJLrYfVm7fB8HElH2yds0EmmBPmM1m7LguEH9q+h0ElOm
nHaK62WBiYZ7v3omicmSv4qHmmbBtMyt2VDOEu+w9ETqkSw49slOdR2XxAd0
hta17CwwYrJjHa+RKMr3e9ImlQ1j3dIUfhOJlYdqYFEuBzK+GCp5tpA42jsT
uqCaAzsWnESmWknUKor6tNowB8IVStrE2ki84ea7Icw+B0Qdt9vvfkmi4KyC
2rHcHNjw2s4/t3tpj3cKlSrlArWdc9n+25JvUG54pHkeTPbfiR+cIbH8WIFS
2eE84HztOXl6bsnPK+bzZ5884K9W1UmcJ9Eq7dTMi8w88LStu1snRMdo8788
hAby4PzTzleyEnSELGVvy4R8qGpZK/pKlY7OGMpP/cSFjy5vlQ6r0TFb0SX8
3CIXNv7IM+5WpyMrZaArQY4HGdqKgUOadKRcJ2jy5jwIzlbumdanIzW7sUCy
hAe7vPRqZU3p6FNtcKTKqwAK/3wad9Ccjn8uZ9oYvimA/wFptpCk
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0.005},
  PlotRange->{{1, 79}, {0.0025556796001491374`, 0.029141281530888206`}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{3.579358516335768*^9}]
}, Open  ]],

Cell[BoxData[""], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1280, 1000},
WindowMargins->{{0, Automatic}, {0, Automatic}},
FrontEndVersion->"7.0 for Linux x86 (32-bit) (February 25, 2009)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 124, 1, 85, "Title"],
Cell[694, 25, 95, 1, 53, "Subtitle"],
Cell[792, 28, 98, 1, 32, "Subsubtitle"],
Cell[CellGroupData[{
Cell[915, 33, 97, 1, 73, "Section"],
Cell[1015, 36, 383, 7, 51, "Text"],
Cell[1401, 45, 412, 7, 51, "Text"],
Cell[1816, 54, 325, 6, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2178, 65, 102, 1, 73, "Section"],
Cell[2283, 68, 294, 6, 31, "Text"],
Cell[2580, 76, 1257, 18, 111, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3874, 99, 161, 2, 73, "Section"],
Cell[CellGroupData[{
Cell[4060, 105, 120, 1, 39, "Subsection"],
Cell[4183, 108, 1561, 46, 59, "Text"],
Cell[5747, 156, 904, 28, 32, "Input"],
Cell[6654, 186, 113, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[6792, 191, 469, 14, 32, "Input"],
Cell[7264, 207, 70, 1, 31, "Output"]
}, Open  ]],
Cell[7349, 211, 643, 18, 31, "Text"],
Cell[7995, 231, 320, 9, 32, "Input"],
Cell[8318, 242, 113, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[8456, 247, 717, 19, 32, "Input"],
Cell[9176, 268, 145, 3, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9370, 277, 96, 1, 39, "Subsection"],
Cell[9469, 280, 539, 16, 31, "Text"],
Cell[10011, 298, 287, 7, 31, "Text"],
Cell[CellGroupData[{
Cell[10323, 309, 535, 14, 32, "Input"],
Cell[10861, 325, 2672, 81, 160, "Output"]
}, Open  ]],
Cell[13548, 409, 320, 7, 31, "Text"],
Cell[CellGroupData[{
Cell[13893, 420, 159, 3, 32, "Input"],
Cell[14055, 425, 355, 8, 131, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14447, 438, 354, 8, 122, InheritFromParent],
Cell[14804, 448, 2387, 73, 156, "Output"]
}, Open  ]],
Cell[17206, 524, 108, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[17339, 529, 5124, 141, 121, "Input"],
Cell[22466, 672, 98, 1, 31, "Output"]
}, Open  ]],
Cell[22579, 676, 137, 1, 31, "Text"],
Cell[22719, 679, 116, 1, 31, "Text"],
Cell[22838, 682, 1220, 38, 97, "Input"],
Cell[24061, 722, 129, 1, 31, "Text"],
Cell[24193, 725, 1290, 39, 95, InheritFromParent],
Cell[25486, 766, 230, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[25741, 775, 2392, 66, 179, "Input"],
Cell[28136, 843, 5324, 143, 175, "Output"]
}, Open  ]],
Cell[33475, 989, 205, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[33705, 997, 730, 16, 32, "Input"],
Cell[34438, 1015, 6506, 170, 244, "Output"]
}, Open  ]],
Cell[40959, 1188, 346, 10, 31, "Text"],
Cell[CellGroupData[{
Cell[41330, 1202, 852, 19, 32, "Input"],
Cell[42185, 1223, 3564, 93, 158, "Output"]
}, Open  ]],
Cell[45764, 1319, 1146, 39, 31, "Text"],
Cell[46913, 1360, 287, 10, 31, "Text"],
Cell[CellGroupData[{
Cell[47225, 1374, 901, 20, 32, "Input"],
Cell[48129, 1396, 5639, 138, 490, "Output"]
}, Open  ]],
Cell[53783, 1537, 257, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[54065, 1546, 1184, 25, 32, "Input"],
Cell[55252, 1573, 1661, 44, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56950, 1622, 1220, 26, 32, "Input"],
Cell[58173, 1650, 2743, 72, 153, "Output"]
}, Open  ]],
Cell[60931, 1725, 119, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[61075, 1730, 158, 3, 32, "Input"],
Cell[61236, 1735, 519, 10, 82, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61792, 1750, 159, 3, 32, "Input"],
Cell[61954, 1755, 370, 7, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62361, 1767, 158, 3, 32, "Input"],
Cell[62522, 1772, 482, 9, 82, "Output"]
}, Open  ]],
Cell[63019, 1784, 108, 1, 31, "Text"],
Cell[63130, 1787, 9859, 246, 302, "Input"],
Cell[CellGroupData[{
Cell[73014, 2037, 158, 3, 32, "Input"],
Cell[73175, 2042, 8771, 228, 323, "Output"]
}, Open  ]],
Cell[81961, 2273, 109, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[82095, 2278, 303, 8, 32, "Input"],
Cell[82401, 2288, 972, 21, 246, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83410, 2314, 328, 6, 32, "Input"],
Cell[83741, 2322, 1658, 44, 35, "Output"]
}, Open  ]],
Cell[85414, 2369, 227, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[85666, 2377, 2429, 70, 143, "Input"],
Cell[88098, 2449, 2387, 73, 156, "Output"]
}, Open  ]],
Cell[90500, 2525, 1982, 58, 55, "Input"],
Cell[CellGroupData[{
Cell[92507, 2587, 197, 4, 32, "Input"],
Cell[92707, 2593, 114, 2, 47, "Output"]
}, Open  ]],
Cell[92836, 2598, 223, 5, 31, "Text"],
Cell[CellGroupData[{
Cell[93084, 2607, 709, 18, 32, "Input"],
Cell[93796, 2627, 3430, 64, 431, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97263, 2696, 758, 19, 32, "Input"],
Cell[98024, 2717, 3208, 60, 231, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101269, 2782, 758, 19, 32, "Input"],
Cell[102030, 2803, 3145, 58, 231, "Output"]
}, Open  ]],
Cell[105190, 2864, 141, 1, 31, "Text"],
Cell[CellGroupData[{
Cell[105356, 2869, 504, 14, 32, "Input"],
Cell[105863, 2885, 204296, 3346, 535, 66348, 1083, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[310174, 6234, 160, 3, 31, "Text"],
Cell[CellGroupData[{
Cell[310359, 6241, 936, 22, 32, "Input"],
Cell[311298, 6265, 11654, 328, 292, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322989, 6598, 288, 7, 32, "Input"],
Cell[323280, 6607, 3091, 56, 219, "Output"]
}, Open  ]],
Cell[326386, 6666, 26, 0, 32, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
