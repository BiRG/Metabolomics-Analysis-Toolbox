classdef GLBIO2013Datum
% Represents a raw data point from my experiment for the GLBIO 2013 paper
% 

    
    properties (SetAccess=private)
        % The peaks generated from the nssd distribution (vector of
        % GaussLorentzPeak objects)
        spectrum_peaks
        
        % The width of the generated spectrum in ppm (scalar)
        spectrum_width
        
        % The deconvolutions generated by the
        % peak-picking/deconvolution method hybrids (vector of
        % GLBIO2013Deconv objects)
        deconvolutions
        
        % Resolution of the generated spectra in samples/ppm (scalar)
        resolution
        
        % ClosedInterval object representing the ppm used in
        % generating the spectra
        spectrum_interval
        
        % The generated spectrum object that was deconvolved
        spectrum
        
        % The signal-to-noise ratio used in generating the spectrum
        spectrum_snr
        
        % An ID string unique to this datum to allow referring to it in
        % publications etc. This is generated probabilistically and
        % represents 45 bits of entropy - which, in a database of 1000
        % records, will have a collision 1 in 3e10 times. And if we
        % update that to 1000000 records, the risk of a collision is
        % still 1 in 3e7 (less than 1 in 10 million).
        id
    end
    
    properties (Dependent)

    end
    
    methods
        function obj=GLBIO2013Datum(spectrum_width)
        % Generate a random data point for the given spectrum width
        %
        % Usage: GLBIO2013Datum(spectrum_width)
        %
        % spectrum_width - (scalar) the width of the generated
        %                  spectrum in ppm. Must be positive
        %
        % Generate and deconvolve one random datum using the system random
        % number generator for 7 peaks in a spectrum spectrum_width ppm wide
        % with peaks drawn from the nssd-derived distribution. The spectrum
        % passed to the deconvolution will have a 1000:1 signal-to-noise
        % ratio. They have a resolution of 25 samples per
        % 0.00453630122481774988 ppm (that is per mean half-width at
        % half-height of the nssd-derived peaks) or 5511.097866082 samples per
        % ppm. I chose that number because it was the number I used in doing
        % my resolution experiments. It turns out to be close to the normal
        % 65536 samples/12 ppm used in standard 1H NMR experiments. I carried
        % out these experiments originally in mean-width units because I
        % thought I might see a nice relationship between mean width and
        % probability of having all peaks generate local maxima.
        %
        % 
        % ----------------------------------------------------------------
        % Examples 
        % ---------------------------------------------------------------
        %
        % >> g = GLBIO2013Datum(0.5)
        %
        % Generates and deconvolves peaks in a spectrum 0.5 ppm wide
            if nargin > 0
                assert(nargin == 1);
                assert(isscalar(spectrum_width));
                assert(spectrum_width > 0);
                
                obj.resolution = 25/0.00453630122481774988;
                
                obj.id = random_human_readable_id_string(45, true);
                obj.spectrum_width = spectrum_width;
                obj.spectrum_interval = ClosedInterval(1, 1+ spectrum_width);
                obj.spectrum_snr = 1000;
                [obj.spectrum, obj.spectrum_peaks] = ...
                    random_spec_from_nssd_data( ...
                        7, obj.spectrum_interval.min, ...
                        obj.spectrum_interval.max, ...
                        spectrum_width*obj.resolution, ...
                        1/obj.spectrum_snr);
                
                pickers = GLBIO2013Deconv.peak_picking_method_names;
                deconvolvers = ...
                    GLBIO2013Deconv.deconvolution_starting_point_method_names;
                for p = 1:length(pickers)
                    for d = 1:length(deconvolvers)
                        obj.deconvolutions(end+1) = ...
                            GLBIO2013Deconv(obj.id, obj.spectrum, obj.spectrum_peaks, ...
                                            pickers(p), ...
                                            deconvolvers(d));
                    end
                end
            end
        end
        

        
	

        
        function str=char(obj)
        % Return a human-readable string representation of this
        % object. (Matlab's version of toString, however, Matlab
        % doesn't call it automatically)
            str = sprintf('GLBIO2013Datum(%g, %s)', obj.spectrum_width, obj.id);
        end
        
        function display(obj)
        % Display this object to a console. (Called by Matlab
        % whenever an object of this class is assigned to a
        % variable without a semicolon to suppress the display).
            disp([obj.char,'\n']);
        end
    end
    
end

