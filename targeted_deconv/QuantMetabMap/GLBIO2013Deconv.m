classdef GLBIO2013Deconv
% Represents a deconvolution of a particular spectrum from my experiment for the GLBIO 2013 paper
% 

    properties (SetAccess=private)
        % The name of the method used for generating the peaks -
        % one of the values returned from peak_picking_method_names (string)
        peak_picker_name
        
        % The locations returned by the peak picker in ppm (vector of double)
        picked_locations
        
        % The name of the method used for choosing the starting point for the
        % deconvolution search. One of the values returned by
        % deconvolution_starting_point_method_names (string)
        starting_point_name
        
        % The starting point generated by the starting point method
        % A multiple of 4. Each group of 4 represents a peak as
        % defined by the input to the GaussLorentzPeak
        % constructor. (vector of double)
        starting_point
        
        % The lower bounds for the corresponding variables in
        % starting_point - lb as defined in lsqnonlin (vector of double)
        starting_point_lb
        
        % The upper bounds for the corresponding variables in
        % starting_point - ub as defined in lsqnonlin (vector of double)
        starting_point_ub
        
        % The GaussLorentzPeak objects returned by the
        % deconvolution routine (vector of GaussLorentzPeak objects)
        peaks
        
        % Aligned indices is a 2xn matrix where n is the smaller of
        % length(peaks) and length(original_peaks) where
        % original_peaks is the list of peaks in the parent
        % GLBIO2013Datum object. original_peaks(aligned_indices(1,i)
        % is the best match to peaks(aligned_indices(2,i) in the sense
        % that the matches in aligned indices minimize the sum of the
        % squared distances of each peak's mode location to its
        % corresponding peak's mode location.
        aligned_indices
        
        % The ID string of the GLBIO2013Datum object of which this
        % is a part.
        datum_id
    end
    
    properties (Dependent)

    end
    
    methods (Static)
        function best = best_alignment(peaks, original_peaks)
        % Calculate the best alignment between two sets of peaks by
        % brute force.
        %
        % best - a peak alignment matching the description of the
        %        aligned_indices member
            if length(peaks) <= length(original_peaks)
                b = best_alignment_recursive(peaks, original_peaks, ...
                                             [], inf, [], 1: ...
                                             length(original_peaks), ...
                                             0);
                best = [b; 1:length(peaks)];
            else
                b = best_alignment_recursive(original_peaks, peaks, ...
                                             [], inf, [], 1: ...
                                             length(peaks), ...
                                             0);
                best = [1:length(original_peaks); b];
            end
        end
        
        function best = best_alignment_recursive(peaks, original_peaks, ...
                                                 current_best, ...
                                                 current_best_sum_sq,...
                                                 current_assigned, ...
                                                 current_unassigned, ...
                                                 current_assigned_sum_sq)
            % Calculate the best alignment between two sets of
            % peaks by brute force
            %
            % peaks - (row vector of GaussLorentzPeak objects) the
            %         peaks from which the mapping is being
            %         performed
            %
            % original_peaks - (row vector of GaussLorentzPeak objects)
            %         the peaks to which the mapping is being
            %         performed. There must be at least as many
            %         peaks in original_peaks as there are in the
            %         peaks vector.
            %
            % current_best - (row vector of integer doubles) the
            %         current best known mapping. Will either be empty or have
            %         length(peaks) entries. Should start empty
            %
            % current_best_sum_sq - (scalar) the sum of the squares of the
            %         distances of the location parameters of peaks(i)
            %         to the location parameters of
            %         peaks(current_best(i)). Should start at inf
            %
            % current_assigned - (row vector of integer doubles) the
            %         partial list of indices in original_peaks
            %         representing a partial assignment of peaks to
            %         original_peaks. Will have at most
            %         length(peaks) entries. Should start empty
            %
            % current_unassigned - (row vector of integer doubles) the
            %         list of indices in original_peaks that have not
            %         been assigned to a member of peaks yet. Should
            %         start as the list 1:length(original_peaks).
            %
            % current_assigned_sum_sq - (scalar) the sum of the squares of the
            %         distances of the location parameters of peaks(i)
            %         to the location parameters of
            %         peaks(current_assigned(i)). Should start at 0
            %
            % Return:
            %
            % best - (row vector of integer doubles) the list of
            %        indices such that peaks(i) maps to
            %        original_peaks(best(i))
            
            assert(length(peaks) <= length(original_peaks));
            
            if length(peaks) == length(current_assigned)
                if current_best_sum_sq >= current_assigned_sum_sq
                    best = current_assigned;
                else
                    best = current_best;
                end
                return;
            end
            
            assert(length(peaks) > length(current_assigned));
            for i = 1:length(current_unassigned)
                new_assignment = [current_assigned, ...
                                  current_unassigned(i)];
                new_unassigned = current_unassigned;
                new_unassigned(i) = [];
                dist = peaks(length(new_assignment)) - ...
                       original_peaks(new_assignment(end));
                new_sum_sq = current_assigned_sum_sq + dist^2;
                
                current_best = best_alignment_recursive...
                    (peaks, original_peaks, current_best, ...
                     current_best_sum_sq, new_assigned, ...
                     new_unassigned, new_sum_sq);
            end
        end
        
        function str = pp_gold_standard
        % Constant used to signify the gold-standard peak picking method
            str = 'pp_gold_standard';
        end
        
        function str = pp_noisy_gold_standard
        % Constant used to signify the gold-standard peak picking
        % method with added noise (simulating a human expert)
            str = 'pp_noisy_gold_standard';
        end
        
        function str = pp_smoothed_local_max
        % Constant used to signify the smoothed local maximum peak-picking method
            str = 'pp_smoothed_local_max';
        end
        
        function strs = peak_picking_method_names
        % Lists the strings that can be used to identify a
        % peak-picking method applied preceeding the deconvolution
            strs = {GLBIO2013Deconv.pp_gold_standard, ...
                    GLBIO2013Deconv.pp_noisy_gold_standard, ...
                    GLBIO2013Deconv.pp_smoothed_local_max};
        end

        
        
        
        
        function str = dsp_anderson
        % Constant used to signify Paul Anderson's deconvolution starting point (DSP) method
            str = 'dsp_anderson';
        end
        
        function str = dsp_smallest_peak_first
        % Constant used to signify the smallest peak first deconvolution starting point (DSP) method
            str = 'dsp_anderson';
        end
        

        function strs = deconvolution_starting_point_method_names
        % Lists the strings that can be used to identify a
        % method giving a starting point in the deconvolution
        % search space
            strs = {...
                GLBIO2013Deconv.dsp_anderson, ...
                GLBIO2013Deconv.dsp_smallest_peak_first}; 
        end
    end
    
    methods
        function obj=GLBIO2013Deconv(datum_id, spectrum, peaks, noise_std, peak_picker_name, starting_point_name)
        % Generate the deconvolution of a spectrum 
        %
        % Usage: GLBIO2013Deconv(datum_id, spectrum, peaks, noise_std, peak_picker_name, starting_point_name
        %
        % datum_id - (string) the string id of the GLBIO2013Datum that
        %            is the parent of this object
        %
        % spectrum - (struct) the spectrum which the deconvolution
        %            algorithm will be deconvolving (see
        %            load_collection for format)
        %
        % peaks - (vector of GaussLorentzPeak objects) the original
        %         peaks from which the spectrum was generated. Not
        %         used directly for the deconvolution, but used for
        %         generating the alignment with the original and
        %         for some peak-picking methods.
        %
        % noise_std - (scalar) the standard deviation of the noise added to
        %             the generated peaks when generating the simulated
        %             spectrum. Needed to properly simulate some
        %             peak-picking methods since they depend on having a
        %             clean area from which to estimate spectral noise.
        %             When those methods are used, a such a clean area is
        %             generated for their benefit.
        %
        % peak_picker_name - (string) one of the list returned from
        %                    peak_picking_method_names. Tells which
        %                    peak picking method to use in generating
        %                    the deconvolution.
        %
        % starting_point_name - (string) one of the list returned from
        %                       deconvolution_starting_point_method_names. Tells
        %                       which starting point generation method
        %                       to use in generating the
        %                       deconvolution.
        % 
        % ----------------------------------------------------------------
        % Examples 
        % ---------------------------------------------------------------
        %
        % >> g = GLBIO2013Deconv('baby aardvark tree', my_spectrum,...
        %        some_peaks, 'pp_gold_standard', 'dsp_anderson')
        %
        % Creates a deconvolution with parent 'baby aardvark tree' by
        % deconvolving my_spectrum and aligning with some_peaks. the
        % pp_gold_standard peak picking method is used to select peaks
        % that are then passed to the dsp_anderson method to generate
        % a starting point for the deconvolution search.
            if nargin > 0
                assert(nargin == 6);
                % datum_id, spectrum, peaks, peak_picker_name, starting_point_name)
                assert(ischar(datum_id));
                assert(isstruct(spectrum));
                assert(isfield(spectrum, 'x'));
                assert(isfield(spectrum, 'Y'));
                assert(length(spectrum.x) == length(spectrum.Y));
                assert(size(spectrum.Y,2) == 1);
                assert(isa(peaks, 'GaussLorentzPeak'));
                assert(ischar(peak_picker_name));
                assert(ischar(starting_point_name));
                assert(any(strcmp(peak_picker_name, ...
                                  GLBIO2013Deconv ...
                                  .peak_picking_method_names)));
                assert(any(strcmp(starting_point_name, ...
                                  GLBIO2013Deconv ...
                                  .deconvolution_starting_point_method_names)));
                              
                % Set general values
                obj.datum_id = datum_id;
                obj.peak_picker_name = peak_picker_name;
                obj.starting_point_name = starting_point_name;
                
                % Pick peaks
                mean_peak_width = 0.00453630122481774988; % Width of the mean peak in ppm
                switch(peak_picker_name)
                    case GLBIO2013Deconv.pp_gold_standard
                        obj.picked_locations = [peaks.location];
                    case GLBIO2013Deconv.pp_noisy_gold_standard
                        obj.picked_locations = [peaks.location];
                        obj.picked_locations = (mean_peak_width/16).*randn(size(obj.picked_locations));
                    case GLBIO2013Deconv.pp_smoothed_local_max
                        obj.picked_locations = peak_loc_estimate_for_random_spec(spectrum, noise_std);
                    otherwise
                        % Should be impossible to reach due to the assert
                        % at the beginning - this is defensive programming
                        error('GLBIO2013:unknown_pp_method', ...
                            'Unknown peak picking method "%s" specified.',...
                            peak_picker_name);
                end
                
                % Set starting point
                x = spectrum.x;
                model = RegionalSpectrumModel; % Use default model
                switch(starting_point_name)
                    case GLBIO2013Deconv.dsp_anderson
                        [obj.starting_point, obj.starting_point_lb, ...
                            obj.starting_point_ub] = ...
                            ...
                            compute_initial_inputs(x,spectrum.Y, ...
                            obj.picked_locations, ...
                            1:length(x), obj.picked_locations);

                    case GLBIO2013Deconv.dsp_smallest_peak_first
                        samples_per_ppm = length(x)/max(x)-min(x);
                        rough_peak_window_samples = ceil(model.rough_peak_window_width * samples_per_ppm);
                        assert(rough_peak_window_samples >= 4);
                        [obj.starting_point, obj.starting_point_lb, ...
                            obj.starting_point_ub] = ...
                            ...
                            deconv_initial_vals_dirty ...
                                (x, spectrum.Y, min(x), max(x), ...
                                obj.picked_locations, ...
                                model.max_rough_peak_width, ...
                                rough_window_samples);
                    otherwise
                        % Should be impossible to reach due to the assert
                        % at the beginning - this is defensive programming
                        error('GLBIO2013:unknown_dsp_method', ...
                            'Unknown starting point method method "%s" specified.',...
                            starting_point_name);
                end
                
                % Do deconvolution
                [~, ~, ~, ~, ~,~, ~, peak_params] = ...
                    region_deconvolution(x, spectrum.y, obj.starting_point, ...
                        obj.starting_point_lb, obj.starting_point_ub, ...
                        2*(max(x)-min(x)), ... % This baseline width is the value given in targeted_identify line 1794
                        [min(x);max(x)], ...
                        model); 
                obj.peaks = GaussLorentzPeak(peak_params);
                
                obj.aligned_indices = GLBIO2013Deconv.best_alignment(peaks, original_peaks);
            end
        end
        
        
        function str=char(obj)
        % Return a human-readable string representation of this
        % object. (Matlab's version of toString, however, Matlab
        % doesn't call it automatically)
            str = sprintf('GLBIO2013Deconv(%s, %s, %s)', obj.datum_id, ...
                          obj.peak_picker_name, obj.starting_point_name);
        end
        
        function display(obj)
        % Display this object to a console. (Called by Matlab
        % whenever an object of this class is assigned to a
        % variable without a semicolon to suppress the display).
            disp([obj.char,'\n']);
        end
    end
    
end

