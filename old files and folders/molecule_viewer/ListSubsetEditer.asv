function varargout = ListSubsetEditer(varargin)
% LISTSUBSETEDITER M-file for ListSubsetEditer.fig
%      LISTSUBSETEDITER, by itself, creates a new LISTSUBSETEDITER or raises the existing
%      singleton*.
%
%      H = LISTSUBSETEDITER returns the handle to a new LISTSUBSETEDITER or the handle to
%      the existing singleton*.
%
%      LISTSUBSETEDITER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in LISTSUBSETEDITER.M with the given input arguments.
%
%      LISTSUBSETEDITER('Property','Value',...) creates a new LISTSUBSETEDITER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ListSubsetEditer_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ListSubsetEditer_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ListSubsetEditer

% Last Modified by GUIDE v2.5 28-Dec-2009 10:38:06

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ListSubsetEditer_OpeningFcn, ...
                   'gui_OutputFcn',  @ListSubsetEditer_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before ListSubsetEditer is made visible.
function ListSubsetEditer_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to ListSubsetEditer (see VARARGIN)

% Choose default command line output for ListSubsetEditer
handles.output = hObject;

% Sets up display defaults - need to change width to be dynamic in future.
% the 'auto' doesn't seem to make them big enough.
set(hObject,'toolbar','figure');
set(handles.figure1,'CloseRequestFcn',@closeGUI);
set(handles.masterListTable,'ColumnWidth',{140});
set(handles.subsetListTable,'ColumnWidth',{140});

% Loads the database file generated by "readinfiles.m"
% a structure format.  This is then saved in handles as handles.molecules.
load molecules_library.mat
handles.molecules = molecules;

% Changes the subset table to have 1 column and same length at master list.
fixTable2Size = cell(length(handles.molecules),1);
set(handles.subsetListTable,'data',fixTable2Size);

% Takes the recently read in molecules structure and iterates through the 
% names of the molecules.  These are then printed to the master table.
set(handles.masterListTable,'ColumnName','Molecule');
set(handles.subsetListTable,'ColumnName','Molecule');
data = cell(length(handles.molecules),1);
for m = 1:length(handles.molecules)
    data{m,1} = handles.molecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.masterListTable,'data',data);

% Sets up an array for later use.
handles.saveFileNumber = 0;
handles.moleculeSelection = [];
handles.subTableIndexCount = 1;
handles.subSetMolecules = struct('file', '', 'peakNumbers', 0, 'ppm', 0, 'hz', 0,...
    'peakHeight', 0, 'moleculeName', '');

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes ListSubsetEditer wait for user response (see UIRESUME)
% uiwait(handles.figure1);

% --- Outputs from this function are returned to the command line.
function varargout = ListSubsetEditer_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

% --- Executes on button press in addMolButton.
function addMolButton_Callback(hObject, eventdata, handles)
% hObject    handle to addMolButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% This gives the new list the value of the master list at the selected
% cell and updates the counter so it moves along to the next index.
handles.subSetMolecules(handles.subTableIndexCount) = handles.molecules(handles.moleculeSelection);
handles.subTableIndexCount = handles.subTableIndexCount + 1;

% Recalculates the subsetTable's contents.
data = cell(length(handles.subSetMolecules),1);
for m = 1:length(handles.subSetMolecules)
    data{m,1} = handles.subSetMolecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.subsetListTable,'data',data);

% Updates the handles to the gui.
guidata(hObject, handles);

% --- Executes on button press in removeMolButton.
function removeMolButton_Callback(hObject, eventdata, handles)
% hObject    handle to removeMolButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
counter = 1;
tempSubSetMolecules = struct('file', '', 'peakNumbers', 0, 'ppm', 0, 'hz', 0,...
    'peakHeight', 0, 'moleculeName', '');

% Flags the file to be removed by changing the file name.
handles.subSetMolecules(handles.moleculeSelection).file = 'RemoveMe';

% Filters out the file to be removed based on file name and repopulates the
% tempSubSetMolecules structure with the new infomation.
for m = 1:length(handles.subSetMolecules)
    if(~(strcmp(handles.subSetMolecules(m).file,'RemoveMe')))
        tempSubSetMolecules(counter) = handles.subSetMolecules(m);
        counter = counter + 1;
    else
        disp(strcat('Removed row: ', num2str(handles.moleculeSelection)));
    end
end

handles.subSetMolecules = tempSubSetMolecules;
handles.subTableIndexCount = handles.subTableIndexCount - 1;

fixTable2Size = cell(length(handles.subSetMolecules),1);
set(handles.subsetListTable,'data',fixTable2Size);

% Recalculates the subsetTable's contents.
data = cell(length(handles.subSetMolecules),1);
for m = 1:length(handles.subSetMolecules)
    data{m,1} = handles.subSetMolecules(m).moleculeName;
end

% Passes the information to the table object.
set(handles.subsetListTable,'data',data);

% Update handles structure
guidata(hObject, handles);


% --- Executes on button press in saveButton.
function saveButton_Callback(hObject, eventdata, handles)
% hObject    handle to saveButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Creates a copy of the subSetMolecules and saves it with a generic name
% generated by just adding a number to the word molecules to prevent
% overriding.  This is buggy and needs fixed.
tempMolecules = handles.subSetMolecules;
%saveName = strcat('molecule', num2str(handles.saveFileNumber));
%handles.saveFileNumber = handles.saveFileNumber + 1;
%save(saveName,'tempMolecules');

[filename, pathname] = uiputfile('*.mat', 'Save Molecule Set As: ');
    
if isequal(filename,0) || isequal(pathname,0)
    % disp('User pressed cancel')
else
    save((strcat(pathname,filename)),'tempMolecules');
end

% Update handles structure
guidata(hObject, handles);


% --- Executes when selected cell(s) is changed in masterListTable.
function masterListTable_CellSelectionCallback(hObject, eventdata, handles)
% hObject    handle to masterListTable (see GCBO)
% eventdata  structure with the following fields (see UITABLE)
%	Indices: row and column indices of the cell(s) currently selecteds
% handles    structure with handles and user data (see GUIDATA)

% Grabs the row that is selected on the table and stores it in "row".
% Then sends row to a handles object that can be used by the buttons! 
row = eventdata.Indices(1,1);
handles.moleculeSelection = row;

show_molecule(handles.molecules(row);

% Update handles structure
guidata(hObject, handles);


% --- Executes when selected cell(s) is changed in subsetListTable.
function subsetListTable_CellSelectionCallback(hObject, eventdata, handles)
% hObject    handle to subsetListTable (see GCBO)
% eventdata  structure with the following fields (see UITABLE)
%	Indices: row and column indices of the cell(s) currently selecteds
% handles    structure with handles and user data (see GUIDATA)

% Grabs the row that is selected on the table and stores it in "row".
% Then sends row to a handles object that can be used by the buttons! 
row = eventdata.Indices(1,1);
handles.moleculeSelection = row;

h = view_molecule;


% Update handles structure
guidata(hObject, handles);


% --- Executes when trying to close the GUI figure1.
function closeGUI(src,evnt)
% src is the handle of the object generating the callback (the source of the event)
% evnt is the The event data structure (can be empty for some callbacks)
selection = questdlg('Do you want to close this window?',...
                     'Confirmation Window',...
                     'Yes','No','Yes');
switch selection,
   case 'Yes',
    delete(gcf)
   case 'No'
     return
end


% --- Executes on button press in loadButton.
function loadButton_Callback(hObject, eventdata, handles)
% hObject    handle to loadButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[filename, pathname] = uigetfile('*.mat', 'Pick A Subset: ');
if isequal(filename,0) || isequal(pathname,0)
   disp('User pressed cancel')
else
    load(strcat(pathname,filename));
    handles.subSetMolecules = tempMolecules;
end


% Recalculates the subsetTable's contents.
data = cell(length(handles.subSetMolecules),1);
for m = 1:length(handles.subSetMolecules)
    data{m,1} = handles.subSetMolecules(m).moleculeName;
end

% Updates the "global" variable so other functions can know the size of the
% subset table.
handles.subTableIndexCount = length(data);

% Passes the information to the table object.
set(handles.subsetListTable,'data',data);

% Update handles structure
guidata(hObject, handles);


